{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "value": "https://api.openai.com/v1",
          "env": "OPENAI_SERVER_URL"
        }
      }
    ],
    "headers": {
      "OpenAI-Beta": {
        "value": "assistants=v2"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "http",
        "header": "Authorization",
        "scheme": "bearer",
        "value": {
          "env": "OPENAI_API_KEY_AUTH_TOKEN"
        }
      }
    },
    "security": [
      {
        "ApiKeyAuth": []
      }
    ],
    "version": "2.3.0"
  },
  "functions": {
    "admin_api_keys_get": {
      "request": {
        "url": "/organization/admin_api_keys/{key_id}",
        "method": "get",
        "security": [
          {
            "bearer_identity_edge": [
              "key.secret",
              "api.management.read"
            ]
          },
          {
            "basic_identity_edge": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a single organization API key",
      "result_type": {
        "name": "AdminApiKey",
        "type": "named"
      }
    },
    "admin_api_keys_list": {
      "request": {
        "url": "/organization/admin_api_keys",
        "method": "get",
        "security": [
          {
            "bearer_identity_edge": [
              "key.secret",
              "api.management.read"
            ]
          },
          {
            "basic_identity_edge": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization API keys",
      "result_type": {
        "name": "ApiKeyList",
        "type": "named"
      }
    },
    "downloadFile": {
      "request": {
        "url": "/files/{file_id}/content",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "file_id": {
          "description": "The ID of the file to use for this request.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "file_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns the contents of the specified file.",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "getAssistant": {
      "request": {
        "url": "/assistants/{assistant_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assistant_id": {
          "description": "The ID of the assistant to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assistant_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves an assistant.",
      "result_type": {
        "name": "AssistantObject",
        "type": "named"
      }
    },
    "getMessage": {
      "request": {
        "url": "/threads/{thread_id}/messages/{message_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "message_id": {
          "description": "The ID of the message to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "message_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) to which this message belongs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a message.",
      "result_type": {
        "name": "MessageObject",
        "type": "named"
      }
    },
    "getRun": {
      "request": {
        "url": "/threads/{thread_id}/runs/{run_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "run_id": {
          "description": "The ID of the run to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a run.",
      "result_type": {
        "name": "RunObject",
        "type": "named"
      }
    },
    "getRunStep": {
      "request": {
        "url": "/threads/{thread_id}/runs/{run_id}/steps/{step_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "include[]": {
          "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ThreadsInclude",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "include[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "run_id": {
          "description": "The ID of the run to which the run step belongs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "step_id": {
          "description": "The ID of the run step to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "step_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the thread to which the run and run step belongs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a run step.",
      "result_type": {
        "name": "RunStepObject",
        "type": "named"
      }
    },
    "getThread": {
      "request": {
        "url": "/threads/{thread_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "thread_id": {
          "description": "The ID of the thread to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a thread.",
      "result_type": {
        "name": "ThreadObject",
        "type": "named"
      }
    },
    "getVectorStore": {
      "request": {
        "url": "/vector_stores/{vector_store_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "vector_store_id": {
          "description": "The ID of the vector store to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a vector store.",
      "result_type": {
        "name": "VectorStoreObject",
        "type": "named"
      }
    },
    "getVectorStoreFile": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/files/{file_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "file_id": {
          "description": "The ID of the file being retrieved.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "file_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store that the file belongs to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a vector store file.",
      "result_type": {
        "name": "VectorStoreFileObject",
        "type": "named"
      }
    },
    "getVectorStoreFileBatch": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/file_batches/{batch_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "description": "The ID of the file batch being retrieved.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store that the file batch belongs to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a vector store file batch.",
      "result_type": {
        "name": "VectorStoreFileBatchObject",
        "type": "named"
      }
    },
    "listAssistants": {
      "request": {
        "url": "/assistants",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantsOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of assistants.",
      "result_type": {
        "name": "ListAssistantsResponse",
        "type": "named"
      }
    },
    "listBatches": {
      "request": {
        "url": "/batches",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List your organization's batches.",
      "result_type": {
        "name": "ListBatchesResponse",
        "type": "named"
      }
    },
    "listFiles": {
      "request": {
        "url": "/files",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FilesOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "purpose": {
          "description": "Only return files with the given purpose.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "purpose",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of files.",
      "result_type": {
        "name": "ListFilesResponse",
        "type": "named"
      }
    },
    "listFilesInVectorStoreBatch": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "batch_id": {
          "description": "The ID of the file batch that the files belong to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoresFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoresOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store that the files belong to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of vector store files in a batch.",
      "result_type": {
        "name": "ListVectorStoreFilesResponse",
        "type": "named"
      }
    },
    "listFineTuningEvents": {
      "request": {
        "url": "/fine_tuning/jobs/{fine_tuning_job_id}/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Identifier for the last event from the previous pagination request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "fine_tuning_job_id": {
          "description": "The ID of the fine-tuning job to get events for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "fine_tuning_job_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Number of events to retrieve.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get status updates for a fine-tuning job.",
      "result_type": {
        "name": "ListFineTuningJobEventsResponse",
        "type": "named"
      }
    },
    "listFineTuningJobCheckpoints": {
      "request": {
        "url": "/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Identifier for the last checkpoint ID from the previous pagination request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "fine_tuning_job_id": {
          "description": "The ID of the fine-tuning job to get checkpoints for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "fine_tuning_job_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Number of checkpoints to retrieve.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List checkpoints for a fine-tuning job.",
      "result_type": {
        "name": "ListFineTuningJobCheckpointsResponse",
        "type": "named"
      }
    },
    "listMessages": {
      "request": {
        "url": "/threads/{thread_id}/messages",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ThreadsOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "Filter messages by the run ID that generated them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "run_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) the messages belong to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of messages for a given thread.",
      "result_type": {
        "name": "ListMessagesResponse",
        "type": "named"
      }
    },
    "listModels": {
      "request": {
        "url": "/models",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
      "result_type": {
        "name": "ListModelsResponse",
        "type": "named"
      }
    },
    "listPaginatedFineTuningJobs": {
      "request": {
        "url": "/fine_tuning/jobs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Identifier for the last job from the previous pagination request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Number of fine-tuning jobs to retrieve.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List your organization's fine-tuning jobs",
      "result_type": {
        "name": "ListPaginatedFineTuningJobsResponse",
        "type": "named"
      }
    },
    "listRunSteps": {
      "request": {
        "url": "/threads/{thread_id}/runs/{run_id}/steps",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include[]": {
          "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ThreadsInclude",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "include[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ThreadsOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The ID of the run the run steps belong to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the thread the run and run steps belong to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of run steps belonging to a run.",
      "result_type": {
        "name": "ListRunStepsResponse",
        "type": "named"
      }
    },
    "listRuns": {
      "request": {
        "url": "/threads/{thread_id}/runs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ThreadsOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the thread the run belongs to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of runs belonging to a thread.",
      "result_type": {
        "name": "ListRunsResponse",
        "type": "named"
      }
    },
    "listVectorStoreFiles": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/files",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoresFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoresOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store that the files belong to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of vector store files.",
      "result_type": {
        "name": "ListVectorStoreFilesResponse",
        "type": "named"
      }
    },
    "listVectorStores": {
      "request": {
        "url": "/vector_stores",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "order": {
          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoresOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of vector stores.",
      "result_type": {
        "name": "ListVectorStoresResponse",
        "type": "named"
      }
    },
    "list_audit_logs": {
      "request": {
        "url": "/organization/audit_logs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "actor_emails[]": {
          "description": "Return only events performed by users with these emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "actor_emails[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "actor_ids[]": {
          "description": "Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "actor_ids[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "effective_at": {
          "description": "Return only events whose `effective_at` (Unix seconds) is in this range.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListAuditLogsEffectiveAtInput",
              "type": "named"
            }
          },
          "http": {
            "name": "effective_at",
            "in": "query",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "event_types[]": {
          "description": "Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "AuditLogEventType",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "event_types[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "project_ids[]": {
          "description": "Return only events for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "resource_ids[]": {
          "description": "Return only events performed on these targets. For example, a project ID updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "resource_ids[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "List user actions and configuration changes within this organization.",
      "result_type": {
        "name": "ListAuditLogsResponse",
        "type": "named"
      }
    },
    "list_invites": {
      "request": {
        "url": "/organization/invites",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Returns a list of invites in the organization.",
      "result_type": {
        "name": "InviteListResponse",
        "type": "named"
      }
    },
    "list_project_api_keys": {
      "request": {
        "url": "/organization/projects/{project_id}/api_keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of API keys in the project.",
      "result_type": {
        "name": "ProjectApiKeyListResponse",
        "type": "named"
      }
    },
    "list_project_rate_limits": {
      "request": {
        "url": "/organization/projects/{project_id}/rate_limits",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. The default is 100.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns the rate limits per model for a project.",
      "result_type": {
        "name": "ProjectRateLimitListResponse",
        "type": "named"
      }
    },
    "list_project_service_accounts": {
      "request": {
        "url": "/organization/projects/{project_id}/service_accounts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of service accounts in the project.",
      "result_type": {
        "name": "ProjectServiceAccountListResponse",
        "type": "named"
      }
    },
    "list_project_users": {
      "request": {
        "url": "/organization/projects/{project_id}/users",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of users in the project.",
      "result_type": {
        "name": "ProjectUserListResponse",
        "type": "named"
      }
    },
    "list_projects": {
      "request": {
        "url": "/organization/projects",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include_archived": {
          "description": "If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "include_archived",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Returns a list of projects.",
      "result_type": {
        "name": "ProjectListResponse",
        "type": "named"
      }
    },
    "list_users": {
      "request": {
        "url": "/organization/users",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Lists all of the users in the organization.",
      "result_type": {
        "name": "UserListResponse",
        "type": "named"
      }
    },
    "retrieveBatch": {
      "request": {
        "url": "/batches/{batch_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "description": "The ID of the batch to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a batch.",
      "result_type": {
        "name": "Batch",
        "type": "named"
      }
    },
    "retrieveFile": {
      "request": {
        "url": "/files/{file_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "file_id": {
          "description": "The ID of the file to use for this request.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "file_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns information about a specific file.",
      "result_type": {
        "name": "OpenAIFile",
        "type": "named"
      }
    },
    "retrieveFineTuningJob": {
      "request": {
        "url": "/fine_tuning/jobs/{fine_tuning_job_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "fine_tuning_job_id": {
          "description": "The ID of the fine-tuning job.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "fine_tuning_job_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning)",
      "result_type": {
        "name": "FineTuningJob",
        "type": "named"
      }
    },
    "retrieveModel": {
      "request": {
        "url": "/models/{model}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "model": {
          "description": "The ID of the model to use for this request",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "model",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
      "result_type": {
        "name": "Model",
        "type": "named"
      }
    },
    "retrieve_invite": {
      "request": {
        "url": "/organization/invites/{invite_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "invite_id": {
          "description": "The ID of the invite to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "invite_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves an invite.",
      "result_type": {
        "name": "Invite",
        "type": "named"
      }
    },
    "retrieve_project": {
      "request": {
        "url": "/organization/projects/{project_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a project.",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "retrieve_project_api_key": {
      "request": {
        "url": "/organization/projects/{project_id}/api_keys/{key_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "description": "The ID of the API key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves an API key in the project.",
      "result_type": {
        "name": "ProjectApiKey",
        "type": "named"
      }
    },
    "retrieve_project_service_account": {
      "request": {
        "url": "/organization/projects/{project_id}/service_accounts/{service_account_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "service_account_id": {
          "description": "The ID of the service account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "service_account_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a service account in the project.",
      "result_type": {
        "name": "ProjectServiceAccount",
        "type": "named"
      }
    },
    "retrieve_project_user": {
      "request": {
        "url": "/organization/projects/{project_id}/users/{user_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "user_id": {
          "description": "The ID of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a user in the project.",
      "result_type": {
        "name": "ProjectUser",
        "type": "named"
      }
    },
    "retrieve_user": {
      "request": {
        "url": "/organization/users/{user_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "user_id": {
          "description": "The ID of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves a user by their identifier.",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "usage_audio_speeches": {
      "request": {
        "url": "/organization/usage/audio_speeches",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_ids": {
          "description": "Return only usage for these API keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "api_key_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageAudioSpeechesBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageAudioSpeechesGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "models": {
          "description": "Return only usage for these models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "models",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "user_ids": {
          "description": "Return only usage for these users.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "user_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Get audio speeches usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_audio_transcriptions": {
      "request": {
        "url": "/organization/usage/audio_transcriptions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_ids": {
          "description": "Return only usage for these API keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "api_key_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageAudioTranscriptionsBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageAudioTranscriptionsGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "models": {
          "description": "Return only usage for these models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "models",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "user_ids": {
          "description": "Return only usage for these users.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "user_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Get audio transcriptions usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_code_interpreter_sessions": {
      "request": {
        "url": "/organization/usage/code_interpreter_sessions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageCodeInterpreterSessionsBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageCodeInterpreterSessionsGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get code interpreter sessions usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_completions": {
      "request": {
        "url": "/organization/usage/completions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_ids": {
          "description": "Return only usage for these API keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "api_key_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "batch": {
          "description": "If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "batch",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageCompletionsBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageCompletionsGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "models": {
          "description": "Return only usage for these models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "models",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "user_ids": {
          "description": "Return only usage for these users.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "user_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Get completions usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_costs": {
      "request": {
        "url": "/organization/costs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OrganizationGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only costs for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get costs details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_embeddings": {
      "request": {
        "url": "/organization/usage/embeddings",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_ids": {
          "description": "Return only usage for these API keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "api_key_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageEmbeddingsBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageEmbeddingsGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "models": {
          "description": "Return only usage for these models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "models",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "user_ids": {
          "description": "Return only usage for these users.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "user_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Get embeddings usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_images": {
      "request": {
        "url": "/organization/usage/images",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_ids": {
          "description": "Return only usage for these API keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "api_key_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageImagesBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageImagesGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "models": {
          "description": "Return only usage for these models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "models",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "sizes": {
          "description": "Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OrganizationSizes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "sizes",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "sources": {
          "description": "Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OrganizationSources",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "sources",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "user_ids": {
          "description": "Return only usage for these users.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "user_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Get images usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_moderations": {
      "request": {
        "url": "/organization/usage/moderations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_ids": {
          "description": "Return only usage for these API keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "api_key_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageModerationsBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageModerationsGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "models": {
          "description": "Return only usage for these models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "models",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "user_ids": {
          "description": "Return only usage for these users.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "user_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Get moderations usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    },
    "usage_vector_stores": {
      "request": {
        "url": "/organization/usage/vector_stores",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "bucket_width": {
          "description": "Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsageVectorStoresBucketWidth",
              "type": "named"
            }
          },
          "http": {
            "name": "bucket_width",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "End time (Unix seconds) of the query time range, exclusive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "group_by": {
          "description": "Group the usage data by the specified fields. Support fields include `project_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UsageVectorStoresGroupBy",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "Specifies the number of buckets to return. - `bucket_width=1d`: default: 7, max: 31 - `bucket_width=1h`: default: 24, max: 168 - `bucket_width=1m`: default: 60, max: 1440",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_ids": {
          "description": "Return only usage for these projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "project_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "start_time": {
          "description": "Start time (Unix seconds) of the query time range, inclusive.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get vector stores usage details for the organization.",
      "result_type": {
        "name": "UsageResponse",
        "type": "named"
      }
    }
  },
  "object_types": {
    "AddUploadPartRequestInput": {
      "fields": {
        "data": {
          "description": "The chunk of bytes for this Part.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        }
      }
    },
    "AdminApiKey": {
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdminApiKeyOwner",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "redacted_value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AdminApiKeyOwner": {
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AdminApiKeysCreateBodyInput": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AdminApiKeysDeleteResult": {
      "fields": {
        "deleted": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ApiKeyList": {
      "fields": {
        "data": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "AdminApiKey",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AssistantObject": {
      "description": "Represents an `assistant` that can call the model and use tools.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the assistant was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 512
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256000
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256
          }
        },
        "object": {
          "description": "The object type, which is always `assistant`.",
          "type": {
            "name": "AssistantObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_format": {
          "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": 0
          }
        },
        "tool_resources": {
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantObjectToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.",
          "type": {
            "element_type": {
              "name": "AssistantObjectTools",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        }
      }
    },
    "AssistantObjectToolResources": {
      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantObjectToolResourcesCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantObjectToolResourcesFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AssistantObjectToolResourcesCodeInterpreter": {
      "fields": {
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AssistantObjectToolResourcesFileSearch": {
      "fields": {
        "vector_store_ids": {
          "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AssistantObjectTools": {
      "fields": {
        "file_search": {
          "description": "Overrides for the file search tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantToolsFileSearchFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "function": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of tool being defined: `function`",
          "type": {
            "name": "AssistantObjectToolsTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AssistantToolsFileSearchFileSearch": {
      "description": "Overrides for the file search tool.",
      "fields": {
        "max_num_results": {
          "description": "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.  Note that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 50,
            "minimum": 1
          }
        },
        "ranking_options": {
          "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileSearchRankingOptions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuditLog": {
      "description": "A log of a user action or configuration change within this organization.",
      "fields": {
        "actor": {
          "description": "The actor who performed the audit logged action.",
          "type": {
            "name": "AuditLogActor",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "api_key.created": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogApiKeyCreated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "api_key.deleted": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogApiKeyDeleted",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "api_key.updated": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogApiKeyUpdated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "effective_at": {
          "description": "The Unix timestamp (in seconds) of the event.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The ID of this log.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "invite.accepted": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogInviteAccepted",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "invite.deleted": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogInviteDeleted",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "invite.sent": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogInviteSent",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "login.failed": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogLoginFailed",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logout.failed": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogLogoutFailed",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "organization.updated": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogOrganizationUpdated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "project": {
          "description": "The project that the action was scoped to. Absent for actions not scoped to projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogProject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "project.archived": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogProjectArchived",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "project.created": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogProjectCreated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "project.updated": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogProjectUpdated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rate_limit.deleted": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogRateLimitDeleted",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rate_limit.updated": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogRateLimitUpdated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "service_account.created": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogServiceAccountCreated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "service_account.deleted": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogServiceAccountDeleted",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "service_account.updated": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogServiceAccountUpdated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The event type.",
          "type": {
            "name": "AuditLogEventType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user.added": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogUserAdded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user.deleted": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogUserDeleted",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user.updated": {
          "description": "The details for events with this `type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogUserUpdated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuditLogActor": {
      "description": "The actor who performed the audit logged action.",
      "fields": {
        "api_key": {
          "description": "The API Key used to perform the audit logged action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogActorApiKey",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "session": {
          "description": "The session in which the audit logged action was performed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogActorSession",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of actor. Is either `session` or `api_key`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogActorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogActorApiKey": {
      "description": "The API Key used to perform the audit logged action.",
      "fields": {
        "id": {
          "description": "The tracking id of the API key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "service_account": {
          "description": "The service account that performed the audit logged action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogActorServiceAccount",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of API key. Can be either `user` or `service_account`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogActorApiKeyType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "The user who performed the audit logged action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogActorUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuditLogActorServiceAccount": {
      "description": "The service account that performed the audit logged action.",
      "fields": {
        "id": {
          "description": "The service account id.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogActorSession": {
      "description": "The session in which the audit logged action was performed.",
      "fields": {
        "ip_address": {
          "description": "The IP address from which the action was performed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "The user who performed the audit logged action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogActorUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuditLogActorUser": {
      "description": "The user who performed the audit logged action.",
      "fields": {
        "email": {
          "description": "The user email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The user id.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogApiKeyCreated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "data": {
          "description": "The payload used to create the API key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogApiKeyCreatedData",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The tracking ID of the API key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogApiKeyCreatedData": {
      "description": "The payload used to create the API key.",
      "fields": {
        "scopes": {
          "description": "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"]`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AuditLogApiKeyDeleted": {
      "description": "The details for events with this `type`.",
      "fields": {
        "id": {
          "description": "The tracking ID of the API key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogApiKeyUpdated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "changes_requested": {
          "description": "The payload used to update the API key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogApiKeyUpdatedChangesRequested",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The tracking ID of the API key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogApiKeyUpdatedChangesRequested": {
      "description": "The payload used to update the API key.",
      "fields": {
        "scopes": {
          "description": "A list of scopes allowed for the API key, e.g. `[\"api.model.request\"]`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AuditLogInviteAccepted": {
      "description": "The details for events with this `type`.",
      "fields": {
        "id": {
          "description": "The ID of the invite.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogInviteDeleted": {
      "description": "The details for events with this `type`.",
      "fields": {
        "id": {
          "description": "The ID of the invite.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogInviteSent": {
      "description": "The details for events with this `type`.",
      "fields": {
        "data": {
          "description": "The payload used to create the invite.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogInviteSentData",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The ID of the invite.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogInviteSentData": {
      "description": "The payload used to create the invite.",
      "fields": {
        "email": {
          "description": "The email invited to the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "The role the email was invited to be. Is either `owner` or `member`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogLoginFailed": {
      "description": "The details for events with this `type`.",
      "fields": {
        "error_code": {
          "description": "The error code of the failure.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "error_message": {
          "description": "The error message of the failure.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogLogoutFailed": {
      "description": "The details for events with this `type`.",
      "fields": {
        "error_code": {
          "description": "The error code of the failure.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "error_message": {
          "description": "The error message of the failure.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogOrganizationUpdated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "changes_requested": {
          "description": "The payload used to update the organization settings.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogOrganizationUpdatedChangesRequested",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The organization ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogOrganizationUpdatedChangesRequested": {
      "description": "The payload used to update the organization settings.",
      "fields": {
        "description": {
          "description": "The organization description.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The organization name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "settings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogOrganizationUpdatedChangesRequestedSettings",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "description": "The organization title.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogOrganizationUpdatedChangesRequestedSettings": {
      "fields": {
        "threads_ui_visibility": {
          "description": "Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage_dashboard_visibility": {
          "description": "Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogProject": {
      "description": "The project that the action was scoped to. Absent for actions not scoped to projects.",
      "fields": {
        "id": {
          "description": "The project ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The project title.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogProjectArchived": {
      "description": "The details for events with this `type`.",
      "fields": {
        "id": {
          "description": "The project ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogProjectCreated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "data": {
          "description": "The payload used to create the project.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogProjectCreatedData",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The project ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogProjectCreatedData": {
      "description": "The payload used to create the project.",
      "fields": {
        "name": {
          "description": "The project name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the project as seen on the dashboard.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogProjectUpdated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "changes_requested": {
          "description": "The payload used to update the project.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogProjectUpdatedChangesRequested",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The project ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogProjectUpdatedChangesRequested": {
      "description": "The payload used to update the project.",
      "fields": {
        "title": {
          "description": "The title of the project as seen on the dashboard.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogRateLimitDeleted": {
      "description": "The details for events with this `type`.",
      "fields": {
        "id": {
          "description": "The rate limit ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogRateLimitUpdated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "changes_requested": {
          "description": "The payload used to update the rate limits.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogRateLimitUpdatedChangesRequested",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The rate limit ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogRateLimitUpdatedChangesRequested": {
      "description": "The payload used to update the rate limits.",
      "fields": {
        "batch_1_day_max_input_tokens": {
          "description": "The maximum batch input tokens per day. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_audio_megabytes_per_1_minute": {
          "description": "The maximum audio megabytes per minute. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_images_per_1_minute": {
          "description": "The maximum images per minute. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_requests_per_1_day": {
          "description": "The maximum requests per day. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_requests_per_1_minute": {
          "description": "The maximum requests per minute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_tokens_per_1_minute": {
          "description": "The maximum tokens per minute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AuditLogServiceAccountCreated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "data": {
          "description": "The payload used to create the service account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogServiceAccountCreatedData",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The service account ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogServiceAccountCreatedData": {
      "description": "The payload used to create the service account.",
      "fields": {
        "role": {
          "description": "The role of the service account. Is either `owner` or `member`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogServiceAccountDeleted": {
      "description": "The details for events with this `type`.",
      "fields": {
        "id": {
          "description": "The service account ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogServiceAccountUpdated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "changes_requested": {
          "description": "The payload used to updated the service account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogServiceAccountUpdatedChangesRequested",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The service account ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogServiceAccountUpdatedChangesRequested": {
      "description": "The payload used to updated the service account.",
      "fields": {
        "role": {
          "description": "The role of the service account. Is either `owner` or `member`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogUserAdded": {
      "description": "The details for events with this `type`.",
      "fields": {
        "data": {
          "description": "The payload used to add the user to the project.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogUserAddedData",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The user ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogUserAddedData": {
      "description": "The payload used to add the user to the project.",
      "fields": {
        "role": {
          "description": "The role of the user. Is either `owner` or `member`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogUserDeleted": {
      "description": "The details for events with this `type`.",
      "fields": {
        "id": {
          "description": "The user ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogUserUpdated": {
      "description": "The details for events with this `type`.",
      "fields": {
        "changes_requested": {
          "description": "The payload used to update the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogUserUpdatedChangesRequested",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The project ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuditLogUserUpdatedChangesRequested": {
      "description": "The payload used to update the user.",
      "fields": {
        "role": {
          "description": "The role of the user. Is either `owner` or `member`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Batch": {
      "fields": {
        "cancelled_at": {
          "description": "The Unix timestamp (in seconds) for when the batch was cancelled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "cancelling_at": {
          "description": "The Unix timestamp (in seconds) for when the batch started cancelling.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the batch was completed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "completion_window": {
          "description": "The time frame within which the batch should be processed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the batch was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "endpoint": {
          "description": "The OpenAI API endpoint used by the batch.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "error_file_id": {
          "description": "The ID of the file containing the outputs of requests with errors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "errors": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BatchErrors",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "expired_at": {
          "description": "The Unix timestamp (in seconds) for when the batch expired.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when the batch will expire.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "failed_at": {
          "description": "The Unix timestamp (in seconds) for when the batch failed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "finalizing_at": {
          "description": "The Unix timestamp (in seconds) for when the batch started finalizing.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "in_progress_at": {
          "description": "The Unix timestamp (in seconds) for when the batch started processing.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "input_file_id": {
          "description": "The ID of the input file for the batch.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `batch`.",
          "type": {
            "name": "BatchObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "output_file_id": {
          "description": "The ID of the file containing the outputs of successfully executed requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "request_counts": {
          "description": "The request counts for different statuses within the batch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BatchRequestCounts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "The current status of the batch.",
          "type": {
            "name": "BatchStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BatchErrors": {
      "fields": {
        "data": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "BatchErrorsData",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "object": {
          "description": "The object type, which is always `list`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BatchErrorsData": {
      "fields": {
        "code": {
          "description": "An error code identifying the error type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "line": {
          "description": "The line number of the input file where the error occurred, if applicable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "message": {
          "description": "A human-readable message providing more details about the error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "param": {
          "description": "The name of the parameter that caused the error, if applicable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BatchRequestCounts": {
      "description": "The request counts for different statuses within the batch.",
      "fields": {
        "completed": {
          "description": "Number of requests that have been completed successfully.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "failed": {
          "description": "Number of requests that have failed.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "description": "Total number of requests in the batch.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ChatCompletionFunctions": {
      "fields": {
        "description": {
          "description": "A description of what the function does, used by the model to choose when and how to call the function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parameters": {
          "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ChatCompletionMessageToolCall": {
      "fields": {
        "function": {
          "description": "The function that the model called.",
          "type": {
            "name": "ChatCompletionMessageToolCallFunction",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The ID of the tool call.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of the tool. Currently, only `function` is supported.",
          "type": {
            "name": "ChatCompletionMessageToolCallType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChatCompletionMessageToolCallFunction": {
      "description": "The function that the model called.",
      "fields": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChatCompletionRequestAssistantMessageAudio": {
      "description": "Data about a previous audio response from the model.  [Learn more](/docs/guides/audio).",
      "fields": {
        "id": {
          "description": "Unique identifier for a previous audio response from the model.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChatCompletionRequestAssistantMessageFunctionCall": {
      "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
      "fields": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChatCompletionRequestMessage": {
      "fields": {
        "audio": {
          "description": "Data about a previous audio response from the model.  [Learn more](/docs/guides/audio).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionRequestAssistantMessageAudio",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "content": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          }
        },
        "function_call": {
          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionRequestAssistantMessageFunctionCall",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "refusal": {
          "description": "The refusal message by the assistant.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "The role of the messages author, in this case `function`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionRequestMessageRoleEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool_call_id": {
          "description": "Tool call that this message is responding to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool_calls": {
          "description": "The tool calls generated by the model, such as function calls.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionMessageToolCall",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "ChatCompletionResponseMessage": {
      "description": "A chat completion message generated by the model.",
      "fields": {
        "audio": {
          "description": "If the audio output modality is requested, this object contains data about the audio response from the model. [Learn more](/docs/guides/audio).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionResponseMessageAudio",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "content": {
          "description": "The contents of the message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "function_call": {
          "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionResponseMessageFunctionCall",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "refusal": {
          "description": "The refusal message generated by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "The role of the author of this message.",
          "type": {
            "name": "ChatCompletionResponseMessageRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool_calls": {
          "description": "The tool calls generated by the model, such as function calls.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionMessageToolCall",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "ChatCompletionResponseMessageAudio": {
      "description": "If the audio output modality is requested, this object contains data about the audio response from the model. [Learn more](/docs/guides/audio).",
      "fields": {
        "data": {
          "description": "Base64 encoded audio bytes generated by the model, in the format specified in the request.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when this audio response will no longer be accessible on the server for use in multi-turn conversations.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for this audio response.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "transcript": {
          "description": "Transcript of the audio generated by the model.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChatCompletionResponseMessageFunctionCall": {
      "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
      "fields": {
        "arguments": {
          "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function to call.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChatCompletionStreamOptions": {
      "description": "Options for streaming response. Only set this when you set `stream: true`.",
      "fields": {
        "include_usage": {
          "description": "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ChatCompletionTokenLogprob": {
      "fields": {
        "bytes": {
          "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "logprob": {
          "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "token": {
          "description": "The token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "top_logprobs": {
          "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.",
          "type": {
            "element_type": {
              "name": "ChatCompletionTokenLogprobTopLogprobs",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ChatCompletionTokenLogprobTopLogprobs": {
      "fields": {
        "bytes": {
          "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "logprob": {
          "description": "The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "token": {
          "description": "The token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChatCompletionTool": {
      "fields": {
        "function": {
          "type": {
            "name": "FunctionObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of the tool. Currently, only `function` is supported.",
          "type": {
            "name": "ChatCompletionToolType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChunkingStrategyRequestParam": {
      "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
      "fields": {
        "static": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StaticChunkingStrategy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Always `static`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChunkingStrategyRequestParamTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CompleteUploadRequestInput": {
      "fields": {
        "md5": {
          "description": "The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "part_ids": {
          "description": "The ordered list of Part IDs.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CompletionUsage": {
      "description": "Usage statistics for the completion request.",
      "fields": {
        "completion_tokens": {
          "description": "Number of tokens in the generated completion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "completion_tokens_details": {
          "description": "Breakdown of tokens used in a completion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CompletionUsageCompletionTokensDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "prompt_tokens": {
          "description": "Number of tokens in the prompt.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "prompt_tokens_details": {
          "description": "Breakdown of tokens used in the prompt.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CompletionUsagePromptTokensDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "total_tokens": {
          "description": "Total number of tokens used in the request (prompt + completion).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "CompletionUsageCompletionTokensDetails": {
      "description": "Breakdown of tokens used in a completion.",
      "fields": {
        "accepted_prediction_tokens": {
          "description": "When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "audio_tokens": {
          "description": "Audio input tokens generated by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reasoning_tokens": {
          "description": "Tokens generated by the model for reasoning.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "rejected_prediction_tokens": {
          "description": "When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. However, like reasoning tokens, these tokens are still counted in the total completion tokens for purposes of billing, output, and context window limits.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "CompletionUsagePromptTokensDetails": {
      "description": "Breakdown of tokens used in the prompt.",
      "fields": {
        "audio_tokens": {
          "description": "Audio input tokens present in the prompt.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "cached_tokens": {
          "description": "Cached tokens present in the prompt.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "CostsResultAmount": {
      "description": "The monetary value in its associated currency.",
      "fields": {
        "currency": {
          "description": "Lowercase ISO-4217 currency e.g. \"usd\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The numeric value of the cost.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "CreateAssistantRequestInput": {
      "fields": {
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 512
          }
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256000
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256
          }
        },
        "response_format": {
          "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantsApiResponseFormatOption",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": 0
          }
        },
        "tool_resources": {
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateAssistantRequestToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateAssistantRequestTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        }
      }
    },
    "CreateAssistantRequestToolResources": {
      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateAssistantRequestToolResourcesCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateAssistantRequestToolResourcesFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateAssistantRequestToolResourcesCodeInterpreter": {
      "fields": {
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateAssistantRequestToolResourcesFileSearch": {
      "fields": {
        "vector_store_ids": {
          "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_stores": {
          "description": "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateAssistantRequestToolResourcesFileSearchVectorStores",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CreateAssistantRequestToolResourcesFileSearchVectorStores": {
      "fields": {
        "chunking_strategy": {
          "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateAssistantRequestToolResourcesFileSearchVectorStoresChunkingStrategy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateAssistantRequestToolResourcesFileSearchVectorStoresChunkingStrategy": {
      "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
      "fields": {
        "static": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateAssistantRequestToolResourcesFileSearchVectorStoresChunkingStrategy1Static",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Always `static`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateAssistantRequestToolResourcesFileSearchVectorStoresChunkingStrategyTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateAssistantRequestToolResourcesFileSearchVectorStoresChunkingStrategy1Static": {
      "fields": {
        "chunk_overlap_tokens": {
          "description": "The number of tokens that overlap between chunks. The default value is `400`.  Note that the overlap must not exceed half of `max_chunk_size_tokens`.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_chunk_size_tokens": {
          "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 4096,
            "minimum": 100
          }
        }
      }
    },
    "CreateAssistantRequestTools": {
      "fields": {
        "file_search": {
          "description": "Overrides for the file search tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantToolsFileSearchFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "function": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of tool being defined: `function`",
          "type": {
            "name": "CreateAssistantRequestToolsTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateBatchBodyInput": {
      "fields": {
        "completion_window": {
          "description": "The time frame within which the batch should be processed. Currently only `24h` is supported.",
          "type": {
            "name": "BatchesCompletionWindow",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "endpoint": {
          "description": "The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.",
          "type": {
            "name": "BatchesEndpoint",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "input_file_id": {
          "description": "The ID of an uploaded file that contains requests for the new batch.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadata": {
          "description": "Optional custom metadata for the batch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateChatCompletionRequestAudio": {
      "description": "Parameters for audio output. Required when audio output is requested with `modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).",
      "fields": {
        "format": {
          "description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`, `opus`, or `pcm16`.",
          "type": {
            "name": "CreateChatCompletionRequestAudioFormat",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "voice": {
          "description": "The voice the model uses to respond. Supported voices are `ash`, `ballad`, `coral`, `sage`, and `verse` (also supported but not recommended are `alloy`, `echo`, and `shimmer`; these voices are less expressive).",
          "type": {
            "name": "CreateChatCompletionRequestAudioVoice",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateChatCompletionRequestInput": {
      "fields": {
        "audio": {
          "description": "Parameters for audio output. Required when audio output is requested with `modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionRequestAudio",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "frequency_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": -2
          }
        },
        "function_call": {
          "description": "Deprecated in favor of `tool_choice`.  Controls which (if any) function is called by the model.  `none` means the model will not call a function and instead generates a message.  `auto` means the model can pick between generating a message or calling a function.  Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.  `none` is the default when no functions are present. `auto` is the default if functions are present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "functions": {
          "description": "Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionFunctions",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "logit_bias": {
          "description": "Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logprobs": {
          "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "max_completion_tokens": {
          "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_tokens": {
          "description": "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.  This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "messages": {
          "description": "A list of messages comprising the conversation so far. Depending on the [model](/docs/models) you use, different message types (modalities) are supported, like [text](/docs/guides/text-generation), [images](/docs/guides/vision), and [audio](/docs/guides/audio).",
          "type": {
            "element_type": {
              "name": "ChatCompletionRequestMessage",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "metadata": {
          "description": "Developer-defined tags and values used for filtering completions in the [dashboard](https://platform.openai.com/chat-completions).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "modalities": {
          "description": "Output types that you would like the model to generate for this request. Most models are capable of generating text, which is the default:  `[\"text\"]`  The `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To request that this model generate both text and audio responses, you can use:  `[\"text\", \"audio\"]`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionModalities",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "model": {
          "description": "ID of the model to use. See the [model endpoint compatibility](/docs/models#model-endpoint-compatibility) table for details on which models work with the Chat API.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 128,
            "minimum": 1
          }
        },
        "parallel_tool_calls": {
          "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "prediction": {
          "description": "Static predicted output content, such as the content of a text file that is being regenerated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PredictionContent",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "presence_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": -2
          }
        },
        "reasoning_effort": {
          "description": "**o1 models only**   Constrains effort on reasoning for  [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionRequestReasoningEffort",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_format": {
          "description": "An object specifying the format that the model must output.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionRequestResponseFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "seed": {
          "description": "This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000
          }
        },
        "service_tier": {
          "description": "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.   - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is 'auto'.    When this parameter is set, the response body will include the `service_tier` utilized.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionRequestServiceTier",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stop": {
          "description": "Up to 4 sequences where the API will stop generating further tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "store": {
          "description": "Whether or not to store the output of this chat completion request for  use in our [model distillation](/docs/guides/distillation) or [evals](/docs/guides/evals) products.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "stream": {
          "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "stream_options": {
          "description": "Options for streaming response. Only set this when you set `stream: true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionStreamOptions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": 0
          }
        },
        "tool_choice": {
          "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.  `none` is the default when no tools are present. `auto` is the default if tools are present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionToolChoiceOption",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "tools": {
          "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionTool",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "top_logprobs": {
          "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 20,
            "minimum": 0
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateChatCompletionRequestResponseFormat": {
      "description": "An object specifying the format that the model must output.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. ",
      "fields": {
        "json_schema": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResponseFormatJsonSchemaJsonSchema",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of response format being defined: `json_schema`",
          "type": {
            "name": "CreateChatCompletionRequestResponseFormatTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateChatCompletionResponse": {
      "description": "Represents a chat completion response returned by model, based on the provided input.",
      "fields": {
        "choices": {
          "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1.",
          "type": {
            "element_type": {
              "name": "CreateChatCompletionResponseChoices",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "created": {
          "description": "The Unix timestamp (in seconds) of when the chat completion was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "A unique identifier for the chat completion.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "model": {
          "description": "The model used for the chat completion.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `chat.completion`.",
          "type": {
            "name": "CreateChatCompletionResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "service_tier": {
          "description": "The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionResponseServiceTier",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system_fingerprint": {
          "description": "This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage": {
          "description": "Usage statistics for the completion request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CompletionUsage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateChatCompletionResponseChoices": {
      "fields": {
        "finish_reason": {
          "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.",
          "type": {
            "name": "CreateChatCompletionResponseChoicesFinishReason",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "index": {
          "description": "The index of the choice in the list of choices.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "logprobs": {
          "description": "Log probability information for the choice.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateChatCompletionResponseChoicesLogprobs",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "message": {
          "description": "A chat completion message generated by the model.",
          "type": {
            "name": "ChatCompletionResponseMessage",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateChatCompletionResponseChoicesLogprobs": {
      "description": "Log probability information for the choice.",
      "fields": {
        "content": {
          "description": "A list of message content tokens with log probability information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionTokenLogprob",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "refusal": {
          "description": "A list of message refusal tokens with log probability information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChatCompletionTokenLogprob",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "CreateCompletionRequestInput": {
      "fields": {
        "best_of": {
          "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return  `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 20,
            "minimum": 0
          }
        },
        "echo": {
          "description": "Echo back the prompt in addition to the completion",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "frequency_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": -2
          }
        },
        "logit_bias": {
          "description": "Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the  token from being generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logprobs": {
          "description": "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 5,
            "minimum": 0
          }
        },
        "max_tokens": {
          "description": "The maximum number of [tokens](/tokenizer) that can be generated in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 128,
            "minimum": 1
          }
        },
        "presence_penalty": {
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": -2
          }
        },
        "prompt": {
          "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.  Note that  is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "seed": {
          "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000
          }
        },
        "stop": {
          "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "stream": {
          "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "stream_options": {
          "description": "Options for streaming response. Only set this when you set `stream: true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChatCompletionStreamOptions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "suffix": {
          "description": "The suffix that comes after a completion of inserted text.  This parameter is only supported for `gpt-3.5-turbo-instruct`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": 0
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateCompletionResponse": {
      "description": "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).",
      "fields": {
        "choices": {
          "description": "The list of completion choices the model generated for the input prompt.",
          "type": {
            "element_type": {
              "name": "CreateCompletionResponseChoices",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "created": {
          "description": "The Unix timestamp (in seconds) of when the completion was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "A unique identifier for the completion.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "model": {
          "description": "The model used for completion.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always \"text_completion\"",
          "type": {
            "name": "CreateCompletionResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system_fingerprint": {
          "description": "This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage": {
          "description": "Usage statistics for the completion request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CompletionUsage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateCompletionResponseChoices": {
      "fields": {
        "finish_reason": {
          "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, or `content_filter` if content was omitted due to a flag from our content filters.",
          "type": {
            "name": "CreateCompletionResponseChoicesFinishReason",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "index": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "logprobs": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateCompletionResponseChoicesLogprobs",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "text": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateCompletionResponseChoicesLogprobs": {
      "fields": {
        "text_offset": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "token_logprobs": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Float64",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "number"
              ]
            }
          }
        },
        "tokens": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "top_logprobs": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CreateEmbeddingRequestInput": {
      "fields": {
        "dimensions": {
          "description": "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 1
          }
        },
        "encoding_format": {
          "description": "The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateEmbeddingRequestEncodingFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "input": {
          "description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateEmbeddingResponse": {
      "fields": {
        "data": {
          "description": "The list of embeddings generated by the model.",
          "type": {
            "element_type": {
              "name": "Embedding",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "model": {
          "description": "The name of the model used to generate the embedding.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always \"list\".",
          "type": {
            "name": "CreateEmbeddingResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage": {
          "description": "The usage information for the request.",
          "type": {
            "name": "CreateEmbeddingResponseUsage",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateEmbeddingResponseUsage": {
      "description": "The usage information for the request.",
      "fields": {
        "prompt_tokens": {
          "description": "The number of tokens used by the prompt.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_tokens": {
          "description": "The total number of tokens used by the request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "CreateFileRequestInput": {
      "fields": {
        "file": {
          "description": "The File object (not file name) to be uploaded.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        },
        "purpose": {
          "description": "The intended purpose of the uploaded file.  Use \"assistants\" for [Assistants](/docs/api-reference/assistants) and [Message](/docs/api-reference/messages) files, \"vision\" for Assistants image file inputs, \"batch\" for [Batch API](/docs/guides/batch), and \"fine-tune\" for [Fine-tuning](/docs/api-reference/fine-tuning).",
          "type": {
            "name": "CreateFileRequestPurpose",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateFineTuningJobRequestHyperparameters": {
      "description": "The hyperparameters used for the fine-tuning job. This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.",
      "fields": {
        "batch_size": {
          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "learning_rate_multiplier": {
          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "n_epochs": {
          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        }
      }
    },
    "CreateFineTuningJobRequestInput": {
      "fields": {
        "hyperparameters": {
          "description": "The hyperparameters used for the fine-tuning job. This value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateFineTuningJobRequestHyperparameters",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "integrations": {
          "description": "A list of integrations to enable for your fine-tuning job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateFineTuningJobRequestIntegrations",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "method": {
          "description": "The method used for fine-tuning.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuneMethod",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "The name of the model to fine-tune. You can select one of the [supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "seed": {
          "description": "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases. If a seed is not specified, one will be generated for you.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 2147483647,
            "minimum": 0
          }
        },
        "suffix": {
          "description": "A string of up to 64 characters that will be added to your fine-tuned model name.  For example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 64,
            "minLength": 1
          }
        },
        "training_file": {
          "description": "The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.  The contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "validation_file": {
          "description": "The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateFineTuningJobRequestIntegrations": {
      "fields": {
        "type": {
          "description": "The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported.",
          "type": {
            "name": "CreateFineTuningJobRequestIntegrationsType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "wandb": {
          "description": "The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run.",
          "type": {
            "name": "CreateFineTuningJobRequestIntegrationsWandb",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateFineTuningJobRequestIntegrationsWandb": {
      "description": "The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run.",
      "fields": {
        "entity": {
          "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "A display name to set for the run. If not set, we will use the Job ID as the name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "project": {
          "description": "The name of the project that the new run will be created under.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tags": {
          "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateImageEditRequestInput": {
      "fields": {
        "image": {
          "description": "The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        },
        "mask": {
          "description": "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Binary",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        },
        "model": {
          "description": "The model to use for image generation. Only `dall-e-2` is supported at this time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "The number of images to generate. Must be between 1 and 10.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 10,
            "minimum": 1
          }
        },
        "prompt": {
          "description": "A text description of the desired image(s). The maximum length is 1000 characters.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_format": {
          "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageEditRequestResponseFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageEditRequestSize",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateImageRequestInput": {
      "fields": {
        "model": {
          "description": "The model to use for image generation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 10,
            "minimum": 1
          }
        },
        "prompt": {
          "description": "A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "quality": {
          "description": "The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageRequestQuality",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_format": {
          "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageRequestResponseFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageRequestSize",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "style": {
          "description": "The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageRequestStyle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateImageVariationRequestInput": {
      "fields": {
        "image": {
          "description": "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        },
        "model": {
          "description": "The model to use for image generation. Only `dall-e-2` is supported at this time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 10,
            "minimum": 1
          }
        },
        "response_format": {
          "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageVariationRequestResponseFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateImageVariationRequestSize",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateMessageRequest": {
      "fields": {
        "attachments": {
          "description": "A list of files attached to the message, and the tools they should be added to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateMessageRequestAttachments",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "content": {
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "role": {
          "description": "The role of the entity that is creating the message. Allowed values include: - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.",
          "type": {
            "name": "CreateMessageRequestRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateMessageRequestAttachments": {
      "fields": {
        "file_id": {
          "description": "The ID of the file to attach to the message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tools": {
          "description": "The tools to add this file to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateMessageRequestAttachmentsTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CreateMessageRequestAttachmentsTools": {
      "fields": {
        "type": {
          "description": "The type of tool being defined: `file_search`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateMessageRequestAttachmentsToolsTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateMessageRequestInput": {
      "fields": {
        "attachments": {
          "description": "A list of files attached to the message, and the tools they should be added to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateMessageRequestAttachments",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "content": {
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "role": {
          "description": "The role of the entity that is creating the message. Allowed values include: - `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages. - `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.",
          "type": {
            "name": "CreateMessageRequestRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateModerationRequestInput": {
      "fields": {
        "input": {
          "description": "Input (or inputs) to classify. Can be a single string, an array of strings, or an array of multi-modal input objects similar to other models.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "model": {
          "description": "The content moderation model you would like to use. Learn more in [the moderation guide](/docs/guides/moderation), and learn about available models [here](/docs/models#moderation).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateModerationResponse": {
      "description": "Represents if a given text input is potentially harmful.",
      "fields": {
        "id": {
          "description": "The unique identifier for the moderation request.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "model": {
          "description": "The model used to generate the moderation results.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "results": {
          "description": "A list of moderation objects.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResults",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CreateModerationResponseResults": {
      "fields": {
        "categories": {
          "description": "A list of the categories, and whether they are flagged or not.",
          "type": {
            "name": "CreateModerationResponseResultsCategories",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "category_applied_input_types": {
          "description": "A list of the categories along with the input type(s) that the score applies to.",
          "type": {
            "name": "CreateModerationResponseResultsCategoryAppliedInputTypes",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "category_scores": {
          "description": "A list of the categories along with their scores as predicted by model.",
          "type": {
            "name": "CreateModerationResponseResultsCategoryScores",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "flagged": {
          "description": "Whether any of the below categories are flagged.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "CreateModerationResponseResultsCategories": {
      "description": "A list of the categories, and whether they are flagged or not.",
      "fields": {
        "harassment": {
          "description": "Content that expresses, incites, or promotes harassing language towards any target.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "harassment/threatening": {
          "description": "Harassment content that also includes violence or serious harm towards any target.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hate": {
          "description": "Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hate/threatening": {
          "description": "Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "illicit": {
          "description": "Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, \"how to shoplift\" would fit this category.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "illicit/violent": {
          "description": "Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "self-harm": {
          "description": "Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "self-harm/instructions": {
          "description": "Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "self-harm/intent": {
          "description": "Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "sexual": {
          "description": "Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "sexual/minors": {
          "description": "Sexual content that includes an individual who is under 18 years old.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "violence": {
          "description": "Content that depicts death, violence, or physical injury.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "violence/graphic": {
          "description": "Content that depicts death, violence, or physical injury in graphic detail.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypes": {
      "description": "A list of the categories along with the input type(s) that the score applies to.",
      "fields": {
        "harassment": {
          "description": "The applied input type(s) for the category 'harassment'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesHarassment",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "harassment/threatening": {
          "description": "The applied input type(s) for the category 'harassment/threatening'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesHarassmentThreatening",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "hate": {
          "description": "The applied input type(s) for the category 'hate'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesHate",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "hate/threatening": {
          "description": "The applied input type(s) for the category 'hate/threatening'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesHateThreatening",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "illicit": {
          "description": "The applied input type(s) for the category 'illicit'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesIllicit",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "illicit/violent": {
          "description": "The applied input type(s) for the category 'illicit/violent'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesIllicitViolent",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "self-harm": {
          "description": "The applied input type(s) for the category 'self-harm'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesSelfHarm",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "self-harm/instructions": {
          "description": "The applied input type(s) for the category 'self-harm/instructions'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesSelfHarmInstructions",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "self-harm/intent": {
          "description": "The applied input type(s) for the category 'self-harm/intent'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesSelfHarmIntent",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sexual": {
          "description": "The applied input type(s) for the category 'sexual'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesSexual",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sexual/minors": {
          "description": "The applied input type(s) for the category 'sexual/minors'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesSexualMinors",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "violence": {
          "description": "The applied input type(s) for the category 'violence'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesViolence",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "violence/graphic": {
          "description": "The applied input type(s) for the category 'violence/graphic'.",
          "type": {
            "element_type": {
              "name": "CreateModerationResponseResultsCategoryAppliedInputTypesViolenceGraphic",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateModerationResponseResultsCategoryScores": {
      "description": "A list of the categories along with their scores as predicted by model.",
      "fields": {
        "harassment": {
          "description": "The score for the category 'harassment'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "harassment/threatening": {
          "description": "The score for the category 'harassment/threatening'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "hate": {
          "description": "The score for the category 'hate'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "hate/threatening": {
          "description": "The score for the category 'hate/threatening'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "illicit": {
          "description": "The score for the category 'illicit'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "illicit/violent": {
          "description": "The score for the category 'illicit/violent'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "self-harm": {
          "description": "The score for the category 'self-harm'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "self-harm/instructions": {
          "description": "The score for the category 'self-harm/instructions'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "self-harm/intent": {
          "description": "The score for the category 'self-harm/intent'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "sexual": {
          "description": "The score for the category 'sexual'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "sexual/minors": {
          "description": "The score for the category 'sexual/minors'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "violence": {
          "description": "The score for the category 'violence'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "violence/graphic": {
          "description": "The score for the category 'violence/graphic'.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "CreateRunRequestInput": {
      "fields": {
        "additional_instructions": {
          "description": "Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "additional_messages": {
          "description": "Adds additional messages to the thread before creating the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateMessageRequest",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "instructions": {
          "description": "Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "max_completion_tokens": {
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 256
          }
        },
        "max_prompt_tokens": {
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 256
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parallel_tool_calls": {
          "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "response_format": {
          "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantsApiResponseFormatOption",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "stream": {
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": 0
          }
        },
        "tool_choice": {
          "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tools and instead generates a message. `auto` is the default value and means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantsApiToolChoiceOption",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateRunRequestTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        },
        "truncation_strategy": {
          "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TruncationObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateRunRequestTools": {
      "fields": {
        "file_search": {
          "description": "Overrides for the file search tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantToolsFileSearchFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "function": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of tool being defined: `function`",
          "type": {
            "name": "CreateRunRequestToolsTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateSpeechRequestInput": {
      "fields": {
        "input": {
          "description": "The text to generate audio for. The maximum length is 4096 characters.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 4096
          }
        },
        "model": {
          "description": "One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_format": {
          "description": "The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateSpeechRequestResponseFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "speed": {
          "description": "The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 4,
            "minimum": 0.25
          }
        },
        "voice": {
          "description": "The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).",
          "type": {
            "name": "CreateSpeechRequestVoice",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateThreadAndRunRequestInput": {
      "fields": {
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "instructions": {
          "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "max_completion_tokens": {
          "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 256
          }
        },
        "max_prompt_tokens": {
          "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 256
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parallel_tool_calls": {
          "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "response_format": {
          "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantsApiResponseFormatOption",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "stream": {
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": 0
          }
        },
        "thread": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequest",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tool_choice": {
          "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tools and instead generates a message. `auto` is the default value and means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantsApiToolChoiceOption",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "tool_resources": {
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadAndRunRequestToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tools": {
          "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateThreadAndRunRequestTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        },
        "truncation_strategy": {
          "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TruncationObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateThreadAndRunRequestToolResources": {
      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadAndRunRequestToolResourcesCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadAndRunRequestToolResourcesFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateThreadAndRunRequestToolResourcesCodeInterpreter": {
      "fields": {
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateThreadAndRunRequestToolResourcesFileSearch": {
      "fields": {
        "vector_store_ids": {
          "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateThreadAndRunRequestTools": {
      "fields": {
        "file_search": {
          "description": "Overrides for the file search tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantToolsFileSearchFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "function": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of tool being defined: `function`",
          "type": {
            "name": "CreateThreadAndRunRequestToolsTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateThreadRequest": {
      "fields": {
        "messages": {
          "description": "A list of [messages](/docs/api-reference/messages) to start the thread with.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateMessageRequest",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tool_resources": {
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateThreadRequestInput": {
      "fields": {
        "messages": {
          "description": "A list of [messages](/docs/api-reference/messages) to start the thread with.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateMessageRequest",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tool_resources": {
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateThreadRequestToolResources": {
      "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesCodeInterpreter": {
      "fields": {
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearch": {
      "fields": {
        "vector_store_ids": {
          "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_stores": {
          "description": "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateThreadRequestToolResourcesFileSearchVectorStores",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStores": {
      "fields": {
        "chunking_strategy": {
          "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategy": {
      "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
      "fields": {
        "static": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategy1Static",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Always `static`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategyTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategy1Static": {
      "fields": {
        "chunk_overlap_tokens": {
          "description": "The number of tokens that overlap between chunks. The default value is `400`.  Note that the overlap must not exceed half of `max_chunk_size_tokens`.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_chunk_size_tokens": {
          "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 4096,
            "minimum": 100
          }
        }
      }
    },
    "CreateTranscriptionRequestInput": {
      "fields": {
        "file": {
          "description": "The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        },
        "language": {
          "description": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "model": {
          "description": "ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prompt": {
          "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_format": {
          "description": "The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AudioResponseFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "temperature": {
          "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "timestamp_granularities[]": {
          "description": "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateTranscriptionRequestTimestampGranularities",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateTranscriptionResult": {
      "fields": {
        "duration": {
          "description": "The duration of the input audio.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "description": "The language of the input audio.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "segments": {
          "description": "Segments of the transcribed text and their corresponding details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TranscriptionSegment",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "text": {
          "description": "The transcribed text.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "words": {
          "description": "Extracted words and their corresponding timestamps.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TranscriptionWord",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "CreateTranslationRequestInput": {
      "fields": {
        "file": {
          "description": "The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        },
        "model": {
          "description": "ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prompt": {
          "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_format": {
          "description": "The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AudioResponseFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "temperature": {
          "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "CreateTranslationResult": {
      "fields": {
        "duration": {
          "description": "The duration of the input audio.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "description": "The language of the output translation (always `english`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "segments": {
          "description": "Segments of the translated text and their corresponding details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TranscriptionSegment",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "text": {
          "description": "The translated text.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateUploadRequestInput": {
      "fields": {
        "bytes": {
          "description": "The number of bytes in the file you are uploading.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "filename": {
          "description": "The name of the file to upload.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mime_type": {
          "description": "The MIME type of the file.  This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "purpose": {
          "description": "The intended purpose of the uploaded file.  See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).",
          "type": {
            "name": "CreateUploadRequestPurpose",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateVectorStoreFileBatchRequestInput": {
      "fields": {
        "chunking_strategy": {
          "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChunkingStrategyRequestParam",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_ids": {
          "description": "A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateVectorStoreFileRequestInput": {
      "fields": {
        "chunking_strategy": {
          "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChunkingStrategyRequestParam",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_id": {
          "description": "A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateVectorStoreRequestChunkingStrategy": {
      "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.",
      "fields": {
        "static": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StaticChunkingStrategy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Always `static`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateVectorStoreRequestChunkingStrategyTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CreateVectorStoreRequestInput": {
      "fields": {
        "chunking_strategy": {
          "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateVectorStoreRequestChunkingStrategy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "expires_after": {
          "description": "The expiration policy for a vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoreExpirationAfter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_ids": {
          "description": "A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeleteAssistantResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "DeleteAssistantResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeleteFileResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "DeleteFileResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeleteMessageResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "DeleteMessageResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeleteModelResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeleteThreadResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "DeleteThreadResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeleteVectorStoreFileResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "DeleteVectorStoreFileResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeleteVectorStoreResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "DeleteVectorStoreResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Embedding": {
      "description": "Represents an embedding vector returned by embedding endpoint.",
      "fields": {
        "embedding": {
          "description": "The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).",
          "type": {
            "element_type": {
              "name": "Float64",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "number"
              ]
            }
          }
        },
        "index": {
          "description": "The index of the embedding in the list of embeddings.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always \"embedding\".",
          "type": {
            "name": "EmbeddingObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FileSearchRankingOptions": {
      "description": "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.",
      "fields": {
        "ranker": {
          "description": "The ranker to use for the file search. If not specified will use the `auto` ranker.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileSearchRankingOptionsRanker",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "score_threshold": {
          "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        }
      }
    },
    "FineTuneDPOMethod": {
      "description": "Configuration for the DPO fine-tuning method.",
      "fields": {
        "hyperparameters": {
          "description": "The hyperparameters used for the fine-tuning job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuneDPOMethodHyperparameters",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "FineTuneDPOMethodHyperparameters": {
      "description": "The hyperparameters used for the fine-tuning job.",
      "fields": {
        "batch_size": {
          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "beta": {
          "description": "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "learning_rate_multiplier": {
          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "n_epochs": {
          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        }
      }
    },
    "FineTuneMethod": {
      "description": "The method used for fine-tuning.",
      "fields": {
        "dpo": {
          "description": "Configuration for the DPO fine-tuning method.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuneDPOMethod",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "supervised": {
          "description": "Configuration for the supervised fine-tuning method.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuneSupervisedMethod",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of method. Is either `supervised` or `dpo`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuneMethodType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FineTuneSupervisedMethod": {
      "description": "Configuration for the supervised fine-tuning method.",
      "fields": {
        "hyperparameters": {
          "description": "The hyperparameters used for the fine-tuning job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuneSupervisedMethodHyperparameters",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "FineTuneSupervisedMethodHyperparameters": {
      "description": "The hyperparameters used for the fine-tuning job.",
      "fields": {
        "batch_size": {
          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "learning_rate_multiplier": {
          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "n_epochs": {
          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        }
      }
    },
    "FineTuningIntegration": {
      "fields": {
        "type": {
          "description": "The type of the integration being enabled for the fine-tuning job",
          "type": {
            "name": "FineTuningIntegrationType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "wandb": {
          "description": "The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run.",
          "type": {
            "name": "FineTuningIntegrationWandb",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "FineTuningIntegrationWandb": {
      "description": "The settings for your integration with Weights and Biases. This payload specifies the project that metrics will be sent to. Optionally, you can set an explicit display name for your run, add tags to your run, and set a default entity (team, username, etc) to be associated with your run.",
      "fields": {
        "entity": {
          "description": "The entity to use for the run. This allows you to set the team or username of the WandB user that you would like associated with the run. If not set, the default entity for the registered WandB API key is used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "A display name to set for the run. If not set, we will use the Job ID as the name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "project": {
          "description": "The name of the project that the new run will be created under.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tags": {
          "description": "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some default tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "FineTuningJob": {
      "description": "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "error": {
          "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuningJobError",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "estimated_finish": {
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "fine_tuned_model": {
          "description": "The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "finished_at": {
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "hyperparameters": {
          "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
          "type": {
            "name": "FineTuningJobHyperparameters",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The object identifier, which can be referenced in the API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "integrations": {
          "description": "A list of integrations to enable for this fine-tuning job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "FineTuningIntegration",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "method": {
          "description": "The method used for fine-tuning.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuneMethod",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "The base model that is being fine-tuned.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always \"fine_tuning.job\".",
          "type": {
            "name": "FineTuningJobObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_id": {
          "description": "The organization that owns the fine-tuning job.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "result_files": {
          "description": "The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "seed": {
          "description": "The seed used for the fine-tuning job.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.",
          "type": {
            "name": "FineTuningJobStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "trained_tokens": {
          "description": "The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "training_file": {
          "description": "The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "validation_file": {
          "description": "The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FineTuningJobCheckpoint": {
      "description": "The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the checkpoint was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "fine_tuned_model_checkpoint": {
          "description": "The name of the fine-tuned checkpoint model that is created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fine_tuning_job_id": {
          "description": "The name of the fine-tuning job that this checkpoint was created from.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The checkpoint identifier, which can be referenced in the API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metrics": {
          "description": "Metrics at the step number during the fine-tuning job.",
          "type": {
            "name": "FineTuningJobCheckpointMetrics",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always \"fine_tuning.job.checkpoint\".",
          "type": {
            "name": "FineTuningJobCheckpointObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "step_number": {
          "description": "The step number that the checkpoint was created at.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "FineTuningJobCheckpointMetrics": {
      "description": "Metrics at the step number during the fine-tuning job.",
      "fields": {
        "full_valid_loss": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "full_valid_mean_token_accuracy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "step": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "train_loss": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "train_mean_token_accuracy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "valid_loss": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "valid_mean_token_accuracy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "FineTuningJobError": {
      "description": "For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.",
      "fields": {
        "code": {
          "description": "A machine-readable error code.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "A human-readable error message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "param": {
          "description": "The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FineTuningJobEvent": {
      "description": "Fine-tuning job event object",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the fine-tuning job was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "data": {
          "description": "The data associated with the event.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The object identifier.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "level": {
          "description": "The log level of the event.",
          "type": {
            "name": "FineTuningJobEventLevel",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "The message of the event.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always \"fine_tuning.job.event\".",
          "type": {
            "name": "FineTuningJobEventObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of event.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FineTuningJobEventType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FineTuningJobHyperparameters": {
      "description": "The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.",
      "fields": {
        "batch_size": {
          "description": "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "learning_rate_multiplier": {
          "description": "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "n_epochs": {
          "description": "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        }
      }
    },
    "FunctionObject": {
      "fields": {
        "description": {
          "description": "A description of what the function does, used by the model to choose when and how to call the function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parameters": {
          "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "strict": {
          "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "Invite": {
      "description": "Represents an individual `invite` to the organization.",
      "fields": {
        "accepted_at": {
          "description": "The Unix timestamp (in seconds) of when the invite was accepted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address of the individual to whom the invite was sent",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) of when the invite expires.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "invited_at": {
          "description": "The Unix timestamp (in seconds) of when the invite was sent.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.invite`",
          "type": {
            "name": "InviteObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "projects": {
          "description": "The projects that were granted membership upon acceptance of the invite.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "InviteProjects",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "role": {
          "description": "`owner` or `reader`",
          "type": {
            "name": "InviteRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "`accepted`,`expired`, or `pending`",
          "type": {
            "name": "InviteStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InviteDeleteResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.invite.deleted`",
          "type": {
            "name": "InviteDeleteResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InviteListResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "Invite",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "description": "The first `invite_id` in the retrieved `list`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "description": "The `has_more` property is used for pagination to indicate there are additional results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "description": "The last `invite_id` in the retrieved `list`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `list`",
          "type": {
            "name": "InviteListResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InviteProjects": {
      "fields": {
        "id": {
          "description": "Project's public ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Project membership role",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InviteProjectsRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InviteRequestInput": {
      "fields": {
        "email": {
          "description": "Send an email to this address",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "projects": {
          "description": "An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "InviteRequestProjects",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "role": {
          "description": "`owner` or `reader`",
          "type": {
            "name": "InviteRequestRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InviteRequestProjects": {
      "fields": {
        "id": {
          "description": "Project's public ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Project membership role",
          "type": {
            "name": "InviteRequestProjectsRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListAssistantsResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "AssistantObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListAuditLogsEffectiveAtInput": {
      "fields": {
        "gt": {
          "description": "Return only events whose `effective_at` (Unix seconds) is greater than this value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "gte": {
          "description": "Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "lt": {
          "description": "Return only events whose `effective_at` (Unix seconds) is less than this value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "lte": {
          "description": "Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ListAuditLogsResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "AuditLog",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ListAuditLogsResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListBatchesResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "Batch",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ListBatchesResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListFilesResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "OpenAIFile",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListFineTuningJobCheckpointsResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "FineTuningJobCheckpoint",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ListFineTuningJobCheckpointsResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListFineTuningJobEventsResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "FineTuningJobEvent",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ListFineTuningJobEventsResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListModelsResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "Model",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ListModelsResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListPaginatedFineTuningJobsResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "FineTuningJob",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ListPaginatedFineTuningJobsResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListRunsResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "RunObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageContentImageFileObjectImageFile": {
      "fields": {
        "detail": {
          "description": "Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentImageFileObjectImageFileDetail",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "file_id": {
          "description": "The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose=\"vision\"` when uploading the File if you need to later display the file content.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageContentImageUrlObjectImageUrl": {
      "fields": {
        "detail": {
          "description": "Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentImageUrlObjectImageUrlDetail",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "MessageContentTextAnnotationsFileCitationObjectFileCitation": {
      "fields": {
        "file_id": {
          "description": "The ID of the specific File the citation is from.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageContentTextAnnotationsFilePathObjectFilePath": {
      "fields": {
        "file_id": {
          "description": "The ID of the file that was generated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageContentTextObjectText": {
      "fields": {
        "annotations": {
          "type": {
            "element_type": {
              "name": "MessageContentTextObjectTextAnnotations",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "value": {
          "description": "The data that makes up the text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageContentTextObjectTextAnnotations": {
      "fields": {
        "end_index": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        },
        "file_citation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentTextAnnotationsFileCitationObjectFileCitation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentTextAnnotationsFilePathObjectFilePath",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "start_index": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        },
        "text": {
          "description": "The text in the message content that needs to be replaced.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Always `file_path`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentTextObjectTextAnnotationsTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageObject": {
      "description": "Represents a message within a [thread](/docs/api-reference/threads).",
      "fields": {
        "assistant_id": {
          "description": "If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "attachments": {
          "description": "A list of files attached to the message, and the tools they were added to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "MessageObjectAttachments",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the message was completed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "content": {
          "description": "The content of the message in array of text and/or images.",
          "type": {
            "element_type": {
              "name": "MessageObjectContent",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the message was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "incomplete_at": {
          "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "incomplete_details": {
          "description": "On an incomplete message, details about why the message is incomplete.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageObjectIncompleteDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `thread.message`.",
          "type": {
            "name": "MessageObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "The entity that produced the message. One of `user` or `assistant`.",
          "type": {
            "name": "MessageObjectRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "run_id": {
          "description": "The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.",
          "type": {
            "name": "MessageObjectStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "thread_id": {
          "description": "The [thread](/docs/api-reference/threads) ID that this message belongs to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageObjectAttachments": {
      "fields": {
        "file_id": {
          "description": "The ID of the file to attach to the message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tools": {
          "description": "The tools to add this file to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "MessageObjectAttachmentsTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "MessageObjectAttachmentsTools": {
      "fields": {
        "type": {
          "description": "The type of tool being defined: `file_search`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageObjectAttachmentsToolsTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageObjectContent": {
      "fields": {
        "image_file": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentImageFileObjectImageFile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "image_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentImageUrlObjectImageUrl",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "refusal": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageContentTextObjectText",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Always `refusal`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MessageObjectContentTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MessageObjectIncompleteDetails": {
      "description": "On an incomplete message, details about why the message is incomplete.",
      "fields": {
        "reason": {
          "description": "The reason the message is incomplete.",
          "type": {
            "name": "MessageObjectIncompleteDetailsReason",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ModifyAssistantRequestInput": {
      "fields": {
        "description": {
          "description": "The description of the assistant. The maximum length is 512 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 512
          }
        },
        "instructions": {
          "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256000
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the assistant. The maximum length is 256 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256
          }
        },
        "response_format": {
          "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantsApiResponseFormatOption",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "temperature": {
          "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 2,
            "minimum": 0
          }
        },
        "tool_resources": {
          "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ModifyAssistantRequestToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tools": {
          "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ModifyAssistantRequestTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "top_p": {
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        }
      }
    },
    "ModifyAssistantRequestToolResources": {
      "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ModifyAssistantRequestToolResourcesCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ModifyAssistantRequestToolResourcesFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ModifyAssistantRequestToolResourcesCodeInterpreter": {
      "fields": {
        "file_ids": {
          "description": "Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ModifyAssistantRequestToolResourcesFileSearch": {
      "fields": {
        "vector_store_ids": {
          "description": "Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ModifyAssistantRequestTools": {
      "fields": {
        "file_search": {
          "description": "Overrides for the file search tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantToolsFileSearchFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "function": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of tool being defined: `function`",
          "type": {
            "name": "ModifyAssistantRequestToolsTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ModifyMessageRequestInput": {
      "fields": {
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ModifyRunRequestInput": {
      "fields": {
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ModifyThreadRequestInput": {
      "fields": {
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tool_resources": {
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ModifyThreadRequestToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ModifyThreadRequestToolResources": {
      "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ModifyThreadRequestToolResourcesCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ModifyThreadRequestToolResourcesFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ModifyThreadRequestToolResourcesCodeInterpreter": {
      "fields": {
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ModifyThreadRequestToolResourcesFileSearch": {
      "fields": {
        "vector_store_ids": {
          "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PredictionContent": {
      "description": "Static predicted output content, such as the content of a text file that is being regenerated.",
      "fields": {
        "content": {
          "description": "The content that should be matched when generating a model response. If generated tokens would match this content, the entire model response can be returned much more quickly.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "type": {
          "description": "The type of the predicted content you want to provide. This type is currently always `content`.",
          "type": {
            "name": "PredictionContentType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Project": {
      "description": "Represents an individual project.",
      "fields": {
        "archived_at": {
          "description": "The Unix timestamp (in seconds) of when the project was archived or `null`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) of when the project was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the project. This appears in reporting.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.project`",
          "type": {
            "name": "ProjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "`active` or `archived`",
          "type": {
            "name": "ProjectStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectApiKey": {
      "description": "Represents an individual API key in a project.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) of when the API key was created",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the API key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.project.api_key`",
          "type": {
            "name": "ProjectApiKeyObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "type": {
            "name": "ProjectApiKeyOwner",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "redacted_value": {
          "description": "The redacted value of the API key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectApiKeyDeleteResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectApiKeyDeleteResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectApiKeyListResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "ProjectApiKey",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectApiKeyListResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectApiKeyOwner": {
      "fields": {
        "service_account": {
          "description": "Represents an individual service account in a project.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectServiceAccount",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "`user` or `service_account`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectApiKeyOwnerType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "Represents an individual user in a project.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ProjectCreateRequestInput": {
      "fields": {
        "name": {
          "description": "The friendly name of the project, this name appears in reports.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectListResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "Project",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectListResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectRateLimit": {
      "description": "Represents a project rate limit config.",
      "fields": {
        "batch_1_day_max_input_tokens": {
          "description": "The maximum batch input tokens per day. Only present for relevant models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "max_audio_megabytes_per_1_minute": {
          "description": "The maximum audio megabytes per minute. Only present for relevant models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_images_per_1_minute": {
          "description": "The maximum images per minute. Only present for relevant models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_requests_per_1_day": {
          "description": "The maximum requests per day. Only present for relevant models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_requests_per_1_minute": {
          "description": "The maximum requests per minute.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_tokens_per_1_minute": {
          "description": "The maximum tokens per minute.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "model": {
          "description": "The model this rate limit applies to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `project.rate_limit`",
          "type": {
            "name": "ProjectRateLimitObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectRateLimitListResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "ProjectRateLimit",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectRateLimitListResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectRateLimitUpdateRequestInput": {
      "fields": {
        "batch_1_day_max_input_tokens": {
          "description": "The maximum batch input tokens per day. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_audio_megabytes_per_1_minute": {
          "description": "The maximum audio megabytes per minute. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_images_per_1_minute": {
          "description": "The maximum images per minute. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_requests_per_1_day": {
          "description": "The maximum requests per day. Only relevant for certain models.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_requests_per_1_minute": {
          "description": "The maximum requests per minute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_tokens_per_1_minute": {
          "description": "The maximum tokens per minute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ProjectServiceAccount": {
      "description": "Represents an individual service account in a project.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) of when the service account was created",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the service account",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.project.service_account`",
          "type": {
            "name": "ProjectServiceAccountObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "`owner` or `member`",
          "type": {
            "name": "ProjectServiceAccountRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectServiceAccountApiKey": {
      "fields": {
        "created_at": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.project.service_account.api_key`",
          "type": {
            "name": "ProjectServiceAccountApiKeyObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectServiceAccountCreateRequestInput": {
      "fields": {
        "name": {
          "description": "The name of the service account being created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectServiceAccountCreateResponse": {
      "fields": {
        "api_key": {
          "type": {
            "name": "ProjectServiceAccountApiKey",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectServiceAccountCreateResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Service accounts can only have one role of type `member`",
          "type": {
            "name": "ProjectServiceAccountCreateResponseRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectServiceAccountDeleteResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectServiceAccountDeleteResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectServiceAccountListResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "ProjectServiceAccount",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectServiceAccountListResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectUpdateRequestInput": {
      "fields": {
        "name": {
          "description": "The updated name of the project, this name appears in reports.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectUser": {
      "description": "Represents an individual user in a project.",
      "fields": {
        "added_at": {
          "description": "The Unix timestamp (in seconds) of when the project was added.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.project.user`",
          "type": {
            "name": "ProjectUserObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "`owner` or `member`",
          "type": {
            "name": "ProjectUserRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectUserCreateRequestInput": {
      "fields": {
        "role": {
          "description": "`owner` or `member`",
          "type": {
            "name": "ProjectUserCreateRequestRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "description": "The ID of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectUserDeleteResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "ProjectUserDeleteResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectUserListResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "ProjectUser",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectUserUpdateRequestInput": {
      "fields": {
        "role": {
          "description": "`owner` or `member`",
          "type": {
            "name": "ProjectUserUpdateRequestRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateRequestInput": {
      "description": "Realtime session object configuration.",
      "fields": {
        "input_audio_format": {
          "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateRequestInputAudioFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "input_audio_transcription": {
          "description": "Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native  to the model, since the model consumes audio directly. Transcription runs  asynchronously through Whisper and should be treated as rough guidance  rather than the representation understood by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateRequestInputAudioTranscription",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "instructions": {
          "description": "The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good  responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion  into your voice\", \"laugh frequently\"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the  desired behavior.  Note that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "max_response_output_tokens": {
          "description": "Maximum number of output tokens for a single assistant response, inclusive of tool calls. Provide an integer between 1 and 4096 to limit output tokens, or `inf` for the maximum available tokens for a given model. Defaults to `inf`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "modalities": {
          "description": "The set of modalities the model can respond with. To disable audio, set this to [\"text\"].",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": null
          }
        },
        "model": {
          "description": "The Realtime model used for this session.",
          "type": {
            "name": "RealtimeSessionCreateRequestModel",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "output_audio_format": {
          "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateRequestOutputAudioFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "temperature": {
          "description": "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "tool_choice": {
          "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or  specify a function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tools": {
          "description": "Tools (functions) available to the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RealtimeSessionCreateRequestTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "turn_detection": {
          "description": "Configuration for turn detection. Can be set to `null` to turn off. Server  VAD means that the model will detect the start and end of speech based on  audio volume and respond at the end of user speech.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateRequestTurnDetection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "voice": {
          "description": "The voice the model uses to respond. Voice cannot be changed during the  session once the model has responded with audio at least once. Current  voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`,  `shimmer` and `verse`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateRequestVoice",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateRequestInputAudioTranscription": {
      "description": "Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native  to the model, since the model consumes audio directly. Transcription runs  asynchronously through Whisper and should be treated as rough guidance  rather than the representation understood by the model.",
      "fields": {
        "model": {
          "description": "The model to use for transcription, `whisper-1` is the only currently  supported model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateRequestTools": {
      "fields": {
        "description": {
          "description": "The description of the function, including guidance on when and how  to call it, and guidance about what to tell the user when calling  (if anything).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parameters": {
          "description": "Parameters of the function in JSON Schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of the tool, i.e. `function`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateRequestToolsType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateRequestTurnDetection": {
      "description": "Configuration for turn detection. Can be set to `null` to turn off. Server  VAD means that the model will detect the start and end of speech based on  audio volume and respond at the end of user speech.",
      "fields": {
        "create_response": {
          "description": "Whether or not to automatically generate a response when VAD is enabled. `true` by default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "prefix_padding_ms": {
          "description": "Amount of audio to include before the VAD detected speech (in  milliseconds). Defaults to 300ms.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "silence_duration_ms": {
          "description": "Duration of silence to detect speech stop (in milliseconds). Defaults  to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "threshold": {
          "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A  higher threshold will require louder audio to activate the model, and  thus might perform better in noisy environments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "type": {
          "description": "Type of turn detection, only `server_vad` is currently supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateResponse": {
      "description": "A new Realtime session configuration, with an ephermeral key. Default TTL for keys is one minute.",
      "fields": {
        "client_secret": {
          "description": "Ephemeral key returned by the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateResponseClientSecret",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "input_audio_format": {
          "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "input_audio_transcription": {
          "description": "Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native  to the model, since the model consumes audio directly. Transcription runs  asynchronously through Whisper and should be treated as rough guidance  rather than the representation understood by the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateResponseInputAudioTranscription",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "instructions": {
          "description": "The default system instructions (i.e. system message) prepended to model  calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format,  (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good  responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion  into your voice\", \"laugh frequently\"). The instructions are not guaranteed  to be followed by the model, but they provide guidance to the model on the  desired behavior.  Note that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "max_response_output_tokens": {
          "description": "Maximum number of output tokens for a single assistant response, inclusive of tool calls. Provide an integer between 1 and 4096 to limit output tokens, or `inf` for the maximum available tokens for a given model. Defaults to `inf`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        },
        "modalities": {
          "description": "The set of modalities the model can respond with. To disable audio, set this to [\"text\"].",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": null
          }
        },
        "output_audio_format": {
          "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "temperature": {
          "description": "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "tool_choice": {
          "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or  specify a function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tools": {
          "description": "Tools (functions) available to the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RealtimeSessionCreateResponseTools",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "turn_detection": {
          "description": "Configuration for turn detection. Can be set to `null` to turn off. Server  VAD means that the model will detect the start and end of speech based on  audio volume and respond at the end of user speech.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateResponseTurnDetection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "voice": {
          "description": "The voice the model uses to respond. Voice cannot be changed during the  session once the model has responded with audio at least once. Current  voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`,  `shimmer` and `verse`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateResponseVoice",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateResponseClientSecret": {
      "description": "Ephemeral key returned by the API.",
      "fields": {
        "expires_at": {
          "description": "Timestamp for when the token expires. Currently, all tokens expire after one minute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "value": {
          "description": "Ephemeral key usable in client environments to authenticate connections to the Realtime API. Use this in client-side environments rather than a standard API token, which should only be used server-side.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateResponseInputAudioTranscription": {
      "description": "Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native  to the model, since the model consumes audio directly. Transcription runs  asynchronously through Whisper and should be treated as rough guidance  rather than the representation understood by the model.",
      "fields": {
        "model": {
          "description": "The model to use for transcription, `whisper-1` is the only currently  supported model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateResponseTools": {
      "fields": {
        "description": {
          "description": "The description of the function, including guidance on when and how  to call it, and guidance about what to tell the user when calling  (if anything).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parameters": {
          "description": "Parameters of the function in JSON Schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of the tool, i.e. `function`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealtimeSessionCreateResponseToolsType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealtimeSessionCreateResponseTurnDetection": {
      "description": "Configuration for turn detection. Can be set to `null` to turn off. Server  VAD means that the model will detect the start and end of speech based on  audio volume and respond at the end of user speech.",
      "fields": {
        "prefix_padding_ms": {
          "description": "Amount of audio to include before the VAD detected speech (in  milliseconds). Defaults to 300ms.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "silence_duration_ms": {
          "description": "Duration of silence to detect speech stop (in milliseconds). Defaults  to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "threshold": {
          "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A  higher threshold will require louder audio to activate the model, and  thus might perform better in noisy environments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "type": {
          "description": "Type of turn detection, only `server_vad` is currently supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ResponseFormatJsonSchemaJsonSchema": {
      "fields": {
        "description": {
          "description": "A description of what the response format is for, used by the model to determine how to respond in the format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "schema": {
          "description": "The schema for the response format, described as a JSON Schema object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "strict": {
          "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "RunCompletionUsage": {
      "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
      "fields": {
        "completion_tokens": {
          "description": "Number of completion tokens used over the course of the run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "prompt_tokens": {
          "description": "Number of prompt tokens used over the course of the run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_tokens": {
          "description": "Total number of tokens used (prompt + completion).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "RunObject": {
      "description": "Represents an execution run on a [thread](/docs/api-reference/threads).",
      "fields": {
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cancelled_at": {
          "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the run was completed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the run was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when the run will expire.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "failed_at": {
          "description": "The Unix timestamp (in seconds) for when the run failed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "incomplete_details": {
          "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunObjectIncompleteDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "instructions": {
          "description": "The instructions that the [assistant](/docs/api-reference/assistants) used for this run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_error": {
          "description": "The last error associated with this run. Will be `null` if there are no errors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunObjectLastError",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "max_completion_tokens": {
          "description": "The maximum number of completion tokens specified to have been used over the course of the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 256
          }
        },
        "max_prompt_tokens": {
          "description": "The maximum number of prompt tokens specified to have been used over the course of the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 256
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "model": {
          "description": "The model that the [assistant](/docs/api-reference/assistants) used for this run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `thread.run`.",
          "type": {
            "name": "RunObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parallel_tool_calls": {
          "description": "Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_action": {
          "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunObjectRequiredAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "response_format": {
          "description": "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "started_at": {
          "description": "The Unix timestamp (in seconds) for when the run was started.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.",
          "type": {
            "name": "RunObjectStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "temperature": {
          "description": "The sampling temperature used for this run. If not set, defaults to 1.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool_choice": {
          "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tools and instead generates a message. `auto` is the default value and means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": []
          }
        },
        "tools": {
          "description": "The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.",
          "type": {
            "element_type": {
              "name": "RunObjectTools",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "top_p": {
          "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "truncation_strategy": {
          "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
          "type": {
            "name": "TruncationObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "usage": {
          "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunCompletionUsage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "RunObjectIncompleteDetails": {
      "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
      "fields": {
        "reason": {
          "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunObjectIncompleteDetailsReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunObjectLastError": {
      "description": "The last error associated with this run. Will be `null` if there are no errors.",
      "fields": {
        "code": {
          "description": "One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.",
          "type": {
            "name": "RunObjectLastErrorCode",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "A human-readable description of the error.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunObjectRequiredAction": {
      "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
      "fields": {
        "submit_tool_outputs": {
          "description": "Details on the tool outputs needed for this run to continue.",
          "type": {
            "name": "RunObjectRequiredActionSubmitToolOutputs",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "For now, this is always `submit_tool_outputs`.",
          "type": {
            "name": "RunObjectRequiredActionType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunObjectRequiredActionSubmitToolOutputs": {
      "description": "Details on the tool outputs needed for this run to continue.",
      "fields": {
        "tool_calls": {
          "description": "A list of the relevant tool calls.",
          "type": {
            "element_type": {
              "name": "RunToolCallObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "RunObjectTools": {
      "fields": {
        "file_search": {
          "description": "Overrides for the file search tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssistantToolsFileSearchFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "function": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FunctionObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of tool being defined: `function`",
          "type": {
            "name": "RunObjectToolsTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepCompletionUsage": {
      "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
      "fields": {
        "completion_tokens": {
          "description": "Number of completion tokens used over the course of the run step.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "prompt_tokens": {
          "description": "Number of prompt tokens used over the course of the run step.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_tokens": {
          "description": "Total number of tokens used (prompt + completion).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "RunStepDetailsMessageCreationObjectMessageCreation": {
      "fields": {
        "message_id": {
          "description": "The ID of the message that was created by this run step.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepDetailsToolCallsCodeObjectCodeInterpreter": {
      "description": "The Code Interpreter tool call definition.",
      "fields": {
        "input": {
          "description": "The input to the Code Interpreter tool call.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "outputs": {
          "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.",
          "type": {
            "element_type": {
              "name": "RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputs",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputs": {
      "fields": {
        "image": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsToolCallsCodeOutputImageObjectImage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logs": {
          "description": "The text output from the Code Interpreter tool call.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Always `image`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepDetailsToolCallsCodeOutputImageObjectImage": {
      "fields": {
        "file_id": {
          "description": "The [file](/docs/api-reference/files) ID of the image.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepDetailsToolCallsFileSearchObjectFileSearch": {
      "description": "For now, this is always going to be an empty object.",
      "fields": {
        "ranking_options": {
          "description": "The ranking options for the file search.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsToolCallsFileSearchRankingOptionsObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "results": {
          "description": "The results of the file search.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RunStepDetailsToolCallsFileSearchResultObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "RunStepDetailsToolCallsFileSearchRankingOptionsObject": {
      "description": "The ranking options for the file search.",
      "fields": {
        "ranker": {
          "description": "The ranker used for the file search.",
          "type": {
            "name": "RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "score_threshold": {
          "description": "The score threshold for the file search. All values must be a floating point number between 0 and 1.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        }
      }
    },
    "RunStepDetailsToolCallsFileSearchResultObject": {
      "description": "A result instance of the file search.",
      "fields": {
        "content": {
          "description": "The content of the result that was found. The content is only included if requested via the include query parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RunStepDetailsToolCallsFileSearchResultObjectContent",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "file_id": {
          "description": "The ID of the file that result was found in.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "file_name": {
          "description": "The name of the file that result was found in.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "score": {
          "description": "The score of the result. All values must be a floating point number between 0 and 1.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 1,
            "minimum": 0
          }
        }
      }
    },
    "RunStepDetailsToolCallsFileSearchResultObjectContent": {
      "fields": {
        "text": {
          "description": "The text content of the file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of the content.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsToolCallsFileSearchResultObjectContentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepDetailsToolCallsFunctionObjectFunction": {
      "description": "The definition of the function that was called.",
      "fields": {
        "arguments": {
          "description": "The arguments passed to the function.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "output": {
          "description": "The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepDetailsToolCallsObjectToolCalls": {
      "fields": {
        "code_interpreter": {
          "description": "The Code Interpreter tool call definition.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsToolCallsCodeObjectCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "description": "For now, this is always going to be an empty object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsToolCallsFileSearchObjectFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "function": {
          "description": "The definition of the function that was called.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsToolCallsFunctionObjectFunction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The ID of the tool call object.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
          "type": {
            "name": "RunStepDetailsToolCallsObjectToolCallsTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepObject": {
      "description": "Represents a step in execution of a run.",
      "fields": {
        "assistant_id": {
          "description": "The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cancelled_at": {
          "description": "The Unix timestamp (in seconds) for when the run step was cancelled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "completed_at": {
          "description": "The Unix timestamp (in seconds) for when the run step completed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the run step was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "expired_at": {
          "description": "The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "failed_at": {
          "description": "The Unix timestamp (in seconds) for when the run step failed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier of the run step, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_error": {
          "description": "The last error associated with this run step. Will be `null` if there are no errors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepObjectLastError",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `thread.run.step`.",
          "type": {
            "name": "RunStepObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "run_id": {
          "description": "The ID of the [run](/docs/api-reference/runs) that this run step is a part of.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.",
          "type": {
            "name": "RunStepObjectStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "step_details": {
          "description": "The details of the run step.",
          "type": {
            "name": "RunStepObjectStepDetails",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of run step, which can be either `message_creation` or `tool_calls`.",
          "type": {
            "name": "RunStepObjectType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage": {
          "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepCompletionUsage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "RunStepObjectLastError": {
      "description": "The last error associated with this run step. Will be `null` if there are no errors.",
      "fields": {
        "code": {
          "description": "One of `server_error` or `rate_limit_exceeded`.",
          "type": {
            "name": "RunStepObjectLastErrorCode",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "A human-readable description of the error.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunStepObjectStepDetails": {
      "description": "The details of the run step.",
      "fields": {
        "message_creation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepDetailsMessageCreationObjectMessageCreation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tool_calls": {
          "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RunStepDetailsToolCallsObjectToolCalls",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "description": "Always `tool_calls`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunStepObjectStepDetailsTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunToolCallObject": {
      "description": "Tool call objects",
      "fields": {
        "function": {
          "description": "The function definition.",
          "type": {
            "name": "RunToolCallObjectFunction",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of tool call the output is required for. For now, this is always `function`.",
          "type": {
            "name": "RunToolCallObjectType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RunToolCallObjectFunction": {
      "description": "The function definition.",
      "fields": {
        "arguments": {
          "description": "The arguments that the model expects you to pass to the function.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the function.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "StaticChunkingStrategy": {
      "fields": {
        "chunk_overlap_tokens": {
          "description": "The number of tokens that overlap between chunks. The default value is `400`.  Note that the overlap must not exceed half of `max_chunk_size_tokens`.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "max_chunk_size_tokens": {
          "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 4096,
            "minimum": 100
          }
        }
      }
    },
    "SubmitToolOutputsRunRequestInput": {
      "fields": {
        "stream": {
          "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "tool_outputs": {
          "description": "A list of tools for which the outputs are being submitted.",
          "type": {
            "element_type": {
              "name": "SubmitToolOutputsRunRequestToolOutputs",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "SubmitToolOutputsRunRequestToolOutputs": {
      "fields": {
        "output": {
          "description": "The output of the tool call to be submitted to continue the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool_call_id": {
          "description": "The ID of the tool call in the `required_action` object within the run object the output is being submitted for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ThreadObject": {
      "description": "Represents a thread that contains [messages](/docs/api-reference/messages).",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the thread was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `thread`.",
          "type": {
            "name": "ThreadObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool_resources": {
          "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ThreadObjectToolResources",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ThreadObjectToolResources": {
      "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.",
      "fields": {
        "code_interpreter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ThreadObjectToolResourcesCodeInterpreter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "file_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ThreadObjectToolResourcesFileSearch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ThreadObjectToolResourcesCodeInterpreter": {
      "fields": {
        "file_ids": {
          "description": "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ThreadObjectToolResourcesFileSearch": {
      "fields": {
        "vector_store_ids": {
          "description": "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "TranscriptionSegment": {
      "fields": {
        "avg_logprob": {
          "description": "Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "compression_ratio": {
          "description": "Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "end": {
          "description": "End time of the segment in seconds.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "id": {
          "description": "Unique identifier of the segment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "no_speech_prob": {
          "description": "Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "seek": {
          "description": "Seek offset of the segment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "start": {
          "description": "Start time of the segment in seconds.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "temperature": {
          "description": "Temperature parameter used for generating the segment.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "text": {
          "description": "Text content of the segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tokens": {
          "description": "Array of token IDs for the text content.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "TranscriptionWord": {
      "fields": {
        "end": {
          "description": "End time of the word in seconds.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "start": {
          "description": "Start time of the word in seconds.",
          "type": {
            "name": "Float32",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "float"
          }
        },
        "word": {
          "description": "The text content of the word.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TruncationObject": {
      "description": "Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.",
      "fields": {
        "last_messages": {
          "description": "The number of most recent messages from the thread when constructing the context for the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 1
          }
        },
        "type": {
          "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
          "type": {
            "name": "TruncationObjectType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UpdateVectorStoreRequestInput": {
      "fields": {
        "expires_after": {
          "description": "The expiration policy for a vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoreExpirationAfter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Upload": {
      "description": "The Upload object can accept byte chunks in the form of Parts.",
      "fields": {
        "bytes": {
          "description": "The intended number of bytes to be uploaded.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the Upload was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when the Upload was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "file": {
          "description": "The `File` object represents a document that has been uploaded to OpenAI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OpenAIFile",
              "type": "named"
            }
          },
          "http": {
            "type": null
          }
        },
        "filename": {
          "description": "The name of the file to be uploaded.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The Upload unique identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always \"upload\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "purpose": {
          "description": "The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the Upload.",
          "type": {
            "name": "UploadStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UploadPart": {
      "description": "The upload Part represents a chunk of bytes we can add to an Upload object.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the Part was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The upload Part unique identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `upload.part`.",
          "type": {
            "name": "UploadPartObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "upload_id": {
          "description": "The ID of the Upload object that this Part was added to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsageResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "UsageTimeBucket",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "next_page": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "UsageResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsageTimeBucket": {
      "fields": {
        "end_time": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "object": {
          "type": {
            "name": "UsageTimeBucketObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "result": {
          "type": {
            "element_type": {
              "name": "UsageTimeBucketResult",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "start_time": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "UsageTimeBucketResult": {
      "fields": {
        "amount": {
          "description": "The monetary value in its associated currency.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CostsResultAmount",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "api_key_id": {
          "description": "When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "batch": {
          "description": "When `group_by=batch`, this field tells whether the grouped usage result is batch or not.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "characters": {
          "description": "The number of characters processed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "images": {
          "description": "The number of images processed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "input_audio_tokens": {
          "description": "The aggregated number of audio input tokens used, including cached tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "input_cached_tokens": {
          "description": "The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "input_tokens": {
          "description": "The aggregated number of input tokens used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "line_item": {
          "description": "When `group_by=line_item`, this field provides the line item of the grouped costs result.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "model": {
          "description": "When `group_by=model`, this field provides the model name of the grouped usage result.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "num_model_requests": {
          "description": "The count of requests made to the model.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "object": {
          "type": {
            "name": "UsageTimeBucketResultObjectEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "output_audio_tokens": {
          "description": "The aggregated number of audio output tokens used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "output_tokens": {
          "description": "The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "project_id": {
          "description": "When `group_by=project_id`, this field provides the project ID of the grouped costs result.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "seconds": {
          "description": "The number of seconds processed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "sessions": {
          "description": "The number of code interpreter sessions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "size": {
          "description": "When `group_by=size`, this field provides the image size of the grouped usage result.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "description": "When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage_bytes": {
          "description": "The vector stores usage in bytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "user_id": {
          "description": "When `group_by=user_id`, this field provides the user ID of the grouped usage result.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "User": {
      "description": "Represents an individual `user` within an organization.",
      "fields": {
        "added_at": {
          "description": "The Unix timestamp (in seconds) of when the user was added.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `organization.user`",
          "type": {
            "name": "UserObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "`owner` or `reader`",
          "type": {
            "name": "UserRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserDeleteResponse": {
      "fields": {
        "deleted": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "UserDeleteResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserListResponse": {
      "fields": {
        "data": {
          "type": {
            "element_type": {
              "name": "User",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "first_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_more": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "UserListResponseObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserRoleUpdateRequestInput": {
      "fields": {
        "role": {
          "description": "`owner` or `reader`",
          "type": {
            "name": "UserRoleUpdateRequestRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "VectorStoreExpirationAfter": {
      "description": "The expiration policy for a vector store.",
      "fields": {
        "anchor": {
          "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
          "type": {
            "name": "VectorStoreExpirationAfterAnchor",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "days": {
          "description": "The number of days after the anchor time that the vector store will expire.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 365,
            "minimum": 1
          }
        }
      }
    },
    "VectorStoreFileBatchObject": {
      "description": "A batch of files attached to a vector store.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store files batch was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "file_counts": {
          "type": {
            "name": "VectorStoreFileBatchObjectFileCounts",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `vector_store.file_batch`.",
          "type": {
            "name": "VectorStoreFileBatchObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.",
          "type": {
            "name": "VectorStoreFileBatchObjectStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vector_store_id": {
          "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "VectorStoreFileBatchObjectFileCounts": {
      "fields": {
        "cancelled": {
          "description": "The number of files that where cancelled.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "completed": {
          "description": "The number of files that have been processed.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "failed": {
          "description": "The number of files that have failed to process.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "in_progress": {
          "description": "The number of files that are currently being processed.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "description": "The total number of files.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "VectorStoreFileObject": {
      "description": "A list of files attached to a vector store.",
      "fields": {
        "chunking_strategy": {
          "description": "The strategy used to chunk the file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoreFileObjectChunkingStrategy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store file was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_error": {
          "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoreFileObjectLastError",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `vector_store.file`.",
          "type": {
            "name": "VectorStoreFileObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
          "type": {
            "name": "VectorStoreFileObjectStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage_bytes": {
          "description": "The total vector store usage in bytes. Note that this may be different from the original file size.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "vector_store_id": {
          "description": "The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "VectorStoreFileObjectChunkingStrategy": {
      "description": "The strategy used to chunk the file.",
      "fields": {
        "static": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StaticChunkingStrategy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Always `other`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoreFileObjectChunkingStrategyTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "VectorStoreFileObjectLastError": {
      "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
      "fields": {
        "code": {
          "description": "One of `server_error` or `rate_limit_exceeded`.",
          "type": {
            "name": "VectorStoreFileObjectLastErrorCode",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "A human-readable description of the error.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "VectorStoreObject": {
      "description": "A vector store is a collection of processed files can be used by the `file_search` tool.",
      "fields": {
        "created_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "expires_after": {
          "description": "The expiration policy for a vector store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VectorStoreExpirationAfter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "expires_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "file_counts": {
          "type": {
            "name": "VectorStoreObjectFileCounts",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The identifier, which can be referenced in API endpoints.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_active_at": {
          "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "metadata": {
          "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the vector store.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The object type, which is always `vector_store`.",
          "type": {
            "name": "VectorStoreObjectObject",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.",
          "type": {
            "name": "VectorStoreObjectStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage_bytes": {
          "description": "The total number of bytes used by the files in the vector store.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "VectorStoreObjectFileCounts": {
      "fields": {
        "cancelled": {
          "description": "The number of files that were cancelled.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "completed": {
          "description": "The number of files that have been successfully processed.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "failed": {
          "description": "The number of files that have failed to process.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "in_progress": {
          "description": "The number of files that are currently being processed.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "description": "The total number of files.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    }
  },
  "procedures": {
    "addUploadPart": {
      "request": {
        "url": "/uploads/{upload_id}/parts",
        "method": "post",
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /uploads/{upload_id}/parts",
          "type": {
            "name": "AddUploadPartRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "upload_id": {
          "description": "The ID of the Upload.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "upload_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload.   Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.  It is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).",
      "result_type": {
        "name": "UploadPart",
        "type": "named"
      }
    },
    "admin_api_keys_create": {
      "request": {
        "url": "/organization/admin_api_keys",
        "method": "post",
        "security": [
          {
            "bearer_identity_edge": [
              "key.secret",
              "api.management.write"
            ]
          },
          {
            "basic_identity_edge": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/admin_api_keys",
          "type": {
            "name": "AdminApiKeysCreateBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create an organization admin API key",
      "result_type": {
        "name": "AdminApiKey",
        "type": "named"
      }
    },
    "admin_api_keys_delete": {
      "request": {
        "url": "/organization/admin_api_keys/{key_id}",
        "method": "delete",
        "security": [
          {
            "bearer_identity_edge": [
              "key.secret",
              "api.management.write"
            ]
          },
          {
            "basic_identity_edge": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an organization admin API key",
      "result_type": {
        "name": "AdminApiKeysDeleteResult",
        "type": "named"
      }
    },
    "archive_project": {
      "request": {
        "url": "/organization/projects/{project_id}/archive",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Archives a project in the organization. Archived projects cannot be used or updated.",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "cancelBatch": {
      "request": {
        "url": "/batches/{batch_id}/cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "description": "The ID of the batch to cancel.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.",
      "result_type": {
        "name": "Batch",
        "type": "named"
      }
    },
    "cancelFineTuningJob": {
      "request": {
        "url": "/fine_tuning/jobs/{fine_tuning_job_id}/cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "fine_tuning_job_id": {
          "description": "The ID of the fine-tuning job to cancel.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "fine_tuning_job_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Immediately cancel a fine-tune job.",
      "result_type": {
        "name": "FineTuningJob",
        "type": "named"
      }
    },
    "cancelRun": {
      "request": {
        "url": "/threads/{thread_id}/runs/{run_id}/cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "run_id": {
          "description": "The ID of the run to cancel.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the thread to which this run belongs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Cancels a run that is `in_progress`.",
      "result_type": {
        "name": "RunObject",
        "type": "named"
      }
    },
    "cancelUpload": {
      "request": {
        "url": "/uploads/{upload_id}/cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "upload_id": {
          "description": "The ID of the Upload.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "upload_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Cancels the Upload. No Parts may be added after an Upload is cancelled.",
      "result_type": {
        "name": "Upload",
        "type": "named"
      }
    },
    "cancelVectorStoreFileBatch": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "description": "The ID of the file batch to cancel.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store that the file batch belongs to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
      "result_type": {
        "name": "VectorStoreFileBatchObject",
        "type": "named"
      }
    },
    "completeUpload": {
      "request": {
        "url": "/uploads/{upload_id}/complete",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /uploads/{upload_id}/complete",
          "type": {
            "name": "CompleteUploadRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "upload_id": {
          "description": "The ID of the Upload.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "upload_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Completes the [Upload](/docs/api-reference/uploads/object).   Within the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.  You can specify the order of the Parts by passing in an ordered list of the Part IDs.  The number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.",
      "result_type": {
        "name": "Upload",
        "type": "named"
      }
    },
    "createAssistant": {
      "request": {
        "url": "/assistants",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /assistants",
          "type": {
            "name": "CreateAssistantRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create an assistant with a model and instructions.",
      "result_type": {
        "name": "AssistantObject",
        "type": "named"
      }
    },
    "createBatch": {
      "request": {
        "url": "/batches",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /batches",
          "type": {
            "name": "CreateBatchBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates and executes a batch from an uploaded file of requests",
      "result_type": {
        "name": "Batch",
        "type": "named"
      }
    },
    "createChatCompletion": {
      "request": {
        "url": "/chat/completions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /chat/completions",
          "type": {
            "name": "CreateChatCompletionRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates a model response for the given chat conversation. Learn more in the [text generation](/docs/guides/text-generation), [vision](/docs/guides/vision), and [audio](/docs/guides/audio) guides.  Parameter support can differ depending on the model used to generate the response, particularly for newer reasoning models. Parameters that are only supported for reasoning models are noted below. For the current state of  unsupported parameters in reasoning models,  [refer to the reasoning guide](/docs/guides/reasoning).",
      "result_type": {
        "name": "CreateChatCompletionResponse",
        "type": "named"
      }
    },
    "createCompletion": {
      "request": {
        "url": "/completions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /completions",
          "type": {
            "name": "CreateCompletionRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates a completion for the provided prompt and parameters.",
      "result_type": {
        "name": "CreateCompletionResponse",
        "type": "named"
      }
    },
    "createEmbedding": {
      "request": {
        "url": "/embeddings",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /embeddings",
          "type": {
            "name": "CreateEmbeddingRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates an embedding vector representing the input text.",
      "result_type": {
        "name": "CreateEmbeddingResponse",
        "type": "named"
      }
    },
    "createFile": {
      "request": {
        "url": "/files",
        "method": "post",
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /files",
          "type": {
            "name": "CreateFileRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.  The Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.  The Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.  The Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).  Please [contact us](https://help.openai.com/) if you need to increase these storage limits.",
      "result_type": {
        "name": "OpenAIFile",
        "type": "named"
      }
    },
    "createFineTuningJob": {
      "request": {
        "url": "/fine_tuning/jobs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /fine_tuning/jobs",
          "type": {
            "name": "CreateFineTuningJobRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning)",
      "result_type": {
        "name": "FineTuningJob",
        "type": "named"
      }
    },
    "createImage": {
      "request": {
        "url": "/images/generations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /images/generations",
          "type": {
            "name": "CreateImageRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates an image given a prompt.",
      "result_type": {
        "name": "ImagesResponse",
        "type": "named"
      }
    },
    "createImageEdit": {
      "request": {
        "url": "/images/edits",
        "method": "post",
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /images/edits",
          "type": {
            "name": "CreateImageEditRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates an edited or extended image given an original image and a prompt.",
      "result_type": {
        "name": "ImagesResponse",
        "type": "named"
      }
    },
    "createImageVariation": {
      "request": {
        "url": "/images/variations",
        "method": "post",
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /images/variations",
          "type": {
            "name": "CreateImageVariationRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates a variation of a given image.",
      "result_type": {
        "name": "ImagesResponse",
        "type": "named"
      }
    },
    "createMessage": {
      "request": {
        "url": "/threads/{thread_id}/messages",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/{thread_id}/messages",
          "type": {
            "name": "CreateMessageRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) to create a message for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a message.",
      "result_type": {
        "name": "MessageObject",
        "type": "named"
      }
    },
    "createModeration": {
      "request": {
        "url": "/moderations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /moderations",
          "type": {
            "name": "CreateModerationRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Classifies if text and/or image inputs are potentially harmful. Learn more in the [moderation guide](/docs/guides/moderation).",
      "result_type": {
        "name": "CreateModerationResponse",
        "type": "named"
      }
    },
    "createRun": {
      "request": {
        "url": "/threads/{thread_id}/runs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/{thread_id}/runs",
          "type": {
            "name": "CreateRunRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "include[]": {
          "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ThreadsInclude",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "include[]",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "thread_id": {
          "description": "The ID of the thread to run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a run.",
      "result_type": {
        "name": "RunObject",
        "type": "named"
      }
    },
    "createSpeech": {
      "request": {
        "url": "/audio/speech",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/octet-stream"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /audio/speech",
          "type": {
            "name": "CreateSpeechRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Generates audio from the input text.",
      "result_type": {
        "name": "Binary",
        "type": "named"
      }
    },
    "createThread": {
      "request": {
        "url": "/threads",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateThreadRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create a thread.",
      "result_type": {
        "name": "ThreadObject",
        "type": "named"
      }
    },
    "createThreadAndRun": {
      "request": {
        "url": "/threads/runs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/runs",
          "type": {
            "name": "CreateThreadAndRunRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create a thread and run it in one request.",
      "result_type": {
        "name": "RunObject",
        "type": "named"
      }
    },
    "createTranscription": {
      "request": {
        "url": "/audio/transcriptions",
        "method": "post",
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /audio/transcriptions",
          "type": {
            "name": "CreateTranscriptionRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Transcribes audio into the input language.",
      "result_type": {
        "name": "CreateTranscriptionResult",
        "type": "named"
      }
    },
    "createTranslation": {
      "request": {
        "url": "/audio/translations",
        "method": "post",
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /audio/translations",
          "type": {
            "name": "CreateTranslationRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Translates audio into English.",
      "result_type": {
        "name": "CreateTranslationResult",
        "type": "named"
      }
    },
    "createUpload": {
      "request": {
        "url": "/uploads",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /uploads",
          "type": {
            "name": "CreateUploadRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Creates an intermediate [Upload](/docs/api-reference/uploads/object) object that you can add [Parts](/docs/api-reference/uploads/part-object) to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.  Once you complete the Upload, we will create a [File](/docs/api-reference/files/object) object that contains all the parts you uploaded. This File is usable in the rest of our platform as a regular File object.  For certain `purpose`s, the correct `mime_type` must be specified. Please refer to documentation for the supported MIME types for your use case: - [Assistants](/docs/assistants/tools/file-search#supported-files)  For guidance on the proper filename extensions for each purpose, please follow the documentation on [creating a File](/docs/api-reference/files/create).",
      "result_type": {
        "name": "Upload",
        "type": "named"
      }
    },
    "createVectorStore": {
      "request": {
        "url": "/vector_stores",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /vector_stores",
          "type": {
            "name": "CreateVectorStoreRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create a vector store.",
      "result_type": {
        "name": "VectorStoreObject",
        "type": "named"
      }
    },
    "createVectorStoreFile": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/files",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /vector_stores/{vector_store_id}/files",
          "type": {
            "name": "CreateVectorStoreFileRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store for which to create a File.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).",
      "result_type": {
        "name": "VectorStoreFileObject",
        "type": "named"
      }
    },
    "createVectorStoreFileBatch": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/file_batches",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /vector_stores/{vector_store_id}/file_batches",
          "type": {
            "name": "CreateVectorStoreFileBatchRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store for which to create a File Batch.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a vector store file batch.",
      "result_type": {
        "name": "VectorStoreFileBatchObject",
        "type": "named"
      }
    },
    "create_project": {
      "request": {
        "url": "/organization/projects",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/projects",
          "type": {
            "name": "ProjectCreateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create a new project in the organization. Projects can be created and archived, but cannot be deleted.",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "create_project_service_account": {
      "request": {
        "url": "/organization/projects/{project_id}/service_accounts",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/projects/{project_id}/service_accounts",
          "type": {
            "name": "ProjectServiceAccountCreateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Creates a new service account in the project. This also returns an unredacted API key for the service account.",
      "result_type": {
        "name": "ProjectServiceAccountCreateResponse",
        "type": "named"
      }
    },
    "create_project_user": {
      "request": {
        "url": "/organization/projects/{project_id}/users",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/projects/{project_id}/users",
          "type": {
            "name": "ProjectUserCreateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Adds a user to the project. Users must already be members of the organization to be added to a project.",
      "result_type": {
        "name": "ProjectUser",
        "type": "named"
      }
    },
    "create_realtime_session": {
      "request": {
        "url": "/realtime/sessions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /realtime/sessions",
          "type": {
            "name": "RealtimeSessionCreateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create an ephemeral API token for use in client-side applications with the Realtime API. Can be configured with the same session parameters as the `session.update` client event.  It responds with a session object, plus a `client_secret` key which contains a usable ephemeral API token that can be used to authenticate browser clients for the Realtime API.",
      "result_type": {
        "name": "RealtimeSessionCreateResponse",
        "type": "named"
      }
    },
    "deleteAssistant": {
      "request": {
        "url": "/assistants/{assistant_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assistant_id": {
          "description": "The ID of the assistant to delete.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assistant_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an assistant.",
      "result_type": {
        "name": "DeleteAssistantResponse",
        "type": "named"
      }
    },
    "deleteFile": {
      "request": {
        "url": "/files/{file_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "file_id": {
          "description": "The ID of the file to use for this request.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "file_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a file.",
      "result_type": {
        "name": "DeleteFileResponse",
        "type": "named"
      }
    },
    "deleteMessage": {
      "request": {
        "url": "/threads/{thread_id}/messages/{message_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "message_id": {
          "description": "The ID of the message to delete.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "message_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the thread to which this message belongs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deletes a message.",
      "result_type": {
        "name": "DeleteMessageResponse",
        "type": "named"
      }
    },
    "deleteModel": {
      "request": {
        "url": "/models/{model}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "model": {
          "description": "The model to delete",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "model",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.",
      "result_type": {
        "name": "DeleteModelResponse",
        "type": "named"
      }
    },
    "deleteThread": {
      "request": {
        "url": "/threads/{thread_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "thread_id": {
          "description": "The ID of the thread to delete.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a thread.",
      "result_type": {
        "name": "DeleteThreadResponse",
        "type": "named"
      }
    },
    "deleteVectorStore": {
      "request": {
        "url": "/vector_stores/{vector_store_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "vector_store_id": {
          "description": "The ID of the vector store to delete.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a vector store.",
      "result_type": {
        "name": "DeleteVectorStoreResponse",
        "type": "named"
      }
    },
    "deleteVectorStoreFile": {
      "request": {
        "url": "/vector_stores/{vector_store_id}/files/{file_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "file_id": {
          "description": "The ID of the file to delete.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "file_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store that the file belongs to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.",
      "result_type": {
        "name": "DeleteVectorStoreFileResponse",
        "type": "named"
      }
    },
    "delete_invite": {
      "request": {
        "url": "/organization/invites/{invite_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "invite_id": {
          "description": "The ID of the invite to delete.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "invite_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an invite. If the invite has already been accepted, it cannot be deleted.",
      "result_type": {
        "name": "InviteDeleteResponse",
        "type": "named"
      }
    },
    "delete_project_api_key": {
      "request": {
        "url": "/organization/projects/{project_id}/api_keys/{key_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "description": "The ID of the API key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deletes an API key from the project.",
      "result_type": {
        "name": "ProjectApiKeyDeleteResponse",
        "type": "named"
      }
    },
    "delete_project_service_account": {
      "request": {
        "url": "/organization/projects/{project_id}/service_accounts/{service_account_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "service_account_id": {
          "description": "The ID of the service account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "service_account_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deletes a service account from the project.",
      "result_type": {
        "name": "ProjectServiceAccountDeleteResponse",
        "type": "named"
      }
    },
    "delete_project_user": {
      "request": {
        "url": "/organization/projects/{project_id}/users/{user_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "user_id": {
          "description": "The ID of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deletes a user from the project.",
      "result_type": {
        "name": "ProjectUserDeleteResponse",
        "type": "named"
      }
    },
    "delete_user": {
      "request": {
        "url": "/organization/users/{user_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "user_id": {
          "description": "The ID of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deletes a user from the organization.",
      "result_type": {
        "name": "UserDeleteResponse",
        "type": "named"
      }
    },
    "inviteUser": {
      "request": {
        "url": "/organization/invites",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/invites",
          "type": {
            "name": "InviteRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.",
      "result_type": {
        "name": "Invite",
        "type": "named"
      }
    },
    "modifyAssistant": {
      "request": {
        "url": "/assistants/{assistant_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assistant_id": {
          "description": "The ID of the assistant to modify.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assistant_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /assistants/{assistant_id}",
          "type": {
            "name": "ModifyAssistantRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Modifies an assistant.",
      "result_type": {
        "name": "AssistantObject",
        "type": "named"
      }
    },
    "modifyMessage": {
      "request": {
        "url": "/threads/{thread_id}/messages/{message_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/{thread_id}/messages/{message_id}",
          "type": {
            "name": "ModifyMessageRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "message_id": {
          "description": "The ID of the message to modify.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "message_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the thread to which this message belongs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Modifies a message.",
      "result_type": {
        "name": "MessageObject",
        "type": "named"
      }
    },
    "modifyRun": {
      "request": {
        "url": "/threads/{thread_id}/runs/{run_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/{thread_id}/runs/{run_id}",
          "type": {
            "name": "ModifyRunRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "run_id": {
          "description": "The ID of the run to modify.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Modifies a run.",
      "result_type": {
        "name": "RunObject",
        "type": "named"
      }
    },
    "modifyThread": {
      "request": {
        "url": "/threads/{thread_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/{thread_id}",
          "type": {
            "name": "ModifyThreadRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "thread_id": {
          "description": "The ID of the thread to modify. Only the `metadata` can be modified.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Modifies a thread.",
      "result_type": {
        "name": "ThreadObject",
        "type": "named"
      }
    },
    "modifyVectorStore": {
      "request": {
        "url": "/vector_stores/{vector_store_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /vector_stores/{vector_store_id}",
          "type": {
            "name": "UpdateVectorStoreRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "vector_store_id": {
          "description": "The ID of the vector store to modify.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "vector_store_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Modifies a vector store.",
      "result_type": {
        "name": "VectorStoreObject",
        "type": "named"
      }
    },
    "modify_project": {
      "request": {
        "url": "/organization/projects/{project_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/projects/{project_id}",
          "type": {
            "name": "ProjectUpdateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Modifies a project in the organization.",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "modify_project_user": {
      "request": {
        "url": "/organization/projects/{project_id}/users/{user_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/projects/{project_id}/users/{user_id}",
          "type": {
            "name": "ProjectUserUpdateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "user_id": {
          "description": "The ID of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Modifies a user's role in the project.",
      "result_type": {
        "name": "ProjectUser",
        "type": "named"
      }
    },
    "modify_user": {
      "request": {
        "url": "/organization/users/{user_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/users/{user_id}",
          "type": {
            "name": "UserRoleUpdateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "user_id": {
          "description": "The ID of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Modifies a user's role in the organization.",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "submitToolOuputsToRun": {
      "request": {
        "url": "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
          "type": {
            "name": "SubmitToolOutputsRunRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "run_id": {
          "description": "The ID of the run that requires the tool output submission.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The ID of the [thread](/docs/api-reference/threads) to which this run belongs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.",
      "result_type": {
        "name": "RunObject",
        "type": "named"
      }
    },
    "update_project_rate_limits": {
      "request": {
        "url": "/organization/projects/{project_id}/rate_limits/{rate_limit_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /organization/projects/{project_id}/rate_limits/{rate_limit_id}",
          "type": {
            "name": "ProjectRateLimitUpdateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        },
        "project_id": {
          "description": "The ID of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rate_limit_id": {
          "description": "The ID of the rate limit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "rate_limit_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Updates a project rate limit.",
      "result_type": {
        "name": "ProjectRateLimit",
        "type": "named"
      }
    }
  },
  "scalar_types": {
    "AssistantObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistant"
        ],
        "type": "enum"
      }
    },
    "AssistantObjectToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search",
          "function"
        ],
        "type": "enum"
      }
    },
    "AssistantsApiResponseFormatOption": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "AssistantsApiToolChoiceOption": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "AssistantsOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "AudioResponseFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "json",
          "text",
          "srt",
          "verbose_json",
          "vtt"
        ],
        "type": "enum"
      }
    },
    "AuditLogActorApiKeyType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "user",
          "service_account"
        ],
        "type": "enum"
      }
    },
    "AuditLogActorType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "session",
          "api_key"
        ],
        "type": "enum"
      }
    },
    "AuditLogEventType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "api_key.created",
          "api_key.updated",
          "api_key.deleted",
          "invite.sent",
          "invite.accepted",
          "invite.deleted",
          "login.succeeded",
          "login.failed",
          "logout.succeeded",
          "logout.failed",
          "organization.updated",
          "project.created",
          "project.updated",
          "project.archived",
          "service_account.created",
          "service_account.updated",
          "service_account.deleted",
          "rate_limit.updated",
          "rate_limit.deleted",
          "user.added",
          "user.updated",
          "user.deleted"
        ],
        "type": "enum"
      }
    },
    "BatchObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "batch"
        ],
        "type": "enum"
      }
    },
    "BatchStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "validating",
          "failed",
          "in_progress",
          "finalizing",
          "completed",
          "expired",
          "cancelling",
          "cancelled"
        ],
        "type": "enum"
      }
    },
    "BatchesCompletionWindow": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "24h"
        ],
        "type": "enum"
      }
    },
    "BatchesEndpoint": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "/v1/chat/completions",
          "/v1/embeddings",
          "/v1/completions"
        ],
        "type": "enum"
      }
    },
    "Binary": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "bytes"
      }
    },
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "ChatCompletionMessageToolCallType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "function"
        ],
        "type": "enum"
      }
    },
    "ChatCompletionModalities": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "audio"
        ],
        "type": "enum"
      }
    },
    "ChatCompletionRequestMessageRoleEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistant",
          "developer",
          "function",
          "system",
          "tool",
          "user"
        ],
        "type": "enum"
      }
    },
    "ChatCompletionResponseMessageRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistant"
        ],
        "type": "enum"
      }
    },
    "ChatCompletionToolChoiceOption": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ChatCompletionToolType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "function"
        ],
        "type": "enum"
      }
    },
    "ChunkingStrategyRequestParamTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "static"
        ],
        "type": "enum"
      }
    },
    "CreateAssistantRequestToolResourcesFileSearchVectorStoresChunkingStrategyTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "static"
        ],
        "type": "enum"
      }
    },
    "CreateAssistantRequestToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search",
          "function"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionRequestAudioFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "wav",
          "mp3",
          "flac",
          "opus",
          "pcm16"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionRequestAudioVoice": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "alloy",
          "ash",
          "ballad",
          "coral",
          "echo",
          "sage",
          "shimmer",
          "verse"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionRequestReasoningEffort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "low",
          "medium",
          "high"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionRequestResponseFormatTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "json_object",
          "json_schema",
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionRequestServiceTier": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "default"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionResponseChoicesFinishReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "stop",
          "length",
          "tool_calls",
          "content_filter",
          "function_call"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "chat.completion"
        ],
        "type": "enum"
      }
    },
    "CreateChatCompletionResponseServiceTier": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "scale",
          "default"
        ],
        "type": "enum"
      }
    },
    "CreateCompletionResponseChoicesFinishReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "stop",
          "length",
          "content_filter"
        ],
        "type": "enum"
      }
    },
    "CreateCompletionResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text_completion"
        ],
        "type": "enum"
      }
    },
    "CreateEmbeddingRequestEncodingFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "float",
          "base64"
        ],
        "type": "enum"
      }
    },
    "CreateEmbeddingResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "CreateFileRequestPurpose": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistants",
          "batch",
          "fine-tune",
          "vision"
        ],
        "type": "enum"
      }
    },
    "CreateFineTuningJobRequestIntegrationsType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "wandb"
        ],
        "type": "enum"
      }
    },
    "CreateImageEditRequestResponseFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "url",
          "b64_json"
        ],
        "type": "enum"
      }
    },
    "CreateImageEditRequestSize": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "256x256",
          "512x512",
          "1024x1024"
        ],
        "type": "enum"
      }
    },
    "CreateImageRequestQuality": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "standard",
          "hd"
        ],
        "type": "enum"
      }
    },
    "CreateImageRequestResponseFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "url",
          "b64_json"
        ],
        "type": "enum"
      }
    },
    "CreateImageRequestSize": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "256x256",
          "512x512",
          "1024x1024",
          "1792x1024",
          "1024x1792"
        ],
        "type": "enum"
      }
    },
    "CreateImageRequestStyle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "vivid",
          "natural"
        ],
        "type": "enum"
      }
    },
    "CreateImageVariationRequestResponseFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "url",
          "b64_json"
        ],
        "type": "enum"
      }
    },
    "CreateImageVariationRequestSize": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "256x256",
          "512x512",
          "1024x1024"
        ],
        "type": "enum"
      }
    },
    "CreateMessageRequestAttachmentsToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search"
        ],
        "type": "enum"
      }
    },
    "CreateMessageRequestRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "user",
          "assistant"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesHarassment": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesHarassmentThreatening": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesHate": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesHateThreatening": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesIllicit": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesIllicitViolent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesSelfHarm": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "image"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesSelfHarmInstructions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "image"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesSelfHarmIntent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "image"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesSexual": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "image"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesSexualMinors": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesViolence": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "image"
        ],
        "type": "enum"
      }
    },
    "CreateModerationResponseResultsCategoryAppliedInputTypesViolenceGraphic": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "image"
        ],
        "type": "enum"
      }
    },
    "CreateRunRequestToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search",
          "function"
        ],
        "type": "enum"
      }
    },
    "CreateSpeechRequestResponseFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "mp3",
          "opus",
          "aac",
          "flac",
          "wav",
          "pcm"
        ],
        "type": "enum"
      }
    },
    "CreateSpeechRequestVoice": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "alloy",
          "echo",
          "fable",
          "onyx",
          "nova",
          "shimmer"
        ],
        "type": "enum"
      }
    },
    "CreateThreadAndRunRequestToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search",
          "function"
        ],
        "type": "enum"
      }
    },
    "CreateThreadRequestToolResourcesFileSearchVectorStoresChunkingStrategyTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "static"
        ],
        "type": "enum"
      }
    },
    "CreateTranscriptionRequestTimestampGranularities": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "word",
          "segment"
        ],
        "type": "enum"
      }
    },
    "CreateUploadRequestPurpose": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistants",
          "batch",
          "fine-tune",
          "vision"
        ],
        "type": "enum"
      }
    },
    "CreateVectorStoreRequestChunkingStrategyTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "static"
        ],
        "type": "enum"
      }
    },
    "DeleteAssistantResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assistant.deleted"
        ],
        "type": "enum"
      }
    },
    "DeleteFileResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "file"
        ],
        "type": "enum"
      }
    },
    "DeleteMessageResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "thread.message.deleted"
        ],
        "type": "enum"
      }
    },
    "DeleteThreadResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "thread.deleted"
        ],
        "type": "enum"
      }
    },
    "DeleteVectorStoreFileResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "vector_store.file.deleted"
        ],
        "type": "enum"
      }
    },
    "DeleteVectorStoreResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "vector_store.deleted"
        ],
        "type": "enum"
      }
    },
    "EmbeddingObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "embedding"
        ],
        "type": "enum"
      }
    },
    "FileSearchRankingOptionsRanker": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "default_2024_08_21"
        ],
        "type": "enum"
      }
    },
    "FilesOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "FineTuneMethodType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "supervised",
          "dpo"
        ],
        "type": "enum"
      }
    },
    "FineTuningIntegrationType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "wandb"
        ],
        "type": "enum"
      }
    },
    "FineTuningJobCheckpointObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "fine_tuning.job.checkpoint"
        ],
        "type": "enum"
      }
    },
    "FineTuningJobEventLevel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "info",
          "warn",
          "error"
        ],
        "type": "enum"
      }
    },
    "FineTuningJobEventObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "fine_tuning.job.event"
        ],
        "type": "enum"
      }
    },
    "FineTuningJobEventType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "message",
          "metrics"
        ],
        "type": "enum"
      }
    },
    "FineTuningJobObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "fine_tuning.job"
        ],
        "type": "enum"
      }
    },
    "FineTuningJobStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "validating_files",
          "queued",
          "running",
          "succeeded",
          "failed",
          "cancelled"
        ],
        "type": "enum"
      }
    },
    "Float32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "float32"
      }
    },
    "Float64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "float64"
      }
    },
    "ImagesResponse": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "Int64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int64"
      }
    },
    "InviteDeleteResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.invite.deleted"
        ],
        "type": "enum"
      }
    },
    "InviteListResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "InviteObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.invite"
        ],
        "type": "enum"
      }
    },
    "InviteProjectsRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member",
          "owner"
        ],
        "type": "enum"
      }
    },
    "InviteRequestProjectsRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member",
          "owner"
        ],
        "type": "enum"
      }
    },
    "InviteRequestRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "reader",
          "owner"
        ],
        "type": "enum"
      }
    },
    "InviteRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "owner",
          "reader"
        ],
        "type": "enum"
      }
    },
    "InviteStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "accepted",
          "expired",
          "pending"
        ],
        "type": "enum"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ListAuditLogsResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ListBatchesResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ListFineTuningJobCheckpointsResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ListFineTuningJobEventsResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ListMessagesResponse": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ListModelsResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ListPaginatedFineTuningJobsResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ListRunStepsResponse": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ListVectorStoreFilesResponse": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ListVectorStoresResponse": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "MessageContentImageFileObjectImageFileDetail": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "low",
          "high"
        ],
        "type": "enum"
      }
    },
    "MessageContentImageUrlObjectImageUrlDetail": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "low",
          "high"
        ],
        "type": "enum"
      }
    },
    "MessageContentTextObjectTextAnnotationsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "file_citation",
          "file_path"
        ],
        "type": "enum"
      }
    },
    "MessageObjectAttachmentsToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search"
        ],
        "type": "enum"
      }
    },
    "MessageObjectContentTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "image_file",
          "image_url",
          "refusal",
          "text"
        ],
        "type": "enum"
      }
    },
    "MessageObjectIncompleteDetailsReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "content_filter",
          "max_tokens",
          "run_cancelled",
          "run_expired",
          "run_failed"
        ],
        "type": "enum"
      }
    },
    "MessageObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "thread.message"
        ],
        "type": "enum"
      }
    },
    "MessageObjectRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "user",
          "assistant"
        ],
        "type": "enum"
      }
    },
    "MessageObjectStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "in_progress",
          "incomplete",
          "completed"
        ],
        "type": "enum"
      }
    },
    "Model": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ModifyAssistantRequestToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search",
          "function"
        ],
        "type": "enum"
      }
    },
    "OpenAIFile": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "OrganizationBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1d"
        ],
        "type": "enum"
      }
    },
    "OrganizationGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id",
          "line_item"
        ],
        "type": "enum"
      }
    },
    "OrganizationOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "OrganizationSizes": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "256x256",
          "512x512",
          "1024x1024",
          "1792x1792",
          "1024x1792"
        ],
        "type": "enum"
      }
    },
    "OrganizationSources": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "image.generation",
          "image.edit",
          "image.variation"
        ],
        "type": "enum"
      }
    },
    "PredictionContentType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "content"
        ],
        "type": "enum"
      }
    },
    "ProjectApiKeyDeleteResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.api_key.deleted"
        ],
        "type": "enum"
      }
    },
    "ProjectApiKeyListResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ProjectApiKeyObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.api_key"
        ],
        "type": "enum"
      }
    },
    "ProjectApiKeyOwnerType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "user",
          "service_account"
        ],
        "type": "enum"
      }
    },
    "ProjectListResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ProjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project"
        ],
        "type": "enum"
      }
    },
    "ProjectRateLimitListResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ProjectRateLimitObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project.rate_limit"
        ],
        "type": "enum"
      }
    },
    "ProjectServiceAccountApiKeyObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.service_account.api_key"
        ],
        "type": "enum"
      }
    },
    "ProjectServiceAccountCreateResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.service_account"
        ],
        "type": "enum"
      }
    },
    "ProjectServiceAccountCreateResponseRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member"
        ],
        "type": "enum"
      }
    },
    "ProjectServiceAccountDeleteResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.service_account.deleted"
        ],
        "type": "enum"
      }
    },
    "ProjectServiceAccountListResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "ProjectServiceAccountObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.service_account"
        ],
        "type": "enum"
      }
    },
    "ProjectServiceAccountRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "owner",
          "member"
        ],
        "type": "enum"
      }
    },
    "ProjectStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "archived"
        ],
        "type": "enum"
      }
    },
    "ProjectUserCreateRequestRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "owner",
          "member"
        ],
        "type": "enum"
      }
    },
    "ProjectUserDeleteResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.user.deleted"
        ],
        "type": "enum"
      }
    },
    "ProjectUserObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.project.user"
        ],
        "type": "enum"
      }
    },
    "ProjectUserRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "owner",
          "member"
        ],
        "type": "enum"
      }
    },
    "ProjectUserUpdateRequestRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "owner",
          "member"
        ],
        "type": "enum"
      }
    },
    "RealtimeSessionCreateRequestInputAudioFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pcm16",
          "g711_ulaw",
          "g711_alaw"
        ],
        "type": "enum"
      }
    },
    "RealtimeSessionCreateRequestModel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "gpt-4o-realtime-preview",
          "gpt-4o-realtime-preview-2024-10-01",
          "gpt-4o-realtime-preview-2024-12-17",
          "gpt-4o-mini-realtime-preview",
          "gpt-4o-mini-realtime-preview-2024-12-17"
        ],
        "type": "enum"
      }
    },
    "RealtimeSessionCreateRequestOutputAudioFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pcm16",
          "g711_ulaw",
          "g711_alaw"
        ],
        "type": "enum"
      }
    },
    "RealtimeSessionCreateRequestToolsType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "function"
        ],
        "type": "enum"
      }
    },
    "RealtimeSessionCreateRequestVoice": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "alloy",
          "ash",
          "ballad",
          "coral",
          "echo",
          "sage",
          "shimmer",
          "verse"
        ],
        "type": "enum"
      }
    },
    "RealtimeSessionCreateResponseToolsType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "function"
        ],
        "type": "enum"
      }
    },
    "RealtimeSessionCreateResponseVoice": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "alloy",
          "ash",
          "ballad",
          "coral",
          "echo",
          "sage",
          "shimmer",
          "verse"
        ],
        "type": "enum"
      }
    },
    "RunObjectIncompleteDetailsReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "max_completion_tokens",
          "max_prompt_tokens"
        ],
        "type": "enum"
      }
    },
    "RunObjectLastErrorCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "server_error",
          "rate_limit_exceeded",
          "invalid_prompt"
        ],
        "type": "enum"
      }
    },
    "RunObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "thread.run"
        ],
        "type": "enum"
      }
    },
    "RunObjectRequiredActionType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "submit_tool_outputs"
        ],
        "type": "enum"
      }
    },
    "RunObjectStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "queued",
          "in_progress",
          "requires_action",
          "cancelling",
          "cancelled",
          "failed",
          "completed",
          "incomplete",
          "expired"
        ],
        "type": "enum"
      }
    },
    "RunObjectToolsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search",
          "function"
        ],
        "type": "enum"
      }
    },
    "RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "image",
          "logs"
        ],
        "type": "enum"
      }
    },
    "RunStepDetailsToolCallsFileSearchRankingOptionsObjectRanker": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "default_2024_08_21"
        ],
        "type": "enum"
      }
    },
    "RunStepDetailsToolCallsFileSearchResultObjectContentType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text"
        ],
        "type": "enum"
      }
    },
    "RunStepDetailsToolCallsObjectToolCallsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code_interpreter",
          "file_search",
          "function"
        ],
        "type": "enum"
      }
    },
    "RunStepObjectLastErrorCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "server_error",
          "rate_limit_exceeded"
        ],
        "type": "enum"
      }
    },
    "RunStepObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "thread.run.step"
        ],
        "type": "enum"
      }
    },
    "RunStepObjectStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "in_progress",
          "cancelled",
          "failed",
          "completed",
          "expired"
        ],
        "type": "enum"
      }
    },
    "RunStepObjectStepDetailsTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "message_creation",
          "tool_calls"
        ],
        "type": "enum"
      }
    },
    "RunStepObjectType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "message_creation",
          "tool_calls"
        ],
        "type": "enum"
      }
    },
    "RunToolCallObjectType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "function"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "ThreadObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "thread"
        ],
        "type": "enum"
      }
    },
    "ThreadsInclude": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "step_details.tool_calls[*].file_search.results[*].content"
        ],
        "type": "enum"
      }
    },
    "ThreadsOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "TruncationObjectType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto",
          "last_messages"
        ],
        "type": "enum"
      }
    },
    "URI": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "UploadObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "upload"
        ],
        "type": "enum"
      }
    },
    "UploadPartObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "upload.part"
        ],
        "type": "enum"
      }
    },
    "UploadStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pending",
          "completed",
          "cancelled",
          "expired"
        ],
        "type": "enum"
      }
    },
    "UsageAudioSpeechesBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageAudioSpeechesGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id",
          "user_id",
          "api_key_id",
          "model"
        ],
        "type": "enum"
      }
    },
    "UsageAudioTranscriptionsBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageAudioTranscriptionsGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id",
          "user_id",
          "api_key_id",
          "model"
        ],
        "type": "enum"
      }
    },
    "UsageCodeInterpreterSessionsBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageCodeInterpreterSessionsGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id"
        ],
        "type": "enum"
      }
    },
    "UsageCompletionsBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageCompletionsGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id",
          "user_id",
          "api_key_id",
          "model",
          "batch"
        ],
        "type": "enum"
      }
    },
    "UsageEmbeddingsBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageEmbeddingsGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id",
          "user_id",
          "api_key_id",
          "model"
        ],
        "type": "enum"
      }
    },
    "UsageImagesBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageImagesGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id",
          "user_id",
          "api_key_id",
          "model",
          "size",
          "source"
        ],
        "type": "enum"
      }
    },
    "UsageModerationsBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageModerationsGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id",
          "user_id",
          "api_key_id",
          "model"
        ],
        "type": "enum"
      }
    },
    "UsageResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "page"
        ],
        "type": "enum"
      }
    },
    "UsageTimeBucketObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "bucket"
        ],
        "type": "enum"
      }
    },
    "UsageTimeBucketResultObjectEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.costs.result",
          "organization.usage.audio_speeches.result",
          "organization.usage.audio_transcriptions.result",
          "organization.usage.code_interpreter_sessions.result",
          "organization.usage.completions.result",
          "organization.usage.embeddings.result",
          "organization.usage.images.result",
          "organization.usage.moderations.result",
          "organization.usage.vector_stores.result"
        ],
        "type": "enum"
      }
    },
    "UsageVectorStoresBucketWidth": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "1m",
          "1h",
          "1d"
        ],
        "type": "enum"
      }
    },
    "UsageVectorStoresGroupBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "project_id"
        ],
        "type": "enum"
      }
    },
    "UserDeleteResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.user.deleted"
        ],
        "type": "enum"
      }
    },
    "UserListResponseObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "list"
        ],
        "type": "enum"
      }
    },
    "UserObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization.user"
        ],
        "type": "enum"
      }
    },
    "UserRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "owner",
          "reader"
        ],
        "type": "enum"
      }
    },
    "UserRoleUpdateRequestRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "owner",
          "reader"
        ],
        "type": "enum"
      }
    },
    "VectorStoreExpirationAfterAnchor": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "last_active_at"
        ],
        "type": "enum"
      }
    },
    "VectorStoreFileBatchObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "vector_store.files_batch"
        ],
        "type": "enum"
      }
    },
    "VectorStoreFileBatchObjectStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "in_progress",
          "completed",
          "cancelled",
          "failed"
        ],
        "type": "enum"
      }
    },
    "VectorStoreFileObjectChunkingStrategyTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "other",
          "static"
        ],
        "type": "enum"
      }
    },
    "VectorStoreFileObjectLastErrorCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "server_error",
          "unsupported_file",
          "invalid_file"
        ],
        "type": "enum"
      }
    },
    "VectorStoreFileObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "vector_store.file"
        ],
        "type": "enum"
      }
    },
    "VectorStoreFileObjectStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "in_progress",
          "completed",
          "cancelled",
          "failed"
        ],
        "type": "enum"
      }
    },
    "VectorStoreObjectObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "vector_store"
        ],
        "type": "enum"
      }
    },
    "VectorStoreObjectStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "expired",
          "in_progress",
          "completed"
        ],
        "type": "enum"
      }
    },
    "VectorStoresFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "in_progress",
          "completed",
          "failed",
          "cancelled"
        ],
        "type": "enum"
      }
    },
    "VectorStoresOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    }
  }
}
