{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "value": "http://api.sendgrid.com/v3",
          "env": "SENDGRID_SERVER_URL"
        }
      }
    ],
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "header": "Authorization",
        "scheme": "bearer",
        "value": {
          "env": "SENDGRID_API_KEY"
        }
      }
    }
  },
  "functions": {
    "GET_access_settings_activity": {
      "request": {
        "url": "/access_settings/activity",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "Limits the number of IPs to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all recent access attempts",
      "result_type": {
        "name": "GETAccessSettingsActivityResultObject",
        "type": "named"
      }
    },
    "GET_access_settings_whitelist": {
      "request": {
        "url": "/access_settings/whitelist",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a list of currently allowed IPs",
      "result_type": {
        "name": "IpAccessResponse",
        "type": "named"
      }
    },
    "GET_access_settings_whitelist_rule_id": {
      "request": {
        "url": "/access_settings/whitelist/{rule_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rule_id": {
          "description": "The ID of the allowed IP address that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "rule_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a specific allowed IP",
      "result_type": {
        "name": "IpAccessResponse",
        "type": "named"
      }
    },
    "GET_alerts": {
      "request": {
        "url": "/alerts",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all alerts",
      "result_type": {
        "element_type": {
          "name": "GETAlertsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_alerts_alert_id": {
      "request": {
        "url": "/alerts/{alert_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_id": {
          "description": "The ID of the alert you would like to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a specific alert",
      "result_type": {
        "name": "GETAlertsAlertIdResultObject",
        "type": "named"
      }
    },
    "GET_api_keys": {
      "request": {
        "url": "/api_keys",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all API Keys belonging to the authenticated user",
      "result_type": {
        "name": "GETApiKeysResultObject",
        "type": "named"
      }
    },
    "GET_api_keys_api_key_id": {
      "request": {
        "url": "/api_keys/{api_key_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an existing API Key",
      "result_type": {
        "name": "GETApiKeysApiKeyIdResultObject",
        "type": "named"
      }
    },
    "GET_asm_groups": {
      "request": {
        "url": "/asm/groups",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "id",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all suppression groups associated with the user.",
      "result_type": {
        "element_type": {
          "name": "SuppressionGroup",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_asm_groups_group_id": {
      "request": {
        "url": "/asm/groups/{group_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "group_id": {
          "description": "The ID of the suppression group you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get information on a single suppression group.",
      "result_type": {
        "name": "GETAsmGroupsGroupIdResultAllOf",
        "type": "named"
      }
    },
    "GET_asm_groups_group_id_suppressions": {
      "request": {
        "url": "/asm/groups/{group_id}/suppressions",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "group_id": {
          "description": "The id of the unsubscribe group that you are adding suppressions to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all suppressions for a suppression group",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_asm_suppressions": {
      "request": {
        "url": "/asm/suppressions",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all suppressions",
      "result_type": {
        "element_type": {
          "name": "GETAsmSuppressionsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_asm_suppressions_email": {
      "request": {
        "url": "/asm/suppressions/{email}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address that you want to search suppression groups for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all suppression groups for an email address",
      "result_type": {
        "name": "GETAsmSuppressionsEmailResultObject",
        "type": "named"
      }
    },
    "GET_asm_suppressions_global_email": {
      "request": {
        "url": "/asm/suppressions/global/{email}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address of the global suppression you want to retrieve. Or, if you want to check if an email address is on the global suppressions list, enter that email address here.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Global Suppression",
      "result_type": {
        "name": "GETAsmSuppressionsGlobalEmailResultObject",
        "type": "named"
      }
    },
    "GET_browsers_stats": {
      "request": {
        "url": "/browsers/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETBrowsersStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "browsers": {
          "description": "The browsers to get statistics for. You can include up to 10 different browsers by including this parameter multiple times.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "browsers",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve email statistics by browser.",
      "result_type": {
        "element_type": {
          "name": "GETBrowsersStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_campaigns": {
      "request": {
        "url": "/campaigns",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "The number of results you would like to receive at a time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The index of the first campaign to return, where 0 is the first campaign.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all Campaigns",
      "result_type": {
        "name": "GETCampaignsResultObject",
        "type": "named"
      }
    },
    "GET_campaigns_campaign_id": {
      "request": {
        "url": "/campaigns/{campaign_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "campaign_id": {
          "description": "The id of the campaign you would like to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a single campaign",
      "result_type": {
        "name": "GETCampaignsCampaignIdResultObject",
        "type": "named"
      }
    },
    "GET_campaigns_campaign_id_schedules": {
      "request": {
        "url": "/campaigns/{campaign_id}/schedules",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "campaign_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "View Scheduled Time of a Campaign",
      "result_type": {
        "name": "GETCampaignsCampaignIdSchedulesResultObject",
        "type": "named"
      }
    },
    "GET_categories": {
      "request": {
        "url": "/categories",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "category": {
          "description": "Allows you to perform a prefix search on this particular category.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "category",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of categories to display per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list that you would like to begin displaying results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all categories",
      "result_type": {
        "element_type": {
          "name": "GETCategoriesResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_categories_stats": {
      "request": {
        "url": "/categories/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETCategoriesStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "categories": {
          "description": "The individual categories that you want to retrieve statistics for. You may include up to 10 different categories.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "categories",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to include.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 500
            }
          }
        },
        "offset": {
          "description": "The number of results to skip.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Email Statistics for Categories",
      "result_type": {
        "element_type": {
          "name": "CategoryStats",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_categories_stats_sums": {
      "request": {
        "url": "/categories/stats/sums",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETCategoriesStatsSumsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Limits the number of results returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort_by_direction": {
          "description": "The direction you want to sort.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETCategoriesStatsSumsSortByDirectionEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort_by_metric": {
          "description": "The metric that you want to sort by.  Must be a single metric.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_metric",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve sums of email stats for each category [Needs: Stats object defined, has category ID?]",
      "result_type": {
        "name": "CategoryStats",
        "type": "named"
      }
    },
    "GET_clients_client_type_stats": {
      "request": {
        "url": "/clients/{client_type}/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETClientsClientTypeStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "client_type": {
          "description": "Specifies the type of client to retrieve stats for. Must be either \"phone\", \"tablet\", \"webmail\", or \"desktop\".",
          "type": {
            "name": "GETClientsClientTypeStatsClientTypeEnum",
            "type": "named"
          },
          "http": {
            "name": "client_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve stats by a specific client type.",
      "result_type": {
        "element_type": {
          "name": "GETClientsClientTypeStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_clients_stats": {
      "request": {
        "url": "/clients/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETClientsStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve email statistics by client type.",
      "result_type": {
        "element_type": {
          "name": "GETClientsStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_contactdb_custom_fields": {
      "request": {
        "url": "/contactdb/custom_fields",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all custom fields",
      "result_type": {
        "name": "GETContactdbCustomFieldsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_custom_fields_custom_field_id": {
      "request": {
        "url": "/contactdb/custom_fields/{custom_field_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "custom_field_id": {
          "description": "The ID of the custom field that you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "custom_field_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Custom Field",
      "result_type": {
        "name": "ContactdbCustomFieldWithId",
        "type": "named"
      }
    },
    "GET_contactdb_lists": {
      "request": {
        "url": "/contactdb/lists",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all lists",
      "result_type": {
        "name": "GETContactdbListsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_lists_list_id": {
      "request": {
        "url": "/contactdb/lists/{list_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "list_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a single list",
      "result_type": {
        "name": "ContactdbList",
        "type": "named"
      }
    },
    "GET_contactdb_lists_list_id_recipients": {
      "request": {
        "url": "/contactdb/lists/{list_id}/recipients",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "list_id": {
          "description": "The id of the list of recipients you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "Page index of first recipient to return (must be a positive integer)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page_size": {
          "description": "Number of recipients to return at a time (must be a positive integer between 1 and 1000)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve all recipients on a List",
      "result_type": {
        "name": "GETContactdbListsListIdRecipientsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_recipients": {
      "request": {
        "url": "/contactdb/recipients",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "Page index of first recipients to return (must be a positive integer)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page_size": {
          "description": "Number of recipients to return at a time (must be a positive integer between 1 and 1000)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve recipients",
      "result_type": {
        "name": "GETContactdbRecipientsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_recipients_billable_count": {
      "request": {
        "url": "/contactdb/recipients/billable_count",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the count of billable recipients",
      "result_type": {
        "name": "ContactdbRecipientCount",
        "type": "named"
      }
    },
    "GET_contactdb_recipients_count": {
      "request": {
        "url": "/contactdb/recipients/count",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Count of Recipients",
      "result_type": {
        "name": "ContactdbRecipientCount",
        "type": "named"
      }
    },
    "GET_contactdb_recipients_recipient_id": {
      "request": {
        "url": "/contactdb/recipients/{recipient_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "recipient_id": {
          "description": "The ID of the recipient that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "recipient_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a single recipient",
      "result_type": {
        "name": "ContactdbRecipient",
        "type": "named"
      }
    },
    "GET_contactdb_recipients_recipient_id_lists": {
      "request": {
        "url": "/contactdb/recipients/{recipient_id}/lists",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "recipient_id": {
          "description": "The ID of the recipient for whom you are retrieving lists.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "recipient_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the lists that a recipient is on",
      "result_type": {
        "name": "GETContactdbRecipientsRecipientIdListsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_recipients_search": {
      "request": {
        "url": "/contactdb/recipients/search",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "{field_name}": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "{field_name}",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search recipients",
      "result_type": {
        "name": "GETContactdbRecipientsSearchResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_reserved_fields": {
      "request": {
        "url": "/contactdb/reserved_fields",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve reserved fields",
      "result_type": {
        "name": "GETContactdbReservedFieldsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_segments": {
      "request": {
        "url": "/contactdb/segments",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all segments",
      "result_type": {
        "name": "GETContactdbSegmentsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_segments_segment_id": {
      "request": {
        "url": "/contactdb/segments/{segment_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "segment_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a segment",
      "result_type": {
        "name": "ContactdbSegments",
        "type": "named"
      }
    },
    "GET_contactdb_segments_segment_id_recipients": {
      "request": {
        "url": "/contactdb/segments/{segment_id}/recipients",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "segment_id": {
          "description": "The ID of the segment from which you want to retrieve recipients.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve recipients on a segment",
      "result_type": {
        "name": "GETContactdbSegmentsSegmentIdRecipientsResultObject",
        "type": "named"
      }
    },
    "GET_contactdb_status": {
      "request": {
        "url": "/contactdb/status",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Recipient Upload Status",
      "result_type": {
        "name": "GETContactdbStatusResultObject",
        "type": "named"
      }
    },
    "GET_design": {
      "request": {
        "url": "/designs/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the Design you want to duplicate.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Design",
      "result_type": {
        "name": "DesignOutput",
        "type": "named"
      }
    },
    "GET_devices_stats": {
      "request": {
        "url": "/devices/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETDevicesStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve email statistics by device type.",
      "result_type": {
        "element_type": {
          "name": "GETDevicesStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_geo_stats": {
      "request": {
        "url": "/geo/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETGeoStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "country": {
          "description": "The country you would like to see statistics for. Currently only supported for US and CA.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETGeoStatsCountryEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "country",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve email statistics by country and state/province.",
      "result_type": {
        "element_type": {
          "name": "GETGeoStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_ips": {
      "request": {
        "url": "/ips",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "exclude_whitelabels": {
          "description": "Should we exclude reverse DNS records (whitelabels)?",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "exclude_whitelabels",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "ip": {
          "description": "The IP address to get",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ip",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of IPs you want returned at the same time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The offset for the number of IPs that you are requesting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort_by_direction": {
          "description": "The direction to sort the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETIpsSortByDirectionEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "subuser": {
          "description": "The subuser you are requesting for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "subuser",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all IP addresses",
      "result_type": {
        "element_type": {
          "name": "GETIpsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_ips_assigned": {
      "request": {
        "url": "/ips/assigned",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve all assigned IPs",
      "result_type": {
        "element_type": {
          "name": "GETIpsAssignedResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_ips_ip_address": {
      "request": {
        "url": "/ips/{ip_address}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ip_address": {
          "description": "The IP address you are retrieving the IP pools for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ip_address",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all IP pools an IP address belongs to",
      "result_type": {
        "name": "GETIpsIpAddressResultObject",
        "type": "named"
      }
    },
    "GET_ips_pools": {
      "request": {
        "url": "/ips/pools",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve all IP pools",
      "result_type": {
        "element_type": {
          "name": "IpPoolResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_ips_pools_pool_name": {
      "request": {
        "url": "/ips/pools/{pool_name}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pool_name": {
          "description": "The name of the IP pool that you want to retrieve the IP addresses for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pool_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all the IPs in a specified pool",
      "result_type": {
        "name": "GETIpsPoolsPoolNameResultObject",
        "type": "named"
      }
    },
    "GET_ips_remaining": {
      "request": {
        "url": "/ips/remaining",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get remaining IPs count",
      "result_type": {
        "name": "GETIpsRemainingResultObject",
        "type": "named"
      }
    },
    "GET_ips_warmup": {
      "request": {
        "url": "/ips/warmup",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve all IPs currently in warmup",
      "result_type": {
        "element_type": {
          "name": "IpWarmupResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_ips_warmup_ip_address": {
      "request": {
        "url": "/ips/warmup/{ip_address}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ip_address": {
          "description": "The IP address that you want to retrieve the warmup status for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ip_address",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the warmup status for a specific IP address",
      "result_type": {
        "element_type": {
          "name": "IpWarmupResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_mail_batch_batch_id": {
      "request": {
        "url": "/mail/batch/{batch_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Validate batch ID",
      "result_type": {
        "name": "MailBatchId",
        "type": "named"
      }
    },
    "GET_mail_settings": {
      "request": {
        "url": "/mail_settings",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "The number of settings to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "Where in the list of results to begin displaying settings.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all mail settings",
      "result_type": {
        "name": "GETMailSettingsResultObject",
        "type": "named"
      }
    },
    "GET_mail_settings_address_whitelist": {
      "request": {
        "url": "/mail_settings/address_whitelist",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve address whitelist mail settings",
      "result_type": {
        "name": "MailSettingsAddressWhitelabel",
        "type": "named"
      }
    },
    "GET_mail_settings_bounce_purge": {
      "request": {
        "url": "/mail_settings/bounce_purge",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve bounce purge mail settings",
      "result_type": {
        "name": "MailSettingsBouncePurge",
        "type": "named"
      }
    },
    "GET_mail_settings_footer": {
      "request": {
        "url": "/mail_settings/footer",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve footer mail settings",
      "result_type": {
        "name": "MailSettingsFooter",
        "type": "named"
      }
    },
    "GET_mail_settings_forward_bounce": {
      "request": {
        "url": "/mail_settings/forward_bounce",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve forward bounce mail settings",
      "result_type": {
        "name": "MailSettingsForwardBounce",
        "type": "named"
      }
    },
    "GET_mail_settings_forward_spam": {
      "request": {
        "url": "/mail_settings/forward_spam",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve forward spam mail settings",
      "result_type": {
        "name": "MailSettingsForwardSpam",
        "type": "named"
      }
    },
    "GET_mail_settings_template": {
      "request": {
        "url": "/mail_settings/template",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve legacy template mail settings",
      "result_type": {
        "name": "MailSettingsTemplate",
        "type": "named"
      }
    },
    "GET_mailbox_providers_stats": {
      "request": {
        "url": "/mailbox_providers/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETMailboxProvidersStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "mailbox_providers": {
          "description": "The mail box providers to get statistics for. You can include up to 10 by including this parameter multiple times.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "mailbox_providers",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve email statistics by mailbox provider.",
      "result_type": {
        "element_type": {
          "name": "GETMailboxProvidersStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_marketing_contacts_exports": {
      "request": {
        "url": "/marketing/contacts/exports",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get All Existing Exports",
      "result_type": {
        "name": "GETMarketingContactsExportsResultObject",
        "type": "named"
      }
    },
    "GET_marketing_contacts_imports_id": {
      "request": {
        "url": "/marketing/contacts/imports/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Import Contacts Status",
      "result_type": {
        "name": "ContactImport",
        "type": "named"
      }
    },
    "GET_marketing_segments": {
      "request": {
        "url": "/marketing/segments",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "no_parent_list_id": {
          "description": "If set to `true` segments with an empty value of `parent_list_id` will be returned in the filter.  If the value is not present it defaults to 'false'.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "no_parent_list_id",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "parent_list_ids": {
          "description": "A comma separated list of list ids to be used when searching for segments with the specified parent_list_id, no more than 50 is allowed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "parent_list_ids",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get List of Segments",
      "result_type": {
        "name": "GETMarketingSegmentsResultObject",
        "type": "named"
      }
    },
    "GET_marketing_segments_segment_id": {
      "request": {
        "url": "/marketing/segments/{segment_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "query_json": {
          "description": "Defaults to `false`.  Set to `true` to return the parsed SQL AST as a JSON object in the field `query_json`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "query_json",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "segment_id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "maxLength": 36,
              "minLength": 36
            }
          }
        }
      },
      "description": "Get Segment by ID",
      "result_type": {
        "name": "FullSegment",
        "type": "named"
      }
    },
    "GET_marketing_singlesends": {
      "request": {
        "url": "/marketing/singlesends",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get All Single Sends",
      "result_type": {
        "name": "GETMarketingSinglesendsResultObject",
        "type": "named"
      }
    },
    "GET_marketing_singlesends_categories": {
      "request": {
        "url": "/marketing/singlesends/categories",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get All Categories",
      "result_type": {
        "name": "GETMarketingSinglesendsCategoriesResultObject",
        "type": "named"
      }
    },
    "GET_marketing_singlesends_id": {
      "request": {
        "url": "/marketing/singlesends/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Single Send by ID",
      "result_type": {
        "name": "SinglesendResponse",
        "type": "named"
      }
    },
    "GET_mc_contacts_count": {
      "request": {
        "url": "/marketing/contacts/count",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get Total Contact Count",
      "result_type": {
        "name": "GETMcContactsCountResultObject",
        "type": "named"
      }
    },
    "GET_mc_contacts_exports_id": {
      "request": {
        "url": "/marketing/contacts/exports/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Export Contacts Status",
      "result_type": {
        "name": "ContactExport",
        "type": "named"
      }
    },
    "GET_mc_contacts_id": {
      "request": {
        "url": "/marketing/contacts/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a Contact by ID",
      "result_type": {
        "name": "ContactDetails3",
        "type": "named"
      }
    },
    "GET_mc_contats": {
      "request": {
        "url": "/marketing/contacts",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get Sample Contacts",
      "result_type": {
        "name": "GETMcContatsResultObject",
        "type": "named"
      }
    },
    "GET_mc_field_definitions": {
      "request": {
        "url": "/marketing/field_definitions",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get All Field Definitions",
      "result_type": {
        "name": "GETMcFieldDefinitionsResultObject",
        "type": "named"
      }
    },
    "GET_mc_lists": {
      "request": {
        "url": "/marketing/lists",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page_size": {
          "description": "Maximum number of elements to return. Defaults to 100, returns 1000 max",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "number"
              ],
              "maximum": 1000,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get All Lists",
      "result_type": {
        "name": "GETMcListsResultObject",
        "type": "named"
      }
    },
    "GET_mc_lists_id": {
      "request": {
        "url": "/marketing/lists/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "contact_sample": {
          "description": "Setting this parameter to the true  will cause the contact_sample to be returned",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "contact_sample",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a List by ID",
      "result_type": {
        "name": "GETMcListsIdResultAllOf",
        "type": "named"
      }
    },
    "GET_mc_lists_id_contacts_count": {
      "request": {
        "url": "/marketing/lists/{id}/contacts/count",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get List Contact Count",
      "result_type": {
        "name": "GETMcListsIdContactsCountResultObject",
        "type": "named"
      }
    },
    "GET_messages": {
      "request": {
        "url": "/messages",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "X-Cursor": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Cursor",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Query-Id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Query-Id",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of messages returned. This parameter must be greater than 0 and less than or equal to 1000",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "number"
              ],
              "maximum": 1000,
              "minimum": 1
            }
          }
        },
        "query": {
          "description": "Use the query syntax  to filter your email activity.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "query",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Filter all messages",
      "result_type": {
        "name": "GETMessagesResultObject",
        "type": "named"
      }
    },
    "GET_partner_settings": {
      "request": {
        "url": "/partner_settings",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "The number of settings to return per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The paging offset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns a list of all partner settings.",
      "result_type": {
        "name": "GETPartnerSettingsResultObject",
        "type": "named"
      }
    },
    "GET_partner_settings_new_relic": {
      "request": {
        "url": "/partner_settings/new_relic",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Returns all New Relic partner settings.",
      "result_type": {
        "name": "PartnerSettingsNewRelic",
        "type": "named"
      }
    },
    "GET_scopes": {
      "request": {
        "url": "/scopes",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a list of scopes for which this user has access.",
      "result_type": {
        "name": "GETScopesResultObject",
        "type": "named"
      }
    },
    "GET_segments": {
      "request": {
        "url": "/marketing/segments/2.0",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "no_parent_list_id": {
          "description": "If set to `true` segments with an empty value of `parent_list_id` will be returned in the filter.  If the value is not present it defaults to 'false'.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "no_parent_list_id",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "parent_list_ids": {
          "description": "A comma separated list up to 50 in size, to filter segments on.  Only segments that have any of these list ids as the parent list will be retrieved. This is different from the parameter of the same name used when creating a segment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "parent_list_ids",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get List of Segments",
      "result_type": {
        "name": "AllSegmentsResponse",
        "type": "named"
      }
    },
    "GET_segments_segment_id": {
      "request": {
        "url": "/marketing/segments/2.0/{segment_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "contacts_sample": {
          "description": "Defaults to `true`. Set to `false` to exclude the contacts_sample in the response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "contacts_sample",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "segment_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Segment by ID",
      "result_type": {
        "name": "SegmentResponse",
        "type": "named"
      }
    },
    "GET_sendgrid_pre_built_design": {
      "request": {
        "url": "/designs/pre-builts/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the pre-built Design you want to duplicate.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get SendGrid Pre-built Design",
      "result_type": {
        "name": "DesignOutput",
        "type": "named"
      }
    },
    "GET_sso_certificates_cert_id": {
      "request": {
        "url": "/sso/certificates/{cert_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cert_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "cert_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an SSO Certificate",
      "result_type": {
        "name": "SsoCertificateBody",
        "type": "named"
      }
    },
    "GET_sso_integrations": {
      "request": {
        "url": "/sso/integrations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "si": {
          "description": "If this parameter is set to `true`, the response will include the `completed_integration` field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "si",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Get All SSO Integrations",
      "result_type": {
        "element_type": {
          "name": "SsoIntegration",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_sso_integrations_id": {
      "request": {
        "url": "/sso/integrations/{id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "si": {
          "description": "If this parameter is set to `true`, the response will include the `completed_integration` field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "si",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Get an SSO Integration",
      "result_type": {
        "name": "SsoIntegration",
        "type": "named"
      }
    },
    "GET_sso_integrations_integration_id_certificates": {
      "request": {
        "url": "/sso/integrations/{integration_id}/certificates",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "integration_id": {
          "description": "An ID that matches a certificate to a specific IdP integration.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "integration_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get All SSO Certificates by Integration",
      "result_type": {
        "element_type": {
          "name": "SsoCertificateBody",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_stats": {
      "request": {
        "url": "/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve global email statistics",
      "result_type": {
        "element_type": {
          "name": "GETStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_subusers": {
      "request": {
        "url": "/subusers",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "The number of results you would like to get in each request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The number of subusers to skip.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The username of this subuser.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Subusers",
      "result_type": {
        "element_type": {
          "name": "Subuser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_subusers_reputations": {
      "request": {
        "url": "/subusers/reputations",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "usernames": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "usernames",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Subuser Reputations",
      "result_type": {
        "element_type": {
          "name": "GETSubusersReputationsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_subusers_stats": {
      "request": {
        "url": "/subusers/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Must be either \"day\", \"week\", or \"month\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETSubusersStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Limits the number of results returned per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "subusers": {
          "description": "The subuser you want to retrieve statistics for. You may include this parameter up to 10 times to retrieve statistics for multiple subusers.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subusers",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve email statistics for your subusers.",
      "result_type": {
        "name": "CategoryStats",
        "type": "named"
      }
    },
    "GET_subusers_stats_monthly": {
      "request": {
        "url": "/subusers/stats/monthly",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "date": {
          "description": "The date of the month to retrieve statistics for. Must be formatted YYYY-MM-DD",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Optional field to limit the number of results returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "Optional beginning point in the list to retrieve from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort_by_direction": {
          "description": "The direction you want to sort.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETSubusersStatsMonthlySortByDirectionEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort_by_metric": {
          "description": "The metric that you want to sort by. Metrics that you can sort by are: `blocks`, `bounces`, `clicks`, `delivered`, `opens`, `requests`, `unique_clicks`, `unique_opens`, and `unsubscribes`.'",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETSubusersStatsMonthlySortByMetricEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_metric",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "subuser": {
          "description": "A substring search of your subusers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "subuser",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve monthly stats for all subusers",
      "result_type": {
        "name": "SubuserStats",
        "type": "named"
      }
    },
    "GET_subusers_stats_sums": {
      "request": {
        "url": "/subusers/stats/sums",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How to group the statistics. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics to retrieve. Defaults to today. Must follow format YYYY-MM-DD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Limits the number of results returned per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin retrieving results from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort_by_direction": {
          "description": "The direction you want to sort.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETSubusersStatsSumsSortByDirectionEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort_by_metric": {
          "description": "The metric that you want to sort by.  Must be a single metric.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_metric",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics to retrieve. Must follow format YYYY-MM-DD.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the totals for each email statistic metric for all subusers.",
      "result_type": {
        "name": "CategoryStats",
        "type": "named"
      }
    },
    "GET_subusers_subuser_name_monitor": {
      "request": {
        "url": "/subusers/{subuser_name}/monitor",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "subuser_name": {
          "description": "The name of the subuser for which to retrieve monitor settings.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve monitor settings for a subuser",
      "result_type": {
        "name": "Monitor",
        "type": "named"
      }
    },
    "GET_subusers_subuser_name_stats_monthly": {
      "request": {
        "url": "/subusers/{subuser_name}/stats/monthly",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "date": {
          "description": "The date of the month to retrieve statistics for. Must be formatted YYYY-MM-DD",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Optional field to limit the number of results returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "Optional beginning point in the list to retrieve from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort_by_direction": {
          "description": "The direction you want to sort.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETSubusersSubuserNameStatsMonthlySortByDirectionEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort_by_metric": {
          "description": "The metric that you want to sort by. Metrics that you can sort by are: `blocks`, `bounces`, `clicks`, `delivered`, `opens`, `requests`, `unique_clicks`, `unique_opens`, and `unsubscribes`.'",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sort_by_metric",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "subuser_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the monthly email statistics for a single subuser",
      "result_type": {
        "name": "SubuserStats",
        "type": "named"
      }
    },
    "GET_suppression_blocks": {
      "request": {
        "url": "/suppression/blocks",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "end_time": {
          "description": "The end of the time range when a blocked email was created (inclusive). This is a unix timestamp.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "limit": {
          "description": "Limit the number of results to be displayed per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list to begin displaying results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_time": {
          "description": "The start of the time range when a blocked email was created (inclusive). This is a unix timestamp.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve all blocks",
      "result_type": {
        "element_type": {
          "name": "BlocksResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_blocks_email": {
      "request": {
        "url": "/suppression/blocks/{email}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address of the specific block.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a specific block",
      "result_type": {
        "element_type": {
          "name": "BlocksResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_bounces": {
      "request": {
        "url": "/suppression/bounces",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Accept",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_time": {
          "description": "Refers end of the time range in unix timestamp when a bounce was created (inclusive).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_time": {
          "description": "Refers start of the time range in unix timestamp when a bounce was created (inclusive).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve all bounces",
      "result_type": {
        "element_type": {
          "name": "BounceResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_bounces_email": {
      "request": {
        "url": "/suppression/bounces/{email}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Bounce",
      "result_type": {
        "element_type": {
          "name": "BounceResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_invalid_emails": {
      "request": {
        "url": "/suppression/invalid_emails",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "end_time": {
          "description": "Refers end of the time range in unix timestamp when an invalid email was created (inclusive).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "limit": {
          "description": "Limit the number of results to be displayed per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "Paging offset. The point in the list to begin displaying results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_time": {
          "description": "Refers start of the time range in unix timestamp when an invalid email was created (inclusive).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve all invalid emails",
      "result_type": {
        "element_type": {
          "name": "InvalidEmail",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_invalid_emails_email": {
      "request": {
        "url": "/suppression/invalid_emails/{email}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The specific email address of the invalid email entry that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a specific invalid email",
      "result_type": {
        "element_type": {
          "name": "InvalidEmail",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_spam_reports": {
      "request": {
        "url": "/suppression/spam_reports",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "end_time": {
          "description": "The end of the time range when a spam report was created (inclusive). This is a unix timestamp.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "limit": {
          "description": "Limit the number of results to be displayed per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "Paging offset. The point in the list to begin displaying results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_time": {
          "description": "The start of the time range when a spam report was created (inclusive). This is a unix timestamp.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve all spam reports",
      "result_type": {
        "element_type": {
          "name": "SpamReportsResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_spam_reports_email": {
      "request": {
        "url": "/suppression/spam_reports/{email}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address of a specific spam report that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a specific spam report",
      "result_type": {
        "element_type": {
          "name": "SpamReportsResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_suppression_unsubscribes": {
      "request": {
        "url": "/suppression/unsubscribes",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "end_time": {
          "description": "Refers end of the time range in unix timestamp when an unsubscribe email was created (inclusive).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "end_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of results to display on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list of results to begin displaying global suppressions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_time": {
          "description": "Refers start of the time range in unix timestamp when an unsubscribe email was created (inclusive).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "start_time",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve all global suppressions",
      "result_type": {
        "element_type": {
          "name": "GETSuppressionUnsubscribesResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_templates": {
      "request": {
        "url": "/templates",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "generations": {
          "description": "Comma-delimited list specifying which generations of templates to return. Options are `legacy`, `dynamic` or `legacy,dynamic`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETTemplatesGenerationsEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "generations",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page_size": {
          "description": "The number of templates to be returned in each page of results",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "number"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "description": "A token corresponding to a specific page of results, as provided by metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve paged transactional templates.",
      "result_type": {
        "name": "GETTemplatesResultObject",
        "type": "named"
      }
    },
    "GET_templates_template_id": {
      "request": {
        "url": "/templates/{template_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a single transactional template.",
      "result_type": {
        "name": "TransactionalTemplate",
        "type": "named"
      }
    },
    "GET_templates_template_id_versions_version_id": {
      "request": {
        "url": "/templates/{template_id}/versions/{version_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "description": "The ID of the original template",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "version_id": {
          "description": "The ID of the template version",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a specific transactional template version.",
      "result_type": {
        "name": "TransactionalTemplateVersionOutput",
        "type": "named"
      }
    },
    "GET_tracking_settings": {
      "request": {
        "url": "/tracking_settings",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Tracking Settings",
      "result_type": {
        "name": "GETTrackingSettingsResultObject",
        "type": "named"
      }
    },
    "GET_tracking_settings_click": {
      "request": {
        "url": "/tracking_settings/click",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Click Track Settings",
      "result_type": {
        "name": "ClickTracking",
        "type": "named"
      }
    },
    "GET_tracking_settings_google_analytics": {
      "request": {
        "url": "/tracking_settings/google_analytics",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Google Analytics Settings",
      "result_type": {
        "name": "GoogleAnalyticsSettings",
        "type": "named"
      }
    },
    "GET_tracking_settings_open": {
      "request": {
        "url": "/tracking_settings/open",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Open Tracking Settings",
      "result_type": {
        "name": "GETTrackingSettingsOpenResultObject",
        "type": "named"
      }
    },
    "GET_tracking_settings_subscription": {
      "request": {
        "url": "/tracking_settings/subscription",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Subscription Tracking Settings",
      "result_type": {
        "name": "SubscriptionTrackingSettings",
        "type": "named"
      }
    },
    "GET_user_account": {
      "request": {
        "url": "/user/account",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a user's account information.",
      "result_type": {
        "name": "GETUserAccountResultObject",
        "type": "named"
      }
    },
    "GET_user_credits": {
      "request": {
        "url": "/user/credits",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve your credit balance",
      "result_type": {
        "name": "GETUserCreditsResultObject",
        "type": "named"
      }
    },
    "GET_user_email": {
      "request": {
        "url": "/user/email",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve your account email address",
      "result_type": {
        "name": "GETUserEmailResultObject",
        "type": "named"
      }
    },
    "GET_user_profile": {
      "request": {
        "url": "/user/profile",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a user's profile",
      "result_type": {
        "name": "GETUserProfileResultObject",
        "type": "named"
      }
    },
    "GET_user_scheduled_sends": {
      "request": {
        "url": "/user/scheduled_sends",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all scheduled sends",
      "result_type": {
        "element_type": {
          "name": "UserScheduledSendStatus",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_user_scheduled_sends_batch_id": {
      "request": {
        "url": "/user/scheduled_sends/{batch_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve scheduled send",
      "result_type": {
        "element_type": {
          "name": "UserScheduledSendStatus",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_user_settings_enforced_tls": {
      "request": {
        "url": "/user/settings/enforced_tls",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve current Enforced TLS settings.",
      "result_type": {
        "name": "EnforcedTlsRequestResponse",
        "type": "named"
      }
    },
    "GET_user_username": {
      "request": {
        "url": "/user/username",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve your username",
      "result_type": {
        "name": "GETUserUsernameResultObject",
        "type": "named"
      }
    },
    "GET_user_webhooks_event_settings": {
      "request": {
        "url": "/user/webhooks/event/settings",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Event Webhook settings",
      "result_type": {
        "name": "EventWebhookResponse",
        "type": "named"
      }
    },
    "GET_user_webhooks_event_settings_signed": {
      "request": {
        "url": "/user/webhooks/event/settings/signed",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve Signed Webhook Public Key",
      "result_type": {
        "name": "GETUserWebhooksEventSettingsSignedResultObject",
        "type": "named"
      }
    },
    "GET_user_webhooks_parse_settings": {
      "request": {
        "url": "/user/webhooks/parse/settings",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all parse settings",
      "result_type": {
        "name": "GETUserWebhooksParseSettingsResultObject",
        "type": "named"
      }
    },
    "GET_user_webhooks_parse_settings_hostname": {
      "request": {
        "url": "/user/webhooks/parse/settings/{hostname}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hostname": {
          "description": "The hostname associated with the inbound parse setting that you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "hostname",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a specific parse setting",
      "result_type": {
        "name": "ParseSetting",
        "type": "named"
      }
    },
    "GET_user_webhooks_parse_stats": {
      "request": {
        "url": "/user/webhooks/parse/stats",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "How you would like the statistics to by grouped.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETUserWebhooksParseStatsAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "The end date of the statistics you want to retrieve. Must be in the format YYYY-MM-DD",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The number of statistics to return on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "offset": {
          "description": "The number of statistics to skip.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The starting date of the statistics you want to retrieve. Must be in the format YYYY-MM-DD",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieves Inbound Parse Webhook statistics.",
      "result_type": {
        "element_type": {
          "name": "GETUserWebhooksParseStatsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_v3_messages_download_download_uuid": {
      "request": {
        "url": "/messages/download/{download_uuid}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "download_uuid": {
          "description": "UUID used to locate the download csv request entry in the DB.  This is the UUID provided in the email sent to the user when their csv file is ready to download",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "download_uuid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Download CSV",
      "result_type": {
        "name": "GETV3MessagesDownloadDownloadUuidResultObject",
        "type": "named"
      }
    },
    "GET_v3_messages_msg_id": {
      "request": {
        "url": "/messages/{msg_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "msg_id": {
          "description": "The ID of the message you are requesting details for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "msg_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Filter messages by message ID",
      "result_type": {
        "name": "GETV3MessagesMsgIdResultAllOf",
        "type": "named"
      }
    },
    "GET_v3_scopes_requests": {
      "request": {
        "url": "/scopes/requests",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "Optional field to limit the number of results returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "Optional beginning point in the list to retrieve from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Retrieve access requests",
      "result_type": {
        "element_type": {
          "name": "GETV3ScopesRequestsResultObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_v3_senders": {
      "request": {
        "url": "/senders",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all Sender Identities",
      "result_type": {
        "name": "GETV3SendersResultObject",
        "type": "named"
      }
    },
    "GET_v3_senders_sender_id": {
      "request": {
        "url": "/senders/{sender_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sender_id": {
          "description": "The ID of the sender identity that you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "sender_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "View a Sender Identity",
      "result_type": {
        "name": "SenderID",
        "type": "named"
      }
    },
    "GET_v3_teammates": {
      "request": {
        "url": "/teammates",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "Number of items to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 500,
              "minimum": 0
            }
          }
        },
        "offset": {
          "description": "Paging offset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all teammates",
      "result_type": {
        "name": "GETV3TeammatesResultObject",
        "type": "named"
      }
    },
    "GET_v3_teammates_pending": {
      "request": {
        "url": "/teammates/pending",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all pending teammates",
      "result_type": {
        "name": "GETV3TeammatesPendingResultObject",
        "type": "named"
      }
    },
    "GET_v3_teammates_username": {
      "request": {
        "url": "/teammates/{username}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The username of the teammate that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve specific teammate",
      "result_type": {
        "name": "GETV3TeammatesUsernameResultObject",
        "type": "named"
      }
    },
    "GET_verified_senders": {
      "request": {
        "url": "/verified_senders",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "id",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "lastSeenID": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "name": "lastSeenID",
            "in": "query",
            "schema": {
              "type": [
                "number"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "number"
              ]
            }
          }
        }
      },
      "description": "Get All Verified Senders",
      "result_type": {
        "name": "GETVerifiedSendersResultObject",
        "type": "named"
      }
    },
    "GET_verified_senders_domains": {
      "request": {
        "url": "/verified_senders/domains",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Domain Warn List",
      "result_type": {
        "name": "GETVerifiedSendersDomainsResultObject",
        "type": "named"
      }
    },
    "GET_verified_senders_steps_completed": {
      "request": {
        "url": "/verified_senders/steps_completed",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Completed Steps",
      "result_type": {
        "name": "GETVerifiedSendersStepsCompletedResultObject",
        "type": "named"
      }
    },
    "GET_verified_senders_verify_token": {
      "request": {
        "url": "/verified_senders/verify/{token}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "token": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "token",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify Sender Request",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "GET_whitelabel_domains": {
      "request": {
        "url": "/whitelabel/domains",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domain": {
          "description": "Search for authenticated domains.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "domain",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "exclude_subusers": {
          "description": "Exclude subuser domains from the result.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "exclude_subusers",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "limit": {
          "description": "Number of domains to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "Paging offset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The username associated with an authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all authenticated domains",
      "result_type": {
        "element_type": {
          "name": "DomainAuthentication200Response",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_whitelabel_domains_default": {
      "request": {
        "url": "/whitelabel/domains/default",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domain": {
          "description": "The domain to find a default authentication.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "domain",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the default authentication",
      "result_type": {
        "element_type": {
          "name": "DomainAuthentication200Response",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_whitelabel_domains_domain_id": {
      "request": {
        "url": "/whitelabel/domains/{domain_id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domain_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domain_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an authenticated domain",
      "result_type": {
        "name": "AuthenticationDomain",
        "type": "named"
      }
    },
    "GET_whitelabel_domains_subuser": {
      "request": {
        "url": "/whitelabel/domains/subuser",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "Username for the subuser to find associated authenticated domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List the authenticated domain associated with the given user.",
      "result_type": {
        "name": "DomainAuthenticationDomainSpf",
        "type": "named"
      }
    },
    "GET_whitelabel_ips": {
      "request": {
        "url": "/whitelabel/ips",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ip": {
          "description": "The IP address segment that you'd like to use in a prefix search.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ip",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The maximum number of results to retrieve.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "offset": {
          "description": "The point in the list of results to begin retrieving IP addresses from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all reverse DNS records",
      "result_type": {
        "element_type": {
          "name": "ReverseDns",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_whitelabel_ips_id": {
      "request": {
        "url": "/whitelabel/ips/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the reverse DNS record that you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a reverse DNS record",
      "result_type": {
        "name": "ReverseDns",
        "type": "named"
      }
    },
    "GET_whitelabel_links": {
      "request": {
        "url": "/whitelabel/links",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "Limits the number of results returned per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve all branded links",
      "result_type": {
        "element_type": {
          "name": "LinkBranding200Response",
          "type": "named"
        },
        "type": "array"
      }
    },
    "GET_whitelabel_links_default": {
      "request": {
        "url": "/whitelabel/links/default",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domain": {
          "description": "The domain to match against when finding the default branded link.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "domain",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the default branded link",
      "result_type": {
        "name": "LinkBranding200Response",
        "type": "named"
      }
    },
    "GET_whitelabel_links_id": {
      "request": {
        "url": "/whitelabel/links/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the branded link you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a branded link",
      "result_type": {
        "name": "LinkBranding200Response",
        "type": "named"
      }
    },
    "GET_whitelabel_links_subuser": {
      "request": {
        "url": "/whitelabel/links/subuser",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The username of the subuser to retrieve associated branded links for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a subuser's branded link",
      "result_type": {
        "name": "LinkBranding200Response",
        "type": "named"
      }
    },
    "LIST_Sendgrid_Pre_built_designs": {
      "request": {
        "url": "/designs/pre-builts",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page_size": {
          "description": "number of results to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "page_token": {
          "description": "token corresponding to a specific page of results, as provided by metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "summary": {
          "description": "set to false to return all fields",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "summary",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "List SendGrid Pre-built Designs",
      "result_type": {
        "name": "LISTSendgridPreBuiltDesignsResultObject",
        "type": "named"
      }
    },
    "LIST_designs": {
      "request": {
        "url": "/designs",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page_size": {
          "description": "number of results to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "page_token": {
          "description": "token corresponding to a specific page of results, as provided by metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "summary": {
          "description": "set to false to return all fields",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "summary",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "List Designs",
      "result_type": {
        "name": "LISTDesignsResultObject",
        "type": "named"
      }
    },
    "get_automation_link_stat": {
      "request": {
        "url": "/marketing/stats/automations/{id}/links",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "group_by": {
          "description": "Automations can have multiple steps. Including `step_id` as a `group_by` metric allows further granularity of stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the Automation you want to get click tracking stats for.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page_size": {
          "description": "The number of elements you want returned on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "description": "The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "step_ids": {
          "description": "Comma-separated list of `step_ids` that you want the link stats for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "step_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        }
      },
      "description": "Get Automation Click Tracking Stats by ID",
      "result_type": {
        "name": "AutomationsLinkStatsResponse",
        "type": "named"
      }
    },
    "get_automation_stat": {
      "request": {
        "url": "/marketing/stats/automations/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "Dictates how the stats are time-sliced. Currently, `\"total\"` and `\"day\"` are supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GetAutomationStatAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "Format: `YYYY-MM-DD`.If this parameter is included, the stats' end date is included in the search.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Date",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "group_by": {
          "description": "Automations can have multiple steps. Including `step_id` as a `group_by` metric allows further granularity of stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page_size": {
          "description": "The number of elements you want returned on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "description": "The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "Format: `YYYY-MM-DD`. If this parameter is included, the stats' start date is included in the search.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Date",
              "type": "named"
            }
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "step_ids": {
          "description": "Comma-separated list of `step_ids` that you want the link stats for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "step_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "timezone": {
          "description": "[IANA Area/Region](https://en.wikipedia.org/wiki/Tz_database#Names_of_time_zones) string representing the timezone in which the stats are to be presented, e.g., \"America/Chicago\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "timezone",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Automation Stats by ID",
      "result_type": {
        "name": "AutomationsResponse",
        "type": "named"
      }
    },
    "get_automations_stats_export": {
      "request": {
        "url": "/marketing/stats/automations/export",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ids": {
          "description": "The IDs of Automations for which to export stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "timezone": {
          "description": "The [IANA Area/Region](https://en.wikipedia.org/wiki/Tz_database#Names_of_time_zones) string representing the timezone in which the stats are to be presented; i.e. `\"America/Chicago\"`. This parameter changes the timezone format only; it does not alter which stats are returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "timezone",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Export Automation Stats",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "get_singlesend_link_stat": {
      "request": {
        "url": "/marketing/stats/singlesends/{id}/links",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ab_phase_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GetSinglesendLinkStatAbPhaseIdEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "ab_phase_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ab_variation_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "name": "ab_variation_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "group_by": {
          "description": "A/B Single Sends have multiple variation IDs and phase IDs. Including these additional fields allows further granularity of stats by these fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page_size": {
          "description": "The number of elements you want returned on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "description": "The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Single Send Click Tracking Stats by ID",
      "result_type": {
        "name": "SinglesendsLinkStatsResponse",
        "type": "named"
      }
    },
    "get_singlesend_stat": {
      "request": {
        "url": "/marketing/stats/singlesends/{id}",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "aggregated_by": {
          "description": "Dictates how the stats are time-sliced. Currently, `\"total\"` and `\"day\"` are supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GetSinglesendStatAggregatedByEnum",
              "type": "named"
            }
          },
          "http": {
            "name": "aggregated_by",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "end_date": {
          "description": "Format: `YYYY-MM-DD`.If this parameter is included, the stats' end date is included in the search.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Date",
              "type": "named"
            }
          },
          "http": {
            "name": "end_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "group_by": {
          "description": "A/B Single Sends have multiple variation IDs and phase IDs. Including these additional fields allows further granularity of stats by these fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "group_by",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page_size": {
          "description": "The number of elements you want returned on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "description": "The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "Format: `YYYY-MM-DD`. If this parameter is included, the stats' start date is included in the search.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Date",
              "type": "named"
            }
          },
          "http": {
            "name": "start_date",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "timezone": {
          "description": "[IANA Area/Region](https://en.wikipedia.org/wiki/Tz_database#Names_of_time_zones) string representing the timezone in which the stats are to be presented, e.g., \"America/Chicago\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "timezone",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Single Send Stats by ID",
      "result_type": {
        "name": "SinglesendsResponse",
        "type": "named"
      }
    },
    "get_singlesend_stats_export": {
      "request": {
        "url": "/marketing/stats/singlesends/export",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ids": {
          "description": "The IDs of Single Sends for which to export stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "timezone": {
          "description": "The [IANA Area/Region](https://en.wikipedia.org/wiki/Tz_database#Names_of_time_zones) string representing the timezone in which the stats are to be presented; i.e. `\"America/Chicago\"`. This parameter changes the timezone format only; it does not alter which stats are returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "timezone",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Export Single Send Stats",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "getall_automation_stats": {
      "request": {
        "url": "/marketing/stats/automations",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "automation_ids": {
          "description": "This endpoint returns all automation IDs if no `automation_ids` are specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "automation_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        },
        "page_size": {
          "description": "The number of elements you want returned on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "description": "The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get All Automation Stats",
      "result_type": {
        "name": "AutomationsResponse",
        "type": "named"
      }
    },
    "getall_singlesend_stats": {
      "request": {
        "url": "/marketing/stats/singlesends",
        "method": "get",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page_size": {
          "description": "The number of elements you want returned on each page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "page_token": {
          "description": "The stats endpoints are paginated. To get the next page, call the passed `_metadata.next` URL. If `_metadata.prev` doesn't exist, you're at the first page. Similarly, if `_metadata.next` is not present, you're at the last page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "singlesend_ids": {
          "description": "This endpoint returns all Single Send IDs if no IDs are included in `singlesend_ids`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "singlesend_ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        }
      },
      "description": "Get All Single Sends Stats",
      "result_type": {
        "name": "SinglesendsResponse",
        "type": "named"
      }
    }
  },
  "object_types": {
    "AbtestSummary": {
      "fields": {
        "duration": {
          "description": "How long the A/B Testing will last",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expiration_date": {
          "description": "Last day to select an A/B Test Winner",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "test_percentage": {
          "description": "What percentage of your recipient will be included in your A/B testing",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "description": "What differs between the A/B tests",
          "type": {
            "name": "AbtestSummaryTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "winner_criteria": {
          "description": "How the winner will be decided",
          "type": {
            "name": "AbtestSummaryWinnerCriteriaEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "winner_selected_at": {
          "description": "When the winner was selected",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "winning_template_id": {
          "description": "Winner of the A/B Test",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "abtest_summary"
    },
    "AdvancedStatsClicks": {
      "description": "The individual events and their stats.",
      "fields": {
        "clicks": {
          "description": "The number of links that were clicked in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "advanced_stats_clicks"
    },
    "AdvancedStatsClicksOpens": {
      "description": "The individual events and their stats.",
      "fields": {
        "clicks": {
          "description": "The number of links that were clicked in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "opens": {
          "description": "The total number of times your emails were opened by recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "description": "The number of unique recipients who opened your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AdvancedStatsMailboxProvider": {
      "description": "The individual events and their stats.",
      "fields": {
        "blocks": {
          "description": "The number of emails that were not allowed to be delivered by ISPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounces": {
          "description": "The number of emails that bounced instead of being delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "clicks": {
          "description": "The number of links that were clicked in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "deferred": {
          "description": "The number of emails that temporarily could not be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "delivered": {
          "description": "The number of emails SendGrid was able to confirm were actually delivered to a recipient.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "drops": {
          "description": "The number of emails that were not delivered due to the recipient email address being on a suppression list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "opens": {
          "description": "The total number of times your emails were opened by recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "processed": {
          "description": "Requests from your website, application, or mail client via SMTP Relay or the Web API that SendGrid processed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "requests": {
          "description": "The number of emails that were requested to be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_reports": {
          "description": "The number of recipients who marked your email as spam.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "description": "The number of unique recipients who opened your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AdvancedStatsOpens": {
      "description": "The individual events and their stats.",
      "fields": {
        "opens": {
          "description": "The total number of times your emails were opened by recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "description": "The number of unique recipients who opened your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "advanced_stats_opens"
    },
    "AllSegmentsResponse": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "contacts_count": {
          "description": "Total number of contacts present in the segment",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "description": "ISO8601 timestamp of when the object was created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID assigned to the segment when created.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "description": "Name of the segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "next_sample_update": {
          "description": "ISO8601 timestamp of when the samples will be next updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent_list_ids": {
          "description": "The array of list ids to filter contacts on when building this segment. It allows only one such list id for now. We will support more in future",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "query_version": {
          "description": "If not set, segment contains a query for use with Segment v1 APIs. If set to '2', segment contains a SQL query for use in v2.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sample_updated_at": {
          "description": "ISO8601 timestamp of when the samples were last updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Segment status indicates whether the segment's contacts will be updated periodically",
          "type": {
            "name": "SegmentStatusResponse",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "description": "ISO8601 timestamp of when the object was last updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "all_segments_response"
    },
    "ApiKeyNameId": {
      "fields": {
        "api_key_id": {
          "description": "The ID of your API Key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of your API Key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "api_key_name_id"
    },
    "ApiKeyNameIdScopes": {
      "fields": {
        "api_key_id": {
          "description": "The ID of your API Key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of your API Key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "The permissions this API Key has access to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AuthenticationDomain": {
      "fields": {
        "automatic_security": {
          "description": "Indicates if this authenticated domain uses automated security.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "custom_spf": {
          "description": "Indicates whether this authenticated domain uses custom SPF.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "description": "Indicates if this is the default authenticated domain.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dns": {
          "description": "The DNS records used to authenticate the sending domain.",
          "type": {
            "name": "AuthenticationDomainDnsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain": {
          "description": "The domain to be authenticated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the authenticated domain.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "ips": {
          "description": "The IPs to be included in the custom SPF record for this authenticated domain.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "legacy": {
          "description": "Indicates if this authenticated domain was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new authenticated domain if you need to update it.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain to use for this authenticated domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "description": "The ID of the user that this domain is associated with.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "username": {
          "description": "The username that this domain will be associated with.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid authenticated domain.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "authentication::domain"
    },
    "AuthenticationDomainDnsDkim1Object": {
      "description": "A DNS record.",
      "fields": {
        "data": {
          "description": "The DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain that this DNS record was created for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid DNS record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "AuthenticationDomainDnsDkim2Object": {
      "description": "A DNS record.",
      "fields": {
        "data": {
          "description": "The DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain that this DNS record was created for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid DNS record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "AuthenticationDomainDnsMailCnameObject": {
      "description": "The CNAME for your sending domain that points to sendgrid.net.",
      "fields": {
        "data": {
          "description": "The CNAME record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain that this CNAME is created for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "hostname"
          }
        },
        "type": {
          "description": "The type of DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid CNAME.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "AuthenticationDomainDnsObject": {
      "description": "The DNS records used to authenticate the sending domain.",
      "fields": {
        "dkim1": {
          "description": "A DNS record.",
          "type": {
            "name": "AuthenticationDomainDnsDkim1Object",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dkim2": {
          "description": "A DNS record.",
          "type": {
            "name": "AuthenticationDomainDnsDkim2Object",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "mail_cname": {
          "description": "The CNAME for your sending domain that points to sendgrid.net.",
          "type": {
            "name": "AuthenticationDomainDnsMailCnameObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AutomationsLinkStatsResponse": {
      "fields": {
        "_metadata": {
          "type": {
            "name": "LinkTrackingMetadata",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "results": {
          "type": {
            "element_type": {
              "name": "AutomationsLinkStatsResponseResultsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_clicks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "automations-link-stats-response"
    },
    "AutomationsLinkStatsResponseResultsObject": {
      "fields": {
        "clicks": {
          "description": "The number of clicks on this particular link.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 1
          }
        },
        "step_id": {
          "description": "This is the ID of the step if the stats were requested to be grouped by `step_id`.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "url": {
          "description": "This is the URL of the link clicked. If `{{custom_fields}}` are part of the URL, they will be included.",
          "type": {
            "name": "URIString",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url_location": {
          "description": "This is the location of the link clicked in each Automation step. Links are located according to their position within the message; the topmost link has index `0`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        }
      }
    },
    "AutomationsResponse": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "results": {
          "type": {
            "element_type": {
              "name": "AutomationsResponseResultsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "automations-response"
    },
    "AutomationsResponseResultsObject": {
      "fields": {
        "aggregation": {
          "description": "This describes the time unit to which the stat is rolled up. It is based on the `aggregated_by` parameter included in the request. It can be \"total\" or the date (in YYYY-MM-DD format) the stats are for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "This is the ID of the Automation you are requesting stats for.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "stats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metrics",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "step_id": {
          "description": "This is the ID of the step if the stats were requested to be grouped by `step_id`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BlocksResponse": {
      "fields": {
        "created": {
          "description": "A Unix timestamp indicating when the email address was added to the blocks list.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address that was added to the block list.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "reason": {
          "description": "An explanation for the reason of the block.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the block.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "blocks-response"
    },
    "BounceResponse": {
      "fields": {
        "created": {
          "description": "The unix timestamp for when the bounce record was created at SendGrid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "email": {
          "description": "The email address that was added to the bounce list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "reason": {
          "description": "The reason for the bounce. This typically will be a bounce code, an enhanced code, and a description.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Enhanced SMTP bounce response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "bounce_response"
    },
    "CampaignRequestInput": {
      "fields": {
        "categories": {
          "description": "The categories you would like associated to this campaign.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "custom_unsubscribe_url": {
          "description": "This is the url of the custom unsubscribe page that you provide for customers to unsubscribe from your suppression groups.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CampaignRequestEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_content": {
          "description": "The HTML of your marketing email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ip_pool": {
          "description": "The pool of IPs that you would like to send this email from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "list_ids": {
          "description": "The IDs of the lists you are sending this campaign to. You can have both segment IDs and list IDs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "plain_content": {
          "description": "The plain text content of your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "segment_ids": {
          "description": "The segment IDs that you are sending this list to. You can have both segment IDs and list IDs. Segments are limited to 10 segment IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sender_id": {
          "description": "The ID of the \"sender\" identity that you have created. Your recipients will see this as the \"from\" on your marketing emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subject": {
          "description": "The subject of your campaign that your recipients will see.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suppression_group_id": {
          "description": "The suppression group that this marketing email belongs to, allowing recipients to opt-out of emails of this type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "title": {
          "description": "The display title of your campaign. This will be viewable by you in the Marketing Campaigns UI.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "campaign_request"
    },
    "CampaignResponse": {
      "fields": {
        "categories": {
          "description": "The categories you would like associated to this campaign.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "custom_unsubscribe_url": {
          "description": "This is the url of the custom unsubscribe page that you provide for customers to unsubscribe from your suppression groups.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CampaignRequestEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_content": {
          "description": "The HTML of your marketing email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ip_pool": {
          "description": "The pool of IPs that you would like to send this email from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "list_ids": {
          "description": "The IDs of the lists you are sending this campaign to. You can have both segment IDs and list IDs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "plain_content": {
          "description": "The plain text content of your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "segment_ids": {
          "description": "The segment IDs that you are sending this list to. You can have both segment IDs and list IDs. Segments are limited to 10 segment IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sender_id": {
          "description": "The ID of the \"sender\" identity that you have created. Your recipients will see this as the \"from\" on your marketing emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "The status of your campaign.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "The subject of your campaign that your recipients will see.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suppression_group_id": {
          "description": "The suppression group that this marketing email belongs to, allowing recipients to opt-out of emails of this type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "title": {
          "description": "The display title of your campaign. This will be viewable by you in the Marketing Campaigns UI.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CategoryStats": {
      "fields": {
        "date": {
          "description": "The date the statistics were gathered.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CategoryStatsStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "category_stats"
    },
    "CategoryStatsStatsMetricsObject": {
      "fields": {
        "blocks": {
          "description": "The number of emails that were not allowed to be delivered by ISPs.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounce_drops": {
          "description": "The number of emails that were dropped because of a bounce.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounces": {
          "description": "The number of emails that bounced instead of being delivered.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "clicks": {
          "description": "The number of links that were clicked.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "deferred": {
          "description": "The number of emails that temporarily could not be delivered.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "delivered": {
          "description": "The number of emails SendGrid was able to confirm were actually delivered to a recipient.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "invalid_emails": {
          "description": "The number of recipients who had malformed email addresses or whose mail provider reported the address as invalid.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "opens": {
          "description": "The total number of times your emails were opened by recipients.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "processed": {
          "description": "Requests from your website, application, or mail client via SMTP Relay or the API that SendGrid processed.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "requests": {
          "description": "The number of emails that were requested to be delivered.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_report_drops": {
          "description": "The number of emails that were dropped due to a recipient previously marking your emails as spam.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_reports": {
          "description": "The number of recipients who marked your email as spam.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "description": "The number of unique recipients who opened your emails.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unsubscribe_drops": {
          "description": "The number of emails dropped due to a recipient unsubscribing from your emails.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unsubscribes": {
          "description": "The number of recipients who unsubscribed from your emails.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "CategoryStatsStatsObject": {
      "fields": {
        "metrics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CategoryStatsStatsMetricsObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the category.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "How you are segmenting your statistics.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CcBccEmailObjectInput": {
      "fields": {
        "email": {
          "description": "The intended recipient's email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "name": {
          "description": "The intended recipient's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "cc_bcc_email_object"
    },
    "ClickTracking": {
      "fields": {
        "enable_text": {
          "description": "Indicates if click tracking is enabled for plain text emails.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if click tracking is enabled or disabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "click-tracking"
    },
    "ContactDetails2": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Selfmetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "address_line_1": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address_line_2": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "alternate_emails": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "email"
            }
          }
        },
        "city": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "custom_fields": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "facebook": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "last_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "line": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "list_ids": {
          "type": {
            "element_type": {
              "name": "UUID",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        },
        "phone_number": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "postal_code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "segment_ids": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        },
        "state_province_region": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unique_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "whatsapp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "contact-details2"
    },
    "ContactDetails3": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Selfmetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "address_line_1": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address_line_2": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "alternate_emails": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "city": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "custom_fields": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "facebook": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "line": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "list_ids": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "phone_number": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "postal_code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "segment_ids": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state_province_region": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unique_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "whatsapp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "contact-details3"
    },
    "ContactExport": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "completed_at": {
          "description": "The ISO8601 timestamp when the export was completed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contact_count": {
          "description": "The total number of exported contacts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "description": "The ISO8601 timestamp when the export was begun.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "The ISO8601 timestamp when the exported file on S3 will expire.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "A human readable message if the status is `failure`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The export job's status. Allowed values: `pending`, `ready`, or `failure`.",
          "type": {
            "name": "ContactExportStatusEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The ISO8601 timestamp when the export was updated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "urls": {
          "description": "One or more download URLs for the contact file if the status is `ready`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "contact-export"
    },
    "ContactImport": {
      "fields": {
        "finished_at": {
          "description": "The ISO8601 timestamp when the job was finished.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The job ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "job_type": {
          "description": "The job type. Allowed values: `upsert`, or `delete`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "results": {
          "description": "Result map of the import job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactImportResultsObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "started_at": {
          "description": "The ISO8601 timestamp when the job was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The job state. Allowed values: `pending`, `completed`, `errored`, or `failed`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "contact-import"
    },
    "ContactImportResultsObject": {
      "description": "Result map of the import job.",
      "fields": {
        "created_count": {
          "description": "Created contact count from the import.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "deleted_count": {
          "description": "Count of deleted contacts that resulted in error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "errored_count": {
          "description": "Count of imported contacts that resulted in error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "errors_url": {
          "description": "The download URL of the file which provides information about any errors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "requested_count": {
          "description": "Requested contact count from the import.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "updated_count": {
          "description": "Updated contact count from the import.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "ContactRequestInput": {
      "fields": {
        "address_line_1": {
          "description": "The first line of the address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "address_line_2": {
          "description": "An optional second line for the address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "alternate_emails": {
          "description": "Additional emails associated with the contact.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 254
            }
          }
        },
        "city": {
          "description": "The contact's city.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 60
          }
        },
        "country": {
          "description": "The contact's country. Can be a full name or an abbreviation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50
          }
        },
        "custom_fields": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomFieldsById",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "description": "The contact's primary email. This is required to be a valid email.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 254
          }
        },
        "first_name": {
          "description": "The contact's personal name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50
          }
        },
        "last_name": {
          "description": "The contact's family name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50
          }
        },
        "postal_code": {
          "description": "The contact's ZIP code or other postal code.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state_province_region": {
          "description": "The contact's state, province, or region.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50
          }
        }
      },
      "alias": "contact-request"
    },
    "ContactResponse": {
      "fields": {
        "address_line_1": {
          "description": "First line of address of the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 0
          }
        },
        "address_line_2": {
          "description": "Second line of address of the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 0
          }
        },
        "alternate_emails": {
          "description": "Alternate emails of the contact. This is a reserved field.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "email",
              "maxLength": 254,
              "minLength": 3
            }
          }
        },
        "city": {
          "description": "City associated with the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z-\\s\\/\\-\\)\\(\\`\\.\\\"\\']+$",
            "minLength": 0
          }
        },
        "country": {
          "description": "Country associated with the address of the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 0
          }
        },
        "custom_fields": {
          "description": "The user may choose to create up to 120 custom fields or none at all. This is not a reserved field.",
          "type": {
            "name": "ContactResponseCustomFieldsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "description": "Email of the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email",
            "maxLength": 254,
            "minLength": 3
          }
        },
        "first_name": {
          "description": "First name of the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "id": {
          "description": "ID assigned to a contact when added to the system.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
            "maxLength": 36
          }
        },
        "last_name": {
          "description": "Last name of the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "list_ids": {
          "description": "IDs of all lists the contact is part of",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        },
        "postal_code": {
          "description": "Zipcode associated with the address of the contact. This is a reserved field.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "segment_ids": {
          "description": "IDs of all segments the contact is part of",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        },
        "state_province_region": {
          "description": "State associated with the contact. This is a reserved field.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 0
          }
        }
      },
      "alias": "contact_response"
    },
    "ContactResponseCustomFieldsObject": {
      "description": "The user may choose to create up to 120 custom fields or none at all. This is not a reserved field.",
      "fields": {
        "": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "custom_field_name1": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 0
          }
        },
        "custom_field_name2": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 0
          }
        }
      }
    },
    "ContactdbCustomFieldWithId": {
      "fields": {
        "id": {
          "description": "The ID of the custom field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "name": {
          "description": "The name of the field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of the field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactdbCustomFieldTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ContactdbCustomFieldWithIdValue": {
      "fields": {
        "id": {
          "description": "The ID of the custom field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "name": {
          "description": "The name of the field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of the field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactdbCustomFieldTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value of this recipient's custom field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ContactdbList": {
      "fields": {
        "id": {
          "description": "The reference ID of your list.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of your list. Must be unique against all other list and segment names.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "recipient_count": {
          "description": "The count of recipients currently in the list.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "contactdb_list"
    },
    "ContactdbRecipient": {
      "fields": {
        "recipients": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbRecipientRecipientsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "contactdb_recipient"
    },
    "ContactdbRecipientCount": {
      "fields": {
        "recipient_count": {
          "description": "The count of recipients.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      },
      "alias": "contactdb_recipient_count"
    },
    "ContactdbRecipientRecipientsObject": {
      "fields": {
        "created_at": {
          "description": "The time this record was created in your contactdb, in unixtime.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "custom_fields": {
          "description": "The custom fields assigned to this recipient and their values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbCustomFieldWithIdValue",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "email": {
          "description": "The email address of this recipient. This is a default custom field that SendGrid provides.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "first_name": {
          "description": "The first name of this recipient. This is a default custom field that SendGrid provides.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of this recipient.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_clicked": {
          "description": "The last time this recipient clicked a link from one of your campaigns, in unixtime.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "last_emailed": {
          "description": "The last time this user was emailed by one of your campaigns, in unixtime.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "last_name": {
          "description": "The last name of the recipient.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_opened": {
          "description": "The last time this recipient opened an email from you, in unixtime.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "updated_at": {
          "description": "The last update date for this recipient's record.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "ContactdbRecipientResponse": {
      "fields": {
        "error_count": {
          "description": "The number of errors found while adding recipients.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "error_indices": {
          "description": "The indices of the recipient(s) sent that caused the error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Float64",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "number"
              ]
            }
          }
        },
        "errors": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbRecipientResponseErrorsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "new_count": {
          "description": "The count of new recipients added to the contactdb.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "persisted_recipients": {
          "description": "The recipient IDs of the recipients that already existed from this request.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updated_count": {
          "description": "The recipients who were updated from this request.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      },
      "alias": "contactdb_recipient_response"
    },
    "ContactdbRecipientResponseErrorsObject": {
      "fields": {
        "error_indices": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Float64",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "number"
              ]
            }
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ContactdbSegments": {
      "fields": {
        "conditions": {
          "description": "The conditions for a recipient to be included in this segment.",
          "type": {
            "element_type": {
              "name": "ContactdbSegmentsConditions",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "list_id": {
          "description": "The list id from which to make this segment. Not including this ID will mean your segment is created from the main contactdb rather than a list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of this segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "recipient_count": {
          "description": "The count of recipients in this list. This is not included on creation of segments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      },
      "alias": "contactdb_segments"
    },
    "ContactdbSegmentsConditions": {
      "fields": {
        "and_or": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactdbSegmentsConditionsAndOrEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "field": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "operator": {
          "type": {
            "name": "ContactdbSegmentsConditionsOperatorEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "contactdb_segments_conditions"
    },
    "ContactdbSegmentsConditionsInput": {
      "fields": {
        "and_or": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactdbSegmentsConditionsAndOrEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "field": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "operator": {
          "type": {
            "name": "ContactdbSegmentsConditionsOperatorEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "contactdb_segments_conditions"
    },
    "ContactdbSegmentsInput": {
      "fields": {
        "conditions": {
          "description": "The conditions for a recipient to be included in this segment.",
          "type": {
            "element_type": {
              "name": "ContactdbSegmentsConditionsInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "list_id": {
          "description": "The list id from which to make this segment. Not including this ID will mean your segment is created from the main contactdb rather than a list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of this segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "recipient_count": {
          "description": "The count of recipients in this list. This is not included on creation of segments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      },
      "alias": "contactdb_segments"
    },
    "ContactdbSegmentsWithId": {
      "fields": {
        "conditions": {
          "description": "The conditions for a recipient to be included in this segment.",
          "type": {
            "element_type": {
              "name": "ContactdbSegmentsConditions",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the segment.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "list_id": {
          "description": "The list id from which to make this segment. Not including this ID will mean your segment is created from the main contactdb rather than a list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of this segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "recipient_count": {
          "description": "The count of recipients in this list. This is not included on creation of segments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "CreateApiKeysBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The name you will use to describe this API Key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "The individual permissions that you are giving to this API Key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateApiKeysResultObject": {
      "fields": {
        "api_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "api_key_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CreateIntegrationRequestInput": {
      "fields": {
        "completed_integration": {
          "description": "Indicates if the integration is complete.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the integration is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "entity_id": {
          "description": "An identifier provided by your IdP to identify Twilio SendGrid in the SAML interaction. This is called the \"SAML Issuer ID\" in the Twilio SendGrid UI.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of your integration. This name can be anything that makes sense for your organization (eg. Twilio SendGrid)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signin_url": {
          "description": "The IdP's SAML POST endpoint. This endpoint should receive requests and initiate an SSO login flow. This is called the \"Embed Link\" in the Twilio SendGrid UI.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signout_url": {
          "description": "This URL is relevant only for an IdP-initiated authentication flow. If a user authenticates from their IdP, this URL will return them to their IdP when logging out.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "create-integration-request"
    },
    "CustomFieldDefinitionsResponse": {
      "fields": {
        "field_type": {
          "type": {
            "name": "CustomFieldDefinitionsResponseFieldTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      },
      "alias": "custom_field_definitions_response"
    },
    "DELETEAccessSettingsWhitelistBodyObjectInput": {
      "fields": {
        "ids": {
          "description": "An array of the IDs of the IP address that you want to remove from your allow list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "DELETEListsIdResultObject": {
      "description": "The delete has been accepted and is processing.",
      "fields": {
        "job_id": {
          "description": "job_id of the async job",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DELETEMcContactsResultObject": {
      "description": "The deletion job has been accepted and is being processed.",
      "fields": {
        "job_id": {
          "description": "The deletion job ID.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "DELETEMcListsIdContactsResultObject": {
      "description": "The removal is accepted and processing.",
      "fields": {
        "job_id": {
          "description": "job_id of the async job",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DELETESuppressionBlocksBodyObjectInput": {
      "fields": {
        "delete_all": {
          "description": "Indicates if you want to delete all blocked email addresses.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "emails": {
          "description": "The specific blocked email addresses that you want to delete.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "DELETESuppressionBouncesBodyObjectInput": {
      "fields": {
        "delete_all": {
          "description": "This parameter allows you to delete **every** email in your bounce list. This should not be used with the emails parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "emails": {
          "description": "Delete multiple emails from your bounce list at the same time. This should not be used with the delete_all parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "DELETESuppressionInvalidEmailsBodyObjectInput": {
      "fields": {
        "delete_all": {
          "description": "Indicates if you want to remove all email address from the invalid emails list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "emails": {
          "description": "The list of specific email addresses that you want to remove.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "email"
            }
          }
        }
      }
    },
    "DELETESuppressionSpamReportsBodyObjectInput": {
      "fields": {
        "delete_all": {
          "description": "Indicates if you want to delete all email addresses on the spam report list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "emails": {
          "description": "A list of specific email addresses that you want to remove from the spam report list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "DELETEV3TeammatesUsernameResultErrorsObject": {
      "fields": {
        "field": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DELETEV3TeammatesUsernameResultObject": {
      "fields": {
        "errors": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DELETEV3TeammatesUsernameResultErrorsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "DesignDuplicateInputInput": {
      "fields": {
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DesignDuplicateInputEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the new design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "design-duplicate-input"
    },
    "DesignInputInput": {
      "fields": {
        "categories": {
          "description": "The list of categories applied to the design",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 255
            }
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DesignDuplicateInputEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If true, plain_content is always generated from html_content. If false, plain_content is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of the Design.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "name": {
          "description": "The name of the new design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "Plain text content of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "subject": {
          "description": "Subject of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 5000
          }
        }
      }
    },
    "DesignOutput": {
      "fields": {
        "categories": {
          "description": "The list of categories applied to the design",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "String",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 255
            }
          }
        },
        "created_at": {
          "description": "Datetime that Design was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ISO 8601 date-time"
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DesignDuplicateInputEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If true, plain_content is always generated from html_content. If false, plain_content is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of the Design.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "id": {
          "description": "ID of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "name": {
          "description": "The name of the new design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "Plain text content of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "subject": {
          "description": "Subject of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 5000
          }
        },
        "thumbnail_url": {
          "description": "A Thumbnail preview of the template's html content.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "Datetime that Design was last updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ISO 8601 date-time"
          }
        }
      }
    },
    "DesignOutputSummary": {
      "fields": {
        "categories": {
          "description": "The list of categories applied to the design",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 255
            }
          }
        },
        "created_at": {
          "description": "Datetime that Design was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ISO 8601 date-time"
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DesignDuplicateInputEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If true, plain_content is always generated from html_content. If false, plain_content is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "description": "ID of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "name": {
          "description": "The name of the new design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "Subject of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 5000
          }
        },
        "thumbnail_url": {
          "description": "A Thumbnail preview of the template's html content.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "Datetime that Design was last updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ISO 8601 date-time"
          }
        }
      }
    },
    "DomainAuthentication200Response": {
      "fields": {
        "automatic_security": {
          "description": "Indicates if this authenticated domain uses automated security.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "custom_spf": {
          "description": "Indicates whether this authenticated domain uses custom SPF.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "description": "Indicates if this is the default authenticated domain.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dns": {
          "description": "The DNS records used to authenticate the sending domain.",
          "type": {
            "name": "AuthenticationDomainDnsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain": {
          "description": "The domain to be authenticated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the authenticated domain.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "ips": {
          "description": "The IPs to be included in the custom SPF record for this authenticated domain.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "last_validation_attempt_at": {
          "description": "A Unix epoch timestamp representing the last time of a validation attempt.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "legacy": {
          "description": "Indicates if this authenticated domain was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new authenticated domain if you need to update it.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain to use for this authenticated domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subusers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DomainAuthentication200Response1SubusersObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "user_id": {
          "description": "The ID of the user that this domain is associated with.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "username": {
          "description": "The username that this domain will be associated with.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid authenticated domain.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DomainAuthentication200Response1SubusersObject": {
      "fields": {
        "user_id": {
          "description": "The ID of the subuser that this authenticated domain will be associated with.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "The username of the subuser that this authenticated domain is associated with.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpf": {
      "fields": {
        "automatic_security": {
          "description": "Indicates if this authenticated domain uses automated security.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "custom_spf": {
          "description": "Indicates if this authenticated domain uses custom SPF.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "description": "Indicates if this is the default domain.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dns": {
          "description": "The DNS records for this authenticated domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain": {
          "description": "The domain authenticated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the authenticated domain.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ips": {
          "description": "The IP addresses that are included in the SPF record for this authenticated domain.",
          "type": {
            "element_type": {
              "name": "JSON",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "legacy": {
          "description": "Indicates if this authenticated domain was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new authenticated domain if you need to update it.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain that was used to create this authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "description": "The user_id of the account that this authenticated domain is associated with.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "The username of the account that this authenticated domain is associated with.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid authenticated domain .",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "domain_authentication:domain_spf"
    },
    "DomainAuthenticationDomainSpfDnsDkimObject": {
      "description": "The DKIM record for messages sent using this authenticated domain.",
      "fields": {
        "data": {
          "description": "The DKIM record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The DNS labels for the DKIM signature.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of data in the DKIM record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the DKIM record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsDomainSpfObject": {
      "description": "The SPF record for the root domain.",
      "fields": {
        "data": {
          "description": "The SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The root domain that this SPF record will be used to authenticate.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of data in the SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the SPF record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsMailServerObject": {
      "description": "Designates which mail server is responsible for accepting messages from a domain.",
      "fields": {
        "data": {
          "description": "The mail server responsible for accepting messages from the sending domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain sending the messages.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "They type of DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid DNS record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsObject": {
      "description": "The DNS records for this authenticated domain.",
      "fields": {
        "dkim": {
          "description": "The DKIM record for messages sent using this authenticated domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsDkimObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain_spf": {
          "description": "The SPF record for the root domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsDomainSpfObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "mail_server": {
          "description": "Designates which mail server is responsible for accepting messages from a domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsMailServerObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subdomain_spf": {
          "description": "The SPF record for the subdomain used to create this authenticated domain.",
          "type": {
            "name": "DomainAuthenticationDomainSpfDnsSubdomainSpfObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "DomainAuthenticationDomainSpfDnsSubdomainSpfObject": {
      "description": "The SPF record for the subdomain used to create this authenticated domain.",
      "fields": {
        "data": {
          "description": "The SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain that this SPF record will be used to authenticate.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of data in the SPF record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid SPF record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "EnforcedTlsRequestResponse": {
      "fields": {
        "require_tls": {
          "description": "Indicates if you want to require your recipients to support TLS.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "require_valid_cert": {
          "description": "Indicates if you want to require your recipients to have a valid certificate.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "enforced-tls-request-response"
    },
    "EnforcedTlsRequestResponseInput": {
      "fields": {
        "require_tls": {
          "description": "Indicates if you want to require your recipients to support TLS.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "require_valid_cert": {
          "description": "Indicates if you want to require your recipients to have a valid certificate.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "enforced-tls-request-response"
    },
    "EventWebhookResponse": {
      "fields": {
        "bounce": {
          "description": "Receiving server could not or would not accept message.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "click": {
          "description": "Recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deferred": {
          "description": "Recipient's email server temporarily rejected message.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "delivered": {
          "description": "Message has been successfully delivered to the receiving server.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dropped": {
          "description": "You may see the following drop reasons: Invalid SMTPAPI header, Spam Content (if spam checker app enabled), Unsubscribed Address, Bounced Address, Spam Reporting Address, Invalid, Recipient List over Package Quota",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the event webhook is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "group_resubscribe": {
          "description": "Recipient resubscribes to specific group by updating preferences. You need to enable Subscription Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "group_unsubscribe": {
          "description": "Recipient unsubscribe from specific group, by either direct link or updating preferences. You need to enable Subscription Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "oauth_client_id": {
          "description": "The client ID Twilio SendGrid sends to your OAuth server or service provider to generate an OAuth access token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oauth_token_url": {
          "description": "The URL where Twilio SendGrid sends the Client ID and Client Secret to generate an access token. This should be your OAuth server or service provider.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open": {
          "description": "Recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "processed": {
          "description": "Message has been received and is ready to be delivered.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "spam_report": {
          "description": "Recipient marked a message as spam.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "unsubscribe": {
          "description": "Recipient clicked on message's subscription management link. You need to enable Subscription Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "description": "The URL that you want the event webhook to POST to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "event-webhook-response"
    },
    "EventWebhookUpdateOauthRequestInput": {
      "fields": {
        "bounce": {
          "description": "Receiving server could not or would not accept message.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "click": {
          "description": "Recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deferred": {
          "description": "Recipient's email server temporarily rejected message.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "delivered": {
          "description": "Message has been successfully delivered to the receiving server.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dropped": {
          "description": "You may see the following drop reasons: Invalid SMTPAPI header, Spam Content (if spam checker app enabled), Unsubscribed Address, Bounced Address, Spam Reporting Address, Invalid, Recipient List over Package Quota",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the event webhook is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "group_resubscribe": {
          "description": "Recipient resubscribes to specific group by updating preferences. You need to enable Subscription Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "group_unsubscribe": {
          "description": "Recipient unsubscribe from specific group, by either direct link or updating preferences. You need to enable Subscription Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "oauth_client_id": {
          "description": "The client ID Twilio SendGrid sends to your OAuth server or service provider to generate an OAuth access token. When passing data in this field, you must also include the oauth_token_url field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oauth_client_secret": {
          "description": "This secret is needed only once to create an access token. SendGrid will store this secret, allowing you to update your Client ID and Token URL without passing the secret to SendGrid again.  When passing data in this field, you must also include the oauth_client_id and oauth_token_url fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oauth_token_url": {
          "description": "The URL where Twilio SendGrid sends the Client ID and Client Secret to generate an access token. This should be your OAuth server or service provider. When passing data in this field, you must also include the oauth_client_id field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open": {
          "description": "Recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "processed": {
          "description": "Message has been received and is ready to be delivered.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "spam_report": {
          "description": "Recipient marked a message as spam.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "unsubscribe": {
          "description": "Recipient clicked on message's subscription management link. You need to enable Subscription Tracking for getting this type of event.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "description": "The URL that you want the event webhook to POST to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "event-webhook-update-oauth-request"
    },
    "FromEmailObjectInput": {
      "fields": {
        "email": {
          "description": "The 'From' email address used to deliver the message. This address should be a verified sender in your Twilio SendGrid account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "name": {
          "description": "A name or title associated with the sending email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "from_email_object"
    },
    "FullSegment": {
      "fields": {
        "contacts_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "contacts_sample": {
          "type": {
            "element_type": {
              "name": "ContactResponse",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "created_at": {
          "description": "ISO8601 of created timestamp",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "description": "Name of the segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "next_sample_update": {
          "description": "ISO8601 string that is equal to `sample_updated_at` plus an internally calculated offset that depends on how often contacts enter or exit segments as the scheduled pipeline updates the samples.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent_list_id": {
          "description": "The id of the list if this segment is a child of a list.  This implies the query `AND CONTAINS(list_ids, ${parent_list_id})`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "parent_list_ids": {
          "description": "The array of list ids to filter contacts on when building this segment. It allows only one such list id for now. We will support more in future",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "query_dsl": {
          "description": "SQL query which will filter contacts based on the conditions provided",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "query_json": {
          "description": "AST representation of the query DSL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sample_updated_at": {
          "description": "ISO8601 timestamp the sample was last updated",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "updated_at": {
          "description": "ISO8601 timestamp the object was last updated",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "GETAccessSettingsActivityResultObject": {
      "fields": {
        "result": {
          "description": "An array containing the IPs that recently attempted to access your account.",
          "type": {
            "element_type": {
              "name": "GETAccessSettingsActivityResultResultObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETAccessSettingsActivityResultResultObject": {
      "fields": {
        "allowed": {
          "description": "Indicates if the IP address was granted access to the account.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "auth_method": {
          "description": "The authentication method used when attempting access.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_at": {
          "description": "A Unix timestamp indicating when the first access attempt was made.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ip": {
          "description": "The IP addressed used during the access attempt.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_at": {
          "description": "A Unix timestamp indicating when the most recent access attempt was made",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "location": {
          "description": "The geographic location from which the access attempt originated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETAlertsAlertIdResultObject": {
      "fields": {
        "created_at": {
          "description": "A Unix timestamp indicating when the alert was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email_to": {
          "description": "The email address that the alert will be sent to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "frequency": {
          "description": "If the alert is of type stats_notification, this indicates how frequently the stats notifications will be sent. For example: \"daily\", \"weekly\", or \"monthly\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the alert.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "percentage": {
          "description": "If the alert is of type usage_limit, this indicates the percentage of email usage that must be reached before the alert will be sent.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "description": "The type of alert.",
          "type": {
            "name": "GETAlertsAlertIdResultTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "A Unix timestamp indicating when the alert was last modified.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETAlertsResultObject": {
      "fields": {
        "created_at": {
          "description": "A Unix timestamp indicating when the alert was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email_to": {
          "description": "The email address that the alert will be sent to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "frequency": {
          "description": "If the alert is of type stats_notification, this indicates how frequently the stats notifications will be sent. For example, \"daily\", \"weekly\", or \"monthly\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the alert.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "percentage": {
          "description": "If the alert is of type usage_limit, this indicates the percentage of email usage that must be reached before the alert will be sent.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "description": "The type of alert.",
          "type": {
            "name": "GETAlertsResultTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "A Unix timestamp indicating when the alert was last modified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETApiKeysApiKeyIdResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ApiKeyNameIdScopes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETApiKeysResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ApiKeyNameId",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETAsmGroupsGroupIdResultAllOf": {
      "fields": {
        "description": {
          "description": "A brief description of your suppression group. Required when creating a group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "id": {
          "description": "The ID of the suppression group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_default": {
          "description": "Indicates if you would like this to be your default suppression group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_email_sent_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of your suppression group. Required when creating a group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 30
          }
        },
        "unsubscribes": {
          "description": "The number of unsubscribes, or suppressions, in this group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETAsmSuppressionsEmailResultObject": {
      "fields": {
        "suppressions": {
          "description": "The array of suppression groups.",
          "type": {
            "element_type": {
              "name": "GETAsmSuppressionsEmailResultSuppressionsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETAsmSuppressionsEmailResultSuppressionsObject": {
      "fields": {
        "description": {
          "description": "The description of the suppression group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The id of the suppression group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_default": {
          "description": "Indicates if the suppression group  is set as the default.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of the suppression group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suppressed": {
          "description": "Indicates if the given email address is suppressed for this group.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GETAsmSuppressionsGlobalEmailResultObject": {
      "fields": {
        "recipient_email": {
          "description": "The email address that is globally suppressed. This will be an empty object if the email address you included in your call is not globally suppressed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        }
      }
    },
    "GETAsmSuppressionsResultObject": {
      "fields": {
        "created_at": {
          "description": "A UNIX timestamp indicating when the suppression was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address that was suppressed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "group_id": {
          "description": "The id of the suppression group that this email address belongs to.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "group_name": {
          "description": "The name of the suppression group that this email address belongs to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETBrowsersStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETBrowsersStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETBrowsersStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "description": "The individual events and their stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsClicks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETCampaignsCampaignIdResultObject": {
      "fields": {
        "categories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "custom_unsubscribe_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_content": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ip_pool": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "list_ids": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "plain_content": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "segment_ids": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sender_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suppression_group_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETCampaignsCampaignIdSchedulesResultObject": {
      "fields": {
        "send_at": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        }
      }
    },
    "GETCampaignsResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CampaignResponse",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETCategoriesResultObject": {
      "fields": {
        "category": {
          "description": "A category used to group emails by broad topic.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETClientsClientTypeStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETClientsClientTypeStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETClientsClientTypeStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "description": "The individual events and their stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsOpens",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETClientsStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETClientsStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETClientsStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "description": "The individual events and their stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsOpens",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETContactdbCustomFieldsResultObject": {
      "fields": {
        "custom_fields": {
          "type": {
            "element_type": {
              "name": "ContactdbCustomFieldWithId",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbListsListIdRecipientsResultObject": {
      "fields": {
        "recipients": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbRecipient",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbListsResultObject": {
      "fields": {
        "lists": {
          "type": {
            "element_type": {
              "name": "ContactdbList",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbRecipientsRecipientIdListsResultObject": {
      "fields": {
        "lists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbList",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbRecipientsResultObject": {
      "fields": {
        "recipients": {
          "type": {
            "element_type": {
              "name": "JSON",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbRecipientsSearchResultObject": {
      "fields": {
        "recipients": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbRecipient",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbReservedFieldsResultObject": {
      "fields": {
        "reserved_fields": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETContactdbReservedFieldsResultReservedFieldsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbReservedFieldsResultReservedFieldsObject": {
      "fields": {
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETContactdbSegmentsResultObject": {
      "fields": {
        "segments": {
          "type": {
            "element_type": {
              "name": "ContactdbSegments",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbSegmentsSegmentIdRecipientsResultObject": {
      "fields": {
        "recipients": {
          "type": {
            "element_type": {
              "name": "ContactdbRecipient",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbStatusResultObject": {
      "fields": {
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETContactdbStatusResultStatusObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETContactdbStatusResultStatusObject": {
      "fields": {
        "": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Valid values are \"worker_delay\" and \"worker_delay_seconds\" (the second value appears only if \"worker_delay\" has a value of \"delayed\").",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "Valid values for the ID \"worker_delay\" are \"OK\" or \"Delayed\". Valid values for the ID \"worker_delay_seconds\" is the time of delay to upload.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETDevicesStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETDevicesStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETDevicesStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "description": "The individual events and their stats.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsOpens",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETGeoStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETGeoStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETGeoStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsClicksOpens",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETIpsAssignedResultObject": {
      "fields": {
        "ip": {
          "description": "The IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pools": {
          "description": "The IP pools that this IP address has been added to.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "The start date that this IP address was entered into warmup.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "warmup": {
          "description": "Indicates if this IP address is currently warming up.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GETIpsIpAddressResultObject": {
      "fields": {
        "ip": {
          "description": "The IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pools": {
          "description": "The list of IP pools that this IP address belongs to.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rdns": {
          "description": "The reverse DNS record for this IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_date": {
          "description": "The date that the IP address was entered into warmup.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subusers": {
          "description": "The subusers that can send email using this IP address.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "warmup": {
          "description": "Indicates if this IP address is currently warming up.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "whitelabeled": {
          "description": "Indicates if this IP address is associated with a reverse DNS record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GETIpsPoolsPoolNameResultObject": {
      "fields": {
        "ips": {
          "description": "The IP addresses that belong to this pool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pool_name": {
          "description": "The name of the IP pool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 64
          }
        }
      }
    },
    "GETIpsRemainingResultObject": {
      "fields": {
        "results": {
          "type": {
            "element_type": {
              "name": "GETIpsRemainingResultResultsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETIpsRemainingResultResultsObject": {
      "fields": {
        "period": {
          "description": "The length of time until user can add more IPs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "price_per_ip": {
          "description": "The current cost to add an IP.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "remaining": {
          "description": "The number of IPs that can still be added to the user.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETIpsResultObject": {
      "fields": {
        "assigned_at": {
          "description": "The date that the IP address was assigned to the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ip": {
          "description": "An IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pools": {
          "description": "The IP pools that this IP has been added to.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rdns": {
          "description": "The reverse DNS record for this IP address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_date": {
          "description": "The date that the IP address was entered into warmup.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "subusers": {
          "description": "The subusers that are able to send email from this IP.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "warmup": {
          "description": "Indicates if this IP address is currently warming up.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "whitelabeled": {
          "description": "Indicates if this IP address is associated with a reverse DNS record.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GETMailSettingsResultObject": {
      "fields": {
        "result": {
          "description": "The list of all mail settings.",
          "type": {
            "element_type": {
              "name": "GETMailSettingsResultResultObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMailSettingsResultResultObject": {
      "fields": {
        "description": {
          "description": "A description of the mail setting.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if this mail setting is currently enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of the mail setting.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the mail setting.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMailboxProvidersStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETMailboxProvidersStatsResultStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMailboxProvidersStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AdvancedStatsMailboxProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the specific segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of segmentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMarketingContactsExportsResultMetadataObject": {
      "fields": {
        "next": {
          "description": "Link to next page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prev": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "self": {
          "description": "Link to this page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMarketingContactsExportsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETMarketingContactsExportsResultMetadataObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETMarketingContactsExportsResultResultObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMarketingContactsExportsResultResultListsObject": {
      "fields": {
        "ID": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "Name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMarketingContactsExportsResultResultMetadataObject": {
      "fields": {
        "next": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prev": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMarketingContactsExportsResultResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETMarketingContactsExportsResultResultMetadataObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "completed_at": {
          "description": "This ISO8601 timestamp when the export was completed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "description": "This ISO8601 timestamp when the export was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "This ISO8601 timestamp when the export expires.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "export_type": {
          "description": "Allowed types: `contacts_export`, `list_export`, or `segment_export`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Export jobs ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETMarketingContactsExportsResultResultListsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "segments": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETMarketingContactsExportsResultResultSegmentsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "description": "Allowed values: `pending`, `ready`, or `failure`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "urls": {
          "description": "One or more download URLs for the contact file(s) if the status is `ready`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "user_id": {
          "description": "User ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMarketingContactsExportsResultResultSegmentsObject": {
      "fields": {
        "ID": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "Name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMarketingSegmentsResultObject": {
      "fields": {
        "results": {
          "type": {
            "element_type": {
              "name": "SegmentSummary",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMarketingSinglesendsCategoriesResultObject": {
      "fields": {
        "categories": {
          "description": "list of latest one thousand unique categories associated with all Single Sends in ascending order",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "GETMarketingSinglesendsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SinglesendResponseShort",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMcContactsCountResultBillableBreakdownObject": {
      "description": "`billable_breakdown` will only appear to the parent user in an account with subusers.",
      "fields": {
        "breakdown": {
          "description": "A map of each subuser's billable contact usage. Each key is the subuser's ID and each value is the usage thus far this month.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "total": {
          "description": "The sum of all the subuser's billable contacts",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETMcContactsCountResultObject": {
      "fields": {
        "billable_breakdown": {
          "description": "`billable_breakdown` will only appear to the parent user in an account with subusers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETMcContactsCountResultBillableBreakdownObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "billable_count": {
          "description": "The count of contacts this month for billing purposes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        },
        "contact_count": {
          "description": "The total number of contacts.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETMcContatsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Selfmetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "contact_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactDetails3",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMcFieldDefinitionsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "custom_fields": {
          "type": {
            "element_type": {
              "name": "CustomFieldDefinitionsResponse",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "reserved_fields": {
          "type": {
            "element_type": {
              "name": "ReservedFieldDefinitionsResponse",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMcListsIdContactsCountResultObject": {
      "fields": {
        "billable_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "contact_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETMcListsIdResultAllOf": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Selfmetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "contact_count": {
          "description": "The number of contacts currently stored on the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "contact_sample": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactDetails2",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The generated ID for your list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "description": "The name you gave your list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETMcListsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "List",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETMessagesResultMessagesAllOf": {
      "fields": {
        "clicks_count": {
          "description": "The number of times links in the message were clicked.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "from_email": {
          "description": "The 'From' email address used to deliver the message. This address should be a verified sender in your Twilio SendGrid account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "last_event_time": {
          "description": "A timestamp of the last event received for the specific message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "msg_id": {
          "description": "A unique ID assigned to the message. This ID can be used to retrieve activity data for the specific message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "opens_count": {
          "description": "The number of times the message was opened.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "The message's status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailActivityResponseCommonFieldsStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "The email's subject line.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "to_email": {
          "description": "The intended recipient's email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        }
      }
    },
    "GETMessagesResultObject": {
      "fields": {
        "messages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETMessagesResultMessagesAllOf",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETPartnerSettingsResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETPartnerSettingsResultResultObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETPartnerSettingsResultResultObject": {
      "fields": {
        "description": {
          "description": "A description of this partner setting.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if this partner setting has been enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of the partner setting.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the partner.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETScopesResultObject": {
      "fields": {
        "scopes": {
          "description": "The list of scopes for which this user has access.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "GETStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date the stats were gathered.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The individual email activity stats.",
          "type": {
            "element_type": {
              "name": "GETStatsResultStatsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StatsAdvancedGlobalStats",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GETSubusersReputationsResultObject": {
      "fields": {
        "reputation": {
          "description": "The sender reputation this subuser has attained.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "username": {
          "description": "The subuser that has this reputation.f",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETSuppressionUnsubscribesResultObject": {
      "fields": {
        "created": {
          "description": "A Unix timestamp indicating when the recipient was added to the global suppression list.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address of the recipient who is globally suppressed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        }
      }
    },
    "GETTemplatesResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TransactionalTemplatesTemplateLean",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETTrackingSettingsOpenResultObject": {
      "fields": {
        "enabled": {
          "description": "Indicates if open tracking is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GETTrackingSettingsResultObject": {
      "fields": {
        "result": {
          "description": "The list of all tracking settings.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETTrackingSettingsResultResultObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETTrackingSettingsResultResultObject": {
      "fields": {
        "description": {
          "description": "A description about the event that is being tracked.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if this tracking setting is currently enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of the event being tracked.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the tracking setting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETUserAccountResultObject": {
      "fields": {
        "reputation": {
          "description": "The sender reputation for this user.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "type": {
          "description": "The type of account for this user.",
          "type": {
            "name": "GETUserAccountResultTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETUserCreditsResultObject": {
      "fields": {
        "last_reset": {
          "description": "The date that your credit balance was last reset.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "next_reset": {
          "description": "The next date that your credit balance will be reset.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "overage": {
          "description": "The number of overdrawn credits for your account.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "remain": {
          "description": "The remaining number of credits available on your account.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reset_frequency": {
          "description": "The frequency at which your credit balance will be reset.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "total": {
          "description": "The total number of credits assigned to your account.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "used": {
          "description": "The number of credits that you have used.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GETUserEmailResultObject": {
      "fields": {
        "email": {
          "description": "The email address currently on file for your account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        }
      }
    },
    "GETUserProfileResultObject": {
      "fields": {
        "address": {
          "description": "The user's address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "The second line of the user's address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The user's city.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "company": {
          "description": "The name of the user's company.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "The user's country.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "description": "The user's first name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_name": {
          "description": "The user's last name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "description": "The user's phone number.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The user's state.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "The user's website URL.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "The user's zip code.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETUserUsernameResultObject": {
      "fields": {
        "user_id": {
          "description": "The user ID for your account.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "Your account username.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETUserWebhooksEventSettingsSignedResultObject": {
      "fields": {
        "public_key": {
          "description": "The public key you can use to verify the Twilio SendGrid signature.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETUserWebhooksParseSettingsResultObject": {
      "fields": {
        "result": {
          "description": "The list of your current inbound parse settings.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ParseSetting",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETUserWebhooksParseStatsResultObject": {
      "fields": {
        "date": {
          "description": "The date that the stats were collected.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The Parse Webhook usage statistics.",
          "type": {
            "element_type": {
              "name": "GETUserWebhooksParseStatsResultStatsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETUserWebhooksParseStatsResultStatsMetricsObject": {
      "fields": {
        "received": {
          "description": "The number of emails received and parsed by the Parse Webhook.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "GETUserWebhooksParseStatsResultStatsObject": {
      "fields": {
        "metrics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETUserWebhooksParseStatsResultStatsMetricsObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GETV3MessagesDownloadDownloadUuidResultObject": {
      "fields": {
        "csv": {
          "description": "Returns the aws signed link to the csv file which mako UI should perform a get on to trigger the csv download for the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^((http[s]?|ftp):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$",
            "minLength": 5
          }
        },
        "presigned_url": {
          "description": "A signed link that will allow you to download the CSV file requested by the Request a CSV endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "GETV3MessagesMsgIdResultAllOf": {
      "fields": {
        "api_key_id": {
          "description": "The ID of the API Key used to authenticate the sending request for the message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Za-z0-9]+",
            "maxLength": 50,
            "minLength": 3
          }
        },
        "asm_group_id": {
          "description": "The unsubscribe group associated with this email.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 1
          }
        },
        "categories": {
          "description": "Categories users associated to the message",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "events": {
          "description": "List of events related to email message",
          "type": {
            "element_type": {
              "name": "GETV3MessagesMsgIdResultAllOf1EventsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "from_email": {
          "description": "The 'From' email address used to deliver the message. This address should be a verified sender in your Twilio SendGrid account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "msg_id": {
          "description": "A unique ID assigned to the message. This ID can be used to retrieve activity data for the specific message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "originating_ip": {
          "description": "This is the IP of the user who sent the message.",
          "type": {
            "name": "IPv4",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ipv4"
          }
        },
        "outbound_ip": {
          "description": "IP used to send to the remote Mail Transfer Agent.",
          "type": {
            "name": "IPv4",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ipv4"
          }
        },
        "outbound_ip_type": {
          "description": "Whether or not the outbound IP is dedicated vs shared",
          "type": {
            "name": "GETV3MessagesMsgIdResultAllOf1OutboundIpTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The message's status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailActivityResponseCommonFieldsStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "The email's subject line.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "teammate": {
          "description": "Teammate's username",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^$|^[A-Za-z0-9]+",
            "maxLength": 64,
            "minLength": 0
          }
        },
        "template_id": {
          "description": "The ID associated with a Twilio SendGrid email template used to format the message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "to_email": {
          "description": "The intended recipient's email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "unique_args": {
          "description": "JSON hash of key-value pairs associated with the message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETV3MessagesMsgIdResultAllOf1EventsObject": {
      "fields": {
        "attempt_num": {
          "description": "Used with \"deferred\" events to indicate the attempt number out of 10. One \"deferred\" entry will exists under events array for each time a message was deferred with error message from the server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 10,
            "minimum": 1
          }
        },
        "bounce_type": {
          "description": "Use to distinguish between types of bounces",
          "type": {
            "name": "GETV3MessagesMsgIdResultAllOf1EventsBounceTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "event_name": {
          "description": "Name of event",
          "type": {
            "name": "GETV3MessagesMsgIdResultAllOf1EventsEventNameEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "http_user_agent": {
          "description": "Client recipient used to click or open message",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mx_server": {
          "description": "The MX server that received the email. For example, mx.gmail.com",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "processed": {
          "description": "The date when the event was processed",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "description": "Explanation of what caused the message to be \"bounced\", \"deferred\", or \"blocked\". Usually contains error message from the server - e.g. message from gmail why mail was deferred.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        },
        "url": {
          "description": "Used with \"clicked\" event to indicate which url the user clicked.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^((http[s]?|ftp):\\/)?\\/?([^:\\/\\s]+)((\\/\\w+)*\\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$"
          }
        }
      }
    },
    "GETV3ScopesRequestsResultObject": {
      "fields": {
        "email": {
          "description": "Teammate's email",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "description": "Teammate's first name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Request ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "last_name": {
          "description": "Teammate's last name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scope_group_name": {
          "description": "Name of group of scopes associated to page teammate is requesting access to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "Teammate's username",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETV3SendersResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SenderID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETV3TeammatesPendingResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETV3TeammatesPendingResultResultObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETV3TeammatesPendingResultResultObject": {
      "fields": {
        "email": {
          "description": "Email address teammate invite will be sent to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expiration_date": {
          "description": "timestamp indicates when invite will expire. Expiration is 7 days after invite creation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_admin": {
          "description": "Set to true to indicate teammate should have the same set of permissions as parent user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scopes": {
          "description": "List of permissions to give teammate if they accept",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "Invitation token used to identify user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETV3TeammatesResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GETV3TeammatesResultResultObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETV3TeammatesResultResultObject": {
      "fields": {
        "address": {
          "description": "(optional) Teammate's address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "(optional) Teammate's address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "(optional) Teammate's city",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "(optional) Teammate's country",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "Teammate's email",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "description": "Teammate's first name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Set to true if teammate has admin privileges",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_name": {
          "description": "Teammate's last name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "description": "(optional) Teammate's phone number",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "(optional) Teammate's state",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_type": {
          "description": "Indicate the type of user: owner user, teammate admin user, or normal teammate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETV3TeammatesResultResultUserTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "Teammate's username",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "(optional) Teammate's website",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "(optional) Teammate's zip",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETV3TeammatesUsernameResultObject": {
      "fields": {
        "address": {
          "description": "(optional) Teammate's address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "(optional) Teammate's address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "(optional) Teammate's city",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "(optional) Teammate's country",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "Teammate's email",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "description": "Teammate's first name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Set to true if teammate has admin privileges",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_name": {
          "description": "Teammate's last name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "description": "(optional) Teammate's phone number",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "Scopes associated to teammate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "state": {
          "description": "(optional) Teammate's state",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_type": {
          "description": "Indicate the type of user: account owner, teammate admin user, or normal teammate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETV3TeammatesUsernameResultUserTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "Teammate's username",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "(optional) Teammate's website",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "(optional) Teammate's zip",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GETVerifiedSendersDomainsResultObject": {
      "fields": {
        "results": {
          "type": {
            "name": "GETVerifiedSendersDomainsResultResultsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GETVerifiedSendersDomainsResultResultsObject": {
      "fields": {
        "hard_failures": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "soft_failures": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "GETVerifiedSendersResultObject": {
      "fields": {
        "results": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "VerifiedSenderResponseSchema",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GETVerifiedSendersStepsCompletedResultObject": {
      "fields": {
        "results": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GETVerifiedSendersStepsCompletedResultResultsObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GETVerifiedSendersStepsCompletedResultResultsObject": {
      "fields": {
        "domain_verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "sender_verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GlobalErrorResponseSchema": {
      "fields": {
        "errors": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GlobalErrorResponseSchemaErrorsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "global_error_response_schema"
    },
    "GlobalErrorResponseSchemaErrorsObject": {
      "fields": {
        "field": {
          "description": "the field that generated the error",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "help": {
          "description": "helper text or docs for troubleshooting",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "message": {
          "description": "the error message",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GoogleAnalyticsSettings": {
      "fields": {
        "enabled": {
          "description": "Indicates if Google Analytics is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "utm_campaign": {
          "description": "The name of the campaign.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_content": {
          "description": "Used to differentiate ads",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_medium": {
          "description": "Name of the marketing medium (e.g. \"Email\").",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_source": {
          "description": "Name of the referrer source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_term": {
          "description": "Any paid keywords.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "google_analytics_settings"
    },
    "GoogleAnalyticsSettingsInput": {
      "fields": {
        "enabled": {
          "description": "Indicates if Google Analytics is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "utm_campaign": {
          "description": "The name of the campaign.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_content": {
          "description": "Used to differentiate ads",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_medium": {
          "description": "Name of the marketing medium (e.g. \"Email\").",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_source": {
          "description": "Name of the referrer source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_term": {
          "description": "Any paid keywords.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "google_analytics_settings"
    },
    "InvalidEmail": {
      "fields": {
        "created": {
          "description": "A Unix timestamp indicating when the email address was added to the invalid emails list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address that was marked as invalid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "reason": {
          "description": "The reason that the email address was marked as invalid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "invalid-email"
    },
    "IpAccessResponse": {
      "fields": {
        "result": {
          "description": "An array listing all of your allowed IPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IpAccessResponseResultObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "ip-access-response"
    },
    "IpAccessResponseResultObject": {
      "fields": {
        "created_at": {
          "description": "A Unix timestamp indicating when the IP was added to the allow list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The ID of the allowed IP.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ip": {
          "description": "The allowed IP.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "A Unix timestamp indicating when the IPs allow status was most recently updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "IpPoolResponse": {
      "fields": {
        "name": {
          "description": "The name of the IP pool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ip_pool_response"
    },
    "IpWarmupResponse": {
      "fields": {
        "ip": {
          "description": "The IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_date": {
          "description": "A Unix timestamp indicating when the IP address entered warmup mode.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "ip_warmup_response"
    },
    "LISTDesignsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DesignOutputSummary",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "LISTSendgridPreBuiltDesignsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DesignOutputSummary",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "LinkBranding200Response": {
      "fields": {
        "default": {
          "description": "Indicates if this is the default link branding.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dns": {
          "description": "The DNS records generated for this link branding.",
          "type": {
            "name": "LinkBranding200ResponseDnsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain": {
          "description": "The root domain of the branded link.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the branded link.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "legacy": {
          "description": "Indicates if this link branding was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create new link branding if you need to update it.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain used to generate the DNS records for this link branding. This subdomain must be different from the subdomain used for your authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "description": "The ID of the user that this link branding is associated with.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "The username of the account that this link branding is associated with.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this link branding is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "link_branding_200_response"
    },
    "LinkBranding200ResponseDnsDomainCnameObject": {
      "description": "The DNS record generated to point to your link branding subdomain.",
      "fields": {
        "data": {
          "description": "The domain that the DNS record points to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "The domain that this link branding will use for the links in your email.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of DNS record that was generated.",
          "type": {
            "name": "LinkBranding200ResponseDnsDomainCnameTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the DNS record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "LinkBranding200ResponseDnsObject": {
      "description": "The DNS records generated for this link branding.",
      "fields": {
        "domain_cname": {
          "description": "The DNS record generated to point to your link branding subdomain.",
          "type": {
            "name": "LinkBranding200ResponseDnsDomainCnameObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "owner_cname": {
          "description": "The DNS record generated to verify who created the link branding.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkBranding200ResponseDnsOwnerCnameObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinkBranding200ResponseDnsOwnerCnameObject": {
      "description": "The DNS record generated to verify who created the link branding.",
      "fields": {
        "data": {
          "description": "The domain that the DNS record points to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "Used to verify the link branding. The subdomain of this domain is the ID of the user who created the link branding.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of DNS record generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkBranding200ResponseDnsOwnerCnameTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the DNS record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "LinkTrackingMetadata": {
      "fields": {
        "count": {
          "description": "The number of items in the entire list, i.e., across all pages.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "next": {
          "description": "The URL of the next page of results. If this field isn't present, you're at the end of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "prev": {
          "description": "The URL of the previous page of results. If this field isn't present, you're at the start of the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "self": {
          "description": "The URL of the current page of results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "link-tracking-metadata"
    },
    "List": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Selfmetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "contact_count": {
          "description": "The number of contacts currently stored on the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "description": "The generated ID for your list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "description": "The name you gave your list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "list"
    },
    "MailBatchId": {
      "fields": {
        "batch_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9\\-\\_]"
          }
        }
      },
      "alias": "mail_batch_id"
    },
    "MailSettingsAddressWhitelabel": {
      "fields": {
        "enabled": {
          "description": "Indicates if you have an email address whitelist enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "list": {
          "description": "All email addresses that are currently on the whitelist.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "mail_settings_address_whitelabel"
    },
    "MailSettingsBouncePurge": {
      "fields": {
        "enabled": {
          "description": "Indicates if the bounce purge mail setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hard_bounces": {
          "description": "The number of days after which SendGrid will purge all contacts from your hard bounces suppression lists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "soft_bounces": {
          "description": "The number of days after which SendGrid will purge all contacts from your soft bounces suppression lists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "mail_settings_bounce_purge"
    },
    "MailSettingsBouncePurgeInput": {
      "fields": {
        "enabled": {
          "description": "Indicates if the bounce purge mail setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hard_bounces": {
          "description": "The number of days after which SendGrid will purge all contacts from your hard bounces suppression lists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "soft_bounces": {
          "description": "The number of days after which SendGrid will purge all contacts from your soft bounces suppression lists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "mail_settings_bounce_purge"
    },
    "MailSettingsFooter": {
      "fields": {
        "enabled": {
          "description": "Indicates if the Footer mail setting is currently enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The custom HTML content of your email footer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "The plain text content of your email footer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "mail_settings_footer"
    },
    "MailSettingsFooterInput": {
      "fields": {
        "enabled": {
          "description": "Indicates if the Footer mail setting is currently enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The custom HTML content of your email footer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "The plain text content of your email footer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "mail_settings_footer"
    },
    "MailSettingsForwardBounce": {
      "fields": {
        "email": {
          "description": "The email address that you would like your bounce reports forwarded to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the bounce forwarding mail setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "mail_settings_forward_bounce"
    },
    "MailSettingsForwardBounceInput": {
      "fields": {
        "email": {
          "description": "The email address that you would like your bounce reports forwarded to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the bounce forwarding mail setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "mail_settings_forward_bounce"
    },
    "MailSettingsForwardSpam": {
      "fields": {
        "email": {
          "description": "The email address where you would like the spam reports to be forwarded.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the Forward Spam setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "mail_settings_forward_spam"
    },
    "MailSettingsForwardSpamInput": {
      "fields": {
        "email": {
          "description": "The email address where you would like the spam reports to be forwarded.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the Forward Spam setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "mail_settings_forward_spam"
    },
    "MailSettingsTemplate": {
      "fields": {
        "enabled": {
          "description": "Indicates if the legacy email template setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content that you want to use for your legacy email template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "mail_settings_template"
    },
    "Metadata": {
      "fields": {
        "count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        },
        "next": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "prev": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "_metadata"
    },
    "Metrics": {
      "fields": {
        "bounce_drops": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounces": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "clicks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "delivered": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "invalid_emails": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "opens": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "requests": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_report_drops": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_reports": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unsubscribes": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "metrics"
    },
    "Monitor": {
      "fields": {
        "email": {
          "description": "The email address to which Sendgrid should send emails for monitoring.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "frequency": {
          "description": "The frequency at which to forward monitoring emails. An email will be sent when your subuser sends this many (e.g., 1,000) emails.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      },
      "alias": "monitor"
    },
    "MonitorInput": {
      "fields": {
        "email": {
          "description": "The email address to which Sendgrid should send emails for monitoring.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "frequency": {
          "description": "The frequency at which to forward monitoring emails. An email will be sent when your subuser sends this many (e.g., 1,000) emails.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      },
      "alias": "monitor"
    },
    "PATCHAlertsAlertIdBodyObjectInput": {
      "fields": {
        "email_to": {
          "description": "The new email address you want your alert to be sent to. Example: test@example.com",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "frequency": {
          "description": "The new frequency at which to send the stats_notification alert. Example: monthly",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "percentage": {
          "description": "The new percentage threshold at which the usage_limit alert will be sent. Example: 90",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "PATCHAlertsAlertIdResultObject": {
      "fields": {
        "created_at": {
          "description": "A Unix timestamp indicating when the alert was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email_to": {
          "description": "The email address that the alert will be sent to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "frequency": {
          "description": "If the alert is of type stats_notification, this indicates how frequently the stats notifications will be sent. For example: \"daily\", \"weekly\", or \"monthly\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the alert.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "percentage": {
          "description": "If the alert is of type usage_limit, this indicates the percentage of email usage that must be reached before the alert will be sent.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "description": "The type of alert.",
          "type": {
            "name": "PATCHAlertsAlertIdResultTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "A Unix timestamp indicating when the alert was last modified.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "PATCHApiKeysApiKeyIdBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The new name of the API Key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHCampaignsCampaignIdBodyObjectInput": {
      "fields": {
        "categories": {
          "description": "The categories you want to tag on this campaign.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "html_content": {
          "description": "The HTML content of this campaign.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "The plain content of this campaign.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "The subject line for your campaign.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the campaign.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHCampaignsCampaignIdSchedulesBodyObjectInput": {
      "fields": {
        "send_at": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        }
      }
    },
    "PATCHCampaignsCampaignIdSchedulesResultObject": {
      "fields": {
        "id": {
          "description": "The campaign ID",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "send_at": {
          "description": "The unix timestamp to send the campaign.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "The status of the schedule.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHContactdbListsListIdBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The new name for your list.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHContactdbListsListIdResultObject": {
      "fields": {
        "id": {
          "description": "The ID of the list",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The new name for the list",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "recipient_count": {
          "description": "The number of recipients on the list",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "PATCHContactdbRecipientsBodyObjectInput": {
      "fields": {
        "email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "first_name": {
          "description": "The first name of the recipient. This is one of the default custom fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_name": {
          "description": "The last name of the recipient. This is one of the default custom fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHContactdbSegmentsSegmentIdBodyObjectInput": {
      "fields": {
        "conditions": {
          "description": "The conditions by which this segment should be created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactdbSegmentsConditionsInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "list_id": {
          "description": "The list ID you would like this segment to be built from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHMailSettingsAddressWhitelistBodyObjectInput": {
      "fields": {
        "enabled": {
          "description": "Indicates if your email address whitelist is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "list": {
          "description": "Either a single email address that you want whitelisted or a domain, for which all email addresses belonging to this domain will be whitelisted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PATCHMailSettingsTemplateBodyObjectInput": {
      "fields": {
        "enabled": {
          "description": "Indicates if you want to enable the legacy email template mail setting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The new HTML content for your legacy email template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHMailSettingsTemplateResultObject": {
      "fields": {
        "enabled": {
          "description": "Indicates if the legacy email template mail setting is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of your legacy email template.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHMcFieldDefinitionsCustomFieldIdBodyObjectInput": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "PATCHMcFieldDefinitionsCustomFieldIdResultAllOf": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "field_type": {
          "type": {
            "name": "CustomFieldDefinitionsResponseFieldTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "PATCHMcListsIdBodyObjectInput": {
      "fields": {
        "name": {
          "description": "Your name for your list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHPartnerSettingsNewRelicBodyObjectInput": {
      "fields": {
        "enable_subuser_statistics": {
          "description": "Indicates if your subuser statistics will be sent to your New Relic Dashboard.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if this partner setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "license_key": {
          "description": "The license key for your New Relic account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHSsoCertificatesCertIdBodyObjectInput": {
      "fields": {
        "enabled": {
          "description": "Indicates whether or not the certificate is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "integration_id": {
          "description": "An ID that matches a certificate to a specific IdP integration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public_certificate": {
          "description": "This public certificate allows SendGrid to verify that SAML requests it receives are signed by an IdP that it recognizes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHSsoTeammatesUsernameBodyObjectInput": {
      "fields": {
        "first_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PATCHSubusersSubuserNameBodyObjectInput": {
      "fields": {
        "disabled": {
          "description": "Whether or not this subuser is disabled. True means disabled, False means enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "PATCHTemplatesTemplateIdBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The name of the transactional template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        }
      }
    },
    "PATCHTrackingSettingsClickBodyObjectInput": {
      "fields": {
        "enabled": {
          "description": "The setting you want to use for click tracking.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "PATCHTrackingSettingsOpenBodyObjectInput": {
      "fields": {
        "enabled": {
          "description": "The new status that you want to set for open tracking.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "PATCHTrackingSettingsOpenResultObject": {
      "fields": {
        "enabled": {
          "description": "Indicates if open tracking is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "PATCHUserScheduledSendsBatchIdBodyObjectInput": {
      "fields": {
        "status": {
          "description": "The status you would like the scheduled send to have.",
          "type": {
            "name": "PATCHUserScheduledSendsBatchIdBodyStatusEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHUserWebhooksEventSettingsSignedBodyObjectInput": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "PATCHUserWebhooksEventSettingsSignedResultObject": {
      "fields": {
        "public_key": {
          "description": "The public key you can use to verify the Twilio SendGrid signature.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHV3ScopesRequestsApproveIdResultObject": {
      "fields": {
        "scope_group_name": {
          "description": "name of feature teammate will be given access to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHV3TeammatesUsernameBodyObjectInput": {
      "fields": {
        "is_admin": {
          "description": "Set to True if this teammate should be promoted to an admin user. If True, scopes should be an empty array.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scopes": {
          "description": "Provide list of scopes that should be given to teammate. If specifying list of scopes, is_admin should be set to False.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PATCHV3TeammatesUsernameResultObject": {
      "fields": {
        "address": {
          "description": "(optional) Teammate's address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "(optional) Teammate's address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "(optional) Teammate's city",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "(optional) Teammate's country",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "Teammate's email address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "description": "Teammate's first name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Set to true if teammate has admin priveleges",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_name": {
          "description": "Teammate's last name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "description": "(optional) Teammate's phone number",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "Scopes given to teammate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "(optional) Teammate's state",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_type": {
          "description": "Indicate the type of user: owner user, teammate admin user, or normal teammate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHV3TeammatesUsernameResultUserTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "Teammate's username",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "(optional) Teammate's website",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "(optional) Teammate's zip",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PATCHWhitelabelDomainsDomainIdBodyObjectInput": {
      "fields": {
        "custom_spf": {
          "description": "Indicates whether to generate a custom SPF record for manual security.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "description": "Indicates whether this is the default authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "PATCHWhitelabelLinksIdBodyObjectInput": {
      "fields": {
        "default": {
          "description": "Indicates if the branded link is set as the default. When setting a new default, the existing default link branding will have its default status removed automatically.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTAccessSettingsWhitelistBodyIpsObjectInput": {
      "fields": {
        "ip": {
          "description": "An IP address that you want to allow.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTAccessSettingsWhitelistBodyObjectInput": {
      "fields": {
        "ips": {
          "description": "An array containing the IP(s) you want to allow.",
          "type": {
            "element_type": {
              "name": "POSTAccessSettingsWhitelistBodyIpsObjectInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "POSTAlertsBodyObjectInput": {
      "fields": {
        "email_to": {
          "description": "The email address the alert will be sent to. Example: test@example.com",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "frequency": {
          "description": "Required for stats_notification. How frequently the alert will be sent. Example: daily",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "percentage": {
          "description": "Required for usage_alert. When this usage threshold is reached, the alert will be sent. Example: 90",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "description": "The type of alert you want to create. Can be either usage_limit or stats_notification. Example: usage_limit",
          "type": {
            "name": "POSTAlertsBodyTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTAlertsResultObject": {
      "fields": {
        "created_at": {
          "description": "A Unix timestamp indicating when the alert was created.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email_to": {
          "description": "The email address that the alert will be sent to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "frequency": {
          "description": "If the alert is of type stats_notification, this indicates how frequently the stats notifications will be sent. For example, \"daily\", \"weekly\", or \"monthly\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the alert.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "percentage": {
          "description": "\"If the alert is of type usage_limit, this indicates the percentage of email usage that must be reached before the alert will be sent.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "description": "The type of alert.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "A Unix timestamp indicating when the alert was last modified.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "POSTAsmGroupsGroupIdSuppressionsResultObject": {
      "fields": {
        "recipient_emails": {
          "description": "The email addresses you added to the unsubscribe group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "email"
            }
          }
        }
      }
    },
    "POSTAsmGroupsResultObject": {
      "fields": {
        "description": {
          "description": "A brief description of the suppression group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the suppression group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_default": {
          "description": "Indicates if this is the default suppression group.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of the suppression group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTAsmSuppressionsGlobalResultObject": {
      "fields": {
        "recipient_emails": {
          "description": "The email addresses that are globally suppressed",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "email"
            }
          }
        }
      }
    },
    "POSTCampaignsCampaignIdSchedulesBodyObjectInput": {
      "fields": {
        "send_at": {
          "description": "The unix timestamp for the date and time you would like your campaign to be sent out.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "POSTCampaignsCampaignIdSchedulesNowResultObject": {
      "fields": {
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "status": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTCampaignsCampaignIdSchedulesResultObject": {
      "fields": {
        "id": {
          "description": "The campaign ID.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "send_at": {
          "description": "The date time you scheduled your campaign to be sent.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "The status of your campaign.",
          "type": {
            "name": "POSTCampaignsCampaignIdSchedulesResultStatusEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTCampaignsCampaignIdSchedulesTestBodyObjectInput": {
      "fields": {
        "to": {
          "description": "The email address that should receive the test campaign.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        }
      }
    },
    "POSTCampaignsCampaignIdSchedulesTestResultObject": {
      "fields": {
        "to": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTContactdbCustomFieldsBodyObjectInput": {
      "fields": {
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTContactdbListsBodyObjectInput": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTContactdbRecipientsBodyObjectInput": {
      "fields": {
        "age": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address of the recipient.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "first_name": {
          "description": "The first name of the recipient.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_name": {
          "description": "The last name of the recipient.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTContactdbRecipientsSearchBodyObjectInput": {
      "fields": {
        "conditions": {
          "type": {
            "element_type": {
              "name": "JSON",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "list_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int32"
          }
        }
      }
    },
    "POSTContactdbRecipientsSearchResultObject": {
      "fields": {
        "recipient_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "recipients": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "POSTContactdbRecipientsSearchResultRecipientsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "POSTContactdbRecipientsSearchResultRecipientsCustomFieldsObject": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        }
      }
    },
    "POSTContactdbRecipientsSearchResultRecipientsObject": {
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "custom_fields": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "POSTContactdbRecipientsSearchResultRecipientsCustomFieldsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_clicked": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "last_emailed": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "last_opened": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "POSTIpsBodyObjectInput": {
      "fields": {
        "count": {
          "description": "The amount of IPs to add to the account.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subusers": {
          "description": "Array of usernames to be assigned a send IP.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "warmup": {
          "description": "Whether or not to warmup the IPs being added.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTIpsPoolsBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The name of your new IP pool.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 64
          }
        }
      }
    },
    "POSTIpsPoolsPoolNameIpsBodyObjectInput": {
      "fields": {
        "ip": {
          "description": "The IP address that you want to add to the named pool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTIpsPoolsPoolNameIpsResultObject": {
      "fields": {
        "ip": {
          "description": "The IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pools": {
          "description": "The IP pools that this IP address has been added to.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "start_date": {
          "description": "A Unix timestamp indicating when the warmup process began for the added IP address.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "warmup": {
          "description": "Indicates if the IP address is in warmup.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTIpsResultIpsObject": {
      "fields": {
        "ip": {
          "description": "IP added to account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subusers": {
          "description": "Array of usernames assigned a send IP.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "POSTIpsResultObject": {
      "fields": {
        "ips": {
          "description": "List of IP objects.",
          "type": {
            "element_type": {
              "name": "POSTIpsResultIpsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "remaining_ips": {
          "description": "The number of IPs that can still be added to the user.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "warmup": {
          "description": "Whether or not the IPs are being warmed up.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTIpsWarmupBodyObjectInput": {
      "fields": {
        "ip": {
          "description": "The IP address that you want to begin warming up.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyAsmObjectInput": {
      "description": "An object allowing you to specify how to handle unsubscribes.",
      "fields": {
        "group_id": {
          "description": "The unsubscribe group to associate with this email.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "groups_to_display": {
          "description": "An array containing the unsubscribe groups that you would like to be displayed on the unsubscribe preferences page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "POSTMailSendBodyAttachmentsObjectInput": {
      "fields": {
        "content": {
          "description": "The Base64 encoded content of the attachment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "content_id": {
          "description": "The attachment's content ID. This is used when the disposition is set to `inline` and the attachment is an image, allowing the file to be displayed within the body of your email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disposition": {
          "description": "The attachment's content-disposition, specifying how you would like the attachment to be displayed. For example, `inline` results in the attached file are displayed automatically within the message while `attachment` results in the attached file require some action to be taken before it is displayed, such as opening or downloading the file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyAttachmentsDispositionEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "filename": {
          "description": "The attachment's filename.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The MIME type of the content you are attaching (e.g., `text/plain` or `text/html`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        }
      }
    },
    "POSTMailSendBodyContentObjectInput": {
      "fields": {
        "type": {
          "description": "The MIME type of the content you are including in your email (e.g., `text/plain` or `text/html`).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "value": {
          "description": "The actual content of the specified MIME type that you are including in your email.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        }
      }
    },
    "POSTMailSendBodyMailSettingsBypassBounceManagementObjectInput": {
      "description": "Allows you to bypass the bounce list to ensure that the email is delivered to recipients. Spam report and unsubscribe lists will still be checked; addresses on these other lists will not receive the message. This filter cannot be combined with the `bypass_list_management` filter. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyMailSettingsBypassListManagementObjectInput": {
      "description": "Allows you to bypass all unsubscribe groups and suppressions to ensure that the email is delivered to every single recipient. This should only be used in emergencies when it is absolutely necessary that every recipient receives your email. This filter cannot be combined with any other bypass filters. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyMailSettingsBypassSpamManagementObjectInput": {
      "description": "Allows you to bypass the spam report list to ensure that the email is delivered to recipients. Bounce and unsubscribe lists will still be checked; addresses on these other lists will not receive the message. This filter cannot be combined with the `bypass_list_management` filter. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyMailSettingsBypassUnsubscribeManagementObjectInput": {
      "description": "Allows you to bypass the global unsubscribe list to ensure that the email is delivered to recipients. Bounce and spam report lists will still be checked; addresses on these other lists will not receive the message. This filter applies only to global unsubscribes and will not bypass group unsubscribes. This filter cannot be combined with the `bypass_list_management` filter. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyMailSettingsFooterObjectInput": {
      "description": "The default footer that you would like included on every email.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html": {
          "description": "The HTML content of your footer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text": {
          "description": "The plain text content of your footer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyMailSettingsObjectInput": {
      "description": "A collection of different mail settings that you can use to specify how you would like this email to be handled.",
      "fields": {
        "bypass_bounce_management": {
          "description": "Allows you to bypass the bounce list to ensure that the email is delivered to recipients. Spam report and unsubscribe lists will still be checked; addresses on these other lists will not receive the message. This filter cannot be combined with the `bypass_list_management` filter. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyMailSettingsBypassBounceManagementObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "bypass_list_management": {
          "description": "Allows you to bypass all unsubscribe groups and suppressions to ensure that the email is delivered to every single recipient. This should only be used in emergencies when it is absolutely necessary that every recipient receives your email. This filter cannot be combined with any other bypass filters. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyMailSettingsBypassListManagementObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "bypass_spam_management": {
          "description": "Allows you to bypass the spam report list to ensure that the email is delivered to recipients. Bounce and unsubscribe lists will still be checked; addresses on these other lists will not receive the message. This filter cannot be combined with the `bypass_list_management` filter. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyMailSettingsBypassSpamManagementObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "bypass_unsubscribe_management": {
          "description": "Allows you to bypass the global unsubscribe list to ensure that the email is delivered to recipients. Bounce and spam report lists will still be checked; addresses on these other lists will not receive the message. This filter applies only to global unsubscribes and will not bypass group unsubscribes. This filter cannot be combined with the `bypass_list_management` filter. See our [documentation](https://sendgrid.com/docs/ui/sending-email/index-suppressions/#bypass-suppressions) for more about bypass filters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyMailSettingsBypassUnsubscribeManagementObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "footer": {
          "description": "The default footer that you would like included on every email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyMailSettingsFooterObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sandbox_mode": {
          "description": "Sandbox Mode allows you to send a test email to ensure that your request body is valid and formatted correctly.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyMailSettingsSandboxModeObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyMailSettingsSandboxModeObjectInput": {
      "description": "Sandbox Mode allows you to send a test email to ensure that your request body is valid and formatted correctly.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyObjectInput": {
      "fields": {
        "asm": {
          "description": "An object allowing you to specify how to handle unsubscribes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyAsmObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "attachments": {
          "description": "An array of objects where you can specify any attachments you want to include.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "POSTMailSendBodyAttachmentsObjectInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "batch_id": {
          "description": "An ID representing a batch of emails to be sent at the same time. Including a `batch_id` in your request allows you include this email in that batch. It also enables you to cancel or pause the delivery of that batch. For more information, see the [Cancel Scheduled Sends API](https://sendgrid.com/docs/api-reference/).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "categories": {
          "description": "An array of category names for this message. Each category name may not exceed 255 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 255
            }
          }
        },
        "content": {
          "description": "An array where you can specify the content of your email. You can include multiple [MIME types](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types) of content, but you must specify at least one MIME type. To include more than one MIME type, add another object to the array containing the `type` and `value` parameters.",
          "type": {
            "element_type": {
              "name": "POSTMailSendBodyContentObjectInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "custom_args": {
          "description": "Values that are specific to the entire send that will be carried along with the email and its activity data.  Key/value pairs must be strings. Substitutions will not be made on custom arguments, so any string that is entered into this parameter will be assumed to be the custom argument that you would like to be used. This parameter is overridden by `custom_args` set at the personalizations level. Total `custom_args` size may not exceed 10,000 bytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "from": {
          "type": {
            "name": "FromEmailObjectInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "headers": {
          "description": "An object containing key/value pairs of header names and the value to substitute for them. The key/value pairs must be strings. You must ensure these are properly encoded if they contain unicode characters. These headers cannot be one of the reserved headers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ip_pool_name": {
          "description": "The IP Pool that you would like to send this email from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 64,
            "minLength": 2
          }
        },
        "mail_settings": {
          "description": "A collection of different mail settings that you can use to specify how you would like this email to be handled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyMailSettingsObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "personalizations": {
          "description": "An array of messages and their metadata. Each object within personalizations can be thought of as an envelope - it defines who should receive an individual message and how that message should be handled. See our [Personalizations documentation](https://sendgrid.com/docs/for-developers/sending-email/personalizations/) for examples.",
          "type": {
            "element_type": {
              "name": "POSTMailSendBodyPersonalizationsObjectInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "reply_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReplyToEmailObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reply_to_list": {
          "description": "An array of recipients who will receive replies and/or bounces. Each object in this array must contain the recipient's email address. Each object in the array may optionally contain the recipient's name. You can either choose to use reply_to field or reply_to_list but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "POSTMailSendBodyReplyToListObjectInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "send_at": {
          "description": "A unix timestamp allowing you to specify when you want your email to be delivered. This may be overridden by the `send_at` parameter set at the personalizations level. Delivery cannot be scheduled more than 72 hours in advance. If you have the flexibility, it's better to schedule mail for off-peak times. Most emails are scheduled and sent at the top of the hour or half hour. Scheduling email to avoid peak times  for example, scheduling at 10:53  can result in lower deferral rates due to the reduced traffic during off-peak times.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subject": {
          "description": "The global or 'message level' subject of your email. This may be overridden by subject lines set in personalizations.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "template_id": {
          "description": "An email template ID. A template that contains a subject and content  either text or html  will override any subject and content values specified at the personalizations or message level.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tracking_settings": {
          "description": "Settings to determine how you would like to track the metrics of how your recipients interact with your email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyTrackingSettingsObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyPersonalizationsObjectInput": {
      "fields": {
        "bcc": {
          "description": "An array of recipients who will receive a blind carbon copy of your email. Each object in this array must contain the recipient's email address. Each object in the array may optionally contain the recipient's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CcBccEmailObjectInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "cc": {
          "description": "An array of recipients who will receive a copy of your email. Each object in this array must contain the recipient's email address. Each object in the array may optionally contain the recipient's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CcBccEmailObjectInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "custom_args": {
          "description": "Values that are specific to this personalization that will be carried along with the email and its activity data. Substitutions will not be made on custom arguments, so any string that is entered into this parameter will be assumed to be the custom argument that you would like to be used. This field may not exceed 10,000 bytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dynamic_template_data": {
          "description": "Dynamic template data is available using Handlebars syntax in Dynamic Transactional Templates. This field should be used in combination with a Dynamic Transactional Template, which can be identified by a `template_id` starting with `d-`. This field is a collection of key/value pairs following the pattern \"variable_name\":\"value to insert\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "from": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FromEmailObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "headers": {
          "description": "A collection of JSON key/value pairs allowing you to specify handling instructions for your email. You may not overwrite the following headers: `x-sg-id`, `x-sg-eid`, `received`, `dkim-signature`, `Content-Type`, `Content-Transfer-Encoding`, `To`, `From`, `Subject`, `Reply-To`, `CC`, `BCC`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "send_at": {
          "description": "A unix timestamp allowing you to specify when your email should be delivered. Scheduling delivery more than 72 hours in advance is forbidden.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subject": {
          "description": "The subject of your email. See character length requirements according to [RFC 2822](http://stackoverflow.com/questions/1592291/what-is-the-email-subject-length-limit#answer-1592310).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "substitutions": {
          "description": "Substitutions allow you to insert data without using Dynamic Transactional Templates. This field should **not** be used in combination with a Dynamic Transactional Template, which can be identified by a `template_id` starting with `d-`. This field is a collection of key/value pairs following the pattern \"substitution_tag\":\"value to substitute\". The key/value pairs must be strings. These substitutions will apply to the text and html content of the body of your email, in addition to the `subject` and `reply-to` parameters. The total collective size of your substitutions may not exceed 10,000 bytes per personalization object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "to": {
          "type": {
            "element_type": {
              "name": "ToEmailArrayInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "POSTMailSendBodyReplyToListObjectInput": {
      "fields": {
        "email": {
          "description": "The email address where any replies or bounces will be returned.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "name": {
          "description": "A name or title associated with the `reply_to_list` email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyTrackingSettingsClickTrackingObjectInput": {
      "description": "Allows you to track if a recipient clicked a link in your email.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enable_text": {
          "description": "Indicates if this setting should be included in the `text/plain` portion of your email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyTrackingSettingsGanalyticsObjectInput": {
      "description": "Allows you to enable tracking provided by Google Analytics.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "utm_campaign": {
          "description": "The name of the campaign.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_content": {
          "description": "Used to differentiate your campaign from advertisements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_medium": {
          "description": "Name of the marketing medium. (e.g. Email)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_source": {
          "description": "Name of the referrer source. (e.g. Google, SomeDomain.com, or Marketing Email)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "utm_term": {
          "description": "Used to identify any paid keywords.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyTrackingSettingsObjectInput": {
      "description": "Settings to determine how you would like to track the metrics of how your recipients interact with your email.",
      "fields": {
        "click_tracking": {
          "description": "Allows you to track if a recipient clicked a link in your email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyTrackingSettingsClickTrackingObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ganalytics": {
          "description": "Allows you to enable tracking provided by Google Analytics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyTrackingSettingsGanalyticsObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "open_tracking": {
          "description": "Allows you to track if the email was opened by including a single pixel image in the body of the content. When the pixel is loaded, Twilio SendGrid can log that the email was opened.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyTrackingSettingsOpenTrackingObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subscription_tracking": {
          "description": "Allows you to insert a subscription management link at the bottom of the text and HTML bodies of your email. If you would like to specify the location of the link within your email, you may use the `substitution_tag`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyTrackingSettingsSubscriptionTrackingObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyTrackingSettingsOpenTrackingObjectInput": {
      "description": "Allows you to track if the email was opened by including a single pixel image in the body of the content. When the pixel is loaded, Twilio SendGrid can log that the email was opened.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "substitution_tag": {
          "description": "Allows you to specify a substitution tag that you can insert in the body of your email at a location that you desire. This tag will be replaced by the open tracking pixel.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMailSendBodyTrackingSettingsSubscriptionTrackingObjectInput": {
      "description": "Allows you to insert a subscription management link at the bottom of the text and HTML bodies of your email. If you would like to specify the location of the link within your email, you may use the `substitution_tag`.",
      "fields": {
        "enable": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html": {
          "description": "HTML to be appended to the email with the subscription tracking link. You may control where the link is by using the tag",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "substitution_tag": {
          "description": "A tag that will be replaced with the unsubscribe URL. for example: `[unsubscribe_url]`. If this parameter is used, it will override both the `text` and `html` parameters. The URL of the link will be placed at the substitution tags location with no additional formatting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text": {
          "description": "Text to be appended to the email with the subscription tracking link. You may control where the link is by using the tag",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMarketingContactsBatchBodyObjectInput": {
      "description": "Array of IDs",
      "fields": {
        "ids": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "POSTMarketingContactsBatchResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactDetails3",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "POSTMarketingContactsSearchEmailsBodyObjectInput": {
      "fields": {
        "emails": {
          "description": "One or more primary emails and/or alternate emails to search through your contacts for.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 100
            }
          }
        }
      }
    },
    "POSTMarketingContactsSearchEmailsResultObject": {
      "fields": {
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTMarketingSegmentsBodyAllOfInput": {
      "fields": {
        "name": {
          "description": "Name of the segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "parent_list_id": {
          "description": "The id of the list if this segment is a child of a list.  This implies the query is rewritten as `(${query_dsl}) AND CONTAINS(list_ids, ${parent_list_id})`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "parent_list_ids": {
          "description": "The array of list ids to filter contacts on when building this segment. It allows only one such list id for now. We will support more in future",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "query_dsl": {
          "description": "SQL query which will filter contacts based on the conditions provided",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMarketingSegmentsDeleteBodyObjectInput": {
      "fields": {
        "ids": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        }
      }
    },
    "POSTMarketingSegmentsDeleteResultErrorsObject": {
      "fields": {
        "error": {
          "description": "error message that indicates why segment cannot be deleted (\"in-use\", \"segment not found\", \"invalid uuid\")",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Segment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resources": {
          "description": "resources in which segment is being used",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingSegmentsDeleteResultErrorsResourcesObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTMarketingSegmentsDeleteResultErrorsResourcesObject": {
      "description": "resources in which segment is being used",
      "fields": {
        "ids": {
          "description": "the resource ids",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "the type of resource in use (e.g., \"automation\")",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMarketingSegmentsDeleteResultObject": {
      "fields": {
        "errors": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "POSTMarketingSegmentsDeleteResultErrorsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "POSTMarketingSendersBodyFromObjectInput": {
      "fields": {
        "email": {
          "description": "This is where the email will appear to originate from for your recipient",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "This is the name appended to the from email field. IE - Your name or company name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMarketingSendersBodyObjectInput": {
      "fields": {
        "address": {
          "description": "The physical address of the sender identity.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address_2": {
          "description": "Additional sender identity address information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The city of the sender identity.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "The country of the sender identity.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "from": {
          "type": {
            "name": "POSTMarketingSendersBodyFromObjectInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "nickname": {
          "description": "A nickname for the sender identity. Not used for sending.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reply_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingSendersBodyReplyToObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "The state of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "The zipcode of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMarketingSendersBodyReplyToObjectInput": {
      "fields": {
        "email": {
          "description": "This is the email that your recipient will reply to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "This is the name appended to the reply to email field. IE - Your name or company name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMarketingSinglesendsIdBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The name of the duplicate Single Send. If you choose to leave the name field blank, your duplicate will be assigned the name of the Single Send it was copied from with the text 'Copy of ' prepended to it. The end of the new Single Send name, including 'Copy of ', will be trimmed if the name exceeds the character limit.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "POSTMarketingSinglesendsSearchResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SinglesendResponseShort",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "POSTMarketingTestSendEmailBodyObjectInput": {
      "fields": {
        "custom_unsubscribe_url": {
          "description": "A custom unsubscribe URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "emails": {
          "description": "An array of email addresses you want to send the test message to.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "email"
            }
          }
        },
        "from_address": {
          "description": "You can either specify this address or specify a verified sender ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "sender_id": {
          "description": "This ID must belong to a verified sender. Alternatively, you may supply a `from_address` email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "suppression_group_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "template_id": {
          "description": "The ID of the template that you would like to use. If you use a template that contains a subject and content (either text or HTML), then those values specified at the personalizations or message level will not be used.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "version_id_override": {
          "description": "You can override the active template with an alternative template version by passing the version ID in this field. If this field is blank, the active template version will be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        }
      }
    },
    "POSTMcContactsExportsBodyNotificationsObjectInput": {
      "fields": {
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTMcContactsExportsBodyObjectInput": {
      "fields": {
        "file_type": {
          "description": "File type for export file. Choose from `json` or `csv`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMcContactsExportsBodyFileTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "list_ids": {
          "description": "IDs of the contact lists you want to export.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        },
        "max_file_size": {
          "description": "The maximum size of an export file in MB. Note that when this option is specified, multiple output files may be returned from the export.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "notifications": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMcContactsExportsBodyNotificationsObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "segment_ids": {
          "description": "IDs of the contact segments you want to export.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "POSTMcContactsExportsResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "name": "Metadata",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The ID of the export job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMcContactsSearchBodyObjectInput": {
      "fields": {
        "query": {
          "description": "An SGQL search string or other pattern.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTMcContactsSearchResultObject": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Selfmetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "contact_count": {
          "description": "The total number of contacts matched.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "result": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ContactDetails3",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "POSTMcFieldDefinitionsBodyObjectInput": {
      "fields": {
        "field_type": {
          "type": {
            "name": "POSTMcFieldDefinitionsBodyFieldTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "POSTMcFieldDefinitionsResultAllOf": {
      "fields": {
        "_metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "field_type": {
          "type": {
            "name": "CustomFieldDefinitionsResponseFieldTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "POSTMcListsBodyObjectInput": {
      "fields": {
        "name": {
          "description": "Your name for your list",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "POSTSendersBodyAllOfInput": {
      "fields": {
        "address": {
          "description": "The physical address of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address_2": {
          "description": "Additional sender identity address information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The city of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "The country of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "from": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "nickname": {
          "description": "A nickname for the sender identity. Not used for sending.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reply_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "The state of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "The zipcode of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTSsoCertificatesBodyObjectInput": {
      "fields": {
        "enabled": {
          "description": "Indicates if the certificate is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "integration_id": {
          "description": "An ID that matches a certificate to a specific IdP integration. This is the `id` returned by the \"Get All SSO Integrations\" endpoint.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public_certificate": {
          "description": "This public certificate allows SendGrid to verify that SAML requests it receives are signed by an IdP that it recognizes.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTSubusersBodyObjectInput": {
      "fields": {
        "email": {
          "description": "The email address of the subuser.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "ips": {
          "description": "The IP addresses that should be assigned to this subuser.",
          "type": {
            "element_type": {
              "name": "IPv4",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "ipv4"
            }
          }
        },
        "password": {
          "description": "The password this subuser will use when logging into SendGrid.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "The username for this subuser.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTTemplatesBodyObjectInput": {
      "fields": {
        "generation": {
          "description": "Defines whether the template supports dynamic replacement.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTTemplatesBodyGenerationEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name for the new transactional template.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        }
      }
    },
    "POSTTemplatesTemplateIdBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The name for the new transactional template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        }
      }
    },
    "POSTUserScheduledSendsBodyObjectInput": {
      "fields": {
        "batch_id": {
          "description": "The batch ID is the identifier that your scheduled mail sends share.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9]"
          }
        },
        "status": {
          "description": "The status of the send you would like to implement. This can be pause or cancel. To delete a pause or cancel status see DELETE /v3/user/scheduled_sends/{batch_id}",
          "type": {
            "name": "POSTUserScheduledSendsBodyStatusEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTUserWebhooksEventTestBodyObjectInput": {
      "fields": {
        "oauth_client_id": {
          "description": "The client ID Twilio SendGrid sends to your OAuth server or service provider to generate an OAuth access token. When passing data in this field, you must also include the oauth_client_secret and oauth_token_url fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oauth_client_secret": {
          "description": "This secret is needed only once to create an access token. SendGrid will store this secret, allowing you to update your Client ID and Token URL without passing the secret to SendGrid again.  When passing data in this field, you must also include the oauth_client_id and oauth_token_url fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oauth_token_url": {
          "description": "The URL where Twilio SendGrid sends the Client ID and Client Secret to generate an access token. This should be your OAuth server or service provider.  When passing data in this field, you must also include the oauth_client_id and oauth_client_secret fields.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL where you would like the test notification to be sent.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTV3MessagesDownloadResultObject": {
      "fields": {
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTV3MessagesDownloadResultStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTV3TeammatesBodyObjectInput": {
      "fields": {
        "email": {
          "description": "New teammate's email",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^.*@.*\\..*",
            "maxLength": 255,
            "minLength": 5
          }
        },
        "is_admin": {
          "description": "Set to true if teammate should be an admin user",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scopes": {
          "description": "Set to specify list of scopes that teammate should have. Should be empty if teammate is an admin.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "POSTV3TeammatesPendingTokenResendResultObject": {
      "fields": {
        "email": {
          "description": "Teammate's email address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Set to true if teammate should have admin privileges",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scopes": {
          "description": "Initial set of permissions to give to teammate if they accept the invite",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "ID to identify invite",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTV3TeammatesResultObject": {
      "fields": {
        "email": {
          "description": "Teammate's email address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Set to true if teammate should have admin privileges",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scopes": {
          "description": "Initial set of permissions to give to teammate if they accept the invite",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "token": {
          "description": "Token to identify invite",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTValidationsEmailBodyObjectInput": {
      "fields": {
        "email": {
          "description": "The email address that you want to validate.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "description": "A one-word classifier for where this validation originated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTValidationsEmailResultObject": {
      "fields": {
        "result": {
          "type": {
            "name": "POSTValidationsEmailResultResultObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTValidationsEmailResultResultChecksAdditionalObject": {
      "description": "Additional checks on the email address.",
      "fields": {
        "has_known_bounces": {
          "description": "WHether email sent to this address from your account has bounced.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_suspected_bounces": {
          "description": "Whether our model predicts that the email address might bounce.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTValidationsEmailResultResultChecksDomainObject": {
      "description": "Checks on the domain portion of the email address.",
      "fields": {
        "has_mx_or_a_record": {
          "description": "Whether the email has appropriate DNS records to deliver a message.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_valid_address_syntax": {
          "description": "Whether the email address syntax is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "is_suspected_disposable_address": {
          "description": "Whether the domain appears to be from a disposable email address service.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTValidationsEmailResultResultChecksLocalPartObject": {
      "description": "Checks on the local part of the email address.",
      "fields": {
        "is_suspected_role_address": {
          "description": "Whether the local part of email appears to be a role or group (e.g., hr, admin)",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTValidationsEmailResultResultChecksObject": {
      "description": "Granular checks for email address validity.",
      "fields": {
        "additional": {
          "description": "Additional checks on the email address.",
          "type": {
            "name": "POSTValidationsEmailResultResultChecksAdditionalObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain": {
          "description": "Checks on the domain portion of the email address.",
          "type": {
            "name": "POSTValidationsEmailResultResultChecksDomainObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "local_part": {
          "description": "Checks on the local part of the email address.",
          "type": {
            "name": "POSTValidationsEmailResultResultChecksLocalPartObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTValidationsEmailResultResultObject": {
      "fields": {
        "checks": {
          "description": "Granular checks for email address validity.",
          "type": {
            "name": "POSTValidationsEmailResultResultChecksObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "description": "The email being validated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "host": {
          "description": "The domain of the email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "hostname"
          }
        },
        "ip_address": {
          "description": "The IP address associated with this email.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "local": {
          "description": "The local part of the email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "score": {
          "description": "A numeric representation of the email validity.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "source": {
          "description": "The source of the validation, as per the API request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suggestion": {
          "description": "A suggested correction in the event of domain name typos (e.g., gmial.com)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verdict": {
          "description": "A generic classification of whether or not the email address is valid.",
          "type": {
            "name": "POSTValidationsEmailResultResultVerdictEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDnsEmailBodyObjectInput": {
      "fields": {
        "domain_id": {
          "description": "The ID of your SendGrid domain record.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        },
        "email": {
          "description": "The email address to send the DNS information to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "link_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        },
        "message": {
          "description": "A custom text block to include in the email body sent with the records.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsBodyObjectInput": {
      "fields": {
        "automatic_security": {
          "description": "Whether to allow SendGrid to manage your SPF records, DKIM keys, and DKIM key rotation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "custom_dkim_selector": {
          "description": "Add a custom DKIM selector. Accepts three letters or numbers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "custom_spf": {
          "description": "Specify whether to use a custom SPF or allow SendGrid to manage your SPF. This option is only available to authenticated domains set up for manual security.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "description": "Whether to use this authenticated domain as the fallback if no authenticated domains match the sender's domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "domain": {
          "description": "Domain being authenticated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ips": {
          "description": "The IP addresses that will be included in the custom SPF record for this authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "subdomain": {
          "description": "The subdomain to use for this authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "The username associated with this domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsDomainIdSubuserBodyObjectInput": {
      "fields": {
        "username": {
          "description": "Username to associate with the authenticated domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsIdIpsBodyObjectInput": {
      "fields": {
        "ip": {
          "description": "IP to associate with the domain. Used for manually specifying IPs for custom SPF.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsIdValidateResultObject": {
      "fields": {
        "id": {
          "description": "The ID of the authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this is a valid authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "validation_results": {
          "description": "The individual DNS records that are checked when validating, including the reason for any invalid DNS records.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsIdValidateResultValidationResultsObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsIdValidateResultValidationResultsDkim1Object": {
      "description": "A DNS record for this authenticated domain.",
      "fields": {
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the DNS record is valid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsIdValidateResultValidationResultsDkim2Object": {
      "description": "A DNS record for this authenticated domain.",
      "fields": {
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the DNS record is valid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsIdValidateResultValidationResultsMailCnameObject": {
      "description": "The CNAME record for the authenticated domain.",
      "fields": {
        "reason": {
          "description": "The reason this record is invalid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this DNS record is valid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsIdValidateResultValidationResultsObject": {
      "description": "The individual DNS records that are checked when validating, including the reason for any invalid DNS records.",
      "fields": {
        "dkim1": {
          "description": "A DNS record for this authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsIdValidateResultValidationResultsDkim1Object",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dkim2": {
          "description": "A DNS record for this authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsIdValidateResultValidationResultsDkim2Object",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "mail_cname": {
          "description": "The CNAME record for the authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsIdValidateResultValidationResultsMailCnameObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "spf": {
          "description": "The SPF record for the authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsIdValidateResultValidationResultsSpfObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTWhitelabelDomainsIdValidateResultValidationResultsSpfObject": {
      "description": "The SPF record for the authenticated domain.",
      "fields": {
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the SPF record is valid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTWhitelabelIpsBodyObjectInput": {
      "fields": {
        "domain": {
          "description": "The root, or sending, domain that will be used to send message from the IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ip": {
          "description": "The IP address for which you want to set up reverse DNS.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain that will be used to send emails from the IP address. This should be the same as the subdomain used to set up an authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTWhitelabelIpsIdValidateResultObject": {
      "fields": {
        "id": {
          "description": "The ID of the reverse DNS record.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the reverse DNS record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "validation_results": {
          "description": "The specific results of the validation.",
          "type": {
            "name": "POSTWhitelabelIpsIdValidateResultValidationResultsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTWhitelabelIpsIdValidateResultValidationResultsARecordObject": {
      "fields": {
        "reason": {
          "description": "The reason the reverse DNS record could not be validated. Is `null` if the reverse DNS record was validated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the reverse DNS record could be validated.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTWhitelabelIpsIdValidateResultValidationResultsObject": {
      "description": "The specific results of the validation.",
      "fields": {
        "a_record": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelIpsIdValidateResultValidationResultsARecordObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTWhitelabelLinksBodyObjectInput": {
      "fields": {
        "default": {
          "description": "Indicates if you want to use this link branding as the default or fallback. When setting a new default, the existing default link branding will have its default status removed automatically.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "domain": {
          "description": "The root domain for the subdomain that you are creating the link branding for. This should match your FROM email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain to create the link branding for. Must be different from the subdomain you used for authenticating your domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "POSTWhitelabelLinksIdValidateResultObject": {
      "fields": {
        "id": {
          "description": "The ID of the branded link.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the link branding is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "validation_results": {
          "description": "The individual validation results for each of the DNS records associated with this branded link.",
          "type": {
            "name": "POSTWhitelabelLinksIdValidateResultValidationResultsObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTWhitelabelLinksIdValidateResultValidationResultsDomainCnameObject": {
      "description": "The DNS record generated for the sending domain used for this branded link.",
      "fields": {
        "reason": {
          "description": "Null if the DNS record is valid. If the DNS record is invalid, this will explain why.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if this DNS record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTWhitelabelLinksIdValidateResultValidationResultsObject": {
      "description": "The individual validation results for each of the DNS records associated with this branded link.",
      "fields": {
        "domain_cname": {
          "description": "The DNS record generated for the sending domain used for this branded link.",
          "type": {
            "name": "POSTWhitelabelLinksIdValidateResultValidationResultsDomainCnameObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "owner_cname": {
          "description": "The DNS record created to verify the branded link.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelLinksIdValidateResultValidationResultsOwnerCnameObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "POSTWhitelabelLinksIdValidateResultValidationResultsOwnerCnameObject": {
      "description": "The DNS record created to verify the branded link.",
      "fields": {
        "reason": {
          "description": "Null if valid. If the DNS record is invalid, this will explain why.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the DNS record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "POSTWhitelabelLinksLinkIdSubuserBodyObjectInput": {
      "fields": {
        "username": {
          "description": "The username of the subuser account that you want to associate the branded link with.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTApiKeysApiKeyIdBodyObjectInput": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PUTDesignBodyObjectInput": {
      "fields": {
        "categories": {
          "description": "The list of categories applied to the design",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 255
            }
          }
        },
        "generate_plain_content": {
          "description": "If true, plain_content is always generated from html_content. If false, plain_content is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "name": {
          "description": "Name of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "plain_content": {
          "description": "Plain text content of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "subject": {
          "description": "Subject of the Design.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 5000
          }
        }
      }
    },
    "PUTIpsPoolsPoolNameBodyObjectInput": {
      "fields": {
        "name": {
          "description": "The new name for your IP pool.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 64
          }
        }
      }
    },
    "PUTMarketingSinglesendsIdScheduleBodyObjectInput": {
      "fields": {
        "send_at": {
          "description": "This is the ISO 8601 time at which to send the Single Send; must be in future, or the string \"now\"",
          "type": {
            "name": "PUTMarketingSinglesendsIdScheduleBodySendAtEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "PUTMarketingSinglesendsIdScheduleResultObject": {
      "fields": {
        "send_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTMarketingSinglesendsIdScheduleResultStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTMcContactsBodyObjectInput": {
      "fields": {
        "contacts": {
          "description": "One or more contacts objects that you intend to upsert. The available fields for a contact, including the required `email` field are described below.",
          "type": {
            "element_type": {
              "name": "ContactRequestInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "list_ids": {
          "description": "An array of List ID strings that this contact will be added to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        }
      }
    },
    "PUTMcContactsImportsBodyObjectInput": {
      "fields": {
        "field_mappings": {
          "description": "Import file header to reserved/custom field mapping.",
          "type": {
            "element_type": {
              "type": "nullable",
              "underlying_type": {
                "name": "String",
                "type": "named"
              }
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "file_type": {
          "description": "Upload file type.",
          "type": {
            "name": "PUTMcContactsImportsBodyFileTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "list_ids": {
          "description": "All contacts will be added to each of the specified lists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PUTMcContactsImportsResultObject": {
      "fields": {
        "job_id": {
          "description": "The ID of the import job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "upload_headers": {
          "description": "A list of headers that must be included in PUT request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PUTMcContactsImportsResultUploadHeadersObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "upload_uri": {
          "description": "The URI to PUT the upload file to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTMcContactsImportsResultUploadHeadersObject": {
      "fields": {
        "header": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTMcContactsResultObject": {
      "fields": {
        "job_id": {
          "description": "Indicates that the contacts are queued for processing. Check the job status with the \"Import Contacts Status\" endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTSubusersSubuserNameIpsResultObject": {
      "fields": {
        "ips": {
          "description": "The IP addresses that are assigned to the subuser.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IPv4",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "ipv4"
            }
          }
        }
      }
    },
    "PUTUserEmailBodyObjectInput": {
      "fields": {
        "email": {
          "description": "The new email address that you would like to use for your account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTUserEmailResultObject": {
      "fields": {
        "email": {
          "description": "The current email address on file for your account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        }
      }
    },
    "PUTUserPasswordBodyObjectInput": {
      "fields": {
        "new_password": {
          "description": "The new password you would like to use for your account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "old_password": {
          "description": "The old password for your account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTUserUsernameBodyObjectInput": {
      "fields": {
        "username": {
          "description": "The new username you would like to use for your account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PUTUserUsernameResultObject": {
      "fields": {
        "username": {
          "description": "The current username on file for your account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ParseSetting": {
      "fields": {
        "hostname": {
          "description": "A specific and unique domain or subdomain that you have created to use exclusively to parse your incoming email. For example, `parse.yourdomain.com`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "send_raw": {
          "description": "Indicates if you would like SendGrid to post the original MIME-type content of your parsed email. When this parameter is set to `true`, SendGrid will send a JSON payload of the content of your email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "spam_check": {
          "description": "Indicates if you would like SendGrid to check the content parsed from your emails for spam before POSTing them to your domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "description": "The public URL where you would like SendGrid to POST the data parsed from your email. Any emails sent with the given hostname provided (whose MX records have been updated to point to SendGrid) will be parsed and POSTed to this URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "parse-setting"
    },
    "ParseSettingInput": {
      "fields": {
        "hostname": {
          "description": "A specific and unique domain or subdomain that you have created to use exclusively to parse your incoming email. For example, `parse.yourdomain.com`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "send_raw": {
          "description": "Indicates if you would like SendGrid to post the original MIME-type content of your parsed email. When this parameter is set to `true`, SendGrid will send a JSON payload of the content of your email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "spam_check": {
          "description": "Indicates if you would like SendGrid to check the content parsed from your emails for spam before POSTing them to your domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "description": "The public URL where you would like SendGrid to POST the data parsed from your email. Any emails sent with the given hostname provided (whose MX records have been updated to point to SendGrid) will be parsed and POSTed to this URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "parse-setting"
    },
    "PartnerSettingsNewRelic": {
      "fields": {
        "enable_subuser_statistics": {
          "description": "Indicates if your subuser statistics will be sent to your New Relic Dashboard.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if this setting is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "license_key": {
          "description": "The license key provided with your New Relic account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "partner_settings_new_relic"
    },
    "ReplyToEmailObjectInput": {
      "fields": {
        "email": {
          "description": "The email address where any replies or bounces will be returned.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "name": {
          "description": "A name or title associated with the `reply_to` email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "reply_to_email_object"
    },
    "ReservedFieldDefinitionsResponse": {
      "fields": {
        "field_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReservedFieldDefinitionsResponseFieldTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "read_only": {
          "description": "When `true` this means API consumers are unable to set the value of this field on contacts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "reserved_field_definitions_response"
    },
    "ReverseDns": {
      "fields": {
        "a_record": {
          "type": {
            "name": "ReverseDnsARecordObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "domain": {
          "description": "The root, or sending, domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the Reverse DNS.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ip": {
          "description": "The IP address that this Reverse DNS was created for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_validation_attempt_at": {
          "description": "A Unix epoch timestamp representing the last time of a validation attempt.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "legacy": {
          "description": "Indicates if this Reverse DNS was created using the legacy whitelabel tool. If it is a legacy whitelabel, it will still function, but you'll need to create a new Reverse DNS if you need to update it.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "rdns": {
          "description": "The reverse DNS record for the IP address. This points to the Reverse DNS subdomain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subdomain": {
          "description": "The subdomain created for this reverse DNS. This is where the rDNS record points.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "users": {
          "description": "The users who are able to send mail from the IP address.",
          "type": {
            "element_type": {
              "name": "ReverseDnsUsersObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "valid": {
          "description": "Indicates if this is a valid Reverse DNS.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "reverse_dns"
    },
    "ReverseDnsARecordObject": {
      "fields": {
        "data": {
          "description": "The IP address being set up with Reverse DNS.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "description": "This is the web address that will be mapped to the IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of DNS record.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valid": {
          "description": "Indicates if the a_record is valid.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ReverseDnsUsersObject": {
      "fields": {
        "user_id": {
          "description": "The ID of a user who can send mail from the IP address.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "The username of a user who can send mail from the IP address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SegmentResponse": {
      "fields": {
        "contacts_count": {
          "description": "Total number of contacts present in the segment",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "contacts_sample": {
          "description": "A subset of all contacts that are in this segment",
          "type": {
            "element_type": {
              "name": "ContactResponse",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "created_at": {
          "description": "ISO8601 timestamp of when the object was created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID assigned to the segment when created.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "description": "Name of the segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "next_sample_update": {
          "description": "ISO8601 timestamp of when the samples will be next updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent_list_ids": {
          "description": "The array of list ids to filter contacts on when building this segment. It allows only one such list id for now. We will support more in future",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "query_dsl": {
          "description": "SQL query which will filter contacts based on the conditions provided",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "query_version": {
          "description": "If not set, segment contains a Query for use with Segment v1 APIs. If set to '2', segment contains a SQL query for use in v2.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sample_updated_at": {
          "description": "ISO8601 timestamp of when the samples were last updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Segment status indicates whether the segment's contacts will be updated periodically",
          "type": {
            "name": "SegmentStatusResponse",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "description": "ISO8601 timestamp of when the object was last updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "segment_response"
    },
    "SegmentStatusResponse": {
      "description": "Segment status indicates whether the segment's contacts will be updated periodically",
      "fields": {
        "error_message": {
          "description": "Describes any errors that were encountered during query validation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "query_validation": {
          "description": "Status of query validation. PENDING, VALID, or INVALID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "segment_status_response"
    },
    "SegmentSummary": {
      "fields": {
        "contacts_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "description": "ISO8601 of created timestamp",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "next_sample_update": {
          "description": "ISO8601 string that is equal to `sample_updated_at` plus an internally calculated offset that depends on how often contacts enter or exit segments as the scheduled pipeline updates the samples.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent_list_id": {
          "description": "The id of the list if this segment is a child of a list.  This implies the query `AND CONTAINS(list_ids, ${parent_list_id})`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "sample_updated_at": {
          "description": "ISO8601 timestamp the sample was last updated",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "updated_at": {
          "description": "ISO8601 timestamp the object was last updated",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "segment_summary"
    },
    "SegmentUpdateInput": {
      "fields": {
        "name": {
          "description": "Name of the segment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "query_dsl": {
          "description": "SQL query which will filter contacts based on the conditions provided",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "segment_update"
    },
    "SegmentWriteV2Input": {
      "fields": {
        "name": {
          "description": "Name of the segment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "parent_list_ids": {
          "description": "The array of list ids to filter contacts on when building this segment. It allows only one such list id for now. We will support more in future",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "query_dsl": {
          "description": "SQL query which will filter contacts based on the conditions provided",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "segment_write_v2"
    },
    "Selfmetadata": {
      "fields": {
        "self": {
          "description": "A link to this object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "selfmetadata"
    },
    "SenderID": {
      "fields": {
        "address": {
          "description": "The physical address of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address_2": {
          "description": "Additional sender identity address information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The city of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "The country of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "description": "The time the sender identity was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "from": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SenderIdRequestFromObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "locked": {
          "description": "True when the sender id is associated to a campaign in the Draft, Scheduled, or In Progress status. You cannot update or delete a locked sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "nickname": {
          "description": "A nickname for the sender identity. Not used for sending.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reply_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SenderIdRequestReplyToObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "The state of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time the sender identity was last updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "verified": {
          "description": "If the sender identity is verified or not. Only verified sender identities can be used to send email.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "zip": {
          "description": "The zipcode of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SenderIdRequestFromObject": {
      "fields": {
        "email": {
          "description": "The email address from which your recipient will receive emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name appended to the from email field. Typically your name or company name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SenderIdRequestFromObjectInput": {
      "fields": {
        "email": {
          "description": "The email address from which your recipient will receive emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name appended to the from email field. Typically your name or company name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SenderIdRequestInput": {
      "fields": {
        "address": {
          "description": "The physical address of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address_2": {
          "description": "Additional sender identity address information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The city of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "The country of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "from": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SenderIdRequestFromObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "nickname": {
          "description": "A nickname for the sender identity. Not used for sending.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reply_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SenderIdRequestReplyToObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "The state of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "The zipcode of the sender identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "sender-id-request"
    },
    "SenderIdRequestReplyToObject": {
      "fields": {
        "email": {
          "description": "The email address to which your recipient will reply.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name appended to the reply to email field. Typically your name or company name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SenderIdRequestReplyToObjectInput": {
      "fields": {
        "email": {
          "description": "The email address to which your recipient will reply.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name appended to the reply to email field. Typically your name or company name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SinglesendRequestEmailConfigObject": {
      "fields": {
        "custom_unsubscribe_url": {
          "description": "The URL allowing recipients to unsubscribe  you must provide this or the `suppression_group_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "design_id": {
          "description": "A `design_id` can be used in place of `html_content`, `plain_content`, and/or `subject`. You can retrieve a design's ID from the [\"List Designs\" endpoint](https://sendgrid.api-docs.io/v3.0/designs-api/list-designs) or by pulling it from the design's detail page URL in the Marketing Campaigns App.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "editor": {
          "description": "The editor  `\"design\"` or `\"code\"`  used to modify the Single Send's design in the Marketing Campaigns App.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestEmailConfigEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If set to `true`, `plain_content` is always generated from `html_content`. If set to false, `plain_content` is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of the Single Send. Do not include this field when using a `design_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ip_pool": {
          "description": "The name of the IP Pool from which the Single Send emails are sent.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "The plain text content of the Single Send. Do not include this field when using a `design_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sender_id": {
          "description": "The ID of the verified Sender. You can retrieve a verified Sender's ID from the [\"Get Verified Senders\" endpoint](https://sendgrid.api-docs.io/v3.0/sender-verification/get-verified-senders) or by pulling it from the Sender's detail page URL in the SendGrid App.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subject": {
          "description": "The subject line of the Single Send. Do not include this field when using a `design_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suppression_group_id": {
          "description": "The ID of the Suppression Group to allow recipients to unsubscribe  you must provide this or the `custom_unsubscribe_url`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SinglesendRequestEmailConfigObjectInput": {
      "fields": {
        "custom_unsubscribe_url": {
          "description": "The URL allowing recipients to unsubscribe  you must provide this or the `suppression_group_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "design_id": {
          "description": "A `design_id` can be used in place of `html_content`, `plain_content`, and/or `subject`. You can retrieve a design's ID from the [\"List Designs\" endpoint](https://sendgrid.api-docs.io/v3.0/designs-api/list-designs) or by pulling it from the design's detail page URL in the Marketing Campaigns App.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "editor": {
          "description": "The editor  `\"design\"` or `\"code\"`  used to modify the Single Send's design in the Marketing Campaigns App.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestEmailConfigEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If set to `true`, `plain_content` is always generated from `html_content`. If set to false, `plain_content` is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of the Single Send. Do not include this field when using a `design_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ip_pool": {
          "description": "The name of the IP Pool from which the Single Send emails are sent.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "The plain text content of the Single Send. Do not include this field when using a `design_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sender_id": {
          "description": "The ID of the verified Sender. You can retrieve a verified Sender's ID from the [\"Get Verified Senders\" endpoint](https://sendgrid.api-docs.io/v3.0/sender-verification/get-verified-senders) or by pulling it from the Sender's detail page URL in the SendGrid App.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subject": {
          "description": "The subject line of the Single Send. Do not include this field when using a `design_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suppression_group_id": {
          "description": "The ID of the Suppression Group to allow recipients to unsubscribe  you must provide this or the `custom_unsubscribe_url`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SinglesendRequestInput": {
      "fields": {
        "categories": {
          "description": "The categories to associate with this Single Send.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "email_config": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestEmailConfigObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the Single Send.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "send_at": {
          "description": "The ISO 8601 time at which to send the Single Send  this must be set for a future time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "send_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestSendToObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "singlesend_request"
    },
    "SinglesendRequestSendToObject": {
      "fields": {
        "all": {
          "description": "Set to `true` to send to All Contacts. If set to `false`, at least one `list_ids` or `segment_ids` value must be provided before the Single Send is scheduled to be sent to recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "list_ids": {
          "description": "The recipient List IDs that will receive the Single Send.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        },
        "segment_ids": {
          "description": "The recipient Segment IDs that will receive the Single Send.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        }
      }
    },
    "SinglesendRequestSendToObjectInput": {
      "fields": {
        "all": {
          "description": "Set to `true` to send to All Contacts. If set to `false`, at least one `list_ids` or `segment_ids` value must be provided before the Single Send is scheduled to be sent to recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "list_ids": {
          "description": "The recipient List IDs that will receive the Single Send.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        },
        "segment_ids": {
          "description": "The recipient Segment IDs that will receive the Single Send.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UUID",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uuid"
            }
          }
        }
      }
    },
    "SinglesendResponse": {
      "fields": {
        "categories": {
          "description": "The categories to associate with this Single Send.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "created_at": {
          "description": "the ISO 8601 time at which the Single Send was created",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email_config": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestEmailConfigObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "name": {
          "description": "The name of the Single Send.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "send_at": {
          "description": "The ISO 8601 time at which to send the Single Send  this must be set for a future time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "send_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestSendToObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "current status of the Single Send",
          "type": {
            "name": "SinglesendResponse1StatusEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "the ISO 8601 time at which the Single Send was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "warnings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SinglesendResponse1WarningsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "SinglesendResponse1WarningsObject": {
      "fields": {
        "field": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "warning_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SinglesendResponseShort": {
      "fields": {
        "abtest": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AbtestSummary",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "categories": {
          "description": "categories to associate with this Single Send",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "created_at": {
          "description": "the ISO 8601 time at which the Single Send was created",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "is_abtest": {
          "description": "true if the Single Send's AB Test functionality has been toggled on",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "name of the Single Send",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "send_at": {
          "description": "the ISO 8601 time at which to send the Single Send; must be in future",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "description": "current status of the Single Send",
          "type": {
            "name": "SinglesendResponseShortStatusEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "the ISO 8601 time at which the Single Send was last updated",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "singlesend_response_short"
    },
    "SinglesendSchedule": {
      "fields": {
        "send_at": {
          "description": "This is the ISO 8601 time at which to send the Single Send; must be in future, or the string \"now\"",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendScheduleStatusEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "singlesend_schedule"
    },
    "SinglesendSearchInput": {
      "fields": {
        "categories": {
          "description": "categories to associate with this Single Send, match any single send that has at least one of the categories",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "leading and trailing wildcard search on name of the Single Send",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        },
        "status": {
          "description": "current status of the Single Send",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SinglesendSearchStatusEnum",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "singlesend_search"
    },
    "SinglesendsLinkStatsResponse": {
      "fields": {
        "_metadata": {
          "type": {
            "name": "LinkTrackingMetadata",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "results": {
          "description": "This is the index of the link's location in the email contents.",
          "type": {
            "element_type": {
              "name": "SinglesendsLinkStatsResponseResultsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_clicks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "singlesends-link-stats-response"
    },
    "SinglesendsLinkStatsResponseResultsObject": {
      "fields": {
        "ab_phase": {
          "description": "This is the A/B phase of the Single Send stat returned. If the `ab_phase` query parameter was not provided, it will return `\"all\"`.",
          "type": {
            "name": "SinglesendsLinkStatsResponseResultsAbPhaseEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ab_variation": {
          "description": "This is the A/B variation of the Single Send stat returned. It is set to `\"all\"` if the `ab_variation` query parameter was not set in the request and `group_by` doesn't contain `ab_variation`.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "clicks": {
          "description": "the number of clicks on this particular link",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 1
          }
        },
        "url": {
          "description": "This is the URL of the link clicked. If `{{custom_fields}}` are part of the URL, they will be included.",
          "type": {
            "name": "URIString",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url_location": {
          "description": "This is the location of the link clicked in each Single Send A/B variation, or in the Single Send itself if there are no variations. Links are numbered from the top down; the topmost link is index `0`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "minimum": 0
          }
        }
      }
    },
    "SinglesendsResponse": {
      "fields": {
        "_metadata": {
          "type": {
            "name": "Metadata",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "results": {
          "type": {
            "element_type": {
              "name": "SinglesendsResponseResultsObject",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "singlesends-response"
    },
    "SinglesendsResponseResultsObject": {
      "fields": {
        "ab_phase": {
          "description": "This is the A/B phase of the Single Send stat returned. If the `group_by` parameter doesn't include `ab_phase` in the request, then the value is \"all\".",
          "type": {
            "name": "SinglesendsResponseResultsAbPhaseEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ab_variation": {
          "description": "This is the A/B variation of the Single Send stat returned. If the `group_by` parameter doesn't include `ab_variation` in the request, then the value is \"all\".",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "aggregation": {
          "description": "This describes the time unit to which the stat is rolled up. It is based on the `aggregated_by` parameter included in the request. It can be \"total\" or the date (in YYYY-MM-DD format) the stats are for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "This is the ID of the Single Dend you require stats for.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "stats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metrics",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "SpamReportsResponse": {
      "fields": {
        "created": {
          "description": "A Unix timestamp that indicates when the recipient marked your message as spam.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "description": "The email address of the recipient that marked your message as spam.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "ip": {
          "description": "The IP address that the message was sent from.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "spam-reports-response"
    },
    "SsoCertificateBody": {
      "fields": {
        "id": {
          "description": "A unique ID assigned to the certificate by SendGrid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "intergration_id": {
          "description": "An ID that matches a certificate to a specific IdP integration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "not_after": {
          "description": "A unix timestamp (e.g., 1603915954) that indicates the time after which the certificate is no longer valid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "not_before": {
          "description": "A unix timestamp (e.g., 1603915954) that indicates the time before which the certificate is not valid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "public_certificate": {
          "description": "This certificate is used by Twilio SendGrid to verify that SAML requests are coming from Okta. This is called the X509 certificate in the Twilio SendGrid UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "sso-certificate-body"
    },
    "SsoIntegration": {
      "fields": {
        "audience_url": {
          "description": "The URL where your IdP should POST its SAML response. This is the Twilio SendGrid URL that is responsible for receiving and parsing a SAML assertion. This is the same URL as the Single Sign-On URL when using SendGrid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "completed_integration": {
          "description": "Indicates if the integration is complete.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "description": "Indicates if the integration is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "entity_id": {
          "description": "An identifier provided by your IdP to identify Twilio SendGrid in the SAML interaction. This is called the \"SAML Issuer ID\" in the Twilio SendGrid UI.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "A unique ID assigned to the configuration by SendGrid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_updated": {
          "description": "A timestamp representing the last time the configuration was modified.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "name": {
          "description": "The name of your integration. This name can be anything that makes sense for your organization (eg. Twilio SendGrid)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signin_url": {
          "description": "The IdP's SAML POST endpoint. This endpoint should receive requests and initiate an SSO login flow. This is called the \"Embed Link\" in the Twilio SendGrid UI.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signout_url": {
          "description": "This URL is relevant only for an IdP-initiated authentication flow. If a user authenticates from their IdP, this URL will return them to their IdP when logging out.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_signon_url": {
          "description": "The URL where your IdP should POST its SAML response. This is the Twilio SendGrid URL that is responsible for receiving and parsing a SAML assertion. This is the same URL as the Audience URL when using SendGrid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SsoTeammateRequestInput": {
      "fields": {
        "email": {
          "description": "The Teammates email address. This email address will also function as the Teammates username and must match the address assigned to the user in your IdP. This address cannot be changed after the Teammate is created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "first_name": {
          "description": "The Teammates first name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Indicates if the Teammate has admin permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "is_read_only": {
          "description": "Indicates if the Teammate has read_only permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_name": {
          "description": "The Teammates last name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "The permission scopes assigned to the Teammate.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "SsoTeammateResponse": {
      "fields": {
        "email": {
          "description": "The Teammates email address. This email address will also function as the Teammates username and must match the address assigned to the user in your IdP. This address cannot be changed after the Teammate is created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "first_name": {
          "description": "The Teammates first name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Indicates if the Teammate has admin permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "is_read_only": {
          "description": "Indicates if the Teammate has read_only permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "is_sso": {
          "description": "Indicates if the Teammate authenticates with SendGrid using SSO or with a username and password.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_name": {
          "description": "The Teammates last name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "This should be set to the Teammate's email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SsoTeammatesPatchResponse": {
      "fields": {
        "address": {
          "description": "The Teammates street address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "The Teammates apartment number, suite number, or other secondary address information that is not part of the physical street address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The Teammate's city.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "company": {
          "description": "The Teammates company name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "The Teammates country of residence.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "The Teammates email address. This email address will also function as the Teammates username and must match the address assigned to the user in your IdP. This address cannot be changed after the Teammate is created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "first_name": {
          "description": "The Teammates first name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_admin": {
          "description": "Indicates if the Teammate has admin permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "is_read_only": {
          "description": "Indicates if the Teammate has read_only permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "is_sso": {
          "description": "Indicates if the Teammate authenticates with SendGrid using SSO or with a username and password.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_name": {
          "description": "The Teammates last name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "description": "The Teammates stored phone number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "The permission scopes assigned to the Teammate.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "The Teammates state or province.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_type": {
          "description": "A Teammate can be an admin, owner, or teammate. Each role is associated with the scope of the Teammates permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SsoTeammatesPatchResponse1UserTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "description": "This should be set to the Teammate's email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "A website associated with the Teammate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "The Teammates zip code.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "StatsAdvancedGlobalStats": {
      "fields": {
        "blocks": {
          "description": "The number of emails that were not allowed to be delivered by ISPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounce_drops": {
          "description": "The number of emails that were dropped because of a bounce.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounces": {
          "description": "The number of emails that bounced instead of being delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "clicks": {
          "description": "The number of links that were clicked in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "deferred": {
          "description": "The number of emails that temporarily could not be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "delivered": {
          "description": "The number of emails SendGrid was able to confirm were actually delivered to a recipient.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "invalid_emails": {
          "description": "The number of recipients who had malformed email addresses or whose mail provider reported the address as invalid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "opens": {
          "description": "The total number of times your emails were opened by recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "processed": {
          "description": "Requests from your website, application, or mail client via SMTP Relay or the API that SendGrid processed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "requests": {
          "description": "The number of emails that were requested to be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_report_drops": {
          "description": "The number of emails that were dropped due to a recipient previously marking your emails as spam.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_reports": {
          "description": "The number of recipients who marked your email as spam.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "description": "The number of unique recipients who opened your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unsubscribe_drops": {
          "description": "The number of emails dropped due to a recipient unsubscribing from your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unsubscribes": {
          "description": "The number of recipients who unsubscribed from your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SubscriptionTrackingSettings": {
      "fields": {
        "enabled": {
          "description": "Indicates if subscription tracking is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The information and HTML for your unsubscribe link.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "landing": {
          "description": "The HTML that will be displayed on the page that your customers will see after clicking unsubscribe, hosted on SendGrids server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "The information in plain text for your unsubscribe link. You should have the  tag in your content, otherwise the user will have no URL for unsubscribing.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "replace": {
          "description": "Your custom defined replacement tag for your templates. Use this tag to place your unsubscribe content anywhere in your emailtemplate.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL where you would like your users sent to unsubscribe.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "subscription_tracking_settings"
    },
    "SubscriptionTrackingSettingsInput": {
      "fields": {
        "enabled": {
          "description": "Indicates if subscription tracking is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The information and HTML for your unsubscribe link.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "landing": {
          "description": "The HTML that will be displayed on the page that your customers will see after clicking unsubscribe, hosted on SendGrids server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "plain_content": {
          "description": "The information in plain text for your unsubscribe link. You should have the  tag in your content, otherwise the user will have no URL for unsubscribing.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "replace": {
          "description": "Your custom defined replacement tag for your templates. Use this tag to place your unsubscribe content anywhere in your emailtemplate.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL where you would like your users sent to unsubscribe.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URIString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "subscription_tracking_settings"
    },
    "Subuser": {
      "fields": {
        "disabled": {
          "description": "Whether or not the user is enabled or disabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "email": {
          "description": "The email address to contact this subuser.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "id": {
          "description": "The ID of this subuser.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "username": {
          "description": "The name by which this subuser will be referred.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "subuser"
    },
    "SubuserPost": {
      "fields": {
        "authorization_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "credit_allocation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SubuserPostCreditAllocationObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "description": "The email address for this subuser.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "signup_session_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "description": "The user ID for this subuser.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "username": {
          "description": "The username of the subuser.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "subuser_post"
    },
    "SubuserPostCreditAllocationObject": {
      "fields": {
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SubuserStats": {
      "fields": {
        "date": {
          "description": "The date the statistics were gathered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "description": "The list of statistics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SubuserStatsStatsObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "subuser_stats"
    },
    "SubuserStatsStatsMetricsObject": {
      "fields": {
        "blocks": {
          "description": "The number of emails that were not allowed to be delivered by ISPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounce_drops": {
          "description": "The number of emails that were dropped because of a bounce.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "bounces": {
          "description": "The number of emails that bounced instead of being delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "clicks": {
          "description": "The number of links that were clicked in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "deferred": {
          "description": "The number of emails that temporarily could not be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "delivered": {
          "description": "The number of emails SendGrid was able to confirm were actually delivered to a recipient.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "invalid_emails": {
          "description": "The number of recipients who had malformed email addresses or whose mail provider reported the address as invalid.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "opens": {
          "description": "The total number of times your emails were opened by recipients.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "processed": {
          "description": "Requests from your website, application, or mail client via SMTP Relay or the API that SendGrid processed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "requests": {
          "description": "The number of emails that were requested to be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_report_drops": {
          "description": "The number of emails that were dropped due to a recipient previously marking your emails as spam.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "spam_reports": {
          "description": "The number of recipients who marked your email as spam.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_clicks": {
          "description": "The number of unique recipients who clicked links in your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unique_opens": {
          "description": "The number of unique recipients who opened your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unsubscribe_drops": {
          "description": "The number of emails dropped due to a recipient unsubscribing from your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unsubscribes": {
          "description": "The number of recipients who unsubscribed from your emails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SubuserStatsStatsObject": {
      "fields": {
        "first_name": {
          "description": "The first name of the subuser.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_name": {
          "description": "The last name of the subuser.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metrics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SubuserStatsStatsMetricsObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The username of the subuser.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SuppressionGroup": {
      "fields": {
        "description": {
          "description": "A description of the suppression group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "id": {
          "description": "The id of the suppression group.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "is_default": {
          "description": "Indicates if this is the default suppression group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "last_email_sent_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "name": {
          "description": "The name of the suppression group. Each group created by a user must have a unique name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 30
          }
        },
        "unsubscribes": {
          "description": "The unsubscribes associated with this group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "suppression_group"
    },
    "SuppressionGroupRequestBaseInput": {
      "fields": {
        "description": {
          "description": "A brief description of your suppression group. Required when creating a group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "is_default": {
          "description": "Indicates if you would like this to be your default suppression group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of your suppression group. Required when creating a group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 30
          }
        }
      },
      "alias": "suppression-group-request-base"
    },
    "SuppressionsRequestInput": {
      "fields": {
        "recipient_emails": {
          "description": "The array of email addresses to add or find.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "email"
            }
          }
        }
      },
      "alias": "suppressions-request"
    },
    "ToEmailArrayInput": {
      "fields": {
        "email": {
          "description": "The intended recipient's email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "name": {
          "description": "The intended recipient's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "to_email_array"
    },
    "TransactionalTemplate": {
      "fields": {
        "generation": {
          "description": "Defines the generation of the template.",
          "type": {
            "name": "TransactionalTemplatesTemplateLeanGenerationEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the transactional template.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "description": "The name for the transactional template.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "updated_at ": {
          "description": "The date and time that this transactional template version was updated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(\\d{4}-\\d{2}-\\d{2}) ((\\d{2}):(\\d{2}):(\\d{2}))$"
          }
        },
        "versions": {
          "description": "The different versions of this transactional template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TransactionalTemplatesVersionOutputLean",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "warning": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TransactionalTemplateWarning",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "TransactionalTemplateVersionCreateInput": {
      "fields": {
        "active": {
          "description": "Set the version as the active version associated with the template (0 is inactive, 1 is active). Only one version of a template can be active. The first version created for a template will automatically be set to Active.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TransactionalTemplateVersionCreateEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If true, plain_content is always generated from html_content. If false, plain_content is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of the version. Maximum of 1048576 bytes allowed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "name": {
          "description": "Name of the transactional template version.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "plain_content": {
          "description": "Text/plain content of the transactional template version. Maximum of 1048576 bytes allowed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "subject": {
          "description": "Subject of the new transactional template version.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255
          }
        },
        "test_data": {
          "description": "For dynamic templates only, the mock json data that will be used for template preview and test sends.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "transactional_template_version_create"
    },
    "TransactionalTemplateVersionOutput": {
      "fields": {
        "active": {
          "description": "Set the version as the active version associated with the template (0 is inactive, 1 is active). Only one version of a template can be active. The first version created for a template will automatically be set to Active.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TransactionalTemplateVersionOutputEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If true, plain_content is always generated from html_content. If false, plain_content is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_content": {
          "description": "The HTML content of the version. Maximum of 1048576 bytes allowed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "id": {
          "description": "ID of the transactional template version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "name": {
          "description": "Name of the transactional template version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "plain_content": {
          "description": "Text/plain content of the transactional template version. Maximum of 1048576 bytes allowed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1048576
          }
        },
        "subject": {
          "description": "Subject of the new transactional template version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255
          }
        },
        "template_id": {
          "description": "ID of the transactional template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "test_data": {
          "description": "For dynamic templates only, the mock json data that will be used for template preview and test sends.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "thumbnail_url": {
          "description": "A Thumbnail preview of the template's html content.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The date and time that this transactional template version was updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "warnings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TransactionalTemplateWarning",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "TransactionalTemplateWarning": {
      "fields": {
        "message": {
          "description": "Warning message for the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "transactional-template-warning"
    },
    "TransactionalTemplatesTemplateLean": {
      "fields": {
        "generation": {
          "description": "Defines the generation of the template.",
          "type": {
            "name": "TransactionalTemplatesTemplateLeanGenerationEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the transactional template.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36
          }
        },
        "name": {
          "description": "The name for the transactional template.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "updated_at ": {
          "description": "The date and time that this transactional template version was updated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(\\d{4}-\\d{2}-\\d{2}) ((\\d{2}):(\\d{2}):(\\d{2}))$"
          }
        },
        "versions": {
          "description": "The different versions of this transactional template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TransactionalTemplatesVersionOutputLean",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "transactional-templates-template-lean"
    },
    "TransactionalTemplatesVersionOutputLean": {
      "fields": {
        "active": {
          "description": "Set the version as the active version associated with the template. Only one version of a template can be active. The first version created for a template will automatically be set to Active.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "editor": {
          "description": "The editor used in the UI.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TransactionalTemplatesVersionOutputLeanEditorEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "generate_plain_content": {
          "description": "If true, plain_content is always generated from html_content. If false, plain_content is not altered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "description": "ID of the transactional template version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "name": {
          "description": "Name of the transactional template version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "subject": {
          "description": "Subject of the new transactional template version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255
          }
        },
        "template_id": {
          "description": "ID of the transactional template.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "thumbnail_url": {
          "description": "A Thumbnail preview of the template's html content.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The date and time that this transactional template version was updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "transactional-templates-version-output-lean"
    },
    "UserProfile": {
      "fields": {
        "address": {
          "description": "The street address for this user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "An optional second line for the street address of this user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The city for the user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "company": {
          "description": "That company that this user profile is associated with.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "Th country of this user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "description": "The first name of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_name": {
          "description": "The last name of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "description": "The phone number for the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The state for this user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "The website associated with this user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "The zip code for this user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user_profile"
    },
    "UserProfileInput": {
      "fields": {
        "address": {
          "description": "The street address for this user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "An optional second line for the street address of this user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "The city for the user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "company": {
          "description": "That company that this user profile is associated with.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "Th country of this user profile.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "first_name": {
          "description": "The first name of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_name": {
          "description": "The last name of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phone": {
          "description": "The phone number for the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The state for this user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "The website associated with this user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "zip": {
          "description": "The zip code for this user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user_profile"
    },
    "UserScheduledSendStatus": {
      "fields": {
        "batch_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9\\-\\_]"
          }
        },
        "status": {
          "description": "The status of the scheduled send.",
          "type": {
            "name": "UserScheduledSendStatus1StatusEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "VerifiedSenderRequestSchemaInput": {
      "fields": {
        "address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "address2": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "city": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 150
          }
        },
        "country": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "from_email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email",
            "maxLength": 256
          }
        },
        "from_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256
          }
        },
        "nickname": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "reply_to": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email",
            "maxLength": 256
          }
        },
        "reply_to_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 2
          }
        },
        "zip": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 10
          }
        }
      },
      "alias": "verified-sender-request-schema"
    },
    "VerifiedSenderResponseSchema": {
      "fields": {
        "address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "from_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "from_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "locked": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "nickname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reply_to": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reply_to_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "zip": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "verified-sender-response-schema"
    }
  },
  "procedures": {
    "DELETE_access_settings_whitelist": {
      "request": {
        "url": "/access_settings/whitelist",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /access_settings/whitelist",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DELETEAccessSettingsWhitelistBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove one or more IPs from the allow list",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_access_settings_whitelist_rule_id": {
      "request": {
        "url": "/access_settings/whitelist/{rule_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rule_id": {
          "description": "The ID of the allowed IP address that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "rule_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove a specific IP from the allowed list",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_alerts_alert_id": {
      "request": {
        "url": "/alerts/{alert_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_id": {
          "description": "The ID of the alert you would like to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an alert",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_api_keys_api_key_id": {
      "request": {
        "url": "/api_keys/{api_key_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete API keys",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_asm_groups_group_id": {
      "request": {
        "url": "/asm/groups/{group_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "group_id": {
          "description": "The ID of the suppression group you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Suppression Group",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_asm_groups_group_id_suppressions_email": {
      "request": {
        "url": "/asm/groups/{group_id}/suppressions/{email}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address that you want to remove from the suppression group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "group_id": {
          "description": "The id of the suppression group that you are removing an email address from.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a suppression from a suppression group",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_asm_suppressions_global_email": {
      "request": {
        "url": "/asm/suppressions/global/{email}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address of the global suppression you want to retrieve. Or, if you want to check if an email address is on the global suppressions list, enter that email address here.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Global Suppression",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_campaigns_campaign_id": {
      "request": {
        "url": "/campaigns/{campaign_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "campaign_id": {
          "description": "The id of the campaign you would like to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Campaign",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_campaigns_campaign_id_schedules": {
      "request": {
        "url": "/campaigns/{campaign_id}/schedules",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "campaign_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unschedule a Scheduled Campaign",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_contactdb_custom_fields_custom_field_id": {
      "request": {
        "url": "/contactdb/custom_fields/{custom_field_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "custom_field_id": {
          "description": "The ID of the custom field that you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "custom_field_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Custom Field",
      "result_type": {
        "name": "GlobalErrorResponseSchema",
        "type": "named"
      }
    },
    "DELETE_contactdb_lists": {
      "request": {
        "url": "/contactdb/lists",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /contactdb/lists",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "integer"
                ]
              }
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Multiple lists",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_contactdb_lists_list_id": {
      "request": {
        "url": "/contactdb/lists/{list_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /contactdb/lists/{list_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "delete_contacts": {
          "description": "Adds the ability to delete all contacts on the list in addition to deleting the list.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "delete_contacts",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "list_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a List",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_contactdb_lists_list_id_recipients_recipient_id": {
      "request": {
        "url": "/contactdb/lists/{list_id}/recipients/{recipient_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /contactdb/lists/{list_id}/recipients/{recipient_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "list_id": {
          "description": "The ID of the list that you want to add the recipient to.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "recipient_id": {
          "description": "The ID of the recipient you are adding to the list.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "recipient_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Single Recipient from a Single List",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_contactdb_recipients": {
      "request": {
        "url": "/contactdb/recipients",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /contactdb/recipients",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Recipients",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "DELETE_contactdb_recipients_recipient_id": {
      "request": {
        "url": "/contactdb/recipients/{recipient_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "recipient_id": {
          "description": "The ID of the recipient that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "recipient_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Recipient",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_contactdb_segments_segment_id": {
      "request": {
        "url": "/contactdb/segments/{segment_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /contactdb/segments/{segment_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "delete_contacts": {
          "description": "True to delete all contacts matching the segment in addition to deleting the segment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "delete_contacts",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "segment_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a segment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_design": {
      "request": {
        "url": "/designs/{id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the Design you want to duplicate.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Design",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_ips_pools_pool_name": {
      "request": {
        "url": "/ips/pools/{pool_name}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pool_name": {
          "description": "The name of the IP pool that you want to retrieve the IP addresses for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pool_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an IP pool",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_ips_pools_pool_name_ips_ip": {
      "request": {
        "url": "/ips/pools/{pool_name}/ips/{ip}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ip": {
          "description": "The IP address that you wish to remove.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ip",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pool_name": {
          "description": "The name of the IP pool that you are removing the IP address from.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pool_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove an IP address from a pool",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_ips_warmup_ip_address": {
      "request": {
        "url": "/ips/warmup/{ip_address}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ip_address": {
          "description": "The IP address that you want to retrieve the warmup status for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ip_address",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Stop warming up an IP address",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_lists_id": {
      "request": {
        "url": "/marketing/lists/{id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delete_contacts": {
          "description": "Flag indicates that all contacts on the list are also to be deleted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "delete_contacts",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a list",
      "result_type": {
        "name": "DELETEListsIdResultObject",
        "type": "named"
      }
    },
    "DELETE_marketing_segments_segment_id": {
      "request": {
        "url": "/marketing/segments/{segment_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "segment_id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "maxLength": 36,
              "minLength": 36
            }
          }
        }
      },
      "description": "Delete Segment",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "DELETE_marketing_singlesends": {
      "request": {
        "url": "/marketing/singlesends",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ids": {
          "description": "Single Send IDs to delete",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ]
            }
          }
        }
      },
      "description": "Bulk Delete Single Sends",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_marketing_singlesends_id": {
      "request": {
        "url": "/marketing/singlesends/{id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Single Send by ID",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_marketing_singlesends_id_schedule": {
      "request": {
        "url": "/marketing/singlesends/{id}/schedule",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Single Send Schedule",
      "result_type": {
        "name": "SinglesendSchedule",
        "type": "named"
      }
    },
    "DELETE_mc_contacts": {
      "request": {
        "url": "/marketing/contacts",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delete_all_contacts": {
          "description": "Must be set to `\"true\"` to delete all contacts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "delete_all_contacts",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ids": {
          "description": "A comma-separated list of contact IDs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ids",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Contacts",
      "result_type": {
        "name": "DELETEMcContactsResultObject",
        "type": "named"
      }
    },
    "DELETE_mc_field_definitions_custom_field_id": {
      "request": {
        "url": "/marketing/field_definitions/{custom_field_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "custom_field_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "custom_field_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Custom Field Definition",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_mc_lists_id_contacts": {
      "request": {
        "url": "/marketing/lists/{id}/contacts",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "contact_ids": {
          "description": "comma separated list of contact ids",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "contact_ids",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "minLength": 1
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove Contacts from a List",
      "result_type": {
        "name": "DELETEMcListsIdContactsResultObject",
        "type": "named"
      }
    },
    "DELETE_segments_segment_id": {
      "request": {
        "url": "/marketing/segments/2.0/{segment_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "segment_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete segment",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "DELETE_sso_certificates_cert_id": {
      "request": {
        "url": "/sso/certificates/{cert_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cert_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "cert_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an SSO Certificate",
      "result_type": {
        "name": "SsoCertificateBody",
        "type": "named"
      }
    },
    "DELETE_sso_integrations_id": {
      "request": {
        "url": "/sso/integrations/{id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an SSO Integration",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_subusers_subuser_name": {
      "request": {
        "url": "/subusers/{subuser_name}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "subuser_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a subuser",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_subusers_subuser_name_monitor": {
      "request": {
        "url": "/subusers/{subuser_name}/monitor",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "subuser_name": {
          "description": "The name of the subuser for which to retrieve monitor settings.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete monitor settings",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_blocks": {
      "request": {
        "url": "/suppression/blocks",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /suppression/blocks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DELETESuppressionBlocksBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete blocks",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_blocks_email": {
      "request": {
        "url": "/suppression/blocks/{email}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address of the specific block.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a specific block",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_bounces": {
      "request": {
        "url": "/suppression/bounces",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /suppression/bounces",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DELETESuppressionBouncesBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete bounces",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_bounces_email": {
      "request": {
        "url": "/suppression/bounces/{email}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /suppression/bounces/{email}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "email_address": {
          "description": "The email address you would like to remove from the bounce list.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email_address",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a bounce",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_invalid_emails": {
      "request": {
        "url": "/suppression/invalid_emails",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /suppression/invalid_emails",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DELETESuppressionInvalidEmailsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete invalid emails",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_invalid_emails_email": {
      "request": {
        "url": "/suppression/invalid_emails/{email}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The specific email address of the invalid email entry that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a specific invalid email",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_spam_reports": {
      "request": {
        "url": "/suppression/spam_reports",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /suppression/spam_reports",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DELETESuppressionSpamReportsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete spam reports",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_suppression_spam_reports_email": {
      "request": {
        "url": "/suppression/spam_reports/{email}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "email": {
          "description": "The email address of a specific spam report that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "email",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a specific spam report",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_templates_template_id": {
      "request": {
        "url": "/templates/{template_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a template.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_templates_template_id_versions_version_id": {
      "request": {
        "url": "/templates/{template_id}/versions/{version_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "description": "The ID of the original template",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "version_id": {
          "description": "The ID of the template version",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a transactional template version.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_user_scheduled_sends_batch_id": {
      "request": {
        "url": "/user/scheduled_sends/{batch_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a cancellation or pause from a scheduled send",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_user_webhooks_parse_settings_hostname": {
      "request": {
        "url": "/user/webhooks/parse/settings/{hostname}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hostname": {
          "description": "The hostname associated with the inbound parse setting that you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "hostname",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a parse setting",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_v3_scopes_requests_request_id": {
      "request": {
        "url": "/scopes/requests/{request_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "request_id": {
          "description": "The ID of the request that you want to deny.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "request_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deny access request",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_v3_senders_sender_id": {
      "request": {
        "url": "/senders/{sender_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sender_id": {
          "description": "The ID of the sender identity that you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "sender_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a Sender Identity",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_v3_teammates_pending_token": {
      "request": {
        "url": "/teammates/pending/{token}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "The token for the invite you want to delete.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "token",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete pending teammate",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "DELETE_v3_teammates_username": {
      "request": {
        "url": "/teammates/{username}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The username of the teammate that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete teammate",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "DELETEV3TeammatesUsernameResultObject",
          "type": "named"
        }
      }
    },
    "DELETE_verified_senders_id": {
      "request": {
        "url": "/verified_senders/{id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete Verified Sender",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_whitelabel_domains_domain_id": {
      "request": {
        "url": "/whitelabel/domains/{domain_id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domain_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domain_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an authenticated domain.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_whitelabel_domains_id_ips_ip": {
      "request": {
        "url": "/whitelabel/domains/{id}/ips/{ip}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID of the domain to delete the IP from.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ip": {
          "description": "IP to remove from the domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ip",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove an IP from an authenticated domain.",
      "result_type": {
        "name": "DomainAuthenticationDomainSpf",
        "type": "named"
      }
    },
    "DELETE_whitelabel_domains_subuser": {
      "request": {
        "url": "/whitelabel/domains/subuser",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "Username for the subuser to find associated authenticated domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Disassociate an authenticated domain from a given user.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_whitelabel_ips_id": {
      "request": {
        "url": "/whitelabel/ips/{id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the reverse DNS record that you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a reverse DNS record",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_whitelabel_links_id": {
      "request": {
        "url": "/whitelabel/links/{id}",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the branded link you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a branded link",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "DELETE_whitelabel_links_subuser": {
      "request": {
        "url": "/whitelabel/links/subuser",
        "method": "delete",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The username of the subuser account that you want to disassociate a branded link from.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Disassociate a branded link from a subuser",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "PATCH_alerts_alert_id": {
      "request": {
        "url": "/alerts/{alert_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_id": {
          "description": "The ID of the alert you would like to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /alerts/{alert_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHAlertsAlertIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an alert",
      "result_type": {
        "name": "PATCHAlertsAlertIdResultObject",
        "type": "named"
      }
    },
    "PATCH_api_keys_api_key_id": {
      "request": {
        "url": "/api_keys/{api_key_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /api_keys/{api_key_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHApiKeysApiKeyIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update API key name",
      "result_type": {
        "name": "ApiKeyNameId",
        "type": "named"
      }
    },
    "PATCH_asm_groups_group_id": {
      "request": {
        "url": "/asm/groups/{group_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /asm/groups/{group_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SuppressionGroupRequestBaseInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "group_id": {
          "description": "The ID of the suppression group you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a suppression group.",
      "result_type": {
        "name": "SuppressionGroup",
        "type": "named"
      }
    },
    "PATCH_campaigns_campaign_id": {
      "request": {
        "url": "/campaigns/{campaign_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /campaigns/{campaign_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHCampaignsCampaignIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "campaign_id": {
          "description": "The id of the campaign you would like to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a Campaign",
      "result_type": {
        "name": "CampaignResponse",
        "type": "named"
      }
    },
    "PATCH_campaigns_campaign_id_schedules": {
      "request": {
        "url": "/campaigns/{campaign_id}/schedules",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /campaigns/{campaign_id}/schedules",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHCampaignsCampaignIdSchedulesBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "campaign_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a Scheduled Campaign",
      "result_type": {
        "name": "PATCHCampaignsCampaignIdSchedulesResultObject",
        "type": "named"
      }
    },
    "PATCH_contactdb_lists_list_id": {
      "request": {
        "url": "/contactdb/lists/{list_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /contactdb/lists/{list_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHContactdbListsListIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "list_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a List",
      "result_type": {
        "name": "PATCHContactdbListsListIdResultObject",
        "type": "named"
      }
    },
    "PATCH_contactdb_recipients": {
      "request": {
        "url": "/contactdb/recipients",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /contactdb/recipients",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PATCHContactdbRecipientsBodyObjectInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "object"
                ]
              }
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Recipient",
      "result_type": {
        "name": "ContactdbRecipientResponse",
        "type": "named"
      }
    },
    "PATCH_contactdb_segments_segment_id": {
      "request": {
        "url": "/contactdb/segments/{segment_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /contactdb/segments/{segment_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHContactdbSegmentsSegmentIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "segment_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a segment",
      "result_type": {
        "name": "ContactdbSegments",
        "type": "named"
      }
    },
    "PATCH_mail_settings_address_whitelist": {
      "request": {
        "url": "/mail_settings/address_whitelist",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /mail_settings/address_whitelist",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHMailSettingsAddressWhitelistBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update address whitelist mail settings",
      "result_type": {
        "name": "MailSettingsAddressWhitelabel",
        "type": "named"
      }
    },
    "PATCH_mail_settings_bounce_purge": {
      "request": {
        "url": "/mail_settings/bounce_purge",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /mail_settings/bounce_purge",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MailSettingsBouncePurgeInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update bounce purge mail settings",
      "result_type": {
        "name": "MailSettingsBouncePurge",
        "type": "named"
      }
    },
    "PATCH_mail_settings_footer": {
      "request": {
        "url": "/mail_settings/footer",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /mail_settings/footer",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MailSettingsFooterInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update footer mail settings",
      "result_type": {
        "name": "MailSettingsFooter",
        "type": "named"
      }
    },
    "PATCH_mail_settings_forward_bounce": {
      "request": {
        "url": "/mail_settings/forward_bounce",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /mail_settings/forward_bounce",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MailSettingsForwardBounceInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update forward bounce mail settings",
      "result_type": {
        "name": "MailSettingsForwardBounce",
        "type": "named"
      }
    },
    "PATCH_mail_settings_forward_spam": {
      "request": {
        "url": "/mail_settings/forward_spam",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /mail_settings/forward_spam",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MailSettingsForwardSpamInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update forward spam mail settings",
      "result_type": {
        "name": "MailSettingsForwardSpam",
        "type": "named"
      }
    },
    "PATCH_mail_settings_template": {
      "request": {
        "url": "/mail_settings/template",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /mail_settings/template",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHMailSettingsTemplateBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update template mail settings",
      "result_type": {
        "name": "PATCHMailSettingsTemplateResultObject",
        "type": "named"
      }
    },
    "PATCH_marketing_segments_segment_id": {
      "request": {
        "url": "/marketing/segments/{segment_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /marketing/segments/{segment_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SegmentWriteV2Input",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "segment_id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "maxLength": 36,
              "minLength": 36
            }
          }
        }
      },
      "description": "Update Segment",
      "result_type": {
        "name": "FullSegment",
        "type": "named"
      }
    },
    "PATCH_marketing_singlesends_id": {
      "request": {
        "url": "/marketing/singlesends/{id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /marketing/singlesends/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Single Send",
      "result_type": {
        "name": "SinglesendResponse",
        "type": "named"
      }
    },
    "PATCH_mc_field_definitions_custom_field_id": {
      "request": {
        "url": "/marketing/field_definitions/{custom_field_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /marketing/field_definitions/{custom_field_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHMcFieldDefinitionsCustomFieldIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "custom_field_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "custom_field_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Custom Field Definition",
      "result_type": {
        "name": "PATCHMcFieldDefinitionsCustomFieldIdResultAllOf",
        "type": "named"
      }
    },
    "PATCH_mc_lists_id": {
      "request": {
        "url": "/marketing/lists/{id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /marketing/lists/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHMcListsIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update List",
      "result_type": {
        "name": "List",
        "type": "named"
      }
    },
    "PATCH_partner_settings_new_relic": {
      "request": {
        "url": "/partner_settings/new_relic",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /partner_settings/new_relic",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHPartnerSettingsNewRelicBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Updates New Relic partner settings.",
      "result_type": {
        "name": "PartnerSettingsNewRelic",
        "type": "named"
      }
    },
    "PATCH_segments_segment_id": {
      "request": {
        "url": "/marketing/segments/2.0/{segment_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /marketing/segments/2.0/{segment_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SegmentUpdateInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "segment_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "segment_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Segment",
      "result_type": {
        "name": "SegmentResponse",
        "type": "named"
      }
    },
    "PATCH_sso_certificates_cert_id": {
      "request": {
        "url": "/sso/certificates/{cert_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /sso/certificates/{cert_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHSsoCertificatesCertIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "cert_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "cert_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update SSO Certificate",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "PATCH_sso_integrations_id": {
      "request": {
        "url": "/sso/integrations/{id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /sso/integrations/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateIntegrationRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "si": {
          "description": "If this parameter is set to `true`, the response will include the `completed_integration` field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "si",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Update an SSO Integration",
      "result_type": {
        "name": "SsoIntegration",
        "type": "named"
      }
    },
    "PATCH_sso_teammates_username": {
      "request": {
        "url": "/sso/teammates/{username}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /sso/teammates/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHSsoTeammatesUsernameBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "username": {
          "description": "This email address must be the same address assigned to the teammate in your IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Edit an SSO Teammate",
      "result_type": {
        "name": "SsoTeammatesPatchResponse",
        "type": "named"
      }
    },
    "PATCH_subusers_subuser_name": {
      "request": {
        "url": "/subusers/{subuser_name}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /subusers/{subuser_name}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHSubusersSubuserNameBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "subuser_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Enable/disable a subuser",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "PATCH_templates_template_id": {
      "request": {
        "url": "/templates/{template_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /templates/{template_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHTemplatesTemplateIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Edit a transactional template.",
      "result_type": {
        "name": "TransactionalTemplate",
        "type": "named"
      }
    },
    "PATCH_templates_template_id_versions_version_id": {
      "request": {
        "url": "/templates/{template_id}/versions/{version_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /templates/{template_id}/versions/{version_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TransactionalTemplateVersionCreateInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "description": "The ID of the original template",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "version_id": {
          "description": "The ID of the template version",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Edit a transactional template version.",
      "result_type": {
        "name": "TransactionalTemplateVersionOutput",
        "type": "named"
      }
    },
    "PATCH_tracking_settings_click": {
      "request": {
        "url": "/tracking_settings/click",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /tracking_settings/click",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHTrackingSettingsClickBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Click Tracking Settings",
      "result_type": {
        "name": "ClickTracking",
        "type": "named"
      }
    },
    "PATCH_tracking_settings_google_analytics": {
      "request": {
        "url": "/tracking_settings/google_analytics",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /tracking_settings/google_analytics",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GoogleAnalyticsSettingsInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Google Analytics Settings",
      "result_type": {
        "name": "GoogleAnalyticsSettings",
        "type": "named"
      }
    },
    "PATCH_tracking_settings_open": {
      "request": {
        "url": "/tracking_settings/open",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /tracking_settings/open",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHTrackingSettingsOpenBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Open Tracking Settings",
      "result_type": {
        "name": "PATCHTrackingSettingsOpenResultObject",
        "type": "named"
      }
    },
    "PATCH_tracking_settings_subscription": {
      "request": {
        "url": "/tracking_settings/subscription",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /tracking_settings/subscription",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SubscriptionTrackingSettingsInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Subscription Tracking Settings",
      "result_type": {
        "name": "SubscriptionTrackingSettings",
        "type": "named"
      }
    },
    "PATCH_user_profile": {
      "request": {
        "url": "/user/profile",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /user/profile",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserProfileInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a user's profile",
      "result_type": {
        "name": "UserProfile",
        "type": "named"
      }
    },
    "PATCH_user_scheduled_sends_batch_id": {
      "request": {
        "url": "/user/scheduled_sends/{batch_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "batch_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "batch_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /user/scheduled_sends/{batch_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHUserScheduledSendsBatchIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a scheduled send",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "PATCH_user_settings_enforced_tls": {
      "request": {
        "url": "/user/settings/enforced_tls",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /user/settings/enforced_tls",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnforcedTlsRequestResponseInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Enforced TLS settings",
      "result_type": {
        "name": "EnforcedTlsRequestResponse",
        "type": "named"
      }
    },
    "PATCH_user_webhooks_event_settings": {
      "request": {
        "url": "/user/webhooks/event/settings",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /user/webhooks/event/settings",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventWebhookUpdateOauthRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Event Notification Settings",
      "result_type": {
        "name": "EventWebhookResponse",
        "type": "named"
      }
    },
    "PATCH_user_webhooks_event_settings_signed": {
      "request": {
        "url": "/user/webhooks/event/settings/signed",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /user/webhooks/event/settings/signed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHUserWebhooksEventSettingsSignedBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Enable/Disable Signed Webhook",
      "result_type": {
        "name": "PATCHUserWebhooksEventSettingsSignedResultObject",
        "type": "named"
      }
    },
    "PATCH_user_webhooks_parse_settings_hostname": {
      "request": {
        "url": "/user/webhooks/parse/settings/{hostname}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /user/webhooks/parse/settings/{hostname}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ParseSettingInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "hostname": {
          "description": "The hostname associated with the inbound parse setting that you would like to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "hostname",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a parse setting",
      "result_type": {
        "name": "ParseSetting",
        "type": "named"
      }
    },
    "PATCH_v3_scopes_requests_approve_id": {
      "request": {
        "url": "/scopes/requests/{request_id}/approve",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "request_id": {
          "description": "The ID of the request that you want to approve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "request_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Approve access request",
      "result_type": {
        "name": "PATCHV3ScopesRequestsApproveIdResultObject",
        "type": "named"
      }
    },
    "PATCH_v3_senders_sender_id": {
      "request": {
        "url": "/senders/{sender_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /senders/{sender_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SenderIdRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sender_id": {
          "description": "The ID of the sender identity that you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "sender_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a Sender Identity",
      "result_type": {
        "name": "SenderID",
        "type": "named"
      }
    },
    "PATCH_v3_teammates_username": {
      "request": {
        "url": "/teammates/{username}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /teammates/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHV3TeammatesUsernameBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The username of the teammate that you want to retrieve.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update teammate's permissions",
      "result_type": {
        "name": "PATCHV3TeammatesUsernameResultObject",
        "type": "named"
      }
    },
    "PATCH_verified_senders_id": {
      "request": {
        "url": "/verified_senders/{id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /verified_senders/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VerifiedSenderRequestSchemaInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Edit Verified Sender",
      "result_type": {
        "name": "VerifiedSenderResponseSchema",
        "type": "named"
      }
    },
    "PATCH_whitelabel_domains_domain_id": {
      "request": {
        "url": "/whitelabel/domains/{domain_id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /whitelabel/domains/{domain_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHWhitelabelDomainsDomainIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "domain_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domain_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an authenticated domain",
      "result_type": {
        "element_type": {
          "name": "DomainAuthentication200Response",
          "type": "named"
        },
        "type": "array"
      }
    },
    "PATCH_whitelabel_links_id": {
      "request": {
        "url": "/whitelabel/links/{id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /whitelabel/links/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PATCHWhitelabelLinksIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the branded link you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a branded link",
      "result_type": {
        "name": "LinkBranding200Response",
        "type": "named"
      }
    },
    "POST_access_settings_whitelist": {
      "request": {
        "url": "/access_settings/whitelist",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /access_settings/whitelist",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTAccessSettingsWhitelistBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add one or more IPs to the allow list",
      "result_type": {
        "name": "IpAccessResponse",
        "type": "named"
      }
    },
    "POST_alerts": {
      "request": {
        "url": "/alerts",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /alerts",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTAlertsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a new Alert",
      "result_type": {
        "name": "POSTAlertsResultObject",
        "type": "named"
      }
    },
    "POST_asm_groups": {
      "request": {
        "url": "/asm/groups",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /asm/groups",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SuppressionGroupRequestBaseInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a new suppression group",
      "result_type": {
        "name": "POSTAsmGroupsResultObject",
        "type": "named"
      }
    },
    "POST_asm_groups_group_id_suppressions": {
      "request": {
        "url": "/asm/groups/{group_id}/suppressions",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /asm/groups/{group_id}/suppressions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SuppressionsRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "group_id": {
          "description": "The id of the unsubscribe group that you are adding suppressions to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add suppressions to a suppression group",
      "result_type": {
        "name": "POSTAsmGroupsGroupIdSuppressionsResultObject",
        "type": "named"
      }
    },
    "POST_asm_groups_group_id_suppressions_search": {
      "request": {
        "url": "/asm/groups/{group_id}/suppressions/search",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /asm/groups/{group_id}/suppressions/search",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SuppressionsRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "group_id": {
          "description": "The ID of the suppression group that you would like to search.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search for suppressions within a group",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "POST_asm_suppressions_global": {
      "request": {
        "url": "/asm/suppressions/global",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /asm/suppressions/global",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SuppressionsRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add recipient addresses to the global suppression group.",
      "result_type": {
        "name": "POSTAsmSuppressionsGlobalResultObject",
        "type": "named"
      }
    },
    "POST_campaigns": {
      "request": {
        "url": "/campaigns",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /campaigns",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CampaignRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Campaign",
      "result_type": {
        "name": "CampaignResponse",
        "type": "named"
      }
    },
    "POST_campaigns_campaign_id_schedules": {
      "request": {
        "url": "/campaigns/{campaign_id}/schedules",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /campaigns/{campaign_id}/schedules",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTCampaignsCampaignIdSchedulesBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "campaign_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Schedule a Campaign",
      "result_type": {
        "name": "POSTCampaignsCampaignIdSchedulesResultObject",
        "type": "named"
      }
    },
    "POST_campaigns_campaign_id_schedules_now": {
      "request": {
        "url": "/campaigns/{campaign_id}/schedules/now",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "campaign_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Send a Campaign",
      "result_type": {
        "name": "POSTCampaignsCampaignIdSchedulesNowResultObject",
        "type": "named"
      }
    },
    "POST_campaigns_campaign_id_schedules_test": {
      "request": {
        "url": "/campaigns/{campaign_id}/schedules/test",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /campaigns/{campaign_id}/schedules/test",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTCampaignsCampaignIdSchedulesTestBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "campaign_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "campaign_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Send a Test Campaign",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "POSTCampaignsCampaignIdSchedulesTestResultObject",
          "type": "named"
        }
      }
    },
    "POST_contactdb_custom_fields": {
      "request": {
        "url": "/contactdb/custom_fields",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /contactdb/custom_fields",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTContactdbCustomFieldsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Custom Field",
      "result_type": {
        "name": "ContactdbCustomFieldWithId",
        "type": "named"
      }
    },
    "POST_contactdb_lists": {
      "request": {
        "url": "/contactdb/lists",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /contactdb/lists",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTContactdbListsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a List",
      "result_type": {
        "name": "ContactdbList",
        "type": "named"
      }
    },
    "POST_contactdb_lists_list_id_recipients": {
      "request": {
        "url": "/contactdb/lists/{list_id}/recipients",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /contactdb/lists/{list_id}/recipients",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "integer"
                ]
              }
            }
          }
        },
        "list_id": {
          "description": "The id of the list of recipients you want to retrieve.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add Multiple Recipients to a List",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "POST_contactdb_lists_list_id_recipients_recipient_id": {
      "request": {
        "url": "/contactdb/lists/{list_id}/recipients/{recipient_id}",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "list_id": {
          "description": "The ID of the list that you want to add the recipient to.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "list_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "recipient_id": {
          "description": "The ID of the recipient you are adding to the list.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "recipient_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add a Single Recipient to a List",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "POST_contactdb_recipients": {
      "request": {
        "url": "/contactdb/recipients",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /contactdb/recipients",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "POSTContactdbRecipientsBodyObjectInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "object"
                ]
              }
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add recipients",
      "result_type": {
        "name": "ContactdbRecipientResponse",
        "type": "named"
      }
    },
    "POST_contactdb_recipients_search": {
      "request": {
        "url": "/contactdb/recipients/search",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /contactdb/recipients/search",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTContactdbRecipientsSearchBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Search recipients",
      "result_type": {
        "name": "POSTContactdbRecipientsSearchResultObject",
        "type": "named"
      }
    },
    "POST_contactdb_segments": {
      "request": {
        "url": "/contactdb/segments",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /contactdb/segments",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContactdbSegmentsInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Segment",
      "result_type": {
        "name": "ContactdbSegmentsWithId",
        "type": "named"
      }
    },
    "POST_design": {
      "request": {
        "url": "/designs/{id}",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /designs/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DesignDuplicateInputInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the Design you want to duplicate.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Duplicate Design",
      "result_type": {
        "name": "DesignOutput",
        "type": "named"
      }
    },
    "POST_ips": {
      "request": {
        "url": "/ips",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /ips",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTIpsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Add IPs",
      "result_type": {
        "name": "POSTIpsResultObject",
        "type": "named"
      }
    },
    "POST_ips_pools": {
      "request": {
        "url": "/ips/pools",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /ips/pools",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTIpsPoolsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an IP pool",
      "result_type": {
        "name": "IpPoolResponse",
        "type": "named"
      }
    },
    "POST_ips_pools_pool_name_ips": {
      "request": {
        "url": "/ips/pools/{pool_name}/ips",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /ips/pools/{pool_name}/ips",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTIpsPoolsPoolNameIpsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pool_name": {
          "description": "The name of the IP pool you want to add the address to. If the name contains spaces, they must be URL encoded (e.g., \"Test Pool\" becomes \"Test%20Pool\").",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pool_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add an IP address to a pool",
      "result_type": {
        "name": "POSTIpsPoolsPoolNameIpsResultObject",
        "type": "named"
      }
    },
    "POST_ips_warmup": {
      "request": {
        "url": "/ips/warmup",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /ips/warmup",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTIpsWarmupBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Start warming up an IP address",
      "result_type": {
        "element_type": {
          "name": "IpWarmupResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "POST_mail_batch": {
      "request": {
        "url": "/mail/batch",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a batch ID",
      "result_type": {
        "name": "MailBatchId",
        "type": "named"
      }
    },
    "POST_mail_send": {
      "request": {
        "url": "/mail/send",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /mail/send",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMailSendBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "v3 Mail Send",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "POST_marketing_contacts_batch": {
      "request": {
        "url": "/marketing/contacts/batch",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Array of IDs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingContactsBatchBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Get Batched Contacts by IDs",
      "result_type": {
        "name": "POSTMarketingContactsBatchResultObject",
        "type": "named"
      }
    },
    "POST_marketing_contacts_search_emails": {
      "request": {
        "url": "/marketing/contacts/search/emails",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/contacts/search/emails",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingContactsSearchEmailsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Get Contacts by Emails",
      "result_type": {
        "name": "POSTMarketingContactsSearchEmailsResultObject",
        "type": "named"
      }
    },
    "POST_marketing_segments": {
      "request": {
        "url": "/marketing/segments",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/segments",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingSegmentsBodyAllOfInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create Segment",
      "result_type": {
        "name": "FullSegment",
        "type": "named"
      }
    },
    "POST_marketing_segments_delete": {
      "request": {
        "url": "/marketing/segments/delete",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/segments/delete",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingSegmentsDeleteBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Bulk Delete Segments",
      "result_type": {
        "name": "POSTMarketingSegmentsDeleteResultObject",
        "type": "named"
      }
    },
    "POST_marketing_senders": {
      "request": {
        "url": "/marketing/senders",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/senders",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingSendersBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Sender Identity",
      "result_type": {
        "name": "SenderID",
        "type": "named"
      }
    },
    "POST_marketing_singlesends": {
      "request": {
        "url": "/marketing/singlesends",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/singlesends",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create Single Send",
      "result_type": {
        "name": "SinglesendResponse",
        "type": "named"
      }
    },
    "POST_marketing_singlesends_id": {
      "request": {
        "url": "/marketing/singlesends/{id}",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/singlesends/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingSinglesendsIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Duplicate Single Send",
      "result_type": {
        "name": "SinglesendResponse",
        "type": "named"
      }
    },
    "POST_marketing_singlesends_search": {
      "request": {
        "url": "/marketing/singlesends/search",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/singlesends/search",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SinglesendSearchInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "page_token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Single Sends Search",
      "result_type": {
        "name": "POSTMarketingSinglesendsSearchResultObject",
        "type": "named"
      }
    },
    "POST_marketing_test_send_email": {
      "request": {
        "url": "/marketing/test/send_email",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/test/send_email",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMarketingTestSendEmailBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Send a Test Marketing Email",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "POST_mc_contacts_exports": {
      "request": {
        "url": "/marketing/contacts/exports",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/contacts/exports",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMcContactsExportsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Export Contacts",
      "result_type": {
        "name": "POSTMcContactsExportsResultObject",
        "type": "named"
      }
    },
    "POST_mc_contacts_search": {
      "request": {
        "url": "/marketing/contacts/search",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/contacts/search",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMcContactsSearchBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Search Contacts",
      "result_type": {
        "name": "POSTMcContactsSearchResultObject",
        "type": "named"
      }
    },
    "POST_mc_field_definitions": {
      "request": {
        "url": "/marketing/field_definitions",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/field_definitions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMcFieldDefinitionsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create Custom Field Definition",
      "result_type": {
        "name": "POSTMcFieldDefinitionsResultAllOf",
        "type": "named"
      }
    },
    "POST_mc_lists": {
      "request": {
        "url": "/marketing/lists",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/lists",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTMcListsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create List",
      "result_type": {
        "name": "List",
        "type": "named"
      }
    },
    "POST_segments": {
      "request": {
        "url": "/marketing/segments/2.0",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /marketing/segments/2.0",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SegmentWriteV2Input",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create Segment",
      "result_type": {
        "name": "SegmentResponse",
        "type": "named"
      }
    },
    "POST_senders": {
      "request": {
        "url": "/senders",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /senders",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTSendersBodyAllOfInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Sender Identity",
      "result_type": {
        "name": "SenderID",
        "type": "named"
      }
    },
    "POST_sendgrid_pre_built_design": {
      "request": {
        "url": "/designs/pre-builts/{id}",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /designs/pre-builts/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DesignDuplicateInputInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the pre-built Design you want to duplicate.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Duplicate SendGrid Pre-built Design",
      "result_type": {
        "name": "DesignOutput",
        "type": "named"
      }
    },
    "POST_sso_certificates": {
      "request": {
        "url": "/sso/certificates",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /sso/certificates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTSsoCertificatesBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an SSO Certificate",
      "result_type": {
        "name": "SsoCertificateBody",
        "type": "named"
      }
    },
    "POST_sso_integrations": {
      "request": {
        "url": "/sso/integrations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /sso/integrations",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateIntegrationRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an SSO Integration",
      "result_type": {
        "name": "SsoIntegration",
        "type": "named"
      }
    },
    "POST_sso_teammates": {
      "request": {
        "url": "/sso/teammates",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /sso/teammates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SsoTeammateRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create SSO Teammate",
      "result_type": {
        "name": "SsoTeammateResponse",
        "type": "named"
      }
    },
    "POST_subusers": {
      "request": {
        "url": "/subusers",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /subusers",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTSubusersBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create Subuser",
      "result_type": {
        "name": "SubuserPost",
        "type": "named"
      }
    },
    "POST_subusers_subuser_name_monitor": {
      "request": {
        "url": "/subusers/{subuser_name}/monitor",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /subusers/{subuser_name}/monitor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MonitorInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "subuser_name": {
          "description": "The name of the subuser for which to retrieve monitor settings.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create monitor settings",
      "result_type": {
        "name": "Monitor",
        "type": "named"
      }
    },
    "POST_templates": {
      "request": {
        "url": "/templates",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /templates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTTemplatesBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a transactional template.",
      "result_type": {
        "name": "TransactionalTemplate",
        "type": "named"
      }
    },
    "POST_templates_template_id": {
      "request": {
        "url": "/templates/{template_id}",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /templates/{template_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTTemplatesTemplateIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Duplicate a transactional template.",
      "result_type": {
        "name": "TransactionalTemplate",
        "type": "named"
      }
    },
    "POST_templates_template_id_versions": {
      "request": {
        "url": "/templates/{template_id}/versions",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /templates/{template_id}/versions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TransactionalTemplateVersionCreateInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a new transactional template version.",
      "result_type": {
        "name": "TransactionalTemplateVersionOutput",
        "type": "named"
      }
    },
    "POST_templates_template_id_versions_version_id_activate": {
      "request": {
        "url": "/templates/{template_id}/versions/{version_id}/activate",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_id": {
          "description": "The ID of the original template",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "template_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "version_id": {
          "description": "The ID of the template version",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "version_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a transactional template version.",
      "result_type": {
        "name": "TransactionalTemplateVersionOutput",
        "type": "named"
      }
    },
    "POST_user_scheduled_sends": {
      "request": {
        "url": "/user/scheduled_sends",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/scheduled_sends",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTUserScheduledSendsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Cancel or pause a scheduled send",
      "result_type": {
        "name": "UserScheduledSendStatus",
        "type": "named"
      }
    },
    "POST_user_webhooks_event_test": {
      "request": {
        "url": "/user/webhooks/event/test",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/webhooks/event/test",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTUserWebhooksEventTestBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Test Event Notification Settings",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "POST_user_webhooks_parse_settings": {
      "request": {
        "url": "/user/webhooks/parse/settings",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/webhooks/parse/settings",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ParseSettingInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a parse setting",
      "result_type": {
        "name": "ParseSetting",
        "type": "named"
      }
    },
    "POST_v3_messages_download": {
      "request": {
        "url": "/messages/download",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "query": {
          "description": "Uses a SQL like syntax to indicate which messages to include in the CSV",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "query",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Request CSV",
      "result_type": {
        "name": "POSTV3MessagesDownloadResultObject",
        "type": "named"
      }
    },
    "POST_v3_senders_sender_id_resend_verification": {
      "request": {
        "url": "/senders/{sender_id}/resend_verification",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sender_id": {
          "description": "The ID of the sender identity for which you would like to resend a verification email.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "sender_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Resend Sender Identity Verification",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "POST_v3_teammates": {
      "request": {
        "url": "/teammates",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /teammates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTV3TeammatesBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Invite teammate",
      "result_type": {
        "name": "POSTV3TeammatesResultObject",
        "type": "named"
      }
    },
    "POST_v3_teammates_pending_token_resend": {
      "request": {
        "url": "/teammates/pending/{token}/resend",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "The token for the invite that you want to resend.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "token",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Resend teammate invite",
      "result_type": {
        "name": "POSTV3TeammatesPendingTokenResendResultObject",
        "type": "named"
      }
    },
    "POST_validations_email": {
      "request": {
        "url": "/validations/email",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /validations/email",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTValidationsEmailBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Validate an email",
      "result_type": {
        "name": "POSTValidationsEmailResultObject",
        "type": "named"
      }
    },
    "POST_verified_senders": {
      "request": {
        "url": "/verified_senders",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /verified_senders",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VerifiedSenderRequestSchemaInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create Verified Sender Request",
      "result_type": {
        "name": "VerifiedSenderResponseSchema",
        "type": "named"
      }
    },
    "POST_verified_senders_resend_id": {
      "request": {
        "url": "/verified_senders/resend/{id}",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Resend Verified Sender Request",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "POST_whitelabel_dns_email": {
      "request": {
        "url": "/whitelabel/dns/email",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /whitelabel/dns/email",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDnsEmailBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Email DNS records to a co-worker",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "POST_whitelabel_domains": {
      "request": {
        "url": "/whitelabel/domains",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /whitelabel/domains",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Authenticate a domain",
      "result_type": {
        "name": "AuthenticationDomain",
        "type": "named"
      }
    },
    "POST_whitelabel_domains_domain_id_subuser": {
      "request": {
        "url": "/whitelabel/domains/{domain_id}/subuser",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /whitelabel/domains/{domain_id}/subuser",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsDomainIdSubuserBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "domain_id": {
          "description": "ID of the authenticated domain to associate with the subuser",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "domain_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Associate an authenticated domain with a given user.",
      "result_type": {
        "name": "DomainAuthenticationDomainSpf",
        "type": "named"
      }
    },
    "POST_whitelabel_domains_id_ips": {
      "request": {
        "url": "/whitelabel/domains/{id}/ips",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /whitelabel/domains/{id}/ips",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelDomainsIdIpsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "ID of the domain to which you are adding an IP",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add an IP to an authenticated domain",
      "result_type": {
        "name": "DomainAuthenticationDomainSpf",
        "type": "named"
      }
    },
    "POST_whitelabel_domains_id_validate": {
      "request": {
        "url": "/whitelabel/domains/{id}/validate",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID of the domain to validate.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Validate a domain authentication.",
      "result_type": {
        "name": "POSTWhitelabelDomainsIdValidateResultObject",
        "type": "named"
      }
    },
    "POST_whitelabel_ips": {
      "request": {
        "url": "/whitelabel/ips",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /whitelabel/ips",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelIpsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set up reverse DNS",
      "result_type": {
        "name": "ReverseDns",
        "type": "named"
      }
    },
    "POST_whitelabel_ips_id_validate": {
      "request": {
        "url": "/whitelabel/ips/{id}/validate",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the reverse DNS record that you would like to validate.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Validate a reverse DNS record",
      "result_type": {
        "name": "POSTWhitelabelIpsIdValidateResultObject",
        "type": "named"
      }
    },
    "POST_whitelabel_links": {
      "request": {
        "url": "/whitelabel/links",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /whitelabel/links",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelLinksBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a branded link",
      "result_type": {
        "name": "LinkBranding200Response",
        "type": "named"
      }
    },
    "POST_whitelabel_links_id_validate": {
      "request": {
        "url": "/whitelabel/links/{id}/validate",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The ID of the branded link that you want to validate.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Validate a branded link",
      "result_type": {
        "name": "POSTWhitelabelLinksIdValidateResultObject",
        "type": "named"
      }
    },
    "POST_whitelabel_links_link_id_subuser": {
      "request": {
        "url": "/whitelabel/links/{link_id}/subuser",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /whitelabel/links/{link_id}/subuser",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "POSTWhitelabelLinksLinkIdSubuserBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "link_id": {
          "description": "The ID of the branded link you want to associate.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "link_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Associate a branded link with a subuser",
      "result_type": {
        "name": "LinkBranding200Response",
        "type": "named"
      }
    },
    "PUT_api_keys_api_key_id": {
      "request": {
        "url": "/api_keys/{api_key_id}",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "api_key_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "api_key_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api_keys/{api_key_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTApiKeysApiKeyIdBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update API key name and scopes",
      "result_type": {
        "name": "ApiKeyNameIdScopes",
        "type": "named"
      }
    },
    "PUT_design": {
      "request": {
        "url": "/designs/{id}",
        "method": "patch",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /designs/{id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTDesignBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the Design you want to duplicate.",
          "type": {
            "name": "UUID",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Design",
      "result_type": {
        "name": "DesignOutput",
        "type": "named"
      }
    },
    "PUT_ips_pools_pool_name": {
      "request": {
        "url": "/ips/pools/{pool_name}",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /ips/pools/{pool_name}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTIpsPoolsPoolNameBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pool_name": {
          "description": "The name of the IP pool that you want to retrieve the IP addresses for.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pool_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Rename an IP pool",
      "result_type": {
        "name": "IpPoolResponse",
        "type": "named"
      }
    },
    "PUT_marketing_singlesends_id_schedule": {
      "request": {
        "url": "/marketing/singlesends/{id}/schedule",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /marketing/singlesends/{id}/schedule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTMarketingSinglesendsIdScheduleBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Schedule Single Send",
      "result_type": {
        "name": "PUTMarketingSinglesendsIdScheduleResultObject",
        "type": "named"
      }
    },
    "PUT_mc_contacts": {
      "request": {
        "url": "/marketing/contacts",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /marketing/contacts",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTMcContactsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Add or Update a Contact",
      "result_type": {
        "name": "PUTMcContactsResultObject",
        "type": "named"
      }
    },
    "PUT_mc_contacts_imports": {
      "request": {
        "url": "/marketing/contacts/imports",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /marketing/contacts/imports",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTMcContactsImportsBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Import Contacts",
      "result_type": {
        "name": "PUTMcContactsImportsResultObject",
        "type": "named"
      }
    },
    "PUT_subusers_subuser_name_ips": {
      "request": {
        "url": "/subusers/{subuser_name}/ips",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The IP addresses you would like to assign to the subuser.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IPv4",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ],
                "format": "ipv4"
              }
            }
          }
        },
        "subuser_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update IPs assigned to a subuser",
      "result_type": {
        "name": "PUTSubusersSubuserNameIpsResultObject",
        "type": "named"
      }
    },
    "PUT_subusers_subuser_name_monitor": {
      "request": {
        "url": "/subusers/{subuser_name}/monitor",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /subusers/{subuser_name}/monitor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MonitorInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "subuser_name": {
          "description": "The name of the subuser for which to retrieve monitor settings.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "subuser_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Monitor Settings for a subuser",
      "result_type": {
        "name": "Monitor",
        "type": "named"
      }
    },
    "PUT_user_email": {
      "request": {
        "url": "/user/email",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /user/email",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTUserEmailBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update your account email address",
      "result_type": {
        "name": "PUTUserEmailResultObject",
        "type": "named"
      }
    },
    "PUT_user_password": {
      "request": {
        "url": "/user/password",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /user/password",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTUserPasswordBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update your password",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "PUT_user_username": {
      "request": {
        "url": "/user/username",
        "method": "put",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /user/username",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PUTUserUsernameBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update your username",
      "result_type": {
        "name": "PUTUserUsernameResultObject",
        "type": "named"
      }
    },
    "create_api_keys": {
      "request": {
        "url": "/api_keys",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api_keys",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateApiKeysBodyObjectInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "on-behalf-of": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "on-behalf-of",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create API keys",
      "result_type": {
        "name": "CreateApiKeysResultObject",
        "type": "named"
      }
    },
    "postDesigns": {
      "request": {
        "url": "/designs",
        "method": "post",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /designs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DesignInputInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create Design",
      "result_type": {
        "name": "DesignOutput",
        "type": "named"
      }
    }
  },
  "scalar_types": {
    "AbtestSummaryTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "subject",
          "content"
        ],
        "type": "enum"
      }
    },
    "AbtestSummaryWinnerCriteriaEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "click",
          "manual"
        ],
        "type": "enum"
      }
    },
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "CampaignRequestEditorEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code",
          "design"
        ],
        "type": "enum"
      }
    },
    "ContactExportStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pending",
          "ready",
          "failure"
        ],
        "type": "enum"
      }
    },
    "ContactdbCustomFieldTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "date",
          "text",
          "number"
        ],
        "type": "enum"
      }
    },
    "ContactdbSegmentsConditionsAndOrEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "and",
          "or",
          ""
        ],
        "type": "enum"
      }
    },
    "ContactdbSegmentsConditionsOperatorEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "eq",
          "ne",
          "lt",
          "gt",
          "contains"
        ],
        "type": "enum"
      }
    },
    "CustomFieldDefinitionsResponseFieldTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Text",
          "Number",
          "Date"
        ],
        "type": "enum"
      }
    },
    "CustomFieldsById": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "Date": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "date"
      }
    },
    "DesignDuplicateInputEditorEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code",
          "design"
        ],
        "type": "enum"
      }
    },
    "EmailActivityResponseCommonFieldsStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "processed",
          "delivered",
          "not delivered"
        ],
        "type": "enum"
      }
    },
    "Float64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "float64"
      }
    },
    "GETAlertsAlertIdResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "usage_alert",
          "stats_notification"
        ],
        "type": "enum"
      }
    },
    "GETAlertsResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "usage_limit",
          "stats_notification"
        ],
        "type": "enum"
      }
    },
    "GETBrowsersStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETCategoriesStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETCategoriesStatsSumsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETCategoriesStatsSumsSortByDirectionEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "GETClientsClientTypeStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETClientsClientTypeStatsClientTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "phone",
          "tablet",
          "webmail",
          "desktop"
        ],
        "type": "enum"
      }
    },
    "GETClientsStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETDevicesStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETGeoStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETGeoStatsCountryEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "US",
          "CA"
        ],
        "type": "enum"
      }
    },
    "GETIpsSortByDirectionEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "GETMailboxProvidersStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETSubusersStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETSubusersStatsMonthlySortByDirectionEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "GETSubusersStatsMonthlySortByMetricEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "blocks",
          "bounces",
          "clicks",
          "delivered",
          "opens",
          "requests",
          "unique_clicks",
          "unique_opens",
          "unsubscribes"
        ],
        "type": "enum"
      }
    },
    "GETSubusersStatsSumsSortByDirectionEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "GETSubusersSubuserNameStatsMonthlySortByDirectionEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "GETTemplatesGenerationsEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "legacy",
          "dynamic",
          "legacy,dynamic"
        ],
        "type": "enum"
      }
    },
    "GETUserAccountResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "free",
          "paid"
        ],
        "type": "enum"
      }
    },
    "GETUserWebhooksParseStatsAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "GETV3MessagesMsgIdResultAllOf1EventsBounceTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "soft",
          "hard"
        ],
        "type": "enum"
      }
    },
    "GETV3MessagesMsgIdResultAllOf1EventsEventNameEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "bounced",
          "opened",
          "clicked",
          "processed",
          "dropped",
          "delivered",
          "deferred",
          "spam_report",
          "unsubscribe",
          "group_unsubscribe",
          "group_resubscribe"
        ],
        "type": "enum"
      }
    },
    "GETV3MessagesMsgIdResultAllOf1OutboundIpTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "dedicated",
          "shared"
        ],
        "type": "enum"
      }
    },
    "GETV3TeammatesResultResultUserTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "admin",
          "owner",
          "teammate"
        ],
        "type": "enum"
      }
    },
    "GETV3TeammatesUsernameResultUserTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "admin",
          "owner",
          "teammate"
        ],
        "type": "enum"
      }
    },
    "GetAutomationStatAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "total"
        ],
        "type": "enum"
      }
    },
    "GetSinglesendLinkStatAbPhaseIdEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "test",
          "send"
        ],
        "type": "enum"
      }
    },
    "GetSinglesendStatAggregatedByEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "total"
        ],
        "type": "enum"
      }
    },
    "IPv4": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "Int64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int64"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "LinkBranding200ResponseDnsDomainCnameTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "cname",
          "txt",
          "mx"
        ],
        "type": "enum"
      }
    },
    "LinkBranding200ResponseDnsOwnerCnameTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "cname",
          "txt",
          "mx"
        ],
        "type": "enum"
      }
    },
    "PATCHAlertsAlertIdResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "usage_alert",
          "stats_notification"
        ],
        "type": "enum"
      }
    },
    "PATCHUserScheduledSendsBatchIdBodyStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "cancel",
          "pause"
        ],
        "type": "enum"
      }
    },
    "PATCHV3TeammatesUsernameResultUserTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "admin",
          "owner",
          "teammate"
        ],
        "type": "enum"
      }
    },
    "POSTAlertsBodyTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "stats_notification",
          "usage_limit"
        ],
        "type": "enum"
      }
    },
    "POSTCampaignsCampaignIdSchedulesResultStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Scheduled"
        ],
        "type": "enum"
      }
    },
    "POSTMailSendBodyAttachmentsDispositionEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "inline",
          "attachment"
        ],
        "type": "enum"
      }
    },
    "POSTMcContactsExportsBodyFileTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "csv",
          "json"
        ],
        "type": "enum"
      }
    },
    "POSTMcFieldDefinitionsBodyFieldTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Text",
          "Number",
          "Date"
        ],
        "type": "enum"
      }
    },
    "POSTTemplatesBodyGenerationEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "legacy",
          "dynamic"
        ],
        "type": "enum"
      }
    },
    "POSTUserScheduledSendsBodyStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pause",
          "cancel"
        ],
        "type": "enum"
      }
    },
    "POSTV3MessagesDownloadResultStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pending"
        ],
        "type": "enum"
      }
    },
    "POSTValidationsEmailResultResultVerdictEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Valid",
          "Risky",
          "Invalid"
        ],
        "type": "enum"
      }
    },
    "PUTMarketingSinglesendsIdScheduleBodySendAtEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "now"
        ],
        "type": "enum"
      }
    },
    "PUTMarketingSinglesendsIdScheduleResultStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "scheduled"
        ],
        "type": "enum"
      }
    },
    "PUTMcContactsImportsBodyFileTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "csv"
        ],
        "type": "enum"
      }
    },
    "ReservedFieldDefinitionsResponseFieldTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Text",
          "Number",
          "Date"
        ],
        "type": "enum"
      }
    },
    "SinglesendRequestEmailConfigEditorEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code",
          "design"
        ],
        "type": "enum"
      }
    },
    "SinglesendResponse1StatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "draft",
          "scheduled",
          "triggered"
        ],
        "type": "enum"
      }
    },
    "SinglesendResponseShortStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "draft",
          "scheduled",
          "triggered"
        ],
        "type": "enum"
      }
    },
    "SinglesendScheduleStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "draft",
          "scheduled",
          "triggered"
        ],
        "type": "enum"
      }
    },
    "SinglesendSearchStatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "draft",
          "scheduled",
          "triggered"
        ],
        "type": "enum"
      }
    },
    "SinglesendsLinkStatsResponseResultsAbPhaseEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "send",
          "test",
          "all"
        ],
        "type": "enum"
      }
    },
    "SinglesendsResponseResultsAbPhaseEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "send",
          "test",
          "all"
        ],
        "type": "enum"
      }
    },
    "SsoTeammatesPatchResponse1UserTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "admin",
          "owner",
          "teammate"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TimestampTZ": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "timestamptz"
      }
    },
    "TransactionalTemplateVersionCreateEditorEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code",
          "design"
        ],
        "type": "enum"
      }
    },
    "TransactionalTemplateVersionOutputEditorEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code",
          "design"
        ],
        "type": "enum"
      }
    },
    "TransactionalTemplatesTemplateLeanGenerationEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "legacy",
          "dynamic"
        ],
        "type": "enum"
      }
    },
    "TransactionalTemplatesVersionOutputLeanEditorEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "code",
          "design"
        ],
        "type": "enum"
      }
    },
    "URIString": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "UUID": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "uuid"
      }
    },
    "UserScheduledSendStatus1StatusEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "cancel",
          "pause"
        ],
        "type": "enum"
      }
    }
  }
}
