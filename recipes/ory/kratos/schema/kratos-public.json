{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "value": "http://localhost:4433/api/kratos/public",
          "env": "KRATOS_PUBLIC_SERVER_URL"
        }
      }
    ],
    "securitySchemes": {
      "sessionCookie": {
        "type": "cookie"
      },
      "sessionToken": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Session-Token",
        "value": {
          "env": "KRATOS_PUBLIC_SESSION_TOKEN"
        }
      }
    }
  },
  "functions": {
    "kratosGetSchema": {
      "request": {
        "url": "/schemas/{id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID must be set to the ID of schema you want to get",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a Traits Schema Definition",
      "result_type": {
        "name": "KratosJsonSchema",
        "type": "named"
      }
    },
    "kratosGetSelfServiceError": {
      "request": {
        "url": "/self-service/errors",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "error": {
          "description": "Error is the container's ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "error",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get User-Facing Self-Service Errors",
      "result_type": {
        "name": "KratosErrorContainer",
        "type": "named"
      }
    },
    "kratosGetSelfServiceLoginFlow": {
      "request": {
        "url": "/self-service/login/flows",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The Login Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/login?flow=abcde`).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Login Flow",
      "result_type": {
        "name": "KratosLoginFlow",
        "type": "named"
      }
    },
    "kratosGetSelfServiceRecoveryFlow": {
      "request": {
        "url": "/self-service/recovery/flows",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The Flow ID  The value for this parameter comes from `request` URL Query parameter sent to your application (e.g. `/recovery?flow=abcde`).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get information about a recovery flow",
      "result_type": {
        "name": "KratosRecoveryFlow",
        "type": "named"
      }
    },
    "kratosGetSelfServiceRegistrationFlow": {
      "request": {
        "url": "/self-service/registration/flows",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The Registration Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/registration?flow=abcde`).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Registration Flow",
      "result_type": {
        "name": "KratosRegistrationFlow",
        "type": "named"
      }
    },
    "kratosGetSelfServiceSettingsFlow": {
      "request": {
        "url": "/self-service/settings/flows",
        "method": "get",
        "security": [
          {
            "sessionToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID is the Settings Flow ID  The value for this parameter comes from `flow` URL Query parameter sent to your application (e.g. `/settings?flow=abcde`).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Settings Flow",
      "result_type": {
        "name": "KratosSettingsFlow",
        "type": "named"
      }
    },
    "kratosGetSelfServiceVerificationFlow": {
      "request": {
        "url": "/self-service/verification/flows",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The Flow ID  The value for this parameter comes from `request` URL Query parameter sent to your application (e.g. `/verification?flow=abcde`).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Verification Flow",
      "result_type": {
        "name": "KratosVerificationFlow",
        "type": "named"
      }
    },
    "kratosInitializeSelfServiceLoginViaAPIFlow": {
      "request": {
        "url": "/self-service/login/api",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "refresh": {
          "description": "Refresh a login session  If set to true, this will refresh an existing login session by asking the user to sign in again. This will reset the authenticated_at time of the session.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "refresh",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Initialize Login Flow for API clients",
      "result_type": {
        "name": "KratosLoginFlow",
        "type": "named"
      }
    },
    "kratosInitializeSelfServiceRecoveryViaAPIFlow": {
      "request": {
        "url": "/self-service/recovery/api",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Initialize Recovery Flow for API Clients",
      "result_type": {
        "name": "KratosRecoveryFlow",
        "type": "named"
      }
    },
    "kratosInitializeSelfServiceRegistrationViaAPIFlow": {
      "request": {
        "url": "/self-service/registration/api",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Initialize Registration Flow for API clients",
      "result_type": {
        "name": "KratosRegistrationFlow",
        "type": "named"
      }
    },
    "kratosInitializeSelfServiceSettingsViaAPIFlow": {
      "request": {
        "url": "/self-service/settings/api",
        "method": "get",
        "security": [
          {
            "sessionToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Initialize Settings Flow for API Clients",
      "result_type": {
        "name": "KratosSettingsFlow",
        "type": "named"
      }
    },
    "kratosInitializeSelfServiceVerificationViaAPIFlow": {
      "request": {
        "url": "/self-service/verification/api",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Initialize Verification Flow for API Clients",
      "result_type": {
        "name": "KratosVerificationFlow",
        "type": "named"
      }
    },
    "kratosWhoami": {
      "request": {
        "url": "/sessions/whoami",
        "method": "get",
        "security": [
          {
            "sessionToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Authorization": {
          "description": "in: authorization",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Authorization",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "Cookie": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check Who the Current HTTP Session Belongs To",
      "result_type": {
        "name": "KratosSession",
        "type": "named"
      }
    }
  },
  "object_types": {
    "KratosCompleteSelfServiceLoginFlowWithPasswordMethod": {
      "fields": {
        "csrf_token": {
          "description": "Sending the anti-csrf token is only required for browser login flows.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "identifier": {
          "description": "Identifier is the email or username of the user trying to log in.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "description": "The user's password.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosCompleteSelfServiceSettingsFlowWithPasswordMethod": {
      "fields": {
        "csrf_token": {
          "description": "CSRFToken is the anti-CSRF token  type: string",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "description": "Password is the updated password  type: string",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosErrorContainer": {
      "fields": {
        "errors": {
          "description": "Errors in the container",
          "type": {
            "element_type": {
              "name": "JSON",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        }
      }
    },
    "KratosIdentity": {
      "fields": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "recovery_addresses": {
          "description": "RecoveryAddresses contains all the addresses that can be used to recover an identity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "KratosRecoveryAddress",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "schema_id": {
          "description": "SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "schema_url": {
          "description": "SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.  format: url",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "traits": {
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "verifiable_addresses": {
          "description": "VerifiableAddresses contains all the addresses that can be verified by the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "KratosVerifiableAddress",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "KratosLoginFlow": {
      "description": "This object represents a login flow. A login flow is initiated at the \"Initiate Login API / Browser Flow\" endpoint by a client.  Once a login flow is completed successfully, a session cookie or session token will be issued.",
      "fields": {
        "active": {
          "description": "and so on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "forced": {
          "description": "Forced stores whether this login flow should enforce re-authentication.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the flow started.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The flow type can either be `api` or `browser`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ui": {
          "description": "Container represents a HTML Form. The container can work with both HTTP Form and JSON requests",
          "type": {
            "name": "KratosUiContainer",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "KratosLoginViaApiResponse": {
      "description": "The Response for Login Flows via API",
      "fields": {
        "session": {
          "type": {
            "name": "KratosSession",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "session_token": {
          "description": "The Session Token  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosRecoveryAddress": {
      "fields": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "value": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "via": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosRecoveryFlow": {
      "description": "This request is used when an identity wants to recover their account.  We recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)",
      "fields": {
        "active": {
          "description": "Active, if set, contains the registration method that is being used. It is initially not set.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting, a new request has to be initiated.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the request occurred.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "messages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "KratosUiText",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "methods": {
          "description": "Methods contains context for all account recovery methods. If a registration request has been processed, but for example the password is incorrect, this will contain error messages.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The flow type can either be `api` or `browser`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosRegistrationFlow": {
      "fields": {
        "active": {
          "description": "and so on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in, a new flow has to be initiated.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the flow occurred.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "messages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "KratosUiText",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "methods": {
          "description": "Methods contains context for all enabled registration methods. If a registration flow has been processed, but for example the password is incorrect, this will contain error messages.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The flow type can either be `api` or `browser`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosRegistrationViaApiResponse": {
      "description": "The Response for Registration Flows via API",
      "fields": {
        "identity": {
          "type": {
            "name": "KratosIdentity",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "session": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "KratosSession",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "session_token": {
          "description": "The Session Token  This field is only set when the session hook is configured as a post-registration hook.  A session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization Header:  Authorization: bearer ${session-token}  The session token is only issued for API flows, not for Browser flows!",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosRevokeSession": {
      "fields": {
        "session_token": {
          "description": "The Session Token  Invalidate this session token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosSession": {
      "fields": {
        "active": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "authenticated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "expires_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "identity": {
          "type": {
            "name": "KratosIdentity",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issued_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "KratosSettingsFlow": {
      "description": "This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)",
      "fields": {
        "active": {
          "description": "Active, if set, contains the registration method that is being used. It is initially not set.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting, a new flow has to be initiated.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "identity": {
          "type": {
            "name": "KratosIdentity",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the flow occurred.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "messages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "KratosUiText",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "methods": {
          "description": "Methods contains context for all enabled registration methods. If a settings flow has been processed, but for example the first name is empty, this will contain error messages.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The flow type can either be `api` or `browser`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosSettingsViaApiResponse": {
      "description": "The Response for Settings Flows via API",
      "fields": {
        "flow": {
          "description": "This flow is used when an identity wants to update settings (e.g. profile data, passwords, ...) in a selfservice manner.  We recommend reading the [User Settings Documentation](../self-service/flows/user-settings)",
          "type": {
            "name": "KratosSettingsFlow",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "identity": {
          "type": {
            "name": "KratosIdentity",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "KratosUiContainer": {
      "description": "Container represents a HTML Form. The container can work with both HTTP Form and JSON requests",
      "fields": {
        "action": {
          "description": "Action should be used as the form action URL ``.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "messages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "KratosUiText",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "method": {
          "description": "Method is the form method (e.g. POST)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "nodes": {
          "type": {
            "element_type": {
              "name": "KratosUiNode",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "KratosUiNode": {
      "description": "Nodes are represented as HTML elements or their native UI equivalents. For example, a node can be an `` tag, or an `` but also `some plain text`.",
      "fields": {
        "attributes": {
          "type": {
            "name": "KratosUiNodeAttributes",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "group": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "messages": {
          "type": {
            "element_type": {
              "name": "KratosUiText",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosUiNodeAttributes": {
      "description": "InputAttributes represents the attributes of an input node",
      "fields": {
        "disabled": {
          "description": "Sets the input's disabled field to true or false.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "href": {
          "description": "The link's href (destination) URL.  format: uri",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "KratosUiText",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The input's element name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pattern": {
          "description": "The input's pattern.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "required": {
          "description": "Mark this input field as required.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "src": {
          "description": "The image's source URL.  format: uri",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "KratosUiText",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "KratosUiText",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": []
          }
        }
      }
    },
    "KratosUiText": {
      "fields": {
        "context": {
          "description": "The message's context. Useful when customizing messages.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "text": {
          "description": "The message text. Written in american english.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosVerifiableAddress": {
      "fields": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "status": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "verified_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "via": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "KratosVerificationFlow": {
      "description": "Used to verify an out-of-band communication channel such as an email address or a phone number.  For more information head over to: https://www.ory.sh/docs/kratos/self-service/flows/verify-email-account-activation",
      "fields": {
        "active": {
          "description": "Active, if set, contains the registration method that is being used. It is initially not set.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address, a new request has to be initiated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid4"
          }
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the request occurred.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "messages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "KratosUiText",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        },
        "methods": {
          "description": "Methods contains context for all account verification methods. If a registration request has been processed, but for example the password is incorrect, this will contain error messages.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used to forward information contained in the URL's path or query for example.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The flow type can either be `api` or `browser`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    }
  },
  "procedures": {
    "kratosCompleteSelfServiceLoginFlowWithPasswordMethod": {
      "request": {
        "url": "/self-service/login/methods/password",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /self-service/login/methods/password",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "KratosCompleteSelfServiceLoginFlowWithPasswordMethod",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        },
        "flow": {
          "description": "The Flow ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "flow",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Complete Login Flow with Username/Email Password Method",
      "result_type": {
        "name": "KratosLoginViaApiResponse",
        "type": "named"
      }
    },
    "kratosCompleteSelfServiceRegistrationFlowWithPasswordMethod": {
      "request": {
        "url": "/self-service/registration/methods/password",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /self-service/registration/methods/password",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        },
        "flow": {
          "description": "Flow is flow ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "flow",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Complete Registration Flow with Username/Email Password Method",
      "result_type": {
        "name": "KratosRegistrationViaApiResponse",
        "type": "named"
      }
    },
    "kratosCompleteSelfServiceSettingsFlowWithPasswordMethod": {
      "request": {
        "url": "/self-service/settings/methods/password",
        "method": "post",
        "security": [
          {
            "sessionToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /self-service/settings/methods/password",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "KratosCompleteSelfServiceSettingsFlowWithPasswordMethod",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        },
        "flow": {
          "description": "Flow is flow ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "flow",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Complete Settings Flow with Username/Email Password Method",
      "result_type": {
        "name": "KratosSettingsViaApiResponse",
        "type": "named"
      }
    },
    "kratosCompleteSelfServiceSettingsFlowWithProfileMethod": {
      "request": {
        "url": "/self-service/settings/methods/profile",
        "method": "post",
        "security": [
          {
            "sessionToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /self-service/settings/methods/profile",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        },
        "flow": {
          "description": "Flow is flow ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "flow",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Complete Settings Flow with Profile Method",
      "result_type": {
        "name": "KratosSettingsFlow",
        "type": "named"
      }
    },
    "kratosRevokeSession": {
      "request": {
        "url": "/sessions",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /sessions",
          "type": {
            "name": "KratosRevokeSession",
            "type": "named"
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Revoke and Invalidate a Session",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    }
  },
  "scalar_types": {
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "Int64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int64"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "KratosJsonSchema": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TimestampTZ": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "timestamptz"
      }
    }
  }
}
