{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "env": "GITHUB_SERVER_URL"
        }
      }
    ],
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "header": "Authorization",
        "scheme": "bearer",
        "value": {
          "env": "GITHUB_TOKEN"
        }
      }
    },
    "security": [
      {
        "bearer": []
      }
    ],
    "version": "1.1.4"
  },
  "functions": {
    "actions_get_actions_cache_list": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/caches",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsGetActionsCacheListDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "key": {
          "description": "An explicit key or prefix for identifying the cache",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "key",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/`. To reference a pull request use `refs/pull//merge`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by. `created_at` means when the cache was created. `last_accessed_at` means when the cache was last accessed. `size_in_bytes` is the size of the cache in bytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsGetActionsCacheListSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List GitHub Actions caches for a repository",
      "result_type": {
        "name": "ActionsCacheList",
        "type": "named"
      }
    },
    "actions_get_actions_cache_usage": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/cache/usage",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions cache usage for a repository",
      "result_type": {
        "name": "ActionsCacheUsageByRepository",
        "type": "named"
      }
    },
    "actions_get_actions_cache_usage_by_repo_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/cache/usage-by-repository",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories with GitHub Actions cache usage for an organization",
      "result_type": {
        "name": "ActionsGetActionsCacheUsageByRepoForOrgResult",
        "type": "named"
      }
    },
    "actions_get_actions_cache_usage_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/cache/usage",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions cache usage for an enterprise",
      "result_type": {
        "name": "ActionsCacheUsageOrgEnterprise",
        "type": "named"
      }
    },
    "actions_get_actions_cache_usage_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/cache/usage",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions cache usage for an organization",
      "result_type": {
        "name": "ActionsCacheUsageOrgEnterprise",
        "type": "named"
      }
    },
    "actions_get_actions_cache_usage_policy": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/cache/usage-policy",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions cache usage policy for a repository",
      "result_type": {
        "name": "ActionsCacheUsagePolicyForRepository",
        "type": "named"
      }
    },
    "actions_get_actions_cache_usage_policy_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/cache/usage-policy",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions cache usage policy for an enterprise",
      "result_type": {
        "name": "ActionsCacheUsagePolicyEnterprise",
        "type": "named"
      }
    },
    "actions_get_allowed_actions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/selected-actions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get allowed actions for an organization",
      "result_type": {
        "name": "SelectedActions",
        "type": "named"
      }
    },
    "actions_get_allowed_actions_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions/selected-actions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get allowed actions for a repository",
      "result_type": {
        "name": "SelectedActions",
        "type": "named"
      }
    },
    "actions_get_artifact": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "artifact_id": {
          "description": "The unique identifier of the artifact.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "artifact_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an artifact",
      "result_type": {
        "name": "Artifact",
        "type": "named"
      }
    },
    "actions_get_custom_oidc_sub_claim_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/oidc/customization/sub",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the customization template for an OIDC subject claim for a repository",
      "result_type": {
        "name": "OidcCustomSubRepo",
        "type": "named"
      }
    },
    "actions_get_environment_public_key": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an environment public key",
      "result_type": {
        "name": "ActionsPublicKey",
        "type": "named"
      }
    },
    "actions_get_environment_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an environment secret",
      "result_type": {
        "name": "ActionsSecret",
        "type": "named"
      }
    },
    "actions_get_environment_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an environment variable",
      "result_type": {
        "name": "ActionsVariable",
        "type": "named"
      }
    },
    "actions_get_github_actions_default_workflow_permissions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/workflow",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get default workflow permissions for an enterprise",
      "result_type": {
        "name": "ActionsGetDefaultWorkflowPermissions",
        "type": "named"
      }
    },
    "actions_get_github_actions_default_workflow_permissions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/workflow",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get default workflow permissions for an organization",
      "result_type": {
        "name": "ActionsGetDefaultWorkflowPermissions",
        "type": "named"
      }
    },
    "actions_get_github_actions_default_workflow_permissions_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions/workflow",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get default workflow permissions for a repository",
      "result_type": {
        "name": "ActionsGetDefaultWorkflowPermissions",
        "type": "named"
      }
    },
    "actions_get_github_actions_permissions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions permissions for an organization",
      "result_type": {
        "name": "ActionsOrganizationPermissions",
        "type": "named"
      }
    },
    "actions_get_github_actions_permissions_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions permissions for a repository",
      "result_type": {
        "name": "ActionsRepositoryPermissions",
        "type": "named"
      }
    },
    "actions_get_job_for_workflow_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/jobs/{job_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "job_id": {
          "description": "The unique identifier of the job.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "job_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a job for a workflow run",
      "result_type": {
        "name": "Job",
        "type": "named"
      }
    },
    "actions_get_org_public_key": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/public-key",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization public key",
      "result_type": {
        "name": "ActionsPublicKey",
        "type": "named"
      }
    },
    "actions_get_org_secret": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/{secret_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization secret",
      "result_type": {
        "name": "OrganizationActionsSecret",
        "type": "named"
      }
    },
    "actions_get_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables/{name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization variable",
      "result_type": {
        "name": "OrganizationActionsVariable",
        "type": "named"
      }
    },
    "actions_get_pending_deployments_for_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get pending deployments for a workflow run",
      "result_type": {
        "element_type": {
          "name": "PendingDeployment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "actions_get_repo_public_key": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/secrets/public-key",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository public key",
      "result_type": {
        "name": "ActionsPublicKey",
        "type": "named"
      }
    },
    "actions_get_repo_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository secret",
      "result_type": {
        "name": "ActionsSecret",
        "type": "named"
      }
    },
    "actions_get_repo_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/variables/{name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository variable",
      "result_type": {
        "name": "ActionsVariable",
        "type": "named"
      }
    },
    "actions_get_reviews_for_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get the review history for a workflow run",
      "result_type": {
        "element_type": {
          "name": "EnvironmentApprovals",
          "type": "named"
        },
        "type": "array"
      }
    },
    "actions_get_self_hosted_runner_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/{runner_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a self-hosted runner for an organization",
      "result_type": {
        "name": "Runner",
        "type": "named"
      }
    },
    "actions_get_self_hosted_runner_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/{runner_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a self-hosted runner for a repository",
      "result_type": {
        "name": "Runner",
        "type": "named"
      }
    },
    "actions_get_self_hosted_runner_group_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a self-hosted runner group for an organization",
      "result_type": {
        "name": "RunnerGroupsOrg",
        "type": "named"
      }
    },
    "actions_get_workflow": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "workflow_id": {
          "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "name": "workflow_id",
            "in": "path",
            "schema": {}
          }
        }
      },
      "description": "Get a workflow",
      "result_type": {
        "name": "Workflow",
        "type": "named"
      }
    },
    "actions_get_workflow_access_to_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions/access",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the level of access for workflows outside of the repository",
      "result_type": {
        "name": "ActionsWorkflowAccessToRepository",
        "type": "named"
      }
    },
    "actions_get_workflow_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "exclude_pull_requests": {
          "description": "If `true` pull requests are omitted from the response (empty array).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "exclude_pull_requests",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a workflow run",
      "result_type": {
        "name": "WorkflowRun",
        "type": "named"
      }
    },
    "actions_get_workflow_run_attempt": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "attempt_number": {
          "description": "The attempt number of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "attempt_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "exclude_pull_requests": {
          "description": "If `true` pull requests are omitted from the response (empty array).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "exclude_pull_requests",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a workflow run attempt",
      "result_type": {
        "name": "WorkflowRun",
        "type": "named"
      }
    },
    "actions_list_artifacts_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/artifacts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name field of an artifact. When specified, only artifacts with this name will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List artifacts for a repository",
      "result_type": {
        "name": "ActionsListArtifactsForRepoResult",
        "type": "named"
      }
    },
    "actions_list_environment_secrets": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/secrets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List environment secrets",
      "result_type": {
        "name": "ActionsListEnvironmentSecretsResult",
        "type": "named"
      }
    },
    "actions_list_environment_variables": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/variables",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List environment variables",
      "result_type": {
        "name": "ActionsListEnvironmentVariablesResult",
        "type": "named"
      }
    },
    "actions_list_jobs_for_workflow_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "filter": {
          "description": "Filters jobs by their `completed_at` timestamp. `latest` returns jobs from the most recent execution of the workflow run. `all` returns all jobs for a workflow run, including from old executions of the workflow run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsListJobsForWorkflowRunFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List jobs for a workflow run",
      "result_type": {
        "name": "ActionsListJobsForWorkflowRunResult",
        "type": "named"
      }
    },
    "actions_list_jobs_for_workflow_run_attempt": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "attempt_number": {
          "description": "The attempt number of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "attempt_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List jobs for a workflow run attempt",
      "result_type": {
        "name": "ActionsListJobsForWorkflowRunAttemptResult",
        "type": "named"
      }
    },
    "actions_list_labels_for_self_hosted_runner_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/{runner_id}/labels",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List labels for a self-hosted runner for an organization",
      "result_type": {
        "name": "ActionsListLabelsForSelfHostedRunnerForOrgResult",
        "type": "named"
      }
    },
    "actions_list_labels_for_self_hosted_runner_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List labels for a self-hosted runner for a repository",
      "result_type": {
        "name": "ActionsListLabelsForSelfHostedRunnerForRepoResult",
        "type": "named"
      }
    },
    "actions_list_org_secrets": {
      "request": {
        "url": "/orgs/{org}/actions/secrets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organization secrets",
      "result_type": {
        "name": "ActionsListOrgSecretsResult",
        "type": "named"
      }
    },
    "actions_list_org_variables": {
      "request": {
        "url": "/orgs/{org}/actions/variables",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organization variables",
      "result_type": {
        "name": "ActionsListOrgVariablesResult",
        "type": "named"
      }
    },
    "actions_list_repo_access_to_self_hosted_runner_group_in_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repository access to a self-hosted runner group in an organization",
      "result_type": {
        "name": "ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResult",
        "type": "named"
      }
    },
    "actions_list_repo_organization_secrets": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/organization-secrets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository organization secrets",
      "result_type": {
        "name": "ActionsListRepoOrganizationSecretsResult",
        "type": "named"
      }
    },
    "actions_list_repo_organization_variables": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/organization-variables",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository organization variables",
      "result_type": {
        "name": "ActionsListRepoOrganizationVariablesResult",
        "type": "named"
      }
    },
    "actions_list_repo_secrets": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/secrets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository secrets",
      "result_type": {
        "name": "ActionsListRepoSecretsResult",
        "type": "named"
      }
    },
    "actions_list_repo_variables": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/variables",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 30). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository variables",
      "result_type": {
        "name": "ActionsListRepoVariablesResult",
        "type": "named"
      }
    },
    "actions_list_repo_workflows": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/workflows",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository workflows",
      "result_type": {
        "name": "ActionsListRepoWorkflowsResult",
        "type": "named"
      }
    },
    "actions_list_runner_applications_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/downloads",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List runner applications for an organization",
      "result_type": {
        "element_type": {
          "name": "RunnerApplication",
          "type": "named"
        },
        "type": "array"
      }
    },
    "actions_list_runner_applications_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/downloads",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List runner applications for a repository",
      "result_type": {
        "element_type": {
          "name": "RunnerApplication",
          "type": "named"
        },
        "type": "array"
      }
    },
    "actions_list_selected_repos_for_org_secret": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/{secret_name}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List selected repositories for an organization secret",
      "result_type": {
        "name": "ActionsListSelectedReposForOrgSecretResult",
        "type": "named"
      }
    },
    "actions_list_selected_repos_for_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables/{name}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List selected repositories for an organization variable",
      "result_type": {
        "name": "ActionsListSelectedReposForOrgVariableResult",
        "type": "named"
      }
    },
    "actions_list_selected_repositories_enabled_github_actions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List selected repositories enabled for GitHub Actions in an organization",
      "result_type": {
        "name": "ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResult",
        "type": "named"
      }
    },
    "actions_list_self_hosted_runner_groups_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "visible_to_repository": {
          "description": "Only return runner groups that are allowed to be used by this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "visible_to_repository",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List self-hosted runner groups for an organization",
      "result_type": {
        "name": "ActionsListSelfHostedRunnerGroupsForOrgResult",
        "type": "named"
      }
    },
    "actions_list_self_hosted_runners_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of a self-hosted runner.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List self-hosted runners for an organization",
      "result_type": {
        "name": "ActionsListSelfHostedRunnersForOrgResult",
        "type": "named"
      }
    },
    "actions_list_self_hosted_runners_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of a self-hosted runner.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List self-hosted runners for a repository",
      "result_type": {
        "name": "ActionsListSelfHostedRunnersForRepoResult",
        "type": "named"
      }
    },
    "actions_list_self_hosted_runners_in_group_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List self-hosted runners in a group for an organization",
      "result_type": {
        "name": "ActionsListSelfHostedRunnersInGroupForOrgResult",
        "type": "named"
      }
    },
    "actions_list_workflow_run_artifacts": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name field of an artifact. When specified, only artifacts with this name will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List workflow run artifacts",
      "result_type": {
        "name": "ActionsListWorkflowRunArtifactsResult",
        "type": "named"
      }
    },
    "actions_list_workflow_runs": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "actor": {
          "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "actor",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "branch": {
          "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "branch",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "check_suite_id": {
          "description": "Returns workflow runs with the `check_suite_id` that you specify.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "check_suite_id",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "created": {
          "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.15/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "created",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "event": {
          "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/enterprise-server@3.15/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "event",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "exclude_pull_requests": {
          "description": "If `true` pull requests are omitted from the response (empty array).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "exclude_pull_requests",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "head_sha": {
          "description": "Only returns workflow runs that are associated with the specified `head_sha`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "head_sha",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status": {
          "description": "Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsListWorkflowRunsStatus",
              "type": "named"
            }
          },
          "http": {
            "name": "status",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "workflow_id": {
          "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "name": "workflow_id",
            "in": "path",
            "schema": {}
          }
        }
      },
      "description": "List workflow runs for a workflow",
      "result_type": {
        "name": "ActionsListWorkflowRunsResult",
        "type": "named"
      }
    },
    "actions_list_workflow_runs_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "actor": {
          "description": "Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "actor",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "branch": {
          "description": "Returns workflow runs associated with a branch. Use the name of the branch of the `push`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "branch",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "check_suite_id": {
          "description": "Returns workflow runs with the `check_suite_id` that you specify.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "check_suite_id",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "created": {
          "description": "Returns workflow runs created within the given date-time range. For more information on the syntax, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.15/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "created",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "event": {
          "description": "Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see \"[Events that trigger workflows](https://docs.github.com/enterprise-server@3.15/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "event",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "exclude_pull_requests": {
          "description": "If `true` pull requests are omitted from the response (empty array).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "exclude_pull_requests",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "head_sha": {
          "description": "Only returns workflow runs that are associated with the specified `head_sha`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "head_sha",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status": {
          "description": "Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub Actions can set a status of `waiting`, `pending`, or `requested`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsListWorkflowRunsForRepoStatus",
              "type": "named"
            }
          },
          "http": {
            "name": "status",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List workflow runs for a repository",
      "result_type": {
        "name": "ActionsListWorkflowRunsForRepoResult",
        "type": "named"
      }
    },
    "activity_check_repo_is_starred_by_authenticated_user": {
      "request": {
        "url": "/user/starred/{owner}/{repo}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a repository is starred by the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activity_get_feeds": {
      "request": {
        "url": "/feeds",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get feeds",
      "result_type": {
        "name": "Feed",
        "type": "named"
      }
    },
    "activity_get_repo_subscription": {
      "request": {
        "url": "/repos/{owner}/{repo}/subscription",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository subscription",
      "result_type": {
        "name": "RepositorySubscription",
        "type": "named"
      }
    },
    "activity_get_thread": {
      "request": {
        "url": "/notifications/threads/{thread_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.15/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a thread",
      "result_type": {
        "name": "Thread",
        "type": "named"
      }
    },
    "activity_get_thread_subscription_for_authenticated_user": {
      "request": {
        "url": "/notifications/threads/{thread_id}/subscription",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.15/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a thread subscription for the authenticated user",
      "result_type": {
        "name": "ThreadSubscription",
        "type": "named"
      }
    },
    "activity_list_events_for_authenticated_user": {
      "request": {
        "url": "/users/{username}/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List events for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_notifications_for_authenticated_user": {
      "request": {
        "url": "/notifications",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "all": {
          "description": "If `true`, show notifications marked as read.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "all",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "before": {
          "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "participating": {
          "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "participating",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 50). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List notifications for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Thread",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_org_events_for_authenticated_user": {
      "request": {
        "url": "/users/{username}/events/orgs/{org}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization events for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_public_events": {
      "request": {
        "url": "/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List public events",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_public_events_for_repo_network": {
      "request": {
        "url": "/networks/{owner}/{repo}/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List public events for a network of repositories",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_public_events_for_user": {
      "request": {
        "url": "/users/{username}/events/public",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List public events for a user",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_public_org_events": {
      "request": {
        "url": "/orgs/{org}/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List public organization events",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_received_events_for_user": {
      "request": {
        "url": "/users/{username}/received_events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List events received by the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_received_public_events_for_user": {
      "request": {
        "url": "/users/{username}/received_events/public",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List public events received by a user",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_repo_events": {
      "request": {
        "url": "/repos/{owner}/{repo}/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository events",
      "result_type": {
        "element_type": {
          "name": "Event",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_repo_notifications_for_authenticated_user": {
      "request": {
        "url": "/repos/{owner}/{repo}/notifications",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "all": {
          "description": "If `true`, show notifications marked as read.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "all",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "before": {
          "description": "Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "participating": {
          "description": "If `true`, only shows notifications in which the user is directly participating or mentioned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "participating",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List repository notifications for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Thread",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_repos_starred_by_authenticated_user": {
      "request": {
        "url": "/user/starred",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivityListReposStarredByAuthenticatedUserDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivityListReposStarredByAuthenticatedUserSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repositories starred by the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Repository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_repos_starred_by_user": {
      "request": {
        "url": "/users/{username}/starred",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivityListReposStarredByUserDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by. `created` means when the repository was starred. `updated` means when the repository was last pushed to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivityListReposStarredByUserSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repositories starred by a user",
      "result_type": {
        "element_type": {
          "name": "ActivityListReposStarredByUserResult",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_repos_watched_by_user": {
      "request": {
        "url": "/users/{username}/subscriptions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repositories watched by a user",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_stargazers_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/stargazers",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List stargazers",
      "result_type": {
        "element_type": {
          "name": "ActivityListStargazersForRepoResult",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_watched_repos_for_authenticated_user": {
      "request": {
        "url": "/user/subscriptions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories watched by the authenticated user",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "activity_list_watchers_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/subscribers",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List watchers",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "announcement_banners_get_announcement_banner_for_org": {
      "request": {
        "url": "/orgs/{org}/announcement",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get announcement banner for organization",
      "result_type": {
        "name": "AnnouncementBanner",
        "type": "named"
      }
    },
    "apps_get_authenticated": {
      "request": {
        "url": "/app",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the authenticated app",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Integration",
          "type": "named"
        }
      }
    },
    "apps_get_by_slug": {
      "request": {
        "url": "/apps/{app_slug}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "app_slug": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "app_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an app",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Integration",
          "type": "named"
        }
      }
    },
    "apps_get_installation": {
      "request": {
        "url": "/app/installations/{installation_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get an installation for the authenticated app",
      "result_type": {
        "name": "Installation",
        "type": "named"
      }
    },
    "apps_get_org_installation": {
      "request": {
        "url": "/orgs/{org}/installation",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization installation for the authenticated app",
      "result_type": {
        "name": "Installation",
        "type": "named"
      }
    },
    "apps_get_repo_installation": {
      "request": {
        "url": "/repos/{owner}/{repo}/installation",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository installation for the authenticated app",
      "result_type": {
        "name": "Installation",
        "type": "named"
      }
    },
    "apps_get_user_installation": {
      "request": {
        "url": "/users/{username}/installation",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a user installation for the authenticated app",
      "result_type": {
        "name": "Installation",
        "type": "named"
      }
    },
    "apps_get_webhook_config_for_app": {
      "request": {
        "url": "/app/hook/config",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get a webhook configuration for an app",
      "result_type": {
        "name": "WebhookConfig",
        "type": "named"
      }
    },
    "apps_get_webhook_delivery": {
      "request": {
        "url": "/app/hook/deliveries/{delivery_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delivery_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "delivery_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a delivery for an app webhook",
      "result_type": {
        "name": "HookDelivery",
        "type": "named"
      }
    },
    "apps_list_installation_repos_for_authenticated_user": {
      "request": {
        "url": "/user/installations/{installation_id}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories accessible to the user access token",
      "result_type": {
        "name": "AppsListInstallationReposForAuthenticatedUserResult",
        "type": "named"
      }
    },
    "apps_list_installation_requests_for_authenticated_app": {
      "request": {
        "url": "/app/installation-requests",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List installation requests for the authenticated app",
      "result_type": {
        "element_type": {
          "name": "IntegrationInstallationRequest",
          "type": "named"
        },
        "type": "array"
      }
    },
    "apps_list_installations": {
      "request": {
        "url": "/app/installations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "outdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "outdated",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List installations for the authenticated app",
      "result_type": {
        "element_type": {
          "name": "Installation",
          "type": "named"
        },
        "type": "array"
      }
    },
    "apps_list_installations_for_authenticated_user": {
      "request": {
        "url": "/user/installations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List app installations accessible to the user access token",
      "result_type": {
        "name": "AppsListInstallationsForAuthenticatedUserResult",
        "type": "named"
      }
    },
    "apps_list_repos_accessible_to_installation": {
      "request": {
        "url": "/installation/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories accessible to the app installation",
      "result_type": {
        "name": "AppsListReposAccessibleToInstallationResult",
        "type": "named"
      }
    },
    "apps_list_webhook_deliveries": {
      "request": {
        "url": "/app/hook/deliveries",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cursor": {
          "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List deliveries for an app webhook",
      "result_type": {
        "element_type": {
          "name": "HookDeliveryItem",
          "type": "named"
        },
        "type": "array"
      }
    },
    "billing_get_github_advanced_security_billing_ghe": {
      "request": {
        "url": "/enterprises/{enterprise}/settings/billing/advanced-security",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Advanced Security active committers for an enterprise",
      "result_type": {
        "name": "AdvancedSecurityActiveCommitters",
        "type": "named"
      }
    },
    "billing_get_github_advanced_security_billing_org": {
      "request": {
        "url": "/orgs/{org}/settings/billing/advanced-security",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Advanced Security active committers for an organization",
      "result_type": {
        "name": "AdvancedSecurityActiveCommitters",
        "type": "named"
      }
    },
    "checks_get": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-runs/{check_run_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "check_run_id": {
          "description": "The unique identifier of the check run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "check_run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a check run",
      "result_type": {
        "name": "CheckRun",
        "type": "named"
      }
    },
    "checks_get_suite": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "check_suite_id": {
          "description": "The unique identifier of the check suite.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "check_suite_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a check suite",
      "result_type": {
        "name": "CheckSuite",
        "type": "named"
      }
    },
    "checks_list_annotations": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "check_run_id": {
          "description": "The unique identifier of the check run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "check_run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List check run annotations",
      "result_type": {
        "element_type": {
          "name": "CheckAnnotation",
          "type": "named"
        },
        "type": "array"
      }
    },
    "checks_list_for_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{ref}/check-runs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "app_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "app_id",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "check_name": {
          "description": "Returns check runs with the specified `name`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "check_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChecksListForRefFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status": {
          "description": "Returns check runs with the specified `status`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChecksListForRefStatus",
              "type": "named"
            }
          },
          "http": {
            "name": "status",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List check runs for a Git reference",
      "result_type": {
        "name": "ChecksListForRefResult",
        "type": "named"
      }
    },
    "checks_list_for_suite": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "check_name": {
          "description": "Returns check runs with the specified `name`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "check_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "check_suite_id": {
          "description": "The unique identifier of the check suite.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "check_suite_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "filter": {
          "description": "Filters check runs by their `completed_at` timestamp. `latest` returns the most recent check runs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChecksListForSuiteFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status": {
          "description": "Returns check runs with the specified `status`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChecksListForSuiteStatus",
              "type": "named"
            }
          },
          "http": {
            "name": "status",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List check runs in a check suite",
      "result_type": {
        "name": "ChecksListForSuiteResult",
        "type": "named"
      }
    },
    "checks_list_suites_for_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{ref}/check-suites",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "app_id": {
          "description": "Filters check suites by GitHub App `id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "app_id",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "check_name": {
          "description": "Returns check runs with the specified `name`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "check_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List check suites for a Git reference",
      "result_type": {
        "name": "ChecksListSuitesForRefResult",
        "type": "named"
      }
    },
    "code_scanning_get_alert": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a code scanning alert",
      "result_type": {
        "name": "CodeScanningAlert",
        "type": "named"
      }
    },
    "code_scanning_get_analysis": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "analysis_id": {
          "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "analysis_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a code scanning analysis for a repository",
      "result_type": {
        "name": "CodeScanningAnalysis",
        "type": "named"
      }
    },
    "code_scanning_get_default_setup": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/default-setup",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a code scanning default setup configuration",
      "result_type": {
        "name": "CodeScanningDefaultSetup",
        "type": "named"
      }
    },
    "code_scanning_get_sarif": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sarif_id": {
          "description": "The SARIF ID obtained after uploading.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sarif_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get information about a SARIF upload",
      "result_type": {
        "name": "CodeScanningSarifsStatus",
        "type": "named"
      }
    },
    "code_scanning_list_alert_instances": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/` or simply ``. To reference a pull request use `refs/pull//merge`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List instances of a code scanning alert",
      "result_type": {
        "element_type": {
          "name": "CodeScanningAlertInstance",
          "type": "named"
        },
        "type": "array"
      }
    },
    "code_scanning_list_alerts_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/code-scanning/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListAlertsForEnterpriseDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListAlertsForEnterpriseSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "If specified, only code scanning alerts with this state will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertStateQuery",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_guid": {
          "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_guid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_name": {
          "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List code scanning alerts for an enterprise",
      "result_type": {
        "element_type": {
          "name": "CodeScanningOrganizationAlertItems",
          "type": "named"
        },
        "type": "array"
      }
    },
    "code_scanning_list_alerts_for_org": {
      "request": {
        "url": "/orgs/{org}/code-scanning/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListAlertsForOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "severity": {
          "description": "If specified, only code scanning alerts with this severity will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertSeverity",
              "type": "named"
            }
          },
          "http": {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListAlertsForOrgSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "If specified, only code scanning alerts with this state will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertStateQuery",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_guid": {
          "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_guid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_name": {
          "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List code scanning alerts for an organization",
      "result_type": {
        "element_type": {
          "name": "CodeScanningOrganizationAlertItems",
          "type": "named"
        },
        "type": "array"
      }
    },
    "code_scanning_list_alerts_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListAlertsForRepoDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/` or simply ``. To reference a pull request use `refs/pull//merge`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "severity": {
          "description": "If specified, only code scanning alerts with this severity will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertSeverity",
              "type": "named"
            }
          },
          "http": {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListAlertsForRepoSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "If specified, only code scanning alerts with this state will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertStateQuery",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_guid": {
          "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_guid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_name": {
          "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List code scanning alerts for a repository",
      "result_type": {
        "element_type": {
          "name": "CodeScanningAlertItems",
          "type": "named"
        },
        "type": "array"
      }
    },
    "code_scanning_list_recent_analyses": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/analyses",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListRecentAnalysesDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/` or simply ``. To reference a pull request use `refs/pull//merge`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sarif_id": {
          "description": "Filter analyses belonging to the same SARIF upload.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sarif_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningListRecentAnalysesSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_guid": {
          "description": "The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_guid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tool_name": {
          "description": "The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "tool_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List code scanning analyses for a repository",
      "result_type": {
        "element_type": {
          "name": "CodeScanningAnalysis",
          "type": "named"
        },
        "type": "array"
      }
    },
    "code_security_get_configuration": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/{configuration_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "configuration_id": {
          "description": "The unique identifier of the code security configuration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "configuration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a code security configuration",
      "result_type": {
        "name": "CodeSecurityConfiguration",
        "type": "named"
      }
    },
    "code_security_get_configuration_for_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-security-configuration",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the code security configuration associated with a repository",
      "result_type": {
        "name": "CodeSecurityConfigurationForRepository",
        "type": "named"
      }
    },
    "code_security_get_configurations_for_org": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "target_type": {
          "description": "The target type of the code security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityGetConfigurationsForOrgTargetType",
              "type": "named"
            }
          },
          "http": {
            "name": "target_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get code security configurations for an organization",
      "result_type": {
        "element_type": {
          "name": "CodeSecurityConfiguration",
          "type": "named"
        },
        "type": "array"
      }
    },
    "code_security_get_default_configurations": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/defaults",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get default code security configurations",
      "result_type": {
        "element_type": {
          "name": "CodeSecurityDefaultConfigurations",
          "type": "named"
        },
        "type": "array"
      }
    },
    "code_security_get_repositories_for_configuration": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/{configuration_id}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "configuration_id": {
          "description": "The unique identifier of the code security configuration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "configuration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "status": {
          "description": "A comma-separated list of statuses. If specified, only repositories with these attachment statuses will be returned.  Can be: `all`, `attached`, `attaching`, `detached`, `removed`, `enforced`, `failed`, `updating`, `removed_by_enterprise`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "status",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get repositories associated with a code security configuration",
      "result_type": {
        "element_type": {
          "name": "CodeSecurityConfigurationRepositories",
          "type": "named"
        },
        "type": "array"
      }
    },
    "codes_of_conduct_get_all_codes_of_conduct": {
      "request": {
        "url": "/codes_of_conduct",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get all codes of conduct",
      "result_type": {
        "element_type": {
          "name": "CodeOfConduct",
          "type": "named"
        },
        "type": "array"
      }
    },
    "codes_of_conduct_get_conduct_code": {
      "request": {
        "url": "/codes_of_conduct/{key}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "key",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a code of conduct",
      "result_type": {
        "name": "CodeOfConduct",
        "type": "named"
      }
    },
    "dependabot_get_alert": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in `number` fields in the response from the `GET /repos/{owner}/{repo}/dependabot/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a Dependabot alert",
      "result_type": {
        "name": "DependabotAlert",
        "type": "named"
      }
    },
    "dependabot_get_org_public_key": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/public-key",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization public key",
      "result_type": {
        "name": "DependabotPublicKey",
        "type": "named"
      }
    },
    "dependabot_get_org_secret": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/{secret_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization secret",
      "result_type": {
        "name": "OrganizationDependabotSecret",
        "type": "named"
      }
    },
    "dependabot_get_repo_public_key": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/secrets/public-key",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository public key",
      "result_type": {
        "name": "DependabotPublicKey",
        "type": "named"
      }
    },
    "dependabot_get_repo_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository secret",
      "result_type": {
        "name": "DependabotSecret",
        "type": "named"
      }
    },
    "dependabot_list_alerts_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/dependabot/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForEnterpriseDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ecosystem": {
          "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ecosystem",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "first": {
          "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "first",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "last": {
          "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "last",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "package": {
          "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "package",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "scope": {
          "description": "The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForEnterpriseScope",
              "type": "named"
            }
          },
          "http": {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "severity": {
          "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: `low`, `medium`, `high`, `critical`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results. `created` means when the alert was created. `updated` means when the alert's state last changed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForEnterpriseSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List Dependabot alerts for an enterprise",
      "result_type": {
        "element_type": {
          "name": "DependabotAlertWithRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "dependabot_list_alerts_for_org": {
      "request": {
        "url": "/orgs/{org}/dependabot/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ecosystem": {
          "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ecosystem",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "first": {
          "description": "**Deprecated**. The number of results per page (max 100), starting from the first matching result. This parameter must not be used in combination with `last`. Instead, use `per_page` in combination with `after` to fetch the first page of results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "first",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "last": {
          "description": "**Deprecated**. The number of results per page (max 100), starting from the last matching result. This parameter must not be used in combination with `first`. Instead, use `per_page` in combination with `before` to fetch the last page of results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "last",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package": {
          "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "package",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "scope": {
          "description": "The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForOrgScope",
              "type": "named"
            }
          },
          "http": {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "severity": {
          "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: `low`, `medium`, `high`, `critical`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results. `created` means when the alert was created. `updated` means when the alert's state last changed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForOrgSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List Dependabot alerts for an organization",
      "result_type": {
        "element_type": {
          "name": "DependabotAlertWithRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "dependabot_list_alerts_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForRepoDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ecosystem": {
          "description": "A comma-separated list of ecosystems. If specified, only alerts for these ecosystems will be returned.  Can be: `composer`, `go`, `maven`, `npm`, `nuget`, `pip`, `pub`, `rubygems`, `rust`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ecosystem",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "manifest": {
          "description": "A comma-separated list of full manifest paths. If specified, only alerts for these manifests will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "manifest",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package": {
          "description": "A comma-separated list of package names. If specified, only alerts for these packages will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "package",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scope": {
          "description": "The scope of the vulnerable dependency. If specified, only alerts with this scope will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForRepoScope",
              "type": "named"
            }
          },
          "http": {
            "name": "scope",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "severity": {
          "description": "A comma-separated list of severities. If specified, only alerts with these severities will be returned.  Can be: `low`, `medium`, `high`, `critical`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results. `created` means when the alert was created. `updated` means when the alert's state last changed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotListAlertsForRepoSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "A comma-separated list of states. If specified, only alerts with these states will be returned.  Can be: `auto_dismissed`, `dismissed`, `fixed`, `open`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List Dependabot alerts for a repository",
      "result_type": {
        "element_type": {
          "name": "DependabotAlert",
          "type": "named"
        },
        "type": "array"
      }
    },
    "dependabot_list_org_secrets": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organization secrets",
      "result_type": {
        "name": "DependabotListOrgSecretsResult",
        "type": "named"
      }
    },
    "dependabot_list_repo_secrets": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/secrets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository secrets",
      "result_type": {
        "name": "DependabotListRepoSecretsResult",
        "type": "named"
      }
    },
    "dependabot_list_selected_repos_for_org_secret": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List selected repositories for an organization secret",
      "result_type": {
        "name": "DependabotListSelectedReposForOrgSecretResult",
        "type": "named"
      }
    },
    "dependency_graph_diff_range": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependency-graph/compare/{basehead}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "basehead": {
          "description": "The base and head Git revisions to compare. The Git revisions will be resolved to commit SHAs. Named revisions will be resolved to their corresponding HEAD commits, and an appropriate merge base will be determined. This parameter expects the format `{base}...{head}`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "basehead",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The full path, relative to the repository root, of the dependency manifest file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a diff of the dependencies between commits",
      "result_type": {
        "element_type": {
          "name": "DependencyGraphDiff",
          "type": "named"
        },
        "type": "array"
      }
    },
    "dependency_graph_export_sbom": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependency-graph/sbom",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Export a software bill of materials (SBOM) for a repository.",
      "result_type": {
        "name": "DependencyGraphSpdxSbom",
        "type": "named"
      }
    },
    "emojis_get": {
      "request": {
        "url": "/emojis",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get emojis",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "enterprise_admin_get_all_stats": {
      "request": {
        "url": "/enterprise/stats/all",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get all statistics",
      "result_type": {
        "name": "EnterpriseOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_allowed_actions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/selected-actions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get allowed actions for an enterprise",
      "result_type": {
        "name": "SelectedActions",
        "type": "named"
      }
    },
    "enterprise_admin_get_announcement": {
      "request": {
        "url": "/enterprise/announcement",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the global announcement banner",
      "result_type": {
        "name": "Announcement",
        "type": "named"
      }
    },
    "enterprise_admin_get_audit_log": {
      "request": {
        "url": "/enterprises/{enterprise}/audit-log",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include": {
          "description": "The event types to include:  - `web` - returns web (non-Git) events. - `git` - returns Git events. - `all` - returns both web and Git events.  The default is `web`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminGetAuditLogInclude",
              "type": "named"
            }
          },
          "http": {
            "name": "include",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "order": {
          "description": "The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.  The default is `desc`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminGetAuditLogOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "phrase": {
          "description": "A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.15/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/searching-the-audit-log-for-your-enterprise#searching-the-audit-log).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "phrase",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the audit log for an enterprise",
      "result_type": {
        "element_type": {
          "name": "AuditLogEvent",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_get_checks_system_requirements": {
      "request": {
        "url": "/manage/v1/checks/system-requirements",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the system requirement check results for configured cluster nodes",
      "result_type": {
        "name": "GhesChecksSystemRequirements",
        "type": "named"
      }
    },
    "enterprise_admin_get_cluster_status": {
      "request": {
        "url": "/manage/v1/cluster/status",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the status of services running on all cluster nodes",
      "result_type": {
        "name": "GhesClusterStatus",
        "type": "named"
      }
    },
    "enterprise_admin_get_comment_stats": {
      "request": {
        "url": "/enterprise/stats/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get comment statistics",
      "result_type": {
        "name": "EnterpriseCommentOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_config_nodes": {
      "request": {
        "url": "/manage/v1/config/nodes",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cluster_roles": {
          "description": "The cluster roles from the cluster configuration file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cluster_roles",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "uuid": {
          "description": "The UUID which identifies a node.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "uuid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GHES node metadata for all nodes",
      "result_type": {
        "name": "GhesConfigNodes",
        "type": "named"
      }
    },
    "enterprise_admin_get_download_status_for_pre_receive_environment": {
      "request": {
        "url": "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pre_receive_environment_id": {
          "description": "The unique identifier of the pre-receive environment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_environment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get the download status for a pre-receive environment",
      "result_type": {
        "name": "PreReceiveEnvironmentDownloadStatus",
        "type": "named"
      }
    },
    "enterprise_admin_get_gist_stats": {
      "request": {
        "url": "/enterprise/stats/gists",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get gist statistics",
      "result_type": {
        "name": "EnterpriseGistOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_github_actions_permissions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Actions permissions for an enterprise",
      "result_type": {
        "name": "ActionsEnterprisePermissions",
        "type": "named"
      }
    },
    "enterprise_admin_get_global_webhook": {
      "request": {
        "url": "/admin/hooks/{hook_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a global webhook",
      "result_type": {
        "name": "GlobalHook",
        "type": "named"
      }
    },
    "enterprise_admin_get_hooks_stats": {
      "request": {
        "url": "/enterprise/stats/hooks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get hooks statistics",
      "result_type": {
        "name": "EnterpriseHookOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_issue_stats": {
      "request": {
        "url": "/enterprise/stats/issues",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get issue statistics",
      "result_type": {
        "name": "EnterpriseIssueOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_license_information": {
      "request": {
        "url": "/enterprise/settings/license",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get license information",
      "result_type": {
        "name": "LicenseInfo",
        "type": "named"
      }
    },
    "enterprise_admin_get_manage_config_apply_events": {
      "request": {
        "url": "/manage/v1/config/apply/events",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "last_request_id": {
          "description": "The unique ID of the last response from a host, used for pagination.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "last_request_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List events from ghe-config-apply",
      "result_type": {
        "name": "EnterpriseAdminGetManageConfigApplyEventsResult",
        "type": "named"
      }
    },
    "enterprise_admin_get_manage_config_apply_status": {
      "request": {
        "url": "/manage/v1/config/apply",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "run_id": {
          "description": "The unique run ID of the `ghe-config-apply` run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "run_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the status of a ghe-config-apply run",
      "result_type": {
        "name": "EnterpriseAdminGetManageConfigApplyStatusResult",
        "type": "named"
      }
    },
    "enterprise_admin_get_manage_maintenance": {
      "request": {
        "url": "/manage/v1/maintenance",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cluster_roles": {
          "description": "The cluster roles from the cluster configuration file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cluster_roles",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "uuid": {
          "description": "The UUID which identifies a node.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "uuid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the status of maintenance mode",
      "result_type": {
        "element_type": {
          "name": "GhesGetMaintenance",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_get_manage_settings": {
      "request": {
        "url": "/manage/v1/config/settings",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the GHES settings",
      "result_type": {
        "name": "GhesGetSettings",
        "type": "named"
      }
    },
    "enterprise_admin_get_manage_ssh": {
      "request": {
        "url": "/manage/v1/access/ssh",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the configured SSH keys",
      "result_type": {
        "element_type": {
          "name": "GhesGetSsh",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_get_milestone_stats": {
      "request": {
        "url": "/enterprise/stats/milestones",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get milestone statistics",
      "result_type": {
        "name": "EnterpriseMilestoneOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_org_stats": {
      "request": {
        "url": "/enterprise/stats/orgs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get organization statistics",
      "result_type": {
        "name": "EnterpriseOrganizationOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_pages_stats": {
      "request": {
        "url": "/enterprise/stats/pages",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get pages statistics",
      "result_type": {
        "name": "EnterprisePageOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_pre_receive_environment": {
      "request": {
        "url": "/admin/pre-receive-environments/{pre_receive_environment_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pre_receive_environment_id": {
          "description": "The unique identifier of the pre-receive environment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_environment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a pre-receive environment",
      "result_type": {
        "name": "PreReceiveEnvironment",
        "type": "named"
      }
    },
    "enterprise_admin_get_pre_receive_hook": {
      "request": {
        "url": "/admin/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a pre-receive hook",
      "result_type": {
        "name": "PreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_get_pre_receive_hook_for_org": {
      "request": {
        "url": "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a pre-receive hook for an organization",
      "result_type": {
        "name": "OrgPreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_get_pre_receive_hook_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a pre-receive hook for a repository",
      "result_type": {
        "name": "RepositoryPreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_get_provisioning_information_for_enterprise_group": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
        "method": "get",
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "excludedAttributes": {
          "description": "Excludes the specified attribute from being returned in the results. Using this parameter can speed up response time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "excludedAttributes",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_group_id": {
          "description": "A unique identifier of the SCIM group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get SCIM provisioning information for an enterprise group",
      "result_type": {
        "name": "ScimEnterpriseGroupResponse",
        "type": "named"
      }
    },
    "enterprise_admin_get_provisioning_information_for_enterprise_user": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
        "method": "get",
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_user_id": {
          "description": "The unique identifier of the SCIM user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get SCIM provisioning information for an enterprise user",
      "result_type": {
        "name": "ScimEnterpriseUserResponse",
        "type": "named"
      }
    },
    "enterprise_admin_get_pull_request_stats": {
      "request": {
        "url": "/enterprise/stats/pulls",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get pull request statistics",
      "result_type": {
        "name": "EnterprisePullRequestOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_replication_status": {
      "request": {
        "url": "/manage/v1/replication/status",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cluster_roles": {
          "description": "The cluster roles from the cluster configuration file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cluster_roles",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "uuid": {
          "description": "The UUID which identifies a node.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "uuid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the status of services running on all replica nodes",
      "result_type": {
        "name": "GhesReplicationStatus",
        "type": "named"
      }
    },
    "enterprise_admin_get_repo_stats": {
      "request": {
        "url": "/enterprise/stats/repos",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get repository statistics",
      "result_type": {
        "name": "EnterpriseRepositoryOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_security_products": {
      "request": {
        "url": "/enterprise/stats/security-products",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get security products statistics",
      "result_type": {
        "name": "EnterpriseSecurityProductsOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_self_hosted_runner_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/{runner_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a self-hosted runner for an enterprise",
      "result_type": {
        "name": "Runner",
        "type": "named"
      }
    },
    "enterprise_admin_get_self_hosted_runner_group_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a self-hosted runner group for an enterprise",
      "result_type": {
        "name": "RunnerGroupsEnterprise",
        "type": "named"
      }
    },
    "enterprise_admin_get_user_stats": {
      "request": {
        "url": "/enterprise/stats/users",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get users statistics",
      "result_type": {
        "name": "EnterpriseUserOverview",
        "type": "named"
      }
    },
    "enterprise_admin_get_version": {
      "request": {
        "url": "/manage/v1/version",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cluster_roles": {
          "description": "The cluster roles from the cluster configuration file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cluster_roles",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "uuid": {
          "description": "The UUID which identifies a node.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "uuid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all GHES release versions for all nodes",
      "result_type": {
        "element_type": {
          "name": "GhesVersion",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_license_check": {
      "request": {
        "url": "/manage/v1/config/license/check",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Check a license",
      "result_type": {
        "name": "GhesLicenseCheck",
        "type": "named"
      }
    },
    "enterprise_admin_license_info": {
      "request": {
        "url": "/manage/v1/config/license",
        "method": "get",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the enterprise license information",
      "result_type": {
        "name": "GhesLicenseInfo",
        "type": "named"
      }
    },
    "enterprise_admin_list_global_webhooks": {
      "request": {
        "url": "/admin/hooks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List global webhooks",
      "result_type": {
        "element_type": {
          "name": "GlobalHook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_labels_for_self_hosted_runner_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/{runner_id}/labels",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List labels for a self-hosted runner for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_list_org_access_to_self_hosted_runner_group_in_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organization access to a self-hosted runner group in an enterprise",
      "result_type": {
        "name": "EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_list_personal_access_tokens": {
      "request": {
        "url": "/admin/tokens",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List personal access tokens",
      "result_type": {
        "element_type": {
          "name": "Authorization",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_pre_receive_environments": {
      "request": {
        "url": "/admin/pre-receive-environments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveEnvironmentsDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveEnvironmentsSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List pre-receive environments",
      "result_type": {
        "element_type": {
          "name": "PreReceiveEnvironment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_pre_receive_hooks": {
      "request": {
        "url": "/admin/pre-receive-hooks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveHooksDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveHooksSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List pre-receive hooks",
      "result_type": {
        "element_type": {
          "name": "PreReceiveHook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_pre_receive_hooks_for_org": {
      "request": {
        "url": "/orgs/{org}/pre-receive-hooks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveHooksForOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "The sort order for the response collection.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveHooksForOrgSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List pre-receive hooks for an organization",
      "result_type": {
        "element_type": {
          "name": "OrgPreReceiveHook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_pre_receive_hooks_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/pre-receive-hooks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveHooksForRepoDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPreReceiveHooksForRepoSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List pre-receive hooks for a repository",
      "result_type": {
        "element_type": {
          "name": "RepositoryPreReceiveHook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_provisioned_groups_enterprise": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Groups",
        "method": "get",
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "count": {
          "description": "Used for pagination: the number of results to return per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "count",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "excludedAttributes": {
          "description": "Excludes the specified attribute from being returned in the results. Using this parameter can speed up response time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "excludedAttributes",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "If specified, only results that match the specified filter will be returned. Multiple filters are not supported. Possible filters are `externalId`, `id`, and `displayName`. For example, `?filter=externalId eq \"9138790-10932-109120392-12321\"`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "startIndex": {
          "description": "Used for pagination: the starting index of the first result to return when paginating through values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        }
      },
      "description": "List provisioned SCIM groups for an enterprise",
      "result_type": {
        "name": "ScimEnterpriseGroupList",
        "type": "named"
      }
    },
    "enterprise_admin_list_provisioned_identities_enterprise": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Users",
        "method": "get",
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "count": {
          "description": "Used for pagination: the number of results to return per page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "count",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "If specified, only results that match the specified filter will be returned. Multiple filters are not supported. Possible filters are `userName`, `externalId`, `id`, and `displayName`. For example, `?filter=externalId eq \"9138790-10932-109120392-12321\"`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "startIndex": {
          "description": "Used for pagination: the starting index of the first result to return when paginating through values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "startIndex",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        }
      },
      "description": "List SCIM provisioned identities for an enterprise",
      "result_type": {
        "name": "ScimEnterpriseUserList",
        "type": "named"
      }
    },
    "enterprise_admin_list_public_keys": {
      "request": {
        "url": "/admin/keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPublicKeysDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show public keys accessed after the given time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminListPublicKeysSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List public keys",
      "result_type": {
        "element_type": {
          "name": "PublicKeyFull",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_runner_applications_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/downloads",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List runner applications for an enterprise",
      "result_type": {
        "element_type": {
          "name": "RunnerApplication",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/organizations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List selected organizations enabled for GitHub Actions in an enterprise",
      "result_type": {
        "name": "EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_list_self_hosted_runner_groups_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "visible_to_organization": {
          "description": "Only return runner groups that are allowed to be used by this organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "visible_to_organization",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List self-hosted runner groups for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_list_self_hosted_runners_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of a self-hosted runner.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List self-hosted runners for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminListSelfHostedRunnersForEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_list_self_hosted_runners_in_group_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List self-hosted runners in a group for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResult",
        "type": "named"
      }
    },
    "gists_check_is_starred": {
      "request": {
        "url": "/gists/{gist_id}/star",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a gist is starred",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "gists_get": {
      "request": {
        "url": "/gists/{gist_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a gist",
      "result_type": {
        "name": "GistSimple",
        "type": "named"
      }
    },
    "gists_get_comment": {
      "request": {
        "url": "/gists/{gist_id}/comments/{comment_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a gist comment",
      "result_type": {
        "name": "GistComment",
        "type": "named"
      }
    },
    "gists_get_revision": {
      "request": {
        "url": "/gists/{gist_id}/{sha}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a gist revision",
      "result_type": {
        "name": "GistSimple",
        "type": "named"
      }
    },
    "gists_list": {
      "request": {
        "url": "/gists",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List gists for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "BaseGist",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gists_list_comments": {
      "request": {
        "url": "/gists/{gist_id}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List gist comments",
      "result_type": {
        "element_type": {
          "name": "GistComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gists_list_commits": {
      "request": {
        "url": "/gists/{gist_id}/commits",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List gist commits",
      "result_type": {
        "element_type": {
          "name": "GistCommit",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gists_list_for_user": {
      "request": {
        "url": "/users/{username}/gists",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List gists for a user",
      "result_type": {
        "element_type": {
          "name": "BaseGist",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gists_list_forks": {
      "request": {
        "url": "/gists/{gist_id}/forks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List gist forks",
      "result_type": {
        "element_type": {
          "name": "GistSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gists_list_public": {
      "request": {
        "url": "/gists/public",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List public gists",
      "result_type": {
        "element_type": {
          "name": "BaseGist",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gists_list_starred": {
      "request": {
        "url": "/gists/starred",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List starred gists",
      "result_type": {
        "element_type": {
          "name": "BaseGist",
          "type": "named"
        },
        "type": "array"
      }
    },
    "git_get_blob": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/blobs/{file_sha}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "file_sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "file_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a blob",
      "result_type": {
        "name": "Blob",
        "type": "named"
      }
    },
    "git_get_commit": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/commits/{commit_sha}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "commit_sha": {
          "description": "The SHA of the commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "commit_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a commit object",
      "result_type": {
        "name": "GitCommit",
        "type": "named"
      }
    },
    "git_get_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/ref/{ref}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a reference",
      "result_type": {
        "name": "GitRef",
        "type": "named"
      }
    },
    "git_get_tag": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/tags/{tag_sha}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tag_sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tag_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a tag",
      "result_type": {
        "name": "GitTag",
        "type": "named"
      }
    },
    "git_get_tree": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/trees/{tree_sha}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "recursive": {
          "description": "Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `\"true\"`, and `\"false\"`. Omit this parameter to prevent recursively returning objects or subtrees.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "recursive",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tree_sha": {
          "description": "The SHA1 value or ref (branch or tag) name of the tree.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tree_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a tree",
      "result_type": {
        "name": "GitTree",
        "type": "named"
      }
    },
    "git_list_matching_refs": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/matching-refs/{ref}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List matching references",
      "result_type": {
        "element_type": {
          "name": "GitRef",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gitignore_get_all_templates": {
      "request": {
        "url": "/gitignore/templates",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get all gitignore templates",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "gitignore_get_template": {
      "request": {
        "url": "/gitignore/templates/{name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a gitignore template",
      "result_type": {
        "name": "GitignoreTemplate",
        "type": "named"
      }
    },
    "issues_check_user_can_be_assigned": {
      "request": {
        "url": "/repos/{owner}/{repo}/assignees/{assignee}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignee": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assignee",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a user can be assigned",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_check_user_can_be_assigned_to_issue": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignee": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assignee",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a user can be assigned to a issue",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_get": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an issue",
      "result_type": {
        "name": "Issue",
        "type": "named"
      }
    },
    "issues_get_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an issue comment",
      "result_type": {
        "name": "IssueComment",
        "type": "named"
      }
    },
    "issues_get_event": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/events/{event_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "event_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "event_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an issue event",
      "result_type": {
        "name": "IssueEvent",
        "type": "named"
      }
    },
    "issues_get_label": {
      "request": {
        "url": "/repos/{owner}/{repo}/labels/{name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a label",
      "result_type": {
        "name": "Label",
        "type": "named"
      }
    },
    "issues_get_milestone": {
      "request": {
        "url": "/repos/{owner}/{repo}/milestones/{milestone_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "milestone_number": {
          "description": "The number that identifies the milestone.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "milestone_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a milestone",
      "result_type": {
        "name": "Milestone",
        "type": "named"
      }
    },
    "issues_list": {
      "request": {
        "url": "/issues",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "collab": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "collab",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "labels": {
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "labels",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "orgs": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "orgs",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "owned": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "owned",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pulls": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "pulls",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "description": "What to sort results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the issues to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List issues assigned to the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Issue",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_assignees": {
      "request": {
        "url": "/repos/{owner}/{repo}/assignees",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List assignees",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_comments": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List issue comments",
      "result_type": {
        "element_type": {
          "name": "IssueComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_comments_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "Either `asc` or `desc`. Ignored without the `sort` parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListCommentsForRepoDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListCommentsForRepoSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List issue comments for a repository",
      "result_type": {
        "element_type": {
          "name": "IssueComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_events": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List issue events",
      "result_type": {
        "element_type": {
          "name": "IssueEventForIssue",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_events_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/events",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List issue events for a repository",
      "result_type": {
        "element_type": {
          "name": "IssueEvent",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_events_for_timeline": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List timeline events for an issue",
      "result_type": {
        "element_type": {
          "name": "TimelineIssueEvents",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_for_authenticated_user": {
      "request": {
        "url": "/user/issues",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForAuthenticatedUserDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForAuthenticatedUserFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "labels": {
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "labels",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "description": "What to sort results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForAuthenticatedUserSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the issues to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForAuthenticatedUserState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List user account issues assigned to the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Issue",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_for_org": {
      "request": {
        "url": "/orgs/{org}/issues",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Indicates which sorts of issues to return. `assigned` means issues assigned to you. `created` means issues created by you. `mentioned` means issues mentioning you. `subscribed` means issues you're subscribed to updates for. `all` or `repos` means all issues you can see, regardless of participation or creation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForOrgFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "labels": {
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "labels",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "description": "What to sort results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForOrgSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the issues to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForOrgState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "Can be the name of an issue type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization issues assigned to the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Issue",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignee": {
          "description": "Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "assignee",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "creator": {
          "description": "The user that created the issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "creator",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForRepoDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "labels": {
          "description": "A list of comma separated label names. Example: `bug,ui,@high`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "labels",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "mentioned": {
          "description": "A user that's mentioned in the issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "mentioned",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "milestone": {
          "description": "If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "milestone",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "description": "What to sort results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForRepoSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the issues to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListForRepoState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "Can be the name of an issue type. If the string `*` is passed, issues with any type are accepted. If the string `none` is passed, issues without type are returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository issues",
      "result_type": {
        "element_type": {
          "name": "Issue",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_labels_for_milestone": {
      "request": {
        "url": "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "milestone_number": {
          "description": "The number that identifies the milestone.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "milestone_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List labels for issues in a milestone",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_labels_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/labels",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List labels for a repository",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_labels_on_issue": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List labels for an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_list_milestones": {
      "request": {
        "url": "/repos/{owner}/{repo}/milestones",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction of the sort. Either `asc` or `desc`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListMilestonesDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "What to sort results by. Either `due_on` or `completeness`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListMilestonesSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "The state of the milestone. Either `open`, `closed`, or `all`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesListMilestonesState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List milestones",
      "result_type": {
        "element_type": {
          "name": "Milestone",
          "type": "named"
        },
        "type": "array"
      }
    },
    "licenses_get": {
      "request": {
        "url": "/licenses/{license}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "license": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "license",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a license",
      "result_type": {
        "name": "License",
        "type": "named"
      }
    },
    "licenses_get_all_commonly_used": {
      "request": {
        "url": "/licenses",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "featured": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "featured",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get all commonly used licenses",
      "result_type": {
        "element_type": {
          "name": "LicenseSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "licenses_get_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/license",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/` or simply ``. To reference a pull request use `refs/pull//merge`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the license for a repository",
      "result_type": {
        "name": "LicenseContent",
        "type": "named"
      }
    },
    "meta_get": {
      "request": {
        "url": "/meta",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get GitHub Enterprise Server meta information",
      "result_type": {
        "name": "ApiOverview",
        "type": "named"
      }
    },
    "meta_get_octocat": {
      "request": {
        "url": "/octocat",
        "method": "get",
        "response": {
          "contentType": "application/octocat-stream"
        }
      },
      "arguments": {
        "s": {
          "description": "The words to show in Octocat's speech bubble",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "s",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get Octocat",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "meta_get_zen": {
      "request": {
        "url": "/zen",
        "method": "get",
        "response": {
          "contentType": "text/plain"
        }
      },
      "arguments": {},
      "description": "Get the Zen of GitHub",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "meta_root": {
      "request": {
        "url": "/",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "GitHub API Root",
      "result_type": {
        "name": "Root",
        "type": "named"
      }
    },
    "migrations_get_status_for_org": {
      "request": {
        "url": "/orgs/{org}/migrations/{migration_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "exclude": {
          "description": "Exclude attributes from the API response to improve performance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "MigrationsGetStatusForOrgExclude",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "exclude",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "migration_id": {
          "description": "The unique identifier of the migration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "migration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization migration status",
      "result_type": {
        "name": "Migration",
        "type": "named"
      }
    },
    "migrations_list_for_authenticated_user": {
      "request": {
        "url": "/user/migrations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List user migrations",
      "result_type": {
        "element_type": {
          "name": "Migration",
          "type": "named"
        },
        "type": "array"
      }
    },
    "migrations_list_for_org": {
      "request": {
        "url": "/orgs/{org}/migrations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "exclude": {
          "description": "Exclude attributes from the API response to improve performance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "MigrationsListForOrgExclude",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "exclude",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organization migrations",
      "result_type": {
        "element_type": {
          "name": "Migration",
          "type": "named"
        },
        "type": "array"
      }
    },
    "migrations_list_repos_for_authenticated_user": {
      "request": {
        "url": "/user/migrations/{migration_id}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "migration_id": {
          "description": "The unique identifier of the migration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "migration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories for a user migration",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "migrations_list_repos_for_org": {
      "request": {
        "url": "/orgs/{org}/migrations/{migration_id}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "migration_id": {
          "description": "The unique identifier of the migration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "migration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories in an organization migration",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "oauth_authorizations_get_authorization": {
      "request": {
        "url": "/authorizations/{authorization_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authorization_id": {
          "description": "The unique identifier of the authorization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "authorization_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a single authorization",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "oauth_authorizations_get_grant": {
      "request": {
        "url": "/applications/grants/{grant_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "grant_id": {
          "description": "The unique identifier of the grant.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "grant_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a single grant",
      "result_type": {
        "name": "ApplicationGrant",
        "type": "named"
      }
    },
    "oauth_authorizations_list_authorizations": {
      "request": {
        "url": "/authorizations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "client_id": {
          "description": "The client ID of your GitHub app.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "client_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List your authorizations",
      "result_type": {
        "element_type": {
          "name": "Authorization",
          "type": "named"
        },
        "type": "array"
      }
    },
    "oauth_authorizations_list_grants": {
      "request": {
        "url": "/applications/grants",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "client_id": {
          "description": "The client ID of your GitHub app.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "client_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List your grants",
      "result_type": {
        "element_type": {
          "name": "ApplicationGrant",
          "type": "named"
        },
        "type": "array"
      }
    },
    "oidc_get_oidc_custom_sub_template_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/oidc/customization/sub",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the customization template for an OIDC subject claim for an organization",
      "result_type": {
        "name": "OidcCustomSub",
        "type": "named"
      }
    },
    "orgs_check_membership_for_user": {
      "request": {
        "url": "/orgs/{org}/members/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check organization membership for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_check_public_membership_for_user": {
      "request": {
        "url": "/orgs/{org}/public_members/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check public organization membership for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_get": {
      "request": {
        "url": "/orgs/{org}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization",
      "result_type": {
        "name": "OrganizationFull",
        "type": "named"
      }
    },
    "orgs_get_all_custom_properties": {
      "request": {
        "url": "/orgs/{org}/properties/schema",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all custom properties for an organization",
      "result_type": {
        "element_type": {
          "name": "CustomProperty",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_get_audit_log": {
      "request": {
        "url": "/orgs/{org}/audit-log",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include": {
          "description": "The event types to include:  - `web` - returns web (non-Git) events. - `git` - returns Git events. - `all` - returns both web and Git events.  The default is `web`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsGetAuditLogInclude",
              "type": "named"
            }
          },
          "http": {
            "name": "include",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "order": {
          "description": "The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.  The default is `desc`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsGetAuditLogOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "phrase": {
          "description": "A search phrase. For more information, see [Searching the audit log](https://docs.github.com/enterprise-server@3.15/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "phrase",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the audit log for an organization",
      "result_type": {
        "element_type": {
          "name": "AuditLogEvent",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_get_custom_property": {
      "request": {
        "url": "/orgs/{org}/properties/schema/{custom_property_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "custom_property_name": {
          "description": "The custom property name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "custom_property_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a custom property for an organization",
      "result_type": {
        "name": "CustomProperty",
        "type": "named"
      }
    },
    "orgs_get_custom_repo_role": {
      "request": {
        "url": "/orgs/{org}/custom-repository-roles/{role_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a custom repository role",
      "result_type": {
        "name": "OrganizationCustomRepositoryRole",
        "type": "named"
      }
    },
    "orgs_get_membership_for_authenticated_user": {
      "request": {
        "url": "/user/memberships/orgs/{org}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization membership for the authenticated user",
      "result_type": {
        "name": "OrgMembership",
        "type": "named"
      }
    },
    "orgs_get_membership_for_user": {
      "request": {
        "url": "/orgs/{org}/memberships/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get organization membership for a user",
      "result_type": {
        "name": "OrgMembership",
        "type": "named"
      }
    },
    "orgs_get_org_role": {
      "request": {
        "url": "/orgs/{org}/organization-roles/{role_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get an organization role",
      "result_type": {
        "name": "OrganizationRole",
        "type": "named"
      }
    },
    "orgs_get_webhook": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an organization webhook",
      "result_type": {
        "name": "OrgHook",
        "type": "named"
      }
    },
    "orgs_get_webhook_config_for_org": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}/config",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a webhook configuration for an organization",
      "result_type": {
        "name": "WebhookConfig",
        "type": "named"
      }
    },
    "orgs_get_webhook_delivery": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delivery_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "delivery_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a webhook delivery for an organization webhook",
      "result_type": {
        "name": "HookDelivery",
        "type": "named"
      }
    },
    "orgs_list": {
      "request": {
        "url": "/organizations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "An organization ID. Only return organizations with an ID greater than this ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organizations",
      "result_type": {
        "element_type": {
          "name": "OrganizationSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_app_installations": {
      "request": {
        "url": "/orgs/{org}/installations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List app installations for an organization",
      "result_type": {
        "name": "OrgsListAppInstallationsResult",
        "type": "named"
      }
    },
    "orgs_list_custom_properties_values_for_repos": {
      "request": {
        "url": "/orgs/{org}/properties/values",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repository_query": {
          "description": "Finds repositories in the organization with a query containing one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/enterprise-server@3.15/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "repository_query",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List custom property values for organization repositories",
      "result_type": {
        "element_type": {
          "name": "OrgRepoCustomPropertyValues",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_custom_repo_roles": {
      "request": {
        "url": "/orgs/{org}/custom-repository-roles",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List custom repository roles in an organization",
      "result_type": {
        "name": "OrgsListCustomRepoRolesResult",
        "type": "named"
      }
    },
    "orgs_list_custom_roles": {
      "request": {
        "url": "/organizations/{organization_id}/custom_roles",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "organization_id": {
          "description": "The unique identifier of the organization.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "organization_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Closing down - List custom repository roles in an organization",
      "result_type": {
        "name": "OrgsListCustomRolesResult",
        "type": "named"
      }
    },
    "orgs_list_for_authenticated_user": {
      "request": {
        "url": "/user/orgs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organizations for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "OrganizationSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_for_user": {
      "request": {
        "url": "/users/{username}/orgs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organizations for a user",
      "result_type": {
        "element_type": {
          "name": "OrganizationSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_members": {
      "request": {
        "url": "/orgs/{org}/members",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "filter": {
          "description": "Filter members returned in the list. `2fa_disabled` means that only members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned. This options is only available for organization owners.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListMembersFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "role": {
          "description": "Filter members returned by their role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListMembersRole",
              "type": "named"
            }
          },
          "http": {
            "name": "role",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization members",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_memberships_for_authenticated_user": {
      "request": {
        "url": "/user/memberships/orgs",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListMembershipsForAuthenticatedUserState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization memberships for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "OrgMembership",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_org_role_teams": {
      "request": {
        "url": "/orgs/{org}/organization-roles/{role_id}/teams",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List teams that are assigned to an organization role",
      "result_type": {
        "element_type": {
          "name": "TeamRoleAssignment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_org_role_users": {
      "request": {
        "url": "/orgs/{org}/organization-roles/{role_id}/users",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List users that are assigned to an organization role",
      "result_type": {
        "element_type": {
          "name": "UserRoleAssignment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_org_roles": {
      "request": {
        "url": "/orgs/{org}/organization-roles",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all organization roles for an organization",
      "result_type": {
        "name": "OrgsListOrgRolesResult",
        "type": "named"
      }
    },
    "orgs_list_organization_fine_grained_permissions": {
      "request": {
        "url": "/orgs/{org}/organization-fine-grained-permissions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization fine-grained permissions for an organization",
      "result_type": {
        "element_type": {
          "name": "OrganizationFineGrainedPermission",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_outside_collaborators": {
      "request": {
        "url": "/orgs/{org}/outside_collaborators",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "filter": {
          "description": "Filter the list of outside collaborators. `2fa_disabled` means that only outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListOutsideCollaboratorsFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List outside collaborators for an organization",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_pat_grant_repositories": {
      "request": {
        "url": "/orgs/{org}/personal-access-tokens/{pat_id}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pat_id": {
          "description": "Unique identifier of the fine-grained personal access token.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pat_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories a fine-grained personal access token has access to",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_pat_grant_request_repositories": {
      "request": {
        "url": "/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pat_request_id": {
          "description": "Unique identifier of the request for access via fine-grained personal access token.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pat_request_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repositories requested to be accessed by a fine-grained personal access token",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_pat_grant_requests": {
      "request": {
        "url": "/orgs/{org}/personal-access-token-requests",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListPatGrantRequestsDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "last_used_after": {
          "description": "Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "last_used_after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "last_used_before": {
          "description": "Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "last_used_before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "A list of owner usernames to use to filter the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "owner",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "permission": {
          "description": "The permission to use to filter the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "permission",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository": {
          "description": "The name of the repository to use to filter the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "repository",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListPatGrantRequestsSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token_id": {
          "description": "The ID of the token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "token_id",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "List requests to access organization resources with fine-grained personal access tokens",
      "result_type": {
        "element_type": {
          "name": "OrganizationProgrammaticAccessGrantRequest",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_pat_grants": {
      "request": {
        "url": "/orgs/{org}/personal-access-tokens",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListPatGrantsDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "last_used_after": {
          "description": "Only show fine-grained personal access tokens used after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "last_used_after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "last_used_before": {
          "description": "Only show fine-grained personal access tokens used before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "last_used_before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "A list of owner usernames to use to filter the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "owner",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "permission": {
          "description": "The permission to use to filter the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "permission",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository": {
          "description": "The name of the repository to use to filter the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "repository",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property by which to sort the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsListPatGrantsSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token_id": {
          "description": "The ID of the token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "name": "token_id",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "List fine-grained personal access tokens with access to organization resources",
      "result_type": {
        "element_type": {
          "name": "OrganizationProgrammaticAccessGrant",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_public_members": {
      "request": {
        "url": "/orgs/{org}/public_members",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List public organization members",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_repo_fine_grained_permissions": {
      "request": {
        "url": "/orgs/{org}/repository-fine-grained-permissions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository fine-grained permissions for an organization",
      "result_type": {
        "element_type": {
          "name": "RepositoryFineGrainedPermission",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_security_manager_teams": {
      "request": {
        "url": "/orgs/{org}/security-managers",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List security manager teams",
      "result_type": {
        "element_type": {
          "name": "TeamSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_webhook_deliveries": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}/deliveries",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cursor": {
          "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List deliveries for an organization webhook",
      "result_type": {
        "element_type": {
          "name": "HookDeliveryItem",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_list_webhooks": {
      "request": {
        "url": "/orgs/{org}/hooks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List organization webhooks",
      "result_type": {
        "element_type": {
          "name": "OrgHook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_get_all_package_versions_for_package_owned_by_authenticated_user": {
      "request": {
        "url": "/user/packages/{package_type}/{package_name}/versions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "state": {
          "description": "The state of the package, either active or deleted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List package versions for a package owned by the authenticated user",
      "result_type": {
        "element_type": {
          "name": "PackageVersion",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_get_all_package_versions_for_package_owned_by_org": {
      "request": {
        "url": "/orgs/{org}/packages/{package_type}/{package_name}/versions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "state": {
          "description": "The state of the package, either active or deleted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackagesGetAllPackageVersionsForPackageOwnedByOrgState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List package versions for a package owned by an organization",
      "result_type": {
        "element_type": {
          "name": "PackageVersion",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_get_all_package_versions_for_package_owned_by_user": {
      "request": {
        "url": "/users/{username}/packages/{package_type}/{package_name}/versions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List package versions for a package owned by a user",
      "result_type": {
        "element_type": {
          "name": "PackageVersion",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_get_package_for_authenticated_user": {
      "request": {
        "url": "/user/packages/{package_type}/{package_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetPackageForAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a package for the authenticated user",
      "result_type": {
        "name": "Package",
        "type": "named"
      }
    },
    "packages_get_package_for_organization": {
      "request": {
        "url": "/orgs/{org}/packages/{package_type}/{package_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetPackageForOrganizationPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a package for an organization",
      "result_type": {
        "name": "Package",
        "type": "named"
      }
    },
    "packages_get_package_for_user": {
      "request": {
        "url": "/users/{username}/packages/{package_type}/{package_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetPackageForUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a package for a user",
      "result_type": {
        "name": "Package",
        "type": "named"
      }
    },
    "packages_get_package_version_for_authenticated_user": {
      "request": {
        "url": "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetPackageVersionForAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a package version for the authenticated user",
      "result_type": {
        "name": "PackageVersion",
        "type": "named"
      }
    },
    "packages_get_package_version_for_organization": {
      "request": {
        "url": "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetPackageVersionForOrganizationPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a package version for an organization",
      "result_type": {
        "name": "PackageVersion",
        "type": "named"
      }
    },
    "packages_get_package_version_for_user": {
      "request": {
        "url": "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesGetPackageVersionForUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a package version for a user",
      "result_type": {
        "name": "PackageVersion",
        "type": "named"
      }
    },
    "packages_list_docker_migration_conflicting_packages_for_authenticated_user": {
      "request": {
        "url": "/user/docker/conflicts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get list of conflicting packages during Docker migration for authenticated-user",
      "result_type": {
        "element_type": {
          "name": "Package",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_list_docker_migration_conflicting_packages_for_organization": {
      "request": {
        "url": "/orgs/{org}/docker/conflicts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get list of conflicting packages during Docker migration for organization",
      "result_type": {
        "element_type": {
          "name": "Package",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_list_docker_migration_conflicting_packages_for_user": {
      "request": {
        "url": "/users/{username}/docker/conflicts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get list of conflicting packages during Docker migration for user",
      "result_type": {
        "element_type": {
          "name": "Package",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_list_packages_for_authenticated_user": {
      "request": {
        "url": "/user/packages",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesListPackagesForAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "visibility": {
          "description": "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`. For the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/enterprise-server@3.15/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackagesListPackagesForAuthenticatedUserVisibility",
              "type": "named"
            }
          },
          "http": {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List packages for the authenticated user's namespace",
      "result_type": {
        "element_type": {
          "name": "Package",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_list_packages_for_organization": {
      "request": {
        "url": "/orgs/{org}/packages",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesListPackagesForOrganizationPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "visibility": {
          "description": "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`. For the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/enterprise-server@3.15/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackagesListPackagesForOrganizationVisibility",
              "type": "named"
            }
          },
          "http": {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List packages for an organization",
      "result_type": {
        "element_type": {
          "name": "Package",
          "type": "named"
        },
        "type": "array"
      }
    },
    "packages_list_packages_for_user": {
      "request": {
        "url": "/users/{username}/packages",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesListPackagesForUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "description": "The selected visibility of the packages.  This parameter is optional and only filters an existing result set.  The `internal` visibility is only supported for GitHub Packages registries that allow for granular permissions. For other ecosystems `internal` is synonymous with `private`. For the list of GitHub Packages registries that support granular permissions, see \"[About permissions for GitHub Packages](https://docs.github.com/enterprise-server@3.15/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackagesListPackagesForUserVisibility",
              "type": "named"
            }
          },
          "http": {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List packages for a user",
      "result_type": {
        "element_type": {
          "name": "Package",
          "type": "named"
        },
        "type": "array"
      }
    },
    "projects_get": {
      "request": {
        "url": "/projects/{project_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a project",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "projects_get_card": {
      "request": {
        "url": "/projects/columns/cards/{card_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "card_id": {
          "description": "The unique identifier of the card.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "card_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a project card",
      "result_type": {
        "name": "ProjectCard",
        "type": "named"
      }
    },
    "projects_get_column": {
      "request": {
        "url": "/projects/columns/{column_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "column_id": {
          "description": "The unique identifier of the column.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "column_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a project column",
      "result_type": {
        "name": "ProjectColumn",
        "type": "named"
      }
    },
    "projects_get_permission_for_user": {
      "request": {
        "url": "/projects/{project_id}/collaborators/{username}/permission",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get project permission for a user",
      "result_type": {
        "name": "ProjectCollaboratorPermission",
        "type": "named"
      }
    },
    "projects_list_cards": {
      "request": {
        "url": "/projects/columns/{column_id}/cards",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "archived_state": {
          "description": "Filters the project cards that are returned by the card's state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsListCardsArchivedState",
              "type": "named"
            }
          },
          "http": {
            "name": "archived_state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "column_id": {
          "description": "The unique identifier of the column.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "column_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List project cards",
      "result_type": {
        "element_type": {
          "name": "ProjectCard",
          "type": "named"
        },
        "type": "array"
      }
    },
    "projects_list_collaborators": {
      "request": {
        "url": "/projects/{project_id}/collaborators",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "affiliation": {
          "description": "Filters the collaborators by their affiliation. `outside` means outside collaborators of a project that are not a member of the project's organization. `direct` means collaborators with permissions to a project, regardless of organization membership status. `all` means all collaborators the authenticated user can see.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsListCollaboratorsAffiliation",
              "type": "named"
            }
          },
          "http": {
            "name": "affiliation",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List project collaborators",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "projects_list_columns": {
      "request": {
        "url": "/projects/{project_id}/columns",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List project columns",
      "result_type": {
        "element_type": {
          "name": "ProjectColumn",
          "type": "named"
        },
        "type": "array"
      }
    },
    "projects_list_for_org": {
      "request": {
        "url": "/orgs/{org}/projects",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the projects to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsListForOrgState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization projects",
      "result_type": {
        "element_type": {
          "name": "Project",
          "type": "named"
        },
        "type": "array"
      }
    },
    "projects_list_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/projects",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the projects to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsListForRepoState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository projects",
      "result_type": {
        "element_type": {
          "name": "Project",
          "type": "named"
        },
        "type": "array"
      }
    },
    "projects_list_for_user": {
      "request": {
        "url": "/users/{username}/projects",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "state": {
          "description": "Indicates the state of the projects to return.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsListForUserState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List user projects",
      "result_type": {
        "element_type": {
          "name": "Project",
          "type": "named"
        },
        "type": "array"
      }
    },
    "pulls_check_if_merged": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a pull request has been merged",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "pulls_get": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a pull request",
      "result_type": {
        "name": "PullRequest",
        "type": "named"
      }
    },
    "pulls_get_review": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "review_id": {
          "description": "The unique identifier of the review.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "review_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a review for a pull request",
      "result_type": {
        "name": "PullRequestReview",
        "type": "named"
      }
    },
    "pulls_get_review_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a review comment for a pull request",
      "result_type": {
        "name": "PullRequestReviewComment",
        "type": "named"
      }
    },
    "pulls_list": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "base": {
          "description": "Filter pulls by base branch name. Example: `gh-pages`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "base",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction of the sort. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsListDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "head": {
          "description": "Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "head",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "What to sort results by. `popularity` will sort by the number of comments. `long-running` will sort by date created and will limit the results to pull requests that have been open for more than a month and have had activity within the past month.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsListSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Either `open`, `closed`, or `all` to filter by state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsListState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List pull requests",
      "result_type": {
        "element_type": {
          "name": "PullRequestSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "pulls_list_comments_for_review": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "review_id": {
          "description": "The unique identifier of the review.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "review_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List comments for a pull request review",
      "result_type": {
        "element_type": {
          "name": "ReviewComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "pulls_list_commits": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List commits on a pull request",
      "result_type": {
        "element_type": {
          "name": "Commit",
          "type": "named"
        },
        "type": "array"
      }
    },
    "pulls_list_files": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/files",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List pull requests files",
      "result_type": {
        "element_type": {
          "name": "DiffEntry",
          "type": "named"
        },
        "type": "array"
      }
    },
    "pulls_list_requested_reviewers": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all requested reviewers for a pull request",
      "result_type": {
        "name": "PullRequestReviewRequest",
        "type": "named"
      }
    },
    "pulls_list_review_comments": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort results. Ignored without `sort` parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsListReviewCommentsDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsListReviewCommentsSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List review comments on a pull request",
      "result_type": {
        "element_type": {
          "name": "PullRequestReviewComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "pulls_list_review_comments_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort results. Ignored without `sort` parameter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsListReviewCommentsForRepoDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsListReviewCommentsForRepoSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List review comments in a repository",
      "result_type": {
        "element_type": {
          "name": "PullRequestReviewComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "pulls_list_reviews": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reviews for a pull request",
      "result_type": {
        "element_type": {
          "name": "PullRequestReview",
          "type": "named"
        },
        "type": "array"
      }
    },
    "rate_limit_get": {
      "request": {
        "url": "/rate_limit",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get rate limit status for the authenticated user",
      "result_type": {
        "name": "RateLimitOverview",
        "type": "named"
      }
    },
    "reactions_list_for_commit_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a commit comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForCommitCommentContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reactions for a commit comment",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_issue": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForIssueContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reactions for an issue",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_issue_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to an issue comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForIssueCommentContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reactions for an issue comment",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_pull_request_review_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a pull request review comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForPullRequestReviewCommentContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reactions for a pull request review comment",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a release.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForReleaseContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reactions for a release",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_team_discussion_comment_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForTeamDiscussionCommentInOrgContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reactions for a team discussion comment",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_team_discussion_comment_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForTeamDiscussionCommentLegacyContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List reactions for a team discussion comment (Legacy)",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_team_discussion_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForTeamDiscussionInOrgContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List reactions for a team discussion",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "reactions_list_for_team_discussion_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/reactions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "content": {
          "description": "Returns a single [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions). Omit this parameter to list all reactions to a team discussion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionsListForTeamDiscussionLegacyContent",
              "type": "named"
            }
          },
          "http": {
            "name": "content",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List reactions for a team discussion (Legacy)",
      "result_type": {
        "element_type": {
          "name": "Reaction",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_check_automated_security_fixes": {
      "request": {
        "url": "/repos/{owner}/{repo}/automated-security-fixes",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if Dependabot security updates are enabled for a repository",
      "result_type": {
        "name": "CheckAutomatedSecurityFixes",
        "type": "named"
      }
    },
    "repos_check_collaborator": {
      "request": {
        "url": "/repos/{owner}/{repo}/collaborators/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a user is a repository collaborator",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_check_vulnerability_alerts": {
      "request": {
        "url": "/repos/{owner}/{repo}/vulnerability-alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if vulnerability alerts are enabled for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_codeowners_errors": {
      "request": {
        "url": "/repos/{owner}/{repo}/codeowners/errors",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default branch (e.g. `main`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List CODEOWNERS errors",
      "result_type": {
        "name": "CodeownersErrors",
        "type": "named"
      }
    },
    "repos_compare_commits": {
      "request": {
        "url": "/repos/{owner}/{repo}/compare/{basehead}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "basehead": {
          "description": "The base branch and head branch to compare. This parameter expects the format `BASE...HEAD`. Both must be branch names in `repo`. To compare with a branch that exists in a different repository in the same network as `repo`, the `basehead` parameter expects the format `USERNAME:BASE...USERNAME:HEAD`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "basehead",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Compare two commits",
      "result_type": {
        "name": "CommitComparison",
        "type": "named"
      }
    },
    "repos_get": {
      "request": {
        "url": "/repos/{owner}/{repo}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository",
      "result_type": {
        "name": "FullRepository",
        "type": "named"
      }
    },
    "repos_get_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get access restrictions",
      "result_type": {
        "name": "BranchRestrictionPolicy",
        "type": "named"
      }
    },
    "repos_get_admin_branch_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get admin branch protection",
      "result_type": {
        "name": "ProtectedBranchAdminEnforced",
        "type": "named"
      }
    },
    "repos_get_all_deployment_protection_rules": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all deployment protection rules for an environment",
      "result_type": {
        "name": "ReposGetAllDeploymentProtectionRulesResult",
        "type": "named"
      }
    },
    "repos_get_all_environments": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List environments",
      "result_type": {
        "name": "ReposGetAllEnvironmentsResult",
        "type": "named"
      }
    },
    "repos_get_all_status_check_contexts": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all status check contexts",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_all_topics": {
      "request": {
        "url": "/repos/{owner}/{repo}/topics",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all repository topics",
      "result_type": {
        "name": "Topic",
        "type": "named"
      }
    },
    "repos_get_apps_with_access_to_protected_branch": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get apps with access to the protected branch",
      "result_type": {
        "element_type": {
          "type": "nullable",
          "underlying_type": {
            "name": "Integration",
            "type": "named"
          }
        },
        "type": "array"
      }
    },
    "repos_get_autolink": {
      "request": {
        "url": "/repos/{owner}/{repo}/autolinks/{autolink_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "autolink_id": {
          "description": "The unique identifier of the autolink.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "autolink_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an autolink reference of a repository",
      "result_type": {
        "name": "Autolink",
        "type": "named"
      }
    },
    "repos_get_branch": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a branch",
      "result_type": {
        "name": "BranchWithProtection",
        "type": "named"
      }
    },
    "repos_get_branch_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get branch protection",
      "result_type": {
        "name": "BranchProtection",
        "type": "named"
      }
    },
    "repos_get_branch_rules": {
      "request": {
        "url": "/repos/{owner}/{repo}/rules/branches/{branch}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get rules for a branch",
      "result_type": {
        "element_type": {
          "name": "RepositoryRuleDetailed",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_code_frequency_stats": {
      "request": {
        "url": "/repos/{owner}/{repo}/stats/code_frequency",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the weekly commit activity",
      "result_type": {
        "element_type": {
          "element_type": {
            "name": "Int32",
            "type": "named"
          },
          "type": "array"
        },
        "type": "array"
      }
    },
    "repos_get_collaborator_permission_level": {
      "request": {
        "url": "/repos/{owner}/{repo}/collaborators/{username}/permission",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get repository permissions for a user",
      "result_type": {
        "name": "RepositoryCollaboratorPermission",
        "type": "named"
      }
    },
    "repos_get_combined_status_for_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{ref}/status",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the combined status for a specific reference",
      "result_type": {
        "name": "CombinedCommitStatus",
        "type": "named"
      }
    },
    "repos_get_commit": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{ref}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a commit",
      "result_type": {
        "name": "Commit",
        "type": "named"
      }
    },
    "repos_get_commit_activity_stats": {
      "request": {
        "url": "/repos/{owner}/{repo}/stats/commit_activity",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the last year of commit activity",
      "result_type": {
        "element_type": {
          "name": "CommitActivity",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_commit_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/comments/{comment_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a commit comment",
      "result_type": {
        "name": "CommitComment",
        "type": "named"
      }
    },
    "repos_get_commit_signature_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get commit signature protection",
      "result_type": {
        "name": "ProtectedBranchAdminEnforced",
        "type": "named"
      }
    },
    "repos_get_content": {
      "request": {
        "url": "/repos/{owner}/{repo}/contents/{path}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "path": {
          "description": "path parameter",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "path",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The name of the commit/branch/tag. Default: the repositorys default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get repository content",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "repos_get_contributors_stats": {
      "request": {
        "url": "/repos/{owner}/{repo}/stats/contributors",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all contributor commit activity",
      "result_type": {
        "element_type": {
          "name": "ContributorActivity",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_custom_deployment_protection_rule": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "protection_rule_id": {
          "description": "The unique identifier of the protection rule.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "protection_rule_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a custom deployment protection rule",
      "result_type": {
        "name": "DeploymentProtectionRule",
        "type": "named"
      }
    },
    "repos_get_custom_properties_values": {
      "request": {
        "url": "/repos/{owner}/{repo}/properties/values",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all custom property values for a repository",
      "result_type": {
        "element_type": {
          "name": "CustomPropertyValue",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_deploy_key": {
      "request": {
        "url": "/repos/{owner}/{repo}/keys/{key_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "description": "The unique identifier of the key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a deploy key",
      "result_type": {
        "name": "DeployKey",
        "type": "named"
      }
    },
    "repos_get_deployment": {
      "request": {
        "url": "/repos/{owner}/{repo}/deployments/{deployment_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deployment_id": {
          "description": "deployment_id parameter",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "deployment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a deployment",
      "result_type": {
        "name": "Deployment",
        "type": "named"
      }
    },
    "repos_get_deployment_branch_policy": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch_policy_id": {
          "description": "The unique identifier of the branch policy.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "branch_policy_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a deployment branch policy",
      "result_type": {
        "name": "DeploymentBranchPolicy",
        "type": "named"
      }
    },
    "repos_get_deployment_status": {
      "request": {
        "url": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deployment_id": {
          "description": "deployment_id parameter",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "deployment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "status_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a deployment status",
      "result_type": {
        "name": "DeploymentStatus",
        "type": "named"
      }
    },
    "repos_get_environment": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get an environment",
      "result_type": {
        "name": "Environment",
        "type": "named"
      }
    },
    "repos_get_latest_pages_build": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages/builds/latest",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get latest Pages build",
      "result_type": {
        "name": "PageBuild",
        "type": "named"
      }
    },
    "repos_get_latest_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/latest",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the latest release",
      "result_type": {
        "name": "Release",
        "type": "named"
      }
    },
    "repos_get_org_rule_suite": {
      "request": {
        "url": "/orgs/{org}/rulesets/rule-suites/{rule_suite_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rule_suite_id": {
          "description": "The unique identifier of the rule suite result. To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/enterprise-server@3.15/rest/repos/rule-suites#list-repository-rule-suites) for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/enterprise-server@3.15/rest/orgs/rule-suites#list-organization-rule-suites) for organizations.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "rule_suite_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get an organization rule suite",
      "result_type": {
        "name": "RuleSuite",
        "type": "named"
      }
    },
    "repos_get_org_rule_suites": {
      "request": {
        "url": "/orgs/{org}/rulesets/rule-suites",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "actor_name": {
          "description": "The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "actor_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_name": {
          "description": "The name of the repository to filter on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "repository_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rule_suite_result": {
          "description": "The rule results to filter on. When specified, only suites with this result will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposGetOrgRuleSuitesRuleSuiteResult",
              "type": "named"
            }
          },
          "http": {
            "name": "rule_suite_result",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "time_period": {
          "description": "The time period to filter by.  For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposGetOrgRuleSuitesTimePeriod",
              "type": "named"
            }
          },
          "http": {
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization rule suites",
      "result_type": {
        "element_type": {
          "name": "RuleSuites",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_org_ruleset": {
      "request": {
        "url": "/orgs/{org}/rulesets/{ruleset_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleset_id": {
          "description": "The ID of the ruleset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ruleset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get an organization repository ruleset",
      "result_type": {
        "name": "RepositoryRuleset",
        "type": "named"
      }
    },
    "repos_get_org_rulesets": {
      "request": {
        "url": "/orgs/{org}/rulesets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "targets": {
          "description": "A comma-separated list of rule targets to filter by. If provided, only rulesets that apply to the specified targets will be returned. For example, `branch,tag,push`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "targets",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all organization repository rulesets",
      "result_type": {
        "element_type": {
          "name": "RepositoryRuleset",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_pages": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a GitHub Enterprise Server Pages site",
      "result_type": {
        "name": "Page",
        "type": "named"
      }
    },
    "repos_get_pages_build": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages/builds/{build_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "build_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "build_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get GitHub Enterprise Server Pages build",
      "result_type": {
        "name": "PageBuild",
        "type": "named"
      }
    },
    "repos_get_pages_deployment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pages_deployment_id": {
          "description": "The ID of the Pages deployment. You can also give the commit SHA of the deployment.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "name": "pages_deployment_id",
            "in": "path",
            "schema": {}
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the status of a GitHub Pages deployment",
      "result_type": {
        "name": "PagesDeploymentStatus",
        "type": "named"
      }
    },
    "repos_get_participation_stats": {
      "request": {
        "url": "/repos/{owner}/{repo}/stats/participation",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the weekly commit count",
      "result_type": {
        "name": "ParticipationStats",
        "type": "named"
      }
    },
    "repos_get_pull_request_review_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get pull request review protection",
      "result_type": {
        "name": "ProtectedBranchPullRequestReview",
        "type": "named"
      }
    },
    "repos_get_punch_card_stats": {
      "request": {
        "url": "/repos/{owner}/{repo}/stats/punch_card",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get the hourly commit count for each day",
      "result_type": {
        "element_type": {
          "element_type": {
            "name": "Int32",
            "type": "named"
          },
          "type": "array"
        },
        "type": "array"
      }
    },
    "repos_get_readme": {
      "request": {
        "url": "/repos/{owner}/{repo}/readme",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The name of the commit/branch/tag. Default: the repositorys default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository README",
      "result_type": {
        "name": "ContentFile",
        "type": "named"
      }
    },
    "repos_get_readme_in_directory": {
      "request": {
        "url": "/repos/{owner}/{repo}/readme/{dir}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "dir": {
          "description": "The alternate path to look for a README file",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "dir",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The name of the commit/branch/tag. Default: the repositorys default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository README for a directory",
      "result_type": {
        "name": "ContentFile",
        "type": "named"
      }
    },
    "repos_get_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a release",
      "result_type": {
        "name": "Release",
        "type": "named"
      }
    },
    "repos_get_release_asset": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "asset_id": {
          "description": "The unique identifier of the asset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "asset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a release asset",
      "result_type": {
        "name": "ReleaseAsset",
        "type": "named"
      }
    },
    "repos_get_release_by_tag": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/tags/{tag}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tag": {
          "description": "tag parameter",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a release by tag name",
      "result_type": {
        "name": "Release",
        "type": "named"
      }
    },
    "repos_get_repo_rule_suite": {
      "request": {
        "url": "/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rule_suite_id": {
          "description": "The unique identifier of the rule suite result. To get this ID, you can use [GET /repos/{owner}/{repo}/rulesets/rule-suites](https://docs.github.com/enterprise-server@3.15/rest/repos/rule-suites#list-repository-rule-suites) for repositories and [GET /orgs/{org}/rulesets/rule-suites](https://docs.github.com/enterprise-server@3.15/rest/orgs/rule-suites#list-organization-rule-suites) for organizations.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "rule_suite_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a repository rule suite",
      "result_type": {
        "name": "RuleSuite",
        "type": "named"
      }
    },
    "repos_get_repo_rule_suites": {
      "request": {
        "url": "/repos/{owner}/{repo}/rulesets/rule-suites",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "actor_name": {
          "description": "The handle for the GitHub user account to filter on. When specified, only rule evaluations triggered by this actor will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "actor_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The name of the ref. Cannot contain wildcard characters. Optionally prefix with `refs/heads/` to limit to branches or `refs/tags/` to limit to tags. Omit the prefix to search across all refs. When specified, only rule evaluations triggered for this ref will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "rule_suite_result": {
          "description": "The rule results to filter on. When specified, only suites with this result will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposGetRepoRuleSuitesRuleSuiteResult",
              "type": "named"
            }
          },
          "http": {
            "name": "rule_suite_result",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "time_period": {
          "description": "The time period to filter by.  For example, `day` will filter for rule suites that occurred in the past 24 hours, and `week` will filter for insights that occurred in the past 7 days (168 hours).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposGetRepoRuleSuitesTimePeriod",
              "type": "named"
            }
          },
          "http": {
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository rule suites",
      "result_type": {
        "element_type": {
          "name": "RuleSuites",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_repo_ruleset": {
      "request": {
        "url": "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "includes_parents": {
          "description": "Include rulesets configured at higher levels that apply to this repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "includes_parents",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleset_id": {
          "description": "The ID of the ruleset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ruleset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a repository ruleset",
      "result_type": {
        "name": "RepositoryRuleset",
        "type": "named"
      }
    },
    "repos_get_repo_rulesets": {
      "request": {
        "url": "/repos/{owner}/{repo}/rulesets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "includes_parents": {
          "description": "Include rulesets configured at higher levels that apply to this repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "includes_parents",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "targets": {
          "description": "A comma-separated list of rule targets to filter by. If provided, only rulesets that apply to the specified targets will be returned. For example, `branch,tag,push`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "targets",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all repository rulesets",
      "result_type": {
        "element_type": {
          "name": "RepositoryRuleset",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_status_checks_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get status checks protection",
      "result_type": {
        "name": "StatusCheckPolicy",
        "type": "named"
      }
    },
    "repos_get_teams_with_access_to_protected_branch": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get teams with access to the protected branch",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_users_with_access_to_protected_branch": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get users with access to the protected branch",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_get_webhook": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a repository webhook",
      "result_type": {
        "name": "Hook",
        "type": "named"
      }
    },
    "repos_get_webhook_config_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}/config",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a webhook configuration for a repository",
      "result_type": {
        "name": "WebhookConfig",
        "type": "named"
      }
    },
    "repos_get_webhook_delivery": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delivery_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "delivery_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a delivery for a repository webhook",
      "result_type": {
        "name": "HookDelivery",
        "type": "named"
      }
    },
    "repos_list_activities": {
      "request": {
        "url": "/repos/{owner}/{repo}/activity",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "activity_type": {
          "description": "The activity type to filter by.  For example, you can choose to filter by \"force_push\", to see all force pushes to the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListActivitiesActivityType",
              "type": "named"
            }
          },
          "http": {
            "name": "activity_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "actor": {
          "description": "The GitHub username to use to filter by the actor who performed the activity.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "actor",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListActivitiesDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference for the activities you want to list.  The `ref` for a branch can be formatted either as `refs/heads/BRANCH_NAME` or `BRANCH_NAME`, where `BRANCH_NAME` is the name of your branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "time_period": {
          "description": "The time period to filter by.  For example, `day` will filter for activity that occurred in the past 24 hours, and `week` will filter for activity that occurred in the past 7 days (168 hours).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListActivitiesTimePeriod",
              "type": "named"
            }
          },
          "http": {
            "name": "time_period",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository activities",
      "result_type": {
        "element_type": {
          "name": "Activity",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_autolinks": {
      "request": {
        "url": "/repos/{owner}/{repo}/autolinks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get all autolinks of a repository",
      "result_type": {
        "element_type": {
          "name": "Autolink",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_branches": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "protected": {
          "description": "Setting to `true` returns only branches protected by branch protections or rulesets. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "protected",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List branches",
      "result_type": {
        "element_type": {
          "name": "ShortBranch",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_branches_for_head_commit": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "commit_sha": {
          "description": "The SHA of the commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "commit_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List branches for HEAD commit",
      "result_type": {
        "element_type": {
          "name": "BranchShort",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_cache_info": {
      "request": {
        "url": "/repos/{owner}/{repo}/replicas/caches",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository cache replication status",
      "result_type": {
        "element_type": {
          "name": "ReposListCacheInfoResult",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_collaborators": {
      "request": {
        "url": "/repos/{owner}/{repo}/collaborators",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "affiliation": {
          "description": "Filter collaborators returned by their affiliation. `outside` means all outside collaborators of an organization-owned repository. `direct` means all collaborators with permissions to an organization-owned repository, regardless of organization membership status. `all` means all collaborators the authenticated user can see.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListCollaboratorsAffiliation",
              "type": "named"
            }
          },
          "http": {
            "name": "affiliation",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "permission": {
          "description": "Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListCollaboratorsPermission",
              "type": "named"
            }
          },
          "http": {
            "name": "permission",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository collaborators",
      "result_type": {
        "element_type": {
          "name": "Collaborator",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_comments_for_commit": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "commit_sha": {
          "description": "The SHA of the commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "commit_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List commit comments",
      "result_type": {
        "element_type": {
          "name": "CommitComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_commit_comments_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List commit comments for a repository",
      "result_type": {
        "element_type": {
          "name": "CommitComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_commit_statuses_for_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{ref}/statuses",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The commit reference. Can be a commit SHA, branch name (`heads/BRANCH_NAME`), or tag name (`tags/TAG_NAME`). For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List commit statuses for a reference",
      "result_type": {
        "element_type": {
          "name": "Status",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_commits": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "author": {
          "description": "GitHub username or email address to use to filter by commit author.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "author",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "committer": {
          "description": "GitHub username or email address to use to filter by commit committer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "committer",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "path": {
          "description": "Only commits containing this file path will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "path",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sha": {
          "description": "SHA or branch to start listing commits from. Default: the repositorys default branch (usually `main`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sha",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "since": {
          "description": "Only show results that were last updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "until": {
          "description": "Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Due to limitations of Git, timestamps must be between 1970-01-01 and 2099-12-31 (inclusive) or unexpected results may be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "until",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        }
      },
      "description": "List commits",
      "result_type": {
        "element_type": {
          "name": "Commit",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_contributors": {
      "request": {
        "url": "/repos/{owner}/{repo}/contributors",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "anon": {
          "description": "Set to `1` or `true` to include anonymous contributors in results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "anon",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository contributors",
      "result_type": {
        "element_type": {
          "name": "Contributor",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_custom_deployment_rule_integrations": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List custom deployment rule integrations available for an environment",
      "result_type": {
        "name": "ReposListCustomDeploymentRuleIntegrationsResult",
        "type": "named"
      }
    },
    "repos_list_deploy_keys": {
      "request": {
        "url": "/repos/{owner}/{repo}/keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List deploy keys",
      "result_type": {
        "element_type": {
          "name": "DeployKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_deployment_branch_policies": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List deployment branch policies",
      "result_type": {
        "name": "ReposListDeploymentBranchPoliciesResult",
        "type": "named"
      }
    },
    "repos_list_deployment_statuses": {
      "request": {
        "url": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deployment_id": {
          "description": "deployment_id parameter",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "deployment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List deployment statuses",
      "result_type": {
        "element_type": {
          "name": "DeploymentStatus",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_deployments": {
      "request": {
        "url": "/repos/{owner}/{repo}/deployments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment": {
          "description": "The name of the environment that was deployed to (e.g., `staging` or `production`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "environment",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "ref": {
          "description": "The name of the ref. This can be a branch, tag, or SHA.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sha": {
          "description": "The SHA recorded at creation time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sha",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "task": {
          "description": "The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "task",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List deployments",
      "result_type": {
        "element_type": {
          "name": "Deployment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_for_authenticated_user": {
      "request": {
        "url": "/user/repos",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "affiliation": {
          "description": "Comma-separated list of values. Can include:    * `owner`: Repositories that are owned by the authenticated user.    * `collaborator`: Repositories that the user has been added to as a collaborator.    * `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "affiliation",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "Only show repositories updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "direction": {
          "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForAuthenticatedUserDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "Only show repositories updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "date-time"
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForAuthenticatedUserSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "Limit results to repositories of the specified type. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForAuthenticatedUserType",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "description": "Limit results to repositories with the specified visibility.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForAuthenticatedUserVisibility",
              "type": "named"
            }
          },
          "http": {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repositories for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Repository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_for_org": {
      "request": {
        "url": "/orgs/{org}/repos",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForOrgSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "Specifies the types of repositories you want returned. `internal` is not yet supported when a GitHub App calls this endpoint with an installation access token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForOrgType",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List organization repositories",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_for_user": {
      "request": {
        "url": "/users/{username}/repos",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The order to sort by. Default: `asc` when using `full_name`, otherwise `desc`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForUserDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForUserSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "Limit results to repositories of the specified type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForUserType",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repositories for a user",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_forks": {
      "request": {
        "url": "/repos/{owner}/{repo}/forks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The sort order. `stargazers` will sort by star count.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListForksSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List forks",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_invitations": {
      "request": {
        "url": "/repos/{owner}/{repo}/invitations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository invitations",
      "result_type": {
        "element_type": {
          "name": "RepositoryInvitation",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_invitations_for_authenticated_user": {
      "request": {
        "url": "/user/repository_invitations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List repository invitations for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "RepositoryInvitation",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_languages": {
      "request": {
        "url": "/repos/{owner}/{repo}/languages",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository languages",
      "result_type": {
        "name": "Language",
        "type": "named"
      }
    },
    "repos_list_pages_builds": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages/builds",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List GitHub Enterprise Server Pages builds",
      "result_type": {
        "element_type": {
          "name": "PageBuild",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_public": {
      "request": {
        "url": "/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "since": {
          "description": "A repository ID. Only return repositories with an ID greater than this ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "visibility": {
          "description": "Specifies the types of repositories to return. This endpoint will only list repositories available to all users on the enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposListPublicVisibility",
              "type": "named"
            }
          },
          "http": {
            "name": "visibility",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List public repositories",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_pull_requests_associated_with_commit": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "commit_sha": {
          "description": "The SHA of the commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "commit_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List pull requests associated with a commit",
      "result_type": {
        "element_type": {
          "name": "PullRequestSimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_release_assets": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}/assets",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List release assets",
      "result_type": {
        "element_type": {
          "name": "ReleaseAsset",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_releases": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List releases",
      "result_type": {
        "element_type": {
          "name": "Release",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_tag_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/tags/protection",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Closing down - List tag protection states for a repository",
      "result_type": {
        "element_type": {
          "name": "TagProtection",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_tags": {
      "request": {
        "url": "/repos/{owner}/{repo}/tags",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository tags",
      "result_type": {
        "element_type": {
          "name": "Tag",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_teams": {
      "request": {
        "url": "/repos/{owner}/{repo}/teams",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository teams",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_webhook_deliveries": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cursor": {
          "description": "Used for pagination: the starting delivery from which the page of deliveries is fetched. Refer to the `link` header for the next and previous page cursors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cursor",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List deliveries for a repository webhook",
      "result_type": {
        "element_type": {
          "name": "HookDeliveryItem",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_list_webhooks": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List repository webhooks",
      "result_type": {
        "element_type": {
          "name": "Hook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "search_code": {
      "request": {
        "url": "/search/code",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "order": {
          "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchCodeOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "q": {
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query). See \"[Searching code](https://docs.github.com/enterprise-server@3.15/search-github/searching-on-github/searching-code)\" for a detailed list of qualifiers.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub Enterprise Server search infrastructure. Default: [best match](https://docs.github.com/enterprise-server@3.15/rest/search/search#ranking-search-results)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchCodeSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search code",
      "result_type": {
        "name": "SearchCodeResult",
        "type": "named"
      }
    },
    "search_commits": {
      "request": {
        "url": "/search/commits",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "order": {
          "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchCommitsOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "q": {
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query). See \"[Searching commits](https://docs.github.com/enterprise-server@3.15/search-github/searching-on-github/searching-commits)\" for a detailed list of qualifiers.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/enterprise-server@3.15/rest/search/search#ranking-search-results)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchCommitsSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search commits",
      "result_type": {
        "name": "SearchCommitsResult",
        "type": "named"
      }
    },
    "search_issues_and_pull_requests": {
      "request": {
        "url": "/search/issues",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "advanced_search": {
          "description": "Set to `true` to use advanced search. Example: `http://api.github.com/search/issues?q={query}&advanced_search=true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "advanced_search",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "order": {
          "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchIssuesAndPullRequestsOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "q": {
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query). See \"[Searching issues and pull requests](https://docs.github.com/enterprise-server@3.15/search-github/searching-on-github/searching-issues-and-pull-requests)\" for a detailed list of qualifiers.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/enterprise-server@3.15/rest/search/search#ranking-search-results)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchIssuesAndPullRequestsSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search issues and pull requests",
      "result_type": {
        "name": "SearchIssuesAndPullRequestsResult",
        "type": "named"
      }
    },
    "search_labels": {
      "request": {
        "url": "/search/labels",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "order": {
          "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchLabelsOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "q": {
          "description": "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "description": "The id of the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "sort": {
          "description": "Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.15/rest/search/search#ranking-search-results)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchLabelsSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search labels",
      "result_type": {
        "name": "SearchLabelsResult",
        "type": "named"
      }
    },
    "search_repos": {
      "request": {
        "url": "/search/repositories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "order": {
          "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchReposOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "q": {
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query). See \"[Searching for repositories](https://docs.github.com/enterprise-server@3.15/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/enterprise-server@3.15/rest/search/search#ranking-search-results)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchReposSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search repositories",
      "result_type": {
        "name": "SearchReposResult",
        "type": "named"
      }
    },
    "search_topics": {
      "request": {
        "url": "/search/topics",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "q": {
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search topics",
      "result_type": {
        "name": "SearchTopicsResult",
        "type": "named"
      }
    },
    "search_users": {
      "request": {
        "url": "/search/users",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "order": {
          "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchUsersOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "order",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "q": {
          "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/enterprise-server@3.15/rest/search/search#constructing-a-search-query). See \"[Searching users](https://docs.github.com/enterprise-server@3.15/search-github/searching-on-github/searching-users)\" for a detailed list of qualifiers.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub Enterprise Server. Default: [best match](https://docs.github.com/enterprise-server@3.15/rest/search/search#ranking-search-results)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SearchUsersSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Search users",
      "result_type": {
        "name": "SearchUsersResult",
        "type": "named"
      }
    },
    "secret_scanning_get_alert": {
      "request": {
        "url": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a secret scanning alert",
      "result_type": {
        "name": "SecretScanningAlert",
        "type": "named"
      }
    },
    "secret_scanning_get_security_analysis_settings_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/code_security_and_analysis",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get code security and analysis features for an enterprise",
      "result_type": {
        "name": "EnterpriseSecurityAnalysisSettings",
        "type": "named"
      }
    },
    "secret_scanning_list_alerts_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/secret-scanning/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForEnterpriseDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "resolution": {
          "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "resolution",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_type": {
          "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See \"[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.15/enterprise-cloud@latest/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)\" for a complete list of secret types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "secret_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForEnterpriseSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForEnterpriseState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "validity": {
          "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "validity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List secret scanning alerts for an enterprise",
      "result_type": {
        "element_type": {
          "name": "OrganizationSecretScanningAlert",
          "type": "named"
        },
        "type": "array"
      }
    },
    "secret_scanning_list_alerts_for_org": {
      "request": {
        "url": "/orgs/{org}/secret-scanning/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "resolution": {
          "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "resolution",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_type": {
          "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See \"[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.15/enterprise-cloud@latest/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)\" for a complete list of secret types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "secret_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForOrgSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForOrgState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "validity": {
          "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "validity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List secret scanning alerts for an organization",
      "result_type": {
        "element_type": {
          "name": "OrganizationSecretScanningAlert",
          "type": "named"
        },
        "type": "array"
      }
    },
    "secret_scanning_list_alerts_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/secret-scanning/alerts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events after this cursor.  To receive an initial cursor on your first request, include an empty \"after\" query string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for events before this cursor. To receive an initial cursor on your first request, include an empty \"before\" query string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForRepoDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "resolution": {
          "description": "A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are `false_positive`, `wont_fix`, `revoked`, `pattern_edited`, `pattern_deleted` or `used_in_tests`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "resolution",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_type": {
          "description": "A comma-separated list of secret types to return. All default secret patterns are returned. To return generic patterns, pass the token name(s) in the parameter. See \"[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.15/enterprise-cloud@latest/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets)\" for a complete list of secret types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "secret_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by. `created` means when the alert was created. `updated` means when the alert was updated or resolved.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForRepoSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "description": "Set to `open` or `resolved` to only list secret scanning alerts in a specific state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningListAlertsForRepoState",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "validity": {
          "description": "A comma-separated list of validities that, when present, will return alerts that match the validities in this list. Valid options are `active`, `inactive`, and `unknown`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "validity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List secret scanning alerts for a repository",
      "result_type": {
        "element_type": {
          "name": "SecretScanningAlert",
          "type": "named"
        },
        "type": "array"
      }
    },
    "secret_scanning_list_locations_for_alert": {
      "request": {
        "url": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List locations for a secret scanning alert",
      "result_type": {
        "element_type": {
          "name": "SecretScanningLocation",
          "type": "named"
        },
        "type": "array"
      }
    },
    "security_advisories_get_global_advisory": {
      "request": {
        "url": "/advisories/{ghsa_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ghsa_id": {
          "description": "The GHSA (GitHub Security Advisory) identifier of the advisory.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ghsa_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a global security advisory",
      "result_type": {
        "name": "GlobalAdvisory",
        "type": "named"
      }
    },
    "security_advisories_list_global_advisories": {
      "request": {
        "url": "/advisories",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "affects": {
          "description": "If specified, only return advisories that affect any of `package` or `package@version`. A maximum of 1000 packages can be specified. If the query parameter causes the URL to exceed the maximum URL length supported by your client, you must specify fewer packages.  Example: `affects=package1,package2@1.0.0,package3@^2.0.0` or `affects[]=package1&affects[]=package2@1.0.0`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "name": "affects",
            "in": "query",
            "schema": {}
          }
        },
        "after": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results after this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "before": {
          "description": "A cursor, as given in the [Link header](https://docs.github.com/enterprise-server@3.15/rest/guides/using-pagination-in-the-rest-api#using-link-headers). If specified, the query only searches for results before this cursor. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "before",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "cve_id": {
          "description": "If specified, only advisories with this CVE (Common Vulnerabilities and Exposures) identifier will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "cve_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "cwes": {
          "description": "If specified, only advisories with these Common Weakness Enumerations (CWEs) will be returned.  Example: `cwes=79,284,22` or `cwes[]=79&cwes[]=284&cwes[]=22`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "name": "cwes",
            "in": "query",
            "schema": {}
          }
        },
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAdvisoriesListGlobalAdvisoriesDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ecosystem": {
          "description": "If specified, only advisories for these ecosystems will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAdvisoryEcosystems",
              "type": "named"
            }
          },
          "http": {
            "name": "ecosystem",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "epss_percentage": {
          "description": "If specified, only return advisories that have an EPSS percentage score that matches the provided value. The EPSS percentage represents the likelihood of a CVE being exploited.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "epss_percentage",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "epss_percentile": {
          "description": "If specified, only return advisories that have an EPSS percentile score that matches the provided value. The EPSS percentile represents the relative rank of the CVE's likelihood of being exploited compared to other CVEs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "epss_percentile",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ghsa_id": {
          "description": "If specified, only advisories with this GHSA (GitHub Security Advisory) identifier will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ghsa_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "is_withdrawn": {
          "description": "Whether to only return advisories that have been withdrawn.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "is_withdrawn",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "modified": {
          "description": "If specified, only show advisories that were updated or published on a date or date range.  For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.15/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "modified",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 100,
              "minimum": 1
            }
          }
        },
        "published": {
          "description": "If specified, only return advisories that were published on a date or date range.  For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.15/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "published",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "severity": {
          "description": "If specified, only advisories with these severities will be returned.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAdvisoriesListGlobalAdvisoriesSeverity",
              "type": "named"
            }
          },
          "http": {
            "name": "severity",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sort": {
          "description": "The property to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAdvisoriesListGlobalAdvisoriesSort",
              "type": "named"
            }
          },
          "http": {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "If specified, only advisories of this type will be returned. By default, a request with no other parameters defined will only return reviewed advisories that are not malware.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAdvisoriesListGlobalAdvisoriesType",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updated": {
          "description": "If specified, only return advisories that were updated on a date or date range.  For more information on the syntax of the date range, see \"[Understanding the search syntax](https://docs.github.com/enterprise-server@3.15/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "updated",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List global security advisories",
      "result_type": {
        "element_type": {
          "name": "GlobalAdvisory",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_check_permissions_for_project_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check team permissions for a project",
      "result_type": {
        "name": "TeamProject",
        "type": "named"
      }
    },
    "teams_check_permissions_for_project_legacy": {
      "request": {
        "url": "/teams/{team_id}/projects/{project_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Check team permissions for a project (Legacy)",
      "result_type": {
        "name": "TeamProject",
        "type": "named"
      }
    },
    "teams_check_permissions_for_repo_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check team permissions for a repository",
      "result_type": {
        "name": "TeamRepository",
        "type": "named"
      }
    },
    "teams_check_permissions_for_repo_legacy": {
      "request": {
        "url": "/teams/{team_id}/repos/{owner}/{repo}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Check team permissions for a repository (Legacy)",
      "result_type": {
        "name": "TeamRepository",
        "type": "named"
      }
    },
    "teams_external_idp_group_info_for_org": {
      "request": {
        "url": "/orgs/{org}/external-group/{group_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "group_id": {
          "description": "The unique identifier of the group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the \"members\" array results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page for the \"members\" array (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get an external group",
      "result_type": {
        "name": "ExternalGroup",
        "type": "named"
      }
    },
    "teams_get_by_name": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a team by name",
      "result_type": {
        "name": "TeamFull",
        "type": "named"
      }
    },
    "teams_get_discussion_comment_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a discussion comment",
      "result_type": {
        "name": "TeamDiscussionComment",
        "type": "named"
      }
    },
    "teams_get_discussion_comment_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a discussion comment (Legacy)",
      "result_type": {
        "name": "TeamDiscussionComment",
        "type": "named"
      }
    },
    "teams_get_discussion_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a discussion",
      "result_type": {
        "name": "TeamDiscussion",
        "type": "named"
      }
    },
    "teams_get_discussion_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a discussion (Legacy)",
      "result_type": {
        "name": "TeamDiscussion",
        "type": "named"
      }
    },
    "teams_get_legacy": {
      "request": {
        "url": "/teams/{team_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a team (Legacy)",
      "result_type": {
        "name": "TeamFull",
        "type": "named"
      }
    },
    "teams_get_member_legacy": {
      "request": {
        "url": "/teams/{team_id}/members/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get team member (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_get_membership_for_user_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get team membership for a user",
      "result_type": {
        "name": "TeamMembership",
        "type": "named"
      }
    },
    "teams_get_membership_for_user_legacy": {
      "request": {
        "url": "/teams/{team_id}/memberships/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get team membership for a user (Legacy)",
      "result_type": {
        "name": "TeamMembership",
        "type": "named"
      }
    },
    "teams_list": {
      "request": {
        "url": "/orgs/{org}/teams",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List teams",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_child_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/teams",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List child teams",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_child_legacy": {
      "request": {
        "url": "/teams/{team_id}/teams",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List child teams (Legacy)",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_discussion_comments_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsListDiscussionCommentsInOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List discussion comments",
      "result_type": {
        "element_type": {
          "name": "TeamDiscussionComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_discussion_comments_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/comments",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsListDiscussionCommentsLegacyDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List discussion comments (Legacy)",
      "result_type": {
        "element_type": {
          "name": "TeamDiscussionComment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_discussions_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsListDiscussionsInOrgDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "pinned": {
          "description": "Pinned discussions only filter",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "pinned",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List discussions",
      "result_type": {
        "element_type": {
          "name": "TeamDiscussion",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_discussions_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "direction": {
          "description": "The direction to sort the results by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsListDiscussionsLegacyDirection",
              "type": "named"
            }
          },
          "http": {
            "name": "direction",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List discussions (Legacy)",
      "result_type": {
        "element_type": {
          "name": "TeamDiscussion",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_external_idp_groups_for_org": {
      "request": {
        "url": "/orgs/{org}/external-groups",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "display_name": {
          "description": "Limits the list to groups containing the text in the group name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "display_name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "Page token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List external groups in an organization",
      "result_type": {
        "name": "ExternalGroups",
        "type": "named"
      }
    },
    "teams_list_for_authenticated_user": {
      "request": {
        "url": "/user/teams",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List teams for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "TeamFull",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_linked_external_idp_groups_to_team_for_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/external-groups",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List a connection between an external group and a team",
      "result_type": {
        "name": "ExternalGroups",
        "type": "named"
      }
    },
    "teams_list_members_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/members",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "role": {
          "description": "Filters members returned by their role in the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsListMembersInOrgRole",
              "type": "named"
            }
          },
          "http": {
            "name": "role",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List team members",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_members_legacy": {
      "request": {
        "url": "/teams/{team_id}/members",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "role": {
          "description": "Filters members returned by their role in the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsListMembersLegacyRole",
              "type": "named"
            }
          },
          "http": {
            "name": "role",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List team members (Legacy)",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_projects_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/projects",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List team projects",
      "result_type": {
        "element_type": {
          "name": "TeamProject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_projects_legacy": {
      "request": {
        "url": "/teams/{team_id}/projects",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List team projects (Legacy)",
      "result_type": {
        "element_type": {
          "name": "TeamProject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_repos_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/repos",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List team repositories",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "teams_list_repos_legacy": {
      "request": {
        "url": "/teams/{team_id}/repos",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List team repositories (Legacy)",
      "result_type": {
        "element_type": {
          "name": "MinimalRepository",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_check_following_for_user": {
      "request": {
        "url": "/users/{username}/following/{target_user}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "target_user": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "target_user",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a user follows another user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_check_person_is_followed_by_authenticated": {
      "request": {
        "url": "/user/following/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check if a person is followed by the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_get_authenticated": {
      "request": {
        "url": "/user",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Get the authenticated user",
      "result_type": {
        "name": "UsersGetAuthenticatedResult",
        "type": "named"
      }
    },
    "users_get_by_id": {
      "request": {
        "url": "/user/{account_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "account_id": {
          "description": "account_id parameter",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "account_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a user using their ID",
      "result_type": {
        "name": "UsersGetByIdResult",
        "type": "named"
      }
    },
    "users_get_by_username": {
      "request": {
        "url": "/users/{username}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get a user",
      "result_type": {
        "name": "UsersGetByUsernameResult",
        "type": "named"
      }
    },
    "users_get_context_for_user": {
      "request": {
        "url": "/users/{username}/hovercard",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "subject_id": {
          "description": "Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "subject_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "subject_type": {
          "description": "Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsersGetContextForUserSubjectType",
              "type": "named"
            }
          },
          "http": {
            "name": "subject_type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get contextual information for a user",
      "result_type": {
        "name": "Hovercard",
        "type": "named"
      }
    },
    "users_get_gpg_key_for_authenticated_user": {
      "request": {
        "url": "/user/gpg_keys/{gpg_key_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gpg_key_id": {
          "description": "The unique identifier of the GPG key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "gpg_key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a GPG key for the authenticated user",
      "result_type": {
        "name": "GpgKey",
        "type": "named"
      }
    },
    "users_get_public_ssh_key_for_authenticated_user": {
      "request": {
        "url": "/user/keys/{key_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "description": "The unique identifier of the key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get a public SSH key for the authenticated user",
      "result_type": {
        "name": "Key",
        "type": "named"
      }
    },
    "users_get_ssh_signing_key_for_authenticated_user": {
      "request": {
        "url": "/user/ssh_signing_keys/{ssh_signing_key_id}",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ssh_signing_key_id": {
          "description": "The unique identifier of the SSH signing key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ssh_signing_key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Get an SSH signing key for the authenticated user",
      "result_type": {
        "name": "SshSigningKey",
        "type": "named"
      }
    },
    "users_list": {
      "request": {
        "url": "/users",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "since": {
          "description": "A user ID. Only return users with an ID greater than this ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List users",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_emails_for_authenticated_user": {
      "request": {
        "url": "/user/emails",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List email addresses for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Email",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_followed_by_authenticated_user": {
      "request": {
        "url": "/user/following",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List the people the authenticated user follows",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_followers_for_authenticated_user": {
      "request": {
        "url": "/user/followers",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List followers of the authenticated user",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_followers_for_user": {
      "request": {
        "url": "/users/{username}/followers",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List followers of a user",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_following_for_user": {
      "request": {
        "url": "/users/{username}/following",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List the people a user follows",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_gpg_keys_for_authenticated_user": {
      "request": {
        "url": "/user/gpg_keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List GPG keys for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "GpgKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_gpg_keys_for_user": {
      "request": {
        "url": "/users/{username}/gpg_keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List GPG keys for a user",
      "result_type": {
        "element_type": {
          "name": "GpgKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_public_emails_for_authenticated_user": {
      "request": {
        "url": "/user/public_emails",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List public email addresses for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Email",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_public_keys_for_user": {
      "request": {
        "url": "/users/{username}/keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List public keys for a user",
      "result_type": {
        "element_type": {
          "name": "KeySimple",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_public_ssh_keys_for_authenticated_user": {
      "request": {
        "url": "/user/keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List public SSH keys for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Key",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_social_accounts_for_authenticated_user": {
      "request": {
        "url": "/user/social_accounts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List social accounts for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "SocialAccount",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_social_accounts_for_user": {
      "request": {
        "url": "/users/{username}/social_accounts",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List social accounts for a user",
      "result_type": {
        "element_type": {
          "name": "SocialAccount",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_ssh_signing_keys_for_authenticated_user": {
      "request": {
        "url": "/user/ssh_signing_keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "List SSH signing keys for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "SshSigningKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_list_ssh_signing_keys_for_user": {
      "request": {
        "url": "/users/{username}/ssh_signing_keys",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "page": {
          "description": "The page number of the results to fetch. For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "per_page": {
          "description": "The number of results per page (max 100). For more information, see \"[Using pagination in the REST API](https://docs.github.com/enterprise-server@3.15/rest/using-the-rest-api/using-pagination-in-the-rest-api).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List SSH signing keys for a user",
      "result_type": {
        "element_type": {
          "name": "SshSigningKey",
          "type": "named"
        },
        "type": "array"
      }
    }
  },
  "object_types": {
    "ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to add to the runner.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ActionsAddCustomLabelsToSelfHostedRunnerForOrgResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to add to the runner.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ActionsAddCustomLabelsToSelfHostedRunnerForRepoResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsCacheList": {
      "description": "Repository actions caches",
      "fields": {
        "actions_caches": {
          "description": "Array of caches",
          "type": {
            "element_type": {
              "name": "ActionsCacheListActionsCaches",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "Total number of caches",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "actions-cache-list"
    },
    "ActionsCacheListActionsCaches": {
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_accessed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "ref": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size_in_bytes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCacheUsageByRepository": {
      "description": "GitHub Actions Cache Usage by repository.",
      "fields": {
        "active_caches_count": {
          "description": "The number of active caches in the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "active_caches_size_in_bytes": {
          "description": "The sum of the size in bytes of all the active cache items in the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "full_name": {
          "description": "The repository owner and name for the cache usage being shown.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-cache-usage-by-repository"
    },
    "ActionsCacheUsageOrgEnterprise": {
      "fields": {
        "total_active_caches_count": {
          "description": "The count of active caches across all repositories of an enterprise or an organization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_active_caches_size_in_bytes": {
          "description": "The total size in bytes of all active cache items across all repositories of an enterprise or an organization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "actions-cache-usage-org-enterprise"
    },
    "ActionsCacheUsagePolicyEnterprise": {
      "description": "GitHub Actions cache usage policy for an enterprise.",
      "fields": {
        "max_repo_cache_size_limit_in_gb": {
          "description": "For repositories in an enterprise, the maximum value that can be set as the limit for the sum of all caches in a repository, in gigabytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repo_cache_size_limit_in_gb": {
          "description": "For repositories in an enterprise, the default size limit for the sum of all caches in a repository, in gigabytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "actions-cache-usage-policy-enterprise"
    },
    "ActionsCacheUsagePolicyEnterpriseInput": {
      "description": "GitHub Actions cache usage policy for an enterprise.",
      "fields": {
        "max_repo_cache_size_limit_in_gb": {
          "description": "For repositories in an enterprise, the maximum value that can be set as the limit for the sum of all caches in a repository, in gigabytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repo_cache_size_limit_in_gb": {
          "description": "For repositories in an enterprise, the default size limit for the sum of all caches in a repository, in gigabytes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "actions-cache-usage-policy-enterprise"
    },
    "ActionsCacheUsagePolicyForRepository": {
      "description": "GitHub Actions cache usage policy for repository.",
      "fields": {
        "repo_cache_size_limit_in_gb": {
          "description": "The size limit for the sum of all caches, in gigabytes.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "actions-cache-usage-policy-for-repository"
    },
    "ActionsCacheUsagePolicyForRepositoryInput": {
      "description": "GitHub Actions cache usage policy for repository.",
      "fields": {
        "repo_cache_size_limit_in_gb": {
          "description": "The size limit for the sum of all caches, in gigabytes.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "actions-cache-usage-policy-for-repository"
    },
    "ActionsCreateEnvironmentVariableBodyInput": {
      "fields": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCreateOrUpdateEnvironmentSecretBodyInput": {
      "fields": {
        "encrypted_value": {
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#get-an-environment-public-key) endpoint.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
          }
        },
        "key_id": {
          "description": "ID of the key you used to encrypt the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCreateOrUpdateOrgSecretBodyInput": {
      "fields": {
        "encrypted_value": {
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#get-an-organization-public-key) endpoint.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
          }
        },
        "key_id": {
          "description": "ID of the key you used to encrypt the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repository_ids": {
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "visibility": {
          "description": "Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.",
          "type": {
            "name": "ActionsCreateOrUpdateOrgSecretBodyVisibility",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCreateOrUpdateRepoSecretBodyInput": {
      "fields": {
        "encrypted_value": {
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#get-a-repository-public-key) endpoint.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
          }
        },
        "key_id": {
          "description": "ID of the key you used to encrypt the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCreateOrgVariableBodyInput": {
      "fields": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repository_ids": {
          "description": "An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "visibility": {
          "description": "The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.",
          "type": {
            "name": "ActionsCreateOrgVariableBodyVisibility",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCreateRepoVariableBodyInput": {
      "fields": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCreateSelfHostedRunnerGroupForOrgBodyInput": {
      "fields": {
        "allows_public_repositories": {
          "description": "Whether the runner group can be used by `public` repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "Name of the runner group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "restricted_to_workflows": {
          "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "runners": {
          "description": "List of runner IDs to add to the runner group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "selected_repository_ids": {
          "description": "List of repository IDs that can access the runner group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "selected_workflows": {
          "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "description": "Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsCreateSelfHostedRunnerGroupForOrgBodyVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsCreateWorkflowDispatchBodyInput": {
      "fields": {
        "inputs": {
          "description": "Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ref": {
          "description": "The git reference for the workflow. The reference can be a branch or tag name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsEnterprisePermissions": {
      "fields": {
        "allowed_actions": {
          "description": "The permissions policy that controls the actions that are allowed to run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AllowedActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled_organizations": {
          "description": "The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.",
          "type": {
            "name": "EnabledOrganizations",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_actions_url": {
          "description": "The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_organizations_url": {
          "description": "The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-enterprise-permissions"
    },
    "ActionsGenerateRunnerJitconfigForEnterpriseBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the new runner.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner_group_id": {
          "description": "The ID of the runner group to register the runner to.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "work_folder": {
          "description": "The working directory to be used for job execution, relative to the runner install directory.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsGenerateRunnerJitconfigForEnterpriseResult": {
      "fields": {
        "encoded_jit_config": {
          "description": "The base64 encoded runner configuration.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner": {
          "description": "A self hosted runner",
          "type": {
            "name": "Runner",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ActionsGenerateRunnerJitconfigForOrgBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the new runner.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner_group_id": {
          "description": "The ID of the runner group to register the runner to.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "work_folder": {
          "description": "The working directory to be used for job execution, relative to the runner install directory.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsGenerateRunnerJitconfigForOrgResult": {
      "fields": {
        "encoded_jit_config": {
          "description": "The base64 encoded runner configuration.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner": {
          "description": "A self hosted runner",
          "type": {
            "name": "Runner",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ActionsGenerateRunnerJitconfigForRepoBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the new runner.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner_group_id": {
          "description": "The ID of the runner group to register the runner to.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "work_folder": {
          "description": "The working directory to be used for job execution, relative to the runner install directory.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsGenerateRunnerJitconfigForRepoResult": {
      "fields": {
        "encoded_jit_config": {
          "description": "The base64 encoded runner configuration.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner": {
          "description": "A self hosted runner",
          "type": {
            "name": "Runner",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ActionsGetActionsCacheUsageByRepoForOrgResult": {
      "fields": {
        "repository_cache_usages": {
          "type": {
            "element_type": {
              "name": "ActionsCacheUsageByRepository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsGetDefaultWorkflowPermissions": {
      "fields": {
        "can_approve_pull_request_reviews": {
          "description": "Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default_workflow_permissions": {
          "description": "The default workflow permissions granted to the GITHUB_TOKEN when running workflows.",
          "type": {
            "name": "ActionsDefaultWorkflowPermissions",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-get-default-workflow-permissions"
    },
    "ActionsListArtifactsForRepoResult": {
      "fields": {
        "artifacts": {
          "type": {
            "element_type": {
              "name": "Artifact",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListEnvironmentSecretsResult": {
      "fields": {
        "secrets": {
          "type": {
            "element_type": {
              "name": "ActionsSecret",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListEnvironmentVariablesResult": {
      "fields": {
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "variables": {
          "type": {
            "element_type": {
              "name": "ActionsVariable",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ActionsListJobsForWorkflowRunAttemptResult": {
      "fields": {
        "jobs": {
          "type": {
            "element_type": {
              "name": "Job",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListJobsForWorkflowRunResult": {
      "fields": {
        "jobs": {
          "type": {
            "element_type": {
              "name": "Job",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListLabelsForSelfHostedRunnerForOrgResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListLabelsForSelfHostedRunnerForRepoResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListOrgSecretsResult": {
      "fields": {
        "secrets": {
          "type": {
            "element_type": {
              "name": "OrganizationActionsSecret",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListOrgVariablesResult": {
      "fields": {
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "variables": {
          "type": {
            "element_type": {
              "name": "OrganizationActionsVariable",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ActionsListRepoAccessToSelfHostedRunnerGroupInOrgResult": {
      "fields": {
        "repositories": {
          "type": {
            "element_type": {
              "name": "MinimalRepository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "ActionsListRepoOrganizationSecretsResult": {
      "fields": {
        "secrets": {
          "type": {
            "element_type": {
              "name": "ActionsSecret",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListRepoOrganizationVariablesResult": {
      "fields": {
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "variables": {
          "type": {
            "element_type": {
              "name": "ActionsVariable",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ActionsListRepoSecretsResult": {
      "fields": {
        "secrets": {
          "type": {
            "element_type": {
              "name": "ActionsSecret",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListRepoVariablesResult": {
      "fields": {
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "variables": {
          "type": {
            "element_type": {
              "name": "ActionsVariable",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ActionsListRepoWorkflowsResult": {
      "fields": {
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "workflows": {
          "type": {
            "element_type": {
              "name": "Workflow",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ActionsListSelectedReposForOrgSecretResult": {
      "fields": {
        "repositories": {
          "type": {
            "element_type": {
              "name": "MinimalRepository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListSelectedReposForOrgVariableResult": {
      "fields": {
        "repositories": {
          "type": {
            "element_type": {
              "name": "MinimalRepository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListSelectedRepositoriesEnabledGithubActionsOrganizationResult": {
      "fields": {
        "repositories": {
          "type": {
            "element_type": {
              "name": "Repository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "ActionsListSelfHostedRunnerGroupsForOrgResult": {
      "fields": {
        "runner_groups": {
          "type": {
            "element_type": {
              "name": "RunnerGroupsOrg",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "ActionsListSelfHostedRunnersForOrgResult": {
      "fields": {
        "runners": {
          "type": {
            "element_type": {
              "name": "Runner",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListSelfHostedRunnersForRepoResult": {
      "fields": {
        "runners": {
          "type": {
            "element_type": {
              "name": "Runner",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListSelfHostedRunnersInGroupForOrgResult": {
      "fields": {
        "runners": {
          "type": {
            "element_type": {
              "name": "Runner",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "ActionsListWorkflowRunArtifactsResult": {
      "fields": {
        "artifacts": {
          "type": {
            "element_type": {
              "name": "Artifact",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsListWorkflowRunsForRepoResult": {
      "fields": {
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "workflow_runs": {
          "type": {
            "element_type": {
              "name": "WorkflowRun",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ActionsListWorkflowRunsResult": {
      "fields": {
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "workflow_runs": {
          "type": {
            "element_type": {
              "name": "WorkflowRun",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ActionsOrganizationPermissions": {
      "fields": {
        "allowed_actions": {
          "description": "The permissions policy that controls the actions that are allowed to run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AllowedActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled_repositories": {
          "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions.",
          "type": {
            "name": "EnabledRepositories",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_actions_url": {
          "description": "The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repositories_url": {
          "description": "The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-organization-permissions"
    },
    "ActionsPublicKey": {
      "description": "The public key used for setting Actions Secrets.",
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "key": {
          "description": "The Base64 encoded public key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "key_id": {
          "description": "The identifier for the key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-public-key"
    },
    "ActionsReRunJobForWorkflowRunBodyInput": {
      "fields": {
        "enable_debug_logging": {
          "description": "Whether to enable debug logging for the re-run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActionsReRunWorkflowBodyInput": {
      "fields": {
        "enable_debug_logging": {
          "description": "Whether to enable debug logging for the re-run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActionsReRunWorkflowFailedJobsBodyInput": {
      "fields": {
        "enable_debug_logging": {
          "description": "Whether to enable debug logging for the re-run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsRepositoryPermissions": {
      "fields": {
        "allowed_actions": {
          "description": "The permissions policy that controls the actions that are allowed to run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AllowedActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Whether GitHub Actions is enabled on the repository.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "selected_actions_url": {
          "description": "The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-repository-permissions"
    },
    "ActionsReviewCustomGatesForRunBodyInput": {
      "fields": {
        "comment": {
          "description": "Comment associated with the pending deployment protection rule. **Required when state is not provided.**",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment_name": {
          "description": "The name of the environment to approve or reject.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "Whether to approve or reject deployment to the specified environments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReviewCustomGatesStateRequiredState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsReviewPendingDeploymentsForRunBodyInput": {
      "fields": {
        "comment": {
          "description": "A comment to accompany the deployment review",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment_ids": {
          "description": "The list of environment ids to approve or reject",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "state": {
          "description": "Whether to approve or reject deployment to the specified environments.",
          "type": {
            "name": "ActionsReviewPendingDeploymentsForRunBodyState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsSecret": {
      "description": "Set secrets for GitHub Actions.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "actions-secret"
    },
    "ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ActionsSetCustomLabelsForSelfHostedRunnerForOrgResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ActionsSetCustomLabelsForSelfHostedRunnerForRepoResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ActionsSetCustomOidcSubClaimForRepoBodyInput": {
      "description": "Actions OIDC subject customization for a repository",
      "fields": {
        "include_claim_keys": {
          "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "use_default": {
          "description": "Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActionsSetDefaultWorkflowPermissionsInput": {
      "fields": {
        "can_approve_pull_request_reviews": {
          "description": "Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default_workflow_permissions": {
          "description": "The default workflow permissions granted to the GITHUB_TOKEN when running workflows.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsDefaultWorkflowPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-set-default-workflow-permissions"
    },
    "ActionsSetGithubActionsPermissionsOrganizationBodyInput": {
      "fields": {
        "allowed_actions": {
          "description": "The permissions policy that controls the actions that are allowed to run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AllowedActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled_repositories": {
          "description": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions.",
          "type": {
            "name": "EnabledRepositories",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsSetGithubActionsPermissionsRepositoryBodyInput": {
      "fields": {
        "allowed_actions": {
          "description": "The permissions policy that controls the actions that are allowed to run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AllowedActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "Whether GitHub Actions is enabled on the repository.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodyInput": {
      "fields": {
        "selected_repository_ids": {
          "description": "List of repository IDs that can access the runner group.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "ActionsSetSelectedReposForOrgSecretBodyInput": {
      "fields": {
        "selected_repository_ids": {
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.15/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "ActionsSetSelectedReposForOrgVariableBodyInput": {
      "fields": {
        "selected_repository_ids": {
          "description": "The IDs of the repositories that can access the organization variable.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodyInput": {
      "fields": {
        "selected_repository_ids": {
          "description": "List of repository IDs to enable for GitHub Actions.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "ActionsSetSelfHostedRunnersInGroupForOrgBodyInput": {
      "fields": {
        "runners": {
          "description": "List of runner IDs to add to the runner group.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "ActionsUpdateEnvironmentVariableBodyInput": {
      "fields": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsUpdateOrgVariableBodyInput": {
      "fields": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repository_ids": {
          "description": "An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "visibility": {
          "description": "The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsUpdateOrgVariableBodyVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsUpdateRepoVariableBodyInput": {
      "fields": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsUpdateSelfHostedRunnerGroupForOrgBodyInput": {
      "fields": {
        "allows_public_repositories": {
          "description": "Whether the runner group can be used by `public` repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "Name of the runner group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "restricted_to_workflows": {
          "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "selected_workflows": {
          "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "description": "Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsUpdateSelfHostedRunnerGroupForOrgBodyVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActionsVariable": {
      "fields": {
        "created_at": {
          "description": "The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-variable"
    },
    "ActionsWorkflowAccessToRepository": {
      "fields": {
        "access_level": {
          "description": "Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the repository.  `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization. `enterprise` level access allows sharing across the enterprise.",
          "type": {
            "name": "ActionsWorkflowAccessToRepositoryAccessLevel",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-workflow-access-to-repository"
    },
    "ActionsWorkflowAccessToRepositoryInput": {
      "fields": {
        "access_level": {
          "description": "Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the repository.  `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization. `enterprise` level access allows sharing across the enterprise.",
          "type": {
            "name": "ActionsWorkflowAccessToRepositoryAccessLevel",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "actions-workflow-access-to-repository"
    },
    "Activity": {
      "description": "Activity",
      "fields": {
        "activity_type": {
          "description": "The type of the activity that was performed.",
          "type": {
            "name": "ActivityActivityType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "actor": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "after": {
          "description": "The SHA of the commit after the activity.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "before": {
          "description": "The SHA of the commit before the activity.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ref": {
          "description": "The full Git reference, formatted as `refs/heads/`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "timestamp": {
          "description": "The time when the activity occurred.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "activity"
    },
    "ActivityListReposStarredByUserResult": {
      "fields": {
        "allow_auto_merge": {
          "description": "Whether to allow Auto-merge to be used on pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_forking": {
          "description": "Whether to allow forking this repo",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "description": "Whether to allow merge commits for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "description": "Whether to allow rebase merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "description": "Whether to allow squash merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_update_branch": {
          "description": "Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "anonymous_access_enabled": {
          "description": "Whether anonymous git access is enabled for this repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archive_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "archived": {
          "description": "Whether the repository is archived.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "assignees_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blobs_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "branches_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clone_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "collaborators_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "compare_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contributors_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "default_branch": {
          "description": "The default branch of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delete_branch_on_merge": {
          "description": "Whether to delete head branches when pull requests are merged",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deployments_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "downloads_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "fork": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "forks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "full_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_commits_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_refs_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_tags_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_discussions": {
          "description": "Whether discussions are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_downloads": {
          "description": "Whether downloads are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "description": "Whether issues are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "description": "Whether projects are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "description": "Whether the wiki is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "hooks_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "is_template": {
          "description": "Whether this repository acts as a template that can be used to generate new repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issue_comment_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issue_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keys_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "languages_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "license": {
          "description": "License Simple",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LicenseSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "master_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_message": {
          "description": "The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_title": {
          "description": "The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merges_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "milestones_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mirror_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "name": {
          "description": "The name of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifications_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open_issues": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "description": "Whether the repository is private or public.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pulls_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "releases_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo": {
          "description": "A repository on GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Repository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "size": {
          "description": "The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "squash_merge_commit_message": {
          "description": "The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositorySquashMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "squash_merge_commit_title": {
          "description": "The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositorySquashMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ssh_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stargazers_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stargazers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "statuses_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscribers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscription_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "svn_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "tags_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "temp_clone_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "topics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trees_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "use_squash_pr_title_as_default": {
          "description": "Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "watchers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "watchers_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "web_commit_signoff_required": {
          "description": "Whether to require contributors to sign off on web-based commits",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActivityListStargazersForRepoResult": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActivityMarkNotificationsAsReadBodyInput": {
      "fields": {
        "last_read_at": {
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "read": {
          "description": "Whether the notification has been read.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActivityMarkNotificationsAsReadResult": {
      "fields": {
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActivityMarkRepoNotificationsAsReadBodyInput": {
      "fields": {
        "last_read_at": {
          "description": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "ActivityMarkRepoNotificationsAsReadResult": {
      "fields": {
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ActivitySetRepoSubscriptionBodyInput": {
      "fields": {
        "ignored": {
          "description": "Determines if all notifications should be blocked from this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subscribed": {
          "description": "Determines if notifications should be received from this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ActivitySetThreadSubscriptionBodyInput": {
      "fields": {
        "ignored": {
          "description": "Whether to block all notifications from a thread.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "Actor": {
      "description": "Actor",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "display_login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "actor"
    },
    "AdvancedSecurityActiveCommitters": {
      "fields": {
        "maximum_advanced_security_committers": {
          "description": "The total number of GitHub Advanced Security licences required if all repositories were to enable GitHub Advanced Security",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "purchased_advanced_security_committers": {
          "description": "The total number of GitHub Advanced Security licences purchased",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repositories": {
          "type": {
            "element_type": {
              "name": "AdvancedSecurityActiveCommittersRepository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_advanced_security_committers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "advanced-security-active-committers"
    },
    "AdvancedSecurityActiveCommittersRepository": {
      "fields": {
        "advanced_security_committers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "advanced_security_committers_breakdown": {
          "type": {
            "element_type": {
              "name": "AdvancedSecurityActiveCommittersUser",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "advanced-security-active-committers-repository"
    },
    "AdvancedSecurityActiveCommittersUser": {
      "fields": {
        "last_pushed_date": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_pushed_email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "advanced-security-active-committers-user"
    },
    "Announcement": {
      "description": "Enterprise global announcement",
      "fields": {
        "announcement": {
          "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.15/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "user_dismissible": {
          "description": "Whether an announcement can be dismissed by the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "announcement"
    },
    "AnnouncementBanner": {
      "description": "Announcement at either the repository, organization, or enterprise level",
      "fields": {
        "announcement": {
          "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.15/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "user_dismissible": {
          "description": "Whether an announcement can be dismissed by the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "announcement-banner"
    },
    "AnnouncementInput": {
      "description": "Enterprise global announcement",
      "fields": {
        "announcement": {
          "description": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.15/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expires_at": {
          "description": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "user_dismissible": {
          "description": "Whether an announcement can be dismissed by the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "announcement"
    },
    "ApiOverview": {
      "description": "Api Overview",
      "fields": {
        "domains": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApiOverviewDomains",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "installed_version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "packages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "verifiable_password_authentication": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "api-overview"
    },
    "ApiOverviewDomains": {
      "fields": {
        "actions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "actions_inbound": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApiOverviewDomainsActionsInbound",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "artifact_attestations": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApiOverviewDomainsArtifactAttestations",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "codespaces": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "copilot": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "packages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "website": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ApiOverviewDomainsActionsInbound": {
      "fields": {
        "full_domains": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "wildcard_domains": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ApiOverviewDomainsArtifactAttestations": {
      "fields": {
        "services": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trust_domain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AppPermissions": {
      "description": "The permissions granted to the user access token.",
      "fields": {
        "actions": {
          "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "administration": {
          "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsAdministration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "checks": {
          "description": "The level of permission to grant the access token for checks on code.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsChecks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "codespaces": {
          "description": "The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsCodespaces",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents": {
          "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsContents",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_secrets": {
          "description": "The level of permission to grant the access token to manage Dependabot secrets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsDependabotSecrets",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "deployments": {
          "description": "The level of permission to grant the access token for deployments and deployment statuses.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsDeployments",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email_addresses": {
          "description": "The level of permission to grant the access token to manage the email addresses belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsEmailAddresses",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enterprise_administration": {
          "description": "The level of permission to grant the access token to list and manage repositories a user is starring.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsEnterpriseAdministration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environments": {
          "description": "The level of permission to grant the access token for managing repository environments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsEnvironments",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "description": "The level of permission to grant the access token to manage the followers belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsFollowers",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_ssh_keys": {
          "description": "The level of permission to grant the access token to manage git SSH keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsGitSshKeys",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gpg_keys": {
          "description": "The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsGpgKeys",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "interaction_limits": {
          "description": "The level of permission to grant the access token to view and manage interaction limits on a repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsInteractionLimits",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues": {
          "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsIssues",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members": {
          "description": "The level of permission to grant the access token for organization teams and members.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsMembers",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadata": {
          "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsMetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_administration": {
          "description": "The level of permission to grant the access token to manage access to an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationAdministration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_announcement_banners": {
          "description": "The level of permission to grant the access token to view and manage announcement banners for an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationAnnouncementBanners",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_copilot_seat_management": {
          "description": "The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCopilotSeatManagement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_custom_org_roles": {
          "description": "The level of permission to grant the access token for custom organization roles management.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCustomOrgRoles",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_custom_properties": {
          "description": "The level of permission to grant the access token for custom property management.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCustomProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_custom_roles": {
          "description": "The level of permission to grant the access token for custom repository roles management.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCustomRoles",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_events": {
          "description": "The level of permission to grant the access token to view events triggered by an activity in an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationEvents",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_hooks": {
          "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationHooks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_packages": {
          "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPackages",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_personal_access_token_requests": {
          "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPersonalAccessTokenRequests",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_personal_access_tokens": {
          "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPersonalAccessTokens",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_plan": {
          "description": "The level of permission to grant the access token for viewing an organization's plan.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPlan",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_projects": {
          "description": "The level of permission to grant the access token to manage organization projects and projects public preview (where available).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationProjects",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_secrets": {
          "description": "The level of permission to grant the access token to manage organization secrets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationSecrets",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_self_hosted_runners": {
          "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationSelfHostedRunners",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_user_blocking": {
          "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationUserBlocking",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "packages": {
          "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsPackages",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pages": {
          "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsPages",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile": {
          "description": "The level of permission to grant the access token to manage the profile settings belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pull_requests": {
          "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsPullRequests",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_custom_properties": {
          "description": "The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsRepositoryCustomProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_hooks": {
          "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsRepositoryHooks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_projects": {
          "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsRepositoryProjects",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_alerts": {
          "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSecretScanningAlerts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secrets": {
          "description": "The level of permission to grant the access token to manage repository secrets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSecrets",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "security_events": {
          "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSecurityEvents",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file": {
          "description": "The level of permission to grant the access token to manage just a single file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSingleFile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starring": {
          "description": "The level of permission to grant the access token to list and manage repositories a user is starring.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsStarring",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statuses": {
          "description": "The level of permission to grant the access token for commit statuses.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsStatuses",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "team_discussions": {
          "description": "The level of permission to grant the access token to manage team discussions and related comments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsTeamDiscussions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vulnerability_alerts": {
          "description": "The level of permission to grant the access token to manage Dependabot alerts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsVulnerabilityAlerts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workflows": {
          "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsWorkflows",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "app-permissions"
    },
    "AppPermissionsInput": {
      "description": "The permissions granted to the user access token.",
      "fields": {
        "actions": {
          "description": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "administration": {
          "description": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsAdministration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "checks": {
          "description": "The level of permission to grant the access token for checks on code.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsChecks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "codespaces": {
          "description": "The level of permission to grant the access token to create, edit, delete, and list Codespaces.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsCodespaces",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents": {
          "description": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsContents",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_secrets": {
          "description": "The level of permission to grant the access token to manage Dependabot secrets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsDependabotSecrets",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "deployments": {
          "description": "The level of permission to grant the access token for deployments and deployment statuses.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsDeployments",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email_addresses": {
          "description": "The level of permission to grant the access token to manage the email addresses belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsEmailAddresses",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enterprise_administration": {
          "description": "The level of permission to grant the access token to list and manage repositories a user is starring.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsEnterpriseAdministration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environments": {
          "description": "The level of permission to grant the access token for managing repository environments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsEnvironments",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "description": "The level of permission to grant the access token to manage the followers belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsFollowers",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_ssh_keys": {
          "description": "The level of permission to grant the access token to manage git SSH keys.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsGitSshKeys",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gpg_keys": {
          "description": "The level of permission to grant the access token to view and manage GPG keys belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsGpgKeys",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "interaction_limits": {
          "description": "The level of permission to grant the access token to view and manage interaction limits on a repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsInteractionLimits",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues": {
          "description": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsIssues",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members": {
          "description": "The level of permission to grant the access token for organization teams and members.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsMembers",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadata": {
          "description": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsMetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_administration": {
          "description": "The level of permission to grant the access token to manage access to an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationAdministration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_announcement_banners": {
          "description": "The level of permission to grant the access token to view and manage announcement banners for an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationAnnouncementBanners",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_copilot_seat_management": {
          "description": "The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in public preview and is subject to change.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCopilotSeatManagement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_custom_org_roles": {
          "description": "The level of permission to grant the access token for custom organization roles management.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCustomOrgRoles",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_custom_properties": {
          "description": "The level of permission to grant the access token for custom property management.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCustomProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_custom_roles": {
          "description": "The level of permission to grant the access token for custom repository roles management.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationCustomRoles",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_events": {
          "description": "The level of permission to grant the access token to view events triggered by an activity in an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationEvents",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_hooks": {
          "description": "The level of permission to grant the access token to manage the post-receive hooks for an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationHooks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_packages": {
          "description": "The level of permission to grant the access token for organization packages published to GitHub Packages.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPackages",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_personal_access_token_requests": {
          "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPersonalAccessTokenRequests",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_personal_access_tokens": {
          "description": "The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPersonalAccessTokens",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_plan": {
          "description": "The level of permission to grant the access token for viewing an organization's plan.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationPlan",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_projects": {
          "description": "The level of permission to grant the access token to manage organization projects and projects public preview (where available).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationProjects",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_secrets": {
          "description": "The level of permission to grant the access token to manage organization secrets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationSecrets",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_self_hosted_runners": {
          "description": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationSelfHostedRunners",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_user_blocking": {
          "description": "The level of permission to grant the access token to view and manage users blocked by the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsOrganizationUserBlocking",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "packages": {
          "description": "The level of permission to grant the access token for packages published to GitHub Packages.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsPackages",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pages": {
          "description": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsPages",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile": {
          "description": "The level of permission to grant the access token to manage the profile settings belonging to a user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pull_requests": {
          "description": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsPullRequests",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_custom_properties": {
          "description": "The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsRepositoryCustomProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_hooks": {
          "description": "The level of permission to grant the access token to manage the post-receive hooks for a repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsRepositoryHooks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_projects": {
          "description": "The level of permission to grant the access token to manage repository projects, columns, and cards.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsRepositoryProjects",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_alerts": {
          "description": "The level of permission to grant the access token to view and manage secret scanning alerts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSecretScanningAlerts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secrets": {
          "description": "The level of permission to grant the access token to manage repository secrets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSecrets",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "security_events": {
          "description": "The level of permission to grant the access token to view and manage security events like code scanning alerts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSecurityEvents",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file": {
          "description": "The level of permission to grant the access token to manage just a single file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsSingleFile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starring": {
          "description": "The level of permission to grant the access token to list and manage repositories a user is starring.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsStarring",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statuses": {
          "description": "The level of permission to grant the access token for commit statuses.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsStatuses",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "team_discussions": {
          "description": "The level of permission to grant the access token to manage team discussions and related comments.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsTeamDiscussions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vulnerability_alerts": {
          "description": "The level of permission to grant the access token to manage Dependabot alerts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsVulnerabilityAlerts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workflows": {
          "description": "The level of permission to grant the access token to update GitHub Actions workflow files.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsWorkflows",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "app-permissions"
    },
    "ApplicationGrant": {
      "description": "The authorization associated with an OAuth Access.",
      "fields": {
        "app": {
          "type": {
            "name": "ApplicationGrantApp",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "scopes": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "application-grant"
    },
    "ApplicationGrantApp": {
      "fields": {
        "client_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "AppsCheckTokenBodyInput": {
      "fields": {
        "access_token": {
          "description": "The access_token of the OAuth or GitHub application.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AppsCreateInstallationAccessTokenBodyInput": {
      "fields": {
        "permissions": {
          "description": "The permissions granted to the user access token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories": {
          "description": "List of repository names that the token should have access to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_ids": {
          "description": "List of repository IDs that the token should have access to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "AppsDeleteAuthorizationBodyInput": {
      "fields": {
        "access_token": {
          "description": "The OAuth access token used to authenticate to the GitHub API.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AppsDeleteTokenBodyInput": {
      "fields": {
        "access_token": {
          "description": "The OAuth access token used to authenticate to the GitHub API.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AppsListInstallationReposForAuthenticatedUserResult": {
      "fields": {
        "repositories": {
          "type": {
            "element_type": {
              "name": "Repository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository_selection": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AppsListInstallationsForAuthenticatedUserResult": {
      "fields": {
        "installations": {
          "type": {
            "element_type": {
              "name": "Installation",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AppsListReposAccessibleToInstallationResult": {
      "fields": {
        "repositories": {
          "type": {
            "element_type": {
              "name": "Repository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository_selection": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AppsResetTokenBodyInput": {
      "fields": {
        "access_token": {
          "description": "The access_token of the OAuth or GitHub application.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AppsScopeTokenBodyInput": {
      "fields": {
        "access_token": {
          "description": "The access token used to authenticate to the GitHub API.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "The permissions granted to the user access token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories": {
          "description": "The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_ids": {
          "description": "The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "target": {
          "description": "The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_id": {
          "description": "The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AppsUpdateWebhookConfigForAppBodyInput": {
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "Artifact": {
      "description": "An artifact",
      "fields": {
        "archive_download_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "expired": {
          "description": "Whether or not the artifact has expired.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "expires_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the artifact.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size_in_bytes": {
          "description": "The size in bytes of the artifact.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workflow_run": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ArtifactWorkflowRun",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "artifact"
    },
    "ArtifactWorkflowRun": {
      "fields": {
        "head_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head_repository_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "head_sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repository_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AuditLogEvent": {
      "fields": {
        "@timestamp": {
          "description": "The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "_document_id": {
          "description": "A unique identifier for an audit event.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "action": {
          "description": "The name of the action that was performed, for example `user.login` or `repo.create`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "active": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "active_was": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "actor": {
          "description": "The actor who performed the action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "actor_id": {
          "description": "The id of the actor who performed the action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "actor_location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuditLogEventActorLocation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "blocked_user": {
          "description": "The username of the account being blocked.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "business": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "business_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "config": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "config_was": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "content_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "description": "The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "data": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deploy_key_fingerprint": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "emoji": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "events_were": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "explanation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fingerprint": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hook_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "limited_availability": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "old_user": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "openssh_public_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "operation_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "org": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "org_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "previous_visibility": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "read_only": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repo": {
          "description": "The name of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository": {
          "description": "The name of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_public": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "target_login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "team": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "transport_protocol": {
          "description": "The type of protocol (for example, HTTP or SSH) used to transfer Git data.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "transport_protocol_name": {
          "description": "A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "The user that was affected by the action performed (if available).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "visibility": {
          "description": "The repository visibility, for example `public` or `private`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "audit-log-event"
    },
    "AuditLogEventActorLocation": {
      "fields": {
        "country_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthenticationToken": {
      "description": "Authentication Token",
      "fields": {
        "expires_at": {
          "description": "The time this token expires",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories": {
          "description": "The repositories this token has access to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Repository",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository_selection": {
          "description": "Describe whether all repositories have been selected or there's a selection involved",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticationTokenRepositorySelection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token": {
          "description": "The token used for authentication",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "authentication-token"
    },
    "Authorization": {
      "description": "The authorization for an OAuth app, GitHub App, or a Personal Access Token.",
      "fields": {
        "app": {
          "type": {
            "name": "AuthorizationApp",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "expires_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "fingerprint": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hashed_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "installation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ScopedInstallation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "note": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "scopes": {
          "description": "A list of scopes that this authorization is in.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_last_eight": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "authorization"
    },
    "AuthorizationApp": {
      "fields": {
        "client_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "AutoMerge": {
      "description": "The status of auto merging a pull request.",
      "fields": {
        "commit_message": {
          "description": "Commit message for the merge commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_title": {
          "description": "Title for the merge commit message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled_by": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "merge_method": {
          "description": "The merge method to use.",
          "type": {
            "name": "AutoMergeMergeMethod",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "auto-merge"
    },
    "Autolink": {
      "description": "An autolink reference.",
      "fields": {
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_alphanumeric": {
          "description": "Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "key_prefix": {
          "description": "The prefix of a key that is linkified.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url_template": {
          "description": "A template for the target URL that is generated if a key was found.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "autolink"
    },
    "BaseGist": {
      "description": "Base Gist",
      "fields": {
        "comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "commits_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "files": {
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "forks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "forks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "git_pull_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "git_push_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "history": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "public": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "truncated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "base-gist"
    },
    "Blob": {
      "description": "Blob",
      "fields": {
        "content": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "encoding": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "highlighted_content": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "blob"
    },
    "BranchProtection": {
      "description": "Branch Protection",
      "fields": {
        "allow_deletions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionAllowDeletions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "allow_force_pushes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionAllowForcePushes",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "allow_fork_syncing": {
          "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionAllowForkSyncing",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "block_creations": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionBlockCreations",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enforce_admins": {
          "description": "Protected Branch Admin Enforced",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchAdminEnforced",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lock_branch": {
          "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionLockBranch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "protection_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "required_conversation_resolution": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionRequiredConversationResolution",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_linear_history": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionRequiredLinearHistory",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_pull_request_reviews": {
          "description": "Protected Branch Pull Request Review",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchPullRequestReview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_signatures": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtectionRequiredSignatures",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_status_checks": {
          "description": "Protected Branch Required Status Check",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchRequiredStatusCheck",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "restrictions": {
          "description": "Branch Restriction Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchRestrictionPolicy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "branch-protection"
    },
    "BranchProtectionAllowDeletions": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BranchProtectionAllowForcePushes": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BranchProtectionAllowForkSyncing": {
      "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BranchProtectionBlockCreations": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BranchProtectionLockBranch": {
      "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BranchProtectionRequiredConversationResolution": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BranchProtectionRequiredLinearHistory": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BranchProtectionRequiredSignatures": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "BranchRestrictionPolicy": {
      "description": "Branch Restriction Policy",
      "fields": {
        "apps": {
          "type": {
            "element_type": {
              "name": "BranchRestrictionPolicyApps",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "apps_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams": {
          "type": {
            "element_type": {
              "name": "BranchRestrictionPolicyTeams",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "users": {
          "type": {
            "element_type": {
              "name": "BranchRestrictionPolicyUsers",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "users_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "branch-restriction-policy"
    },
    "BranchRestrictionPolicyApps": {
      "fields": {
        "client_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "external_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchRestrictionPolicyAppsOwner",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchRestrictionPolicyAppsPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "slug": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BranchRestrictionPolicyAppsOwner": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hooks_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "issues_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public_members_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BranchRestrictionPolicyAppsPermissions": {
      "fields": {
        "contents": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BranchRestrictionPolicyTeams": {
      "fields": {
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "members_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permission": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privacy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "slug": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BranchRestrictionPolicyUsers": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BranchShort": {
      "description": "Branch Short",
      "fields": {
        "commit": {
          "type": {
            "name": "BranchShortCommit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "protected": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "branch-short"
    },
    "BranchShortCommit": {
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BranchWithProtection": {
      "description": "Branch With Protection",
      "fields": {
        "_links": {
          "type": {
            "name": "BranchWithProtectionLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "commit": {
          "description": "Commit",
          "type": {
            "name": "Commit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pattern": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "protected": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "protection": {
          "description": "Branch Protection",
          "type": {
            "name": "BranchProtection",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "protection_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "required_approving_review_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "branch-with-protection"
    },
    "BranchWithProtectionLinks": {
      "fields": {
        "html": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "self": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "CheckAnnotation": {
      "description": "Check Annotation",
      "fields": {
        "annotation_level": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blob_href": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "end_column": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "end_line": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "raw_details": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_column": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "start_line": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "check-annotation"
    },
    "CheckAutomatedSecurityFixes": {
      "description": "Check Dependabot security updates",
      "fields": {
        "enabled": {
          "description": "Whether Dependabot security updates are enabled for the repository.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "paused": {
          "description": "Whether Dependabot security updates are paused for the repository.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "check-automated-security-fixes"
    },
    "CheckRun": {
      "description": "A check performed on the code of a given code change",
      "fields": {
        "app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "check_suite": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CheckRunCheckSuite",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "completed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "conclusion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CheckRunConclusion",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "deployment": {
          "description": "A deployment created as the result of an Actions check run from a workflow that references an environment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "details_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "external_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head_sha": {
          "description": "The SHA of the commit that is being checked.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The id of the check.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "description": "The name of the check.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "output": {
          "type": {
            "name": "CheckRunOutput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_requests": {
          "description": "Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.",
          "type": {
            "element_type": {
              "name": "PullRequestMinimal",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "started_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "description": "The phase of the lifecycle that the check is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check runs.",
          "type": {
            "name": "CheckRunStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "check-run"
    },
    "CheckRunCheckSuite": {
      "fields": {
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "CheckRunOutput": {
      "fields": {
        "annotations_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "annotations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "summary": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CheckSuite": {
      "description": "A suite of checks performed on the code of a given code change",
      "fields": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "before": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "check_runs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "conclusion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CheckSuiteConclusion",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "head_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head_commit": {
          "description": "A commit.",
          "type": {
            "name": "SimpleCommit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "head_sha": {
          "description": "The SHA of the head commit that is being checked.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "latest_check_runs_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pull_requests": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PullRequestMinimal",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rerequestable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "runs_rerequestable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "status": {
          "description": "The phase of the lifecycle that the check suite is currently in. Statuses of waiting, requested, and pending are reserved for GitHub Actions check suites.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CheckSuiteStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "check-suite"
    },
    "CheckSuitePreference": {
      "description": "Check suite configuration preferences for a repository.",
      "fields": {
        "preferences": {
          "type": {
            "name": "CheckSuitePreferencePreferences",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "check-suite-preference"
    },
    "CheckSuitePreferencePreferences": {
      "fields": {
        "auto_trigger_checks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CheckSuitePreferencePreferencesAutoTriggerChecks",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CheckSuitePreferencePreferencesAutoTriggerChecks": {
      "fields": {
        "app_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "setting": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ChecksCreateSuiteBodyInput": {
      "fields": {
        "head_sha": {
          "description": "The sha of the head commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChecksListForRefResult": {
      "fields": {
        "check_runs": {
          "type": {
            "element_type": {
              "name": "CheckRun",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ChecksListForSuiteResult": {
      "fields": {
        "check_runs": {
          "type": {
            "element_type": {
              "name": "CheckRun",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ChecksListSuitesForRefResult": {
      "fields": {
        "check_suites": {
          "type": {
            "element_type": {
              "name": "CheckSuite",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ChecksSetSuitesPreferencesBodyAutoTriggerChecksInput": {
      "fields": {
        "app_id": {
          "description": "The `id` of the GitHub App.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "setting": {
          "description": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ChecksSetSuitesPreferencesBodyInput": {
      "fields": {
        "auto_trigger_checks": {
          "description": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ChecksSetSuitesPreferencesBodyAutoTriggerChecksInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CodeOfConduct": {
      "description": "Code Of Conduct",
      "fields": {
        "body": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-of-conduct"
    },
    "CodeOfConductSimple": {
      "description": "Code of Conduct Simple",
      "fields": {
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-of-conduct-simple"
    },
    "CodeScanningAlert": {
      "fields": {
        "created_at": {
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissal_approved_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_at": {
          "description": "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_comment": {
          "description": "The dismissal comment associated with the dismissal of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 280
          }
        },
        "dismissed_reason": {
          "description": "**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertDismissedReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fixed_at": {
          "description": "The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The GitHub URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "instances_url": {
          "description": "The REST API URL for fetching the list of instances for an alert.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "most_recent_instance": {
          "type": {
            "name": "CodeScanningAlertInstance",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "number": {
          "description": "The security alert number.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "rule": {
          "type": {
            "name": "CodeScanningAlertRule",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "State of a code scanning alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool": {
          "type": {
            "name": "CodeScanningAnalysisTool",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The REST API URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-scanning-alert"
    },
    "CodeScanningAlertInstance": {
      "fields": {
        "analysis_key": {
          "description": "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "category": {
          "description": "Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "classifications": {
          "description": "Classifications that have been applied to the file that triggered the alert. For example identifying it as documentation, or a generated file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "CodeScanningAlertClassification",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "commit_sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "description": "Describe a region within a file for the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertLocation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertInstanceMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ref": {
          "description": "The Git reference, formatted as `refs/pull//merge`, `refs/pull//head`, `refs/heads/` or simply ``.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "State of a code scanning alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "code-scanning-alert-instance"
    },
    "CodeScanningAlertInstanceMessage": {
      "fields": {
        "text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeScanningAlertItems": {
      "fields": {
        "created_at": {
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissal_approved_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_at": {
          "description": "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_comment": {
          "description": "The dismissal comment associated with the dismissal of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 280
          }
        },
        "dismissed_reason": {
          "description": "**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertDismissedReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fixed_at": {
          "description": "The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The GitHub URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "instances_url": {
          "description": "The REST API URL for fetching the list of instances for an alert.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "most_recent_instance": {
          "type": {
            "name": "CodeScanningAlertInstance",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "number": {
          "description": "The security alert number.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "rule": {
          "type": {
            "name": "CodeScanningAlertRuleSummary",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "State of a code scanning alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool": {
          "type": {
            "name": "CodeScanningAnalysisTool",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The REST API URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-scanning-alert-items"
    },
    "CodeScanningAlertLocation": {
      "description": "Describe a region within a file for the alert.",
      "fields": {
        "end_column": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "end_line": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_column": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "start_line": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "code-scanning-alert-location"
    },
    "CodeScanningAlertRule": {
      "fields": {
        "description": {
          "description": "A short description of the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "full_description": {
          "description": "A description of the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "help": {
          "description": "Detailed documentation for the rule as GitHub Flavored Markdown.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "help_uri": {
          "description": "A link to the documentation for the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "A unique identifier for the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "security_severity_level": {
          "description": "The security severity of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertRuleSecuritySeverityLevel",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "severity": {
          "description": "The severity of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertRuleSeverity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tags": {
          "description": "A set of tags applicable for the rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "code-scanning-alert-rule"
    },
    "CodeScanningAlertRuleSummary": {
      "fields": {
        "description": {
          "description": "A short description of the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "A unique identifier for the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the rule used to detect the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "security_severity_level": {
          "description": "The security severity of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertRuleSummarySecuritySeverityLevel",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "severity": {
          "description": "The severity of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertRuleSummarySeverity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tags": {
          "description": "A set of tags applicable for the rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "code-scanning-alert-rule-summary"
    },
    "CodeScanningAnalysis": {
      "fields": {
        "analysis_key": {
          "description": "Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "category": {
          "description": "Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_sha": {
          "description": "The SHA of the commit to which the analysis you are uploading relates.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9a-fA-F]+$",
            "maxLength": 40,
            "minLength": 40
          }
        },
        "created_at": {
          "description": "The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "deletable": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "environment": {
          "description": "Identifies the variable values associated with the environment in which this analysis was performed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "error": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for this analysis.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ref": {
          "description": "The Git reference, formatted as `refs/pull//merge`, `refs/pull//head`, `refs/heads/` or simply ``.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "results_count": {
          "description": "The total number of results in the analysis.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "rules_count": {
          "description": "The total number of rules used in the analysis.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "sarif_id": {
          "description": "An identifier for the upload.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool": {
          "type": {
            "name": "CodeScanningAnalysisTool",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "description": "The REST API URL of the analysis resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "warning": {
          "description": "Warning generated when processing the analysis",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "code-scanning-analysis"
    },
    "CodeScanningAnalysisDeletion": {
      "description": "Successful deletion of a code scanning analysis",
      "fields": {
        "confirm_delete_url": {
          "description": "Next deletable analysis in chain, with last analysis deletion confirmation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "next_analysis_url": {
          "description": "Next deletable analysis in chain, without last analysis deletion confirmation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-scanning-analysis-deletion"
    },
    "CodeScanningAnalysisTool": {
      "fields": {
        "guid": {
          "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the tool used to generate the code scanning analysis.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "The version of the tool used to generate the code scanning analysis.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "code-scanning-analysis-tool"
    },
    "CodeScanningDefaultSetup": {
      "description": "Configuration for code scanning default setup.",
      "fields": {
        "languages": {
          "description": "Languages to be analyzed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CodeScanningDefaultSetupLanguages",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "query_suite": {
          "description": "CodeQL query suite to be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningDefaultSetupQuerySuite",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "schedule": {
          "description": "The frequency of the periodic analysis.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningDefaultSetupSchedule",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "Code scanning default setup has been configured or not.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningDefaultSetupState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "Timestamp of latest configuration update.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "code-scanning-default-setup"
    },
    "CodeScanningDefaultSetupUpdateInput": {
      "description": "Configuration for code scanning default setup.",
      "fields": {
        "languages": {
          "description": "CodeQL languages to be analyzed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CodeScanningDefaultSetupUpdateLanguages",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "query_suite": {
          "description": "CodeQL query suite to be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningDefaultSetupUpdateQuerySuite",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The desired state of code scanning default setup.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningDefaultSetupUpdateState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "code-scanning-default-setup-update"
    },
    "CodeScanningOrganizationAlertItems": {
      "fields": {
        "created_at": {
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissal_approved_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_at": {
          "description": "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_comment": {
          "description": "The dismissal comment associated with the dismissal of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 280
          }
        },
        "dismissed_reason": {
          "description": "**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertDismissedReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fixed_at": {
          "description": "The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The GitHub URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "instances_url": {
          "description": "The REST API URL for fetching the list of instances for an alert.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "most_recent_instance": {
          "type": {
            "name": "CodeScanningAlertInstance",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "number": {
          "description": "The security alert number.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repository": {
          "description": "A GitHub repository.",
          "type": {
            "name": "SimpleRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rule": {
          "type": {
            "name": "CodeScanningAlertRuleSummary",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "State of a code scanning alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tool": {
          "type": {
            "name": "CodeScanningAnalysisTool",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The REST API URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-scanning-organization-alert-items"
    },
    "CodeScanningSarifsReceipt": {
      "fields": {
        "id": {
          "description": "An identifier for the upload.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The REST API URL for checking the status of the upload.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-scanning-sarifs-receipt"
    },
    "CodeScanningSarifsStatus": {
      "fields": {
        "analyses_url": {
          "description": "The REST API URL for getting the analyses associated with the upload.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "errors": {
          "description": "Any errors that ocurred during processing of the delivery.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "processing_status": {
          "description": "`pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningSarifsStatusProcessingStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "code-scanning-sarifs-status"
    },
    "CodeScanningUpdateAlertBodyInput": {
      "fields": {
        "create_request": {
          "description": "If `true`, attempt to create an alert dismissal request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dismissed_comment": {
          "description": "The dismissal comment associated with the dismissal of the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 280
          }
        },
        "dismissed_reason": {
          "description": "**Required when the state is dismissed.** The reason for dismissing or closing the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeScanningAlertDismissedReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.",
          "type": {
            "name": "CodeScanningAlertSetState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeScanningUploadSarifBodyInput": {
      "fields": {
        "checkout_uri": {
          "description": "The base directory used in the analysis, as it appears in the SARIF file. This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "commit_sha": {
          "description": "The SHA of the commit to which the analysis you are uploading relates.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9a-fA-F]+$",
            "maxLength": 40,
            "minLength": 40
          }
        },
        "ref": {
          "description": "The full Git reference, formatted as `refs/heads/`, `refs/tags/`, `refs/pull//merge`, or `refs/pull//head`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^refs/(heads|tags|pull)/.*$"
          }
        },
        "sarif": {
          "description": "A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.15/code-security/secure-coding/sarif-support-for-code-scanning).\"",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "started_at": {
          "description": "The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "tool_name": {
          "description": "The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeSearchResultItem": {
      "description": "Code Search Result Item",
      "fields": {
        "file_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "git_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "language": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_modified_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "line_numbers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "score": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text_matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-search-result-item"
    },
    "CodeSecurityAttachConfigurationBodyInput": {
      "fields": {
        "scope": {
          "description": "The type of repositories to attach the configuration to. `selected` means the configuration will be attached to only the repositories specified by `selected_repository_ids`",
          "type": {
            "name": "CodeSecurityAttachConfigurationBodyScope",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repository_ids": {
          "description": "An array of repository IDs to attach the configuration to. You can only provide a list of repository ids when the `scope` is set to `selected`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "CodeSecurityConfiguration": {
      "description": "A code security configuration",
      "fields": {
        "advanced_security": {
          "description": "The enablement status of GitHub Advanced Security",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationAdvancedSecurity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "code_scanning_default_setup": {
          "description": "The enablement status of code scanning default setup",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationCodeScanningDefaultSetup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dependabot_alerts": {
          "description": "The enablement status of Dependabot alerts",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationDependabotAlerts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_security_updates": {
          "description": "The enablement status of Dependabot security updates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationDependabotSecurityUpdates",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependency_graph": {
          "description": "The enablement status of Dependency Graph",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationDependencyGraph",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A description of the code security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enforcement": {
          "description": "The enforcement status for a security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationEnforcement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "description": "The URL of the configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "The ID of the code security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the code security configuration. Must be unique within the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning": {
          "description": "The enablement status of secret scanning",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationSecretScanning",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_delegated_bypass": {
          "description": "The enablement status of secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationSecretScanningDelegatedBypass",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_delegated_bypass_options": {
          "description": "Feature options for secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationSecretScanningDelegatedBypassOptions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning_non_provider_patterns": {
          "description": "The enablement status of secret scanning non-provider patterns",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationSecretScanningNonProviderPatterns",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_push_protection": {
          "description": "The enablement status of secret scanning push protection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationSecretScanningPushProtection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_validity_checks": {
          "description": "The enablement status of secret scanning validity checks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationSecretScanningValidityChecks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_type": {
          "description": "The type of the code security configuration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationTargetType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The URL of the configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "code-security-configuration"
    },
    "CodeSecurityConfigurationForRepository": {
      "description": "Code security configuration associated with a repository and attachment status",
      "fields": {
        "configuration": {
          "description": "A code security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfiguration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "The attachment status of the code security configuration on the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationForRepositoryStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "code-security-configuration-for-repository"
    },
    "CodeSecurityConfigurationRepositories": {
      "description": "Repositories associated with a code security configuration and attachment status",
      "fields": {
        "repository": {
          "description": "A GitHub repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleRepository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "The attachment status of the code security configuration on the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfigurationRepositoriesStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "code-security-configuration-repositories"
    },
    "CodeSecurityConfigurationSecretScanningDelegatedBypassOptions": {
      "description": "Feature options for secret scanning delegated bypass",
      "fields": {
        "reviewers": {
          "description": "The bypass reviewers for secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CodeSecurityConfigurationSecretScanningDelegatedBypassOptionsReviewers",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CodeSecurityConfigurationSecretScanningDelegatedBypassOptionsReviewers": {
      "fields": {
        "reviewer_id": {
          "description": "The ID of the team or role selected as a bypass reviewer",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reviewer_type": {
          "description": "The type of the bypass reviewer",
          "type": {
            "name": "CodeSecurityConfigurationSecretScanningDelegatedBypassOptionsReviewersReviewerType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeSecurityCreateConfigurationBodyInput": {
      "fields": {
        "advanced_security": {
          "description": "The enablement status of GitHub Advanced Security",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodyAdvancedSecurity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "code_scanning_default_setup": {
          "description": "The enablement status of code scanning default setup",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodyCodeScanningDefaultSetup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_alerts": {
          "description": "The enablement status of Dependabot alerts",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodyDependabotAlerts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_security_updates": {
          "description": "The enablement status of Dependabot security updates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodyDependabotSecurityUpdates",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependency_graph": {
          "description": "The enablement status of Dependency Graph. Dependency Graph is not configurable in GitHub Enterprise Server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodyDependencyGraph",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A description of the code security configuration",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255
          }
        },
        "enforcement": {
          "description": "The enforcement status for a security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodyEnforcement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the code security configuration. Must be unique within the organization.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private_vulnerability_reporting": {
          "description": "The enablement status of private vulnerability reporting",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodyPrivateVulnerabilityReporting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning": {
          "description": "The enablement status of secret scanning",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodySecretScanning",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_delegated_bypass": {
          "description": "The enablement status of secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypass",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_delegated_bypass_options": {
          "description": "Feature options for secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypassOptionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning_non_provider_patterns": {
          "description": "The enablement status of secret scanning non provider patterns",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodySecretScanningNonProviderPatterns",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_push_protection": {
          "description": "The enablement status of secret scanning push protection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodySecretScanningPushProtection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_validity_checks": {
          "description": "The enablement status of secret scanning validity checks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityCreateConfigurationBodySecretScanningValidityChecks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypassOptionsInput": {
      "description": "Feature options for secret scanning delegated bypass",
      "fields": {
        "reviewers": {
          "description": "The bypass reviewers for secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersInput": {
      "fields": {
        "reviewer_id": {
          "description": "The ID of the team or role selected as a bypass reviewer",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reviewer_type": {
          "description": "The type of the bypass reviewer",
          "type": {
            "name": "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersReviewerType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeSecurityDefaultConfigurations": {
      "fields": {
        "configuration": {
          "description": "A code security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfiguration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "default_for_new_repos": {
          "description": "The visibility of newly created repositories for which the code security configuration will be applied to by default",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityDefaultConfigurationsDefaultForNewRepos",
              "type": "named"
            }
          },
          "http": {}
        }
      },
      "alias": "code-security-default-configurations"
    },
    "CodeSecurityDetachConfigurationBodyInput": {
      "fields": {
        "selected_repository_ids": {
          "description": "An array of repository IDs to detach from configurations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "CodeSecuritySetConfigurationAsDefaultBodyInput": {
      "fields": {
        "default_for_new_repos": {
          "description": "Specify which types of repository this security configuration should be applied to by default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecuritySetConfigurationAsDefaultBodyDefaultForNewRepos",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeSecuritySetConfigurationAsDefaultResult": {
      "fields": {
        "configuration": {
          "description": "A code security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityConfiguration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "default_for_new_repos": {
          "description": "Specifies which types of repository this security configuration is applied to by default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecuritySetConfigurationAsDefaultResultDefaultForNewRepos",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeSecurityUpdateConfigurationBodyInput": {
      "fields": {
        "advanced_security": {
          "description": "The enablement status of GitHub Advanced Security",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodyAdvancedSecurity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "code_scanning_default_setup": {
          "description": "The enablement status of code scanning default setup",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodyCodeScanningDefaultSetup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_alerts": {
          "description": "The enablement status of Dependabot alerts",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodyDependabotAlerts",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_security_updates": {
          "description": "The enablement status of Dependabot security updates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodyDependabotSecurityUpdates",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependency_graph": {
          "description": "The enablement status of Dependency Graph. Dependency Graph is not configurable in GitHub Enterprise Server.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodyDependencyGraph",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A description of the code security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255
          }
        },
        "enforcement": {
          "description": "The enforcement status for a security configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodyEnforcement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the code security configuration. Must be unique within the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private_vulnerability_reporting": {
          "description": "The enablement status of private vulnerability reporting",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodyPrivateVulnerabilityReporting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning": {
          "description": "The enablement status of secret scanning",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodySecretScanning",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_delegated_bypass": {
          "description": "The enablement status of secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypass",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_delegated_bypass_options": {
          "description": "Feature options for secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypassOptionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning_non_provider_patterns": {
          "description": "The enablement status of secret scanning non-provider patterns",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodySecretScanningNonProviderPatterns",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_push_protection": {
          "description": "The enablement status of secret scanning push protection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodySecretScanningPushProtection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_validity_checks": {
          "description": "The enablement status of secret scanning validity checks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeSecurityUpdateConfigurationBodySecretScanningValidityChecks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypassOptionsInput": {
      "description": "Feature options for secret scanning delegated bypass",
      "fields": {
        "reviewers": {
          "description": "The bypass reviewers for secret scanning delegated bypass",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersInput": {
      "fields": {
        "reviewer_id": {
          "description": "The ID of the team or role selected as a bypass reviewer",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reviewer_type": {
          "description": "The type of the bypass reviewer",
          "type": {
            "name": "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersReviewerType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CodeownersErrors": {
      "description": "A list of errors found in a repo's CODEOWNERS file",
      "fields": {
        "errors": {
          "type": {
            "element_type": {
              "name": "CodeownersErrorsErrors",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "codeowners-errors"
    },
    "CodeownersErrorsErrors": {
      "fields": {
        "column": {
          "description": "The column number where this errors occurs.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "kind": {
          "description": "The type of error.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "line": {
          "description": "The line number where this errors occurs.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "message": {
          "description": "A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "description": "The path of the file where the error occured.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "description": "The contents of the line where the error occurs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suggestion": {
          "description": "Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Collaborator": {
      "description": "Collaborator",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CollaboratorPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "role_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "site_admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "collaborator"
    },
    "CollaboratorPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "CombinedCommitStatus": {
      "description": "Combined Commit Status",
      "fields": {
        "commit_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statuses": {
          "type": {
            "element_type": {
              "name": "SimpleCommitStatus",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "combined-commit-status"
    },
    "Commit": {
      "description": "Commit",
      "fields": {
        "author": {
          "description": "A GitHub user.",
          "type": {
            "name": "CommitAuthor",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "commit": {
          "type": {
            "name": "CommitCommit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committer": {
          "description": "A GitHub user.",
          "type": {
            "name": "CommitCommitter",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "files": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DiffEntry",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parents": {
          "type": {
            "element_type": {
              "name": "CommitParents",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CommitStats",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "commit"
    },
    "CommitActivity": {
      "description": "Commit Activity",
      "fields": {
        "days": {
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "total": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "week": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "commit-activity"
    },
    "CommitAuthor": {
      "description": "A GitHub user.",
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CommitComment": {
      "description": "Commit Comment",
      "fields": {
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "line": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "position": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "commit-comment"
    },
    "CommitCommit": {
      "fields": {
        "author": {
          "description": "Metaproperties for Git author/committer information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "comment_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "committer": {
          "description": "Metaproperties for Git author/committer information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "message": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tree": {
          "type": {
            "name": "CommitCommitTree",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "verification": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Verification",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CommitCommitTree": {
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "CommitCommitter": {
      "description": "A GitHub user.",
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CommitComparison": {
      "description": "Commit Comparison",
      "fields": {
        "ahead_by": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "base_commit": {
          "description": "Commit",
          "type": {
            "name": "Commit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "behind_by": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "commits": {
          "type": {
            "element_type": {
              "name": "Commit",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "diff_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "files": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DiffEntry",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "merge_base_commit": {
          "description": "Commit",
          "type": {
            "name": "Commit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "patch_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "permalink_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "status": {
          "type": {
            "name": "CommitComparisonStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "total_commits": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "commit-comparison"
    },
    "CommitParents": {
      "fields": {
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "CommitSearchResultItem": {
      "description": "Commit Search Result Item",
      "fields": {
        "author": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "commit": {
          "type": {
            "name": "CommitSearchResultItemCommit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committer": {
          "description": "Metaproperties for Git author/committer information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parents": {
          "type": {
            "element_type": {
              "name": "CommitSearchResultItemParents",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "score": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text_matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "commit-search-result-item"
    },
    "CommitSearchResultItemCommit": {
      "fields": {
        "author": {
          "type": {
            "name": "CommitSearchResultItemCommitAuthor",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "comment_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "committer": {
          "description": "Metaproperties for Git author/committer information.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "message": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tree": {
          "type": {
            "name": "CommitSearchResultItemCommitTree",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "verification": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Verification",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CommitSearchResultItemCommitAuthor": {
      "fields": {
        "date": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CommitSearchResultItemCommitTree": {
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "CommitSearchResultItemParents": {
      "fields": {
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CommitStats": {
      "fields": {
        "additions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "deletions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ContentFile": {
      "description": "Content File",
      "fields": {
        "_links": {
          "type": {
            "name": "ContentFileLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "content": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "download_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "encoding": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "submodule_git_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "ContentFileType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "content-file"
    },
    "ContentFileLinks": {
      "fields": {
        "git": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "self": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "Contributor": {
      "description": "Contributor",
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "contributions": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "contributor"
    },
    "ContributorActivity": {
      "description": "Contributor Activity",
      "fields": {
        "author": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "total": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "weeks": {
          "type": {
            "element_type": {
              "name": "ContributorActivityWeeks",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "contributor-activity"
    },
    "ContributorActivityWeeks": {
      "fields": {
        "a": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "c": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "d": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "w": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "CustomDeploymentRuleApp": {
      "description": "A GitHub App that is providing a custom deployment protection rule.",
      "fields": {
        "id": {
          "description": "The unique identifier of the deployment protection rule integration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "integration_url": {
          "description": "The URL for the endpoint to get details about the app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "description": "The node ID for the deployment protection rule integration.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "slug": {
          "description": "The slugified name of the deployment protection rule integration.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "custom-deployment-rule-app"
    },
    "CustomProperty": {
      "description": "Custom property defined on an organization",
      "fields": {
        "allowed_values": {
          "description": "An ordered list of the allowed values of the property. The property can have up to 200 allowed values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 75
            }
          }
        },
        "default_value": {
          "description": "Default value of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string",
              "array"
            ]
          }
        },
        "description": {
          "description": "Short description of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "property_name": {
          "description": "The name of the property",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "required": {
          "description": "Whether the property is required.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "source_type": {
          "description": "The source type of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomPropertySourceType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL that can be used to fetch, update, or delete info about this property via the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "value_type": {
          "description": "The type of the value for the property",
          "type": {
            "name": "CustomPropertyValueType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "values_editable_by": {
          "description": "Who can edit the values of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomPropertyValuesEditableBy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "custom-property"
    },
    "CustomPropertyInput": {
      "description": "Custom property defined on an organization",
      "fields": {
        "allowed_values": {
          "description": "An ordered list of the allowed values of the property. The property can have up to 200 allowed values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 75
            }
          }
        },
        "default_value": {
          "description": "Default value of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string",
              "array"
            ]
          }
        },
        "description": {
          "description": "Short description of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "property_name": {
          "description": "The name of the property",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "required": {
          "description": "Whether the property is required.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "source_type": {
          "description": "The source type of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomPropertySourceType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL that can be used to fetch, update, or delete info about this property via the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "value_type": {
          "description": "The type of the value for the property",
          "type": {
            "name": "CustomPropertyValueType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "values_editable_by": {
          "description": "Who can edit the values of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomPropertyValuesEditableBy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "custom-property"
    },
    "CustomPropertySetPayloadInput": {
      "description": "Custom property set payload",
      "fields": {
        "allowed_values": {
          "description": "An ordered list of the allowed values of the property. The property can have up to 200 allowed values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "maxLength": 75
            }
          }
        },
        "default_value": {
          "description": "Default value of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string",
              "array"
            ]
          }
        },
        "description": {
          "description": "Short description of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "required": {
          "description": "Whether the property is required.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "value_type": {
          "description": "The type of the value for the property",
          "type": {
            "name": "CustomPropertySetPayloadValueType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "values_editable_by": {
          "description": "Who can edit the values of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomPropertySetPayloadValuesEditableBy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "custom-property-set-payload"
    },
    "CustomPropertyValue": {
      "description": "Custom property name and associated value",
      "fields": {
        "property_name": {
          "description": "The name of the property",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value assigned to the property",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "string",
              "array"
            ]
          }
        }
      },
      "alias": "custom-property-value"
    },
    "CustomPropertyValueInput": {
      "description": "Custom property name and associated value",
      "fields": {
        "property_name": {
          "description": "The name of the property",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value assigned to the property",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "string",
              "array"
            ]
          }
        }
      },
      "alias": "custom-property-value"
    },
    "CvssSeverities": {
      "fields": {
        "cvss_v3": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CvssSeveritiesCvssV3",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "cvss_v4": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CvssSeveritiesCvssV4",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "cvss-severities"
    },
    "CvssSeveritiesCvssV3": {
      "fields": {
        "score": {
          "description": "The CVSS 3 score.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 10,
            "minimum": 0
          }
        },
        "vector_string": {
          "description": "The CVSS 3 vector string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CvssSeveritiesCvssV4": {
      "fields": {
        "score": {
          "description": "The CVSS 4 score.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 10,
            "minimum": 0
          }
        },
        "vector_string": {
          "description": "The CVSS 4 vector string.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotAlert": {
      "description": "A Dependabot alert.",
      "fields": {
        "auto_dismissed_at": {
          "description": "The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "created_at": {
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dependency": {
          "description": "Details for the vulnerable dependency.",
          "type": {
            "name": "DependabotAlertDependency",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_at": {
          "description": "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_comment": {
          "description": "An optional comment associated with the alert's dismissal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 280
          }
        },
        "dismissed_reason": {
          "description": "The reason that the alert was dismissed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotAlertDismissedReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fixed_at": {
          "description": "The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The GitHub URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "number": {
          "description": "The security alert number.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "security_advisory": {
          "description": "Details for the GitHub Security Advisory.",
          "type": {
            "name": "DependabotAlertSecurityAdvisory",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "security_vulnerability": {
          "description": "Details pertaining to one vulnerable version range for the advisory.",
          "type": {
            "name": "DependabotAlertSecurityVulnerability",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "The state of the Dependabot alert.",
          "type": {
            "name": "DependabotAlertState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The REST API URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "dependabot-alert"
    },
    "DependabotAlertDependency": {
      "description": "Details for the vulnerable dependency.",
      "fields": {
        "manifest_path": {
          "description": "The full path to the dependency manifest file, relative to the root of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "package": {
          "description": "Details for the vulnerable package.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotAlertPackage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "The execution scope of the vulnerable dependency.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotAlertDependencyScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotAlertPackage": {
      "description": "Details for the vulnerable package.",
      "fields": {
        "ecosystem": {
          "description": "The package's language or package management ecosystem.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The unique package name within its ecosystem.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "dependabot-alert-package"
    },
    "DependabotAlertSecurityAdvisory": {
      "description": "Details for the GitHub Security Advisory.",
      "fields": {
        "cve_id": {
          "description": "The unique CVE ID assigned to the advisory.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cvss": {
          "description": "Details for the advisory pertaining to the Common Vulnerability Scoring System.",
          "type": {
            "name": "DependabotAlertSecurityAdvisoryCvss",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "cvss_severities": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CvssSeverities",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "cwes": {
          "description": "Details for the advisory pertaining to Common Weakness Enumeration.",
          "type": {
            "element_type": {
              "name": "DependabotAlertSecurityAdvisoryCwes",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "description": {
          "description": "A long-form Markdown-supported description of the advisory.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ghsa_id": {
          "description": "The unique GitHub Security Advisory ID assigned to the advisory.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "identifiers": {
          "description": "Values that identify this advisory among security information sources.",
          "type": {
            "element_type": {
              "name": "DependabotAlertSecurityAdvisoryIdentifiers",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "published_at": {
          "description": "The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "references": {
          "description": "Links to additional advisory information.",
          "type": {
            "element_type": {
              "name": "DependabotAlertSecurityAdvisoryReferences",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "severity": {
          "description": "The severity of the advisory.",
          "type": {
            "name": "DependabotAlertSecurityAdvisorySeverity",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "summary": {
          "description": "A short, plain text summary of the advisory.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        },
        "updated_at": {
          "description": "The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "vulnerabilities": {
          "description": "Vulnerable version range information for the advisory.",
          "type": {
            "element_type": {
              "name": "DependabotAlertSecurityVulnerability",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "withdrawn_at": {
          "description": "The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "dependabot-alert-security-advisory"
    },
    "DependabotAlertSecurityAdvisoryCvss": {
      "description": "Details for the advisory pertaining to the Common Vulnerability Scoring System.",
      "fields": {
        "score": {
          "description": "The overall CVSS score of the advisory.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 10,
            "minimum": 0
          }
        },
        "vector_string": {
          "description": "The full CVSS vector string for the advisory.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotAlertSecurityAdvisoryCwes": {
      "description": "A CWE weakness assigned to the advisory.",
      "fields": {
        "cwe_id": {
          "description": "The unique CWE ID.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The short, plain text name of the CWE.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotAlertSecurityAdvisoryIdentifiers": {
      "description": "An advisory identifier.",
      "fields": {
        "type": {
          "description": "The type of advisory identifier.",
          "type": {
            "name": "DependabotAlertSecurityAdvisoryIdentifiersType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value of the advisory identifer.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotAlertSecurityAdvisoryReferences": {
      "description": "A link to additional advisory information.",
      "fields": {
        "url": {
          "description": "The URL of the reference.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "DependabotAlertSecurityVulnerability": {
      "description": "Details pertaining to one vulnerable version range for the advisory.",
      "fields": {
        "first_patched_version": {
          "description": "Details pertaining to the package version that patches this vulnerability.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotAlertSecurityVulnerabilityFirstPatchedVersion",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "package": {
          "description": "Details for the vulnerable package.",
          "type": {
            "name": "DependabotAlertPackage",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "severity": {
          "description": "The severity of the vulnerability.",
          "type": {
            "name": "DependabotAlertSecurityVulnerabilitySeverity",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vulnerable_version_range": {
          "description": "Conditions that identify vulnerable versions of this vulnerability's package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "dependabot-alert-security-vulnerability"
    },
    "DependabotAlertSecurityVulnerabilityFirstPatchedVersion": {
      "description": "Details pertaining to the package version that patches this vulnerability.",
      "fields": {
        "identifier": {
          "description": "The package version that patches this vulnerability.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotAlertWithRepository": {
      "description": "A Dependabot alert.",
      "fields": {
        "auto_dismissed_at": {
          "description": "The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "created_at": {
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dependency": {
          "description": "Details for the vulnerable dependency.",
          "type": {
            "name": "DependabotAlertWithRepositoryDependency",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_at": {
          "description": "The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismissed_comment": {
          "description": "An optional comment associated with the alert's dismissal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 280
          }
        },
        "dismissed_reason": {
          "description": "The reason that the alert was dismissed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotAlertWithRepositoryDismissedReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fixed_at": {
          "description": "The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The GitHub URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "number": {
          "description": "The security alert number.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repository": {
          "description": "A GitHub repository.",
          "type": {
            "name": "SimpleRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "security_advisory": {
          "description": "Details for the GitHub Security Advisory.",
          "type": {
            "name": "DependabotAlertSecurityAdvisory",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "security_vulnerability": {
          "description": "Details pertaining to one vulnerable version range for the advisory.",
          "type": {
            "name": "DependabotAlertSecurityVulnerability",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "The state of the Dependabot alert.",
          "type": {
            "name": "DependabotAlertWithRepositoryState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The REST API URL of the alert resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "dependabot-alert-with-repository"
    },
    "DependabotAlertWithRepositoryDependency": {
      "description": "Details for the vulnerable dependency.",
      "fields": {
        "manifest_path": {
          "description": "The full path to the dependency manifest file, relative to the root of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "package": {
          "description": "Details for the vulnerable package.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotAlertPackage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "The execution scope of the vulnerable dependency.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotAlertWithRepositoryDependencyScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotCreateOrUpdateOrgSecretBodyInput": {
      "fields": {
        "encrypted_value": {
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.15/rest/dependabot/secrets#get-an-organization-public-key) endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
          }
        },
        "key_id": {
          "description": "ID of the key you used to encrypt the secret.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repository_ids": {
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.15/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.15/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.15/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "description": "Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.",
          "type": {
            "name": "DependabotCreateOrUpdateOrgSecretBodyVisibility",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotCreateOrUpdateRepoSecretBodyInput": {
      "fields": {
        "encrypted_value": {
          "description": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.15/rest/dependabot/secrets#get-a-repository-public-key) endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"
          }
        },
        "key_id": {
          "description": "ID of the key you used to encrypt the secret.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependabotListOrgSecretsResult": {
      "fields": {
        "secrets": {
          "type": {
            "element_type": {
              "name": "OrganizationDependabotSecret",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "DependabotListRepoSecretsResult": {
      "fields": {
        "secrets": {
          "type": {
            "element_type": {
              "name": "DependabotSecret",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "DependabotListSelectedReposForOrgSecretResult": {
      "fields": {
        "repositories": {
          "type": {
            "element_type": {
              "name": "MinimalRepository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "DependabotPublicKey": {
      "description": "The public key used for setting Dependabot Secrets.",
      "fields": {
        "key": {
          "description": "The Base64 encoded public key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "key_id": {
          "description": "The identifier for the key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "dependabot-public-key"
    },
    "DependabotSecret": {
      "description": "Set secrets for Dependabot.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "dependabot-secret"
    },
    "DependabotSetSelectedReposForOrgSecretBodyInput": {
      "fields": {
        "selected_repository_ids": {
          "description": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.15/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.15/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "DependabotUpdateAlertBodyInput": {
      "fields": {
        "dismissed_comment": {
          "description": "An optional comment associated with dismissing the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 280
          }
        },
        "dismissed_reason": {
          "description": "**Required when `state` is `dismissed`.** A reason for dismissing the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DependabotUpdateAlertBodyDismissedReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The state of the Dependabot alert. A `dismissed_reason` must be provided when setting the state to `dismissed`.",
          "type": {
            "name": "DependabotUpdateAlertBodyState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependencyGraphCreateRepositorySnapshotResult": {
      "fields": {
        "created_at": {
          "description": "The time at which the snapshot was created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of the created snapshot.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "message": {
          "description": "A message providing further details about the result, such as why the dependencies were not updated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "result": {
          "description": "Either \"SUCCESS\", \"ACCEPTED\", or \"INVALID\". \"SUCCESS\" indicates that the snapshot was successfully created and the repository's dependencies were updated. \"ACCEPTED\" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. \"INVALID\" indicates that the snapshot was malformed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependencyGraphDiff": {
      "fields": {
        "change_type": {
          "type": {
            "name": "DependencyGraphDiffChangeType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ecosystem": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "license": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "manifest": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "package_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scope": {
          "description": "Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.",
          "type": {
            "name": "DependencyGraphDiffScope",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source_repository_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vulnerabilities": {
          "type": {
            "element_type": {
              "name": "DependencyGraphDiffVulnerabilities",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "dependency-graph-diff"
    },
    "DependencyGraphDiffVulnerabilities": {
      "fields": {
        "advisory_ghsa_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "advisory_summary": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "advisory_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "severity": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependencyGraphSpdxSbom": {
      "description": "A schema for the SPDX JSON format returned by the Dependency Graph.",
      "fields": {
        "sbom": {
          "type": {
            "name": "DependencyGraphSpdxSbomSbom",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "dependency-graph-spdx-sbom"
    },
    "DependencyGraphSpdxSbomSbom": {
      "fields": {
        "SPDXID": {
          "description": "The SPDX identifier for the SPDX document.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comment": {
          "description": "An optional comment about the SPDX document.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "creationInfo": {
          "type": {
            "name": "DependencyGraphSpdxSbomSbomCreationInfo",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dataLicense": {
          "description": "The license under which the SPDX document is licensed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "documentNamespace": {
          "description": "The namespace for the SPDX document.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the SPDX document.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "packages": {
          "type": {
            "element_type": {
              "name": "DependencyGraphSpdxSbomSbomPackages",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "relationships": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DependencyGraphSpdxSbomSbomRelationships",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "spdxVersion": {
          "description": "The version of the SPDX specification that this document conforms to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependencyGraphSpdxSbomSbomCreationInfo": {
      "fields": {
        "created": {
          "description": "The date and time the SPDX document was created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "creators": {
          "description": "The tools that were used to generate the SPDX document.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "DependencyGraphSpdxSbomSbomPackages": {
      "fields": {
        "SPDXID": {
          "description": "A unique SPDX identifier for the package.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "copyrightText": {
          "description": "The copyright holders of the package, and any dates present with those notices, if available.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "downloadLocation": {
          "description": "The location where the package can be downloaded, or NOASSERTION if this has not been determined.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalRefs": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DependencyGraphSpdxSbomSbomPackagesExternalRefs",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "filesAnalyzed": {
          "description": "Whether the package's file content has been subjected to analysis during the creation of the SPDX document.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "licenseConcluded": {
          "description": "The license of the package as determined while creating the SPDX document.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "licenseDeclared": {
          "description": "The license of the package as declared by its author, or NOASSERTION if this information was not available when the SPDX document was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the package.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "supplier": {
          "description": "The distribution source of this package, or NOASSERTION if this was not determined.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "versionInfo": {
          "description": "The version of the package. If the package does not have an exact version specified, a version range is given.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependencyGraphSpdxSbomSbomPackagesExternalRefs": {
      "fields": {
        "referenceCategory": {
          "description": "The category of reference to an external resource this reference refers to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "referenceLocator": {
          "description": "A locator for the particular external resource this reference refers to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "referenceType": {
          "description": "The category of reference to an external resource this reference refers to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DependencyGraphSpdxSbomSbomRelationships": {
      "fields": {
        "relatedSpdxElement": {
          "description": "The SPDX identifier of the package that is the target of the relationship.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "relationshipType": {
          "description": "The type of relationship between the two SPDX elements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "spdxElementId": {
          "description": "The SPDX identifier of the package that is the source of the relationship.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeployKey": {
      "description": "An SSH key granting access to a single repository.",
      "fields": {
        "added_by": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_used": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "read_only": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "deploy-key"
    },
    "Deployment": {
      "description": "A request for a specific ref(branch,sha,tag) to be deployed",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "creator": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "Name for the target deployment environment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the deployment",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "original_environment": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "payload": {
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {}
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "production_environment": {
          "description": "Specifies if the given environment is one that end-users directly interact with. Default: false.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "ref": {
          "description": "The ref to deploy. This can be a branch, tag, or sha.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statuses_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "task": {
          "description": "Parameter to specify a task to execute",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "transient_environment": {
          "description": "Specifies if the given environment is will no longer exist at some point in the future. Default: false.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "deployment"
    },
    "DeploymentBranchPolicy": {
      "description": "Details of a deployment branch or tag policy.",
      "fields": {
        "id": {
          "description": "The unique identifier of the branch or tag policy.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name pattern that branches or tags must match in order to deploy to the environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Whether this rule targets a branch or tag.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentBranchPolicyType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "deployment-branch-policy"
    },
    "DeploymentBranchPolicyNamePatternInput": {
      "fields": {
        "name": {
          "description": "The name pattern that branches must match in order to deploy to the environment.  Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`. For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "deployment-branch-policy-name-pattern"
    },
    "DeploymentBranchPolicyNamePatternWithTypeInput": {
      "fields": {
        "name": {
          "description": "The name pattern that branches or tags must match in order to deploy to the environment.  Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*/*`. For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Whether this rule targets a branch or tag",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentBranchPolicyNamePatternWithTypeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "deployment-branch-policy-name-pattern-with-type"
    },
    "DeploymentBranchPolicySettings": {
      "description": "The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.",
      "fields": {
        "custom_branch_policies": {
          "description": "Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "protected_branches": {
          "description": "Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "deployment-branch-policy-settings"
    },
    "DeploymentBranchPolicySettingsInput": {
      "description": "The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.",
      "fields": {
        "custom_branch_policies": {
          "description": "Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "protected_branches": {
          "description": "Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "deployment-branch-policy-settings"
    },
    "DeploymentProtectionRule": {
      "description": "Deployment protection rule",
      "fields": {
        "app": {
          "description": "A GitHub App that is providing a custom deployment protection rule.",
          "type": {
            "name": "CustomDeploymentRuleApp",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "enabled": {
          "description": "Whether the deployment protection rule is enabled for the environment.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "description": "The unique identifier for the deployment protection rule.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "description": "The node ID for the deployment protection rule.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "deployment-protection-rule"
    },
    "DeploymentSimple": {
      "description": "A deployment created as the result of an Actions check run from a workflow that references an environment",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "Name for the target deployment environment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the deployment",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "original_environment": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "production_environment": {
          "description": "Specifies if the given environment is one that end-users directly interact with. Default: false.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repository_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "statuses_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "task": {
          "description": "Parameter to specify a task to execute",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "transient_environment": {
          "description": "Specifies if the given environment is will no longer exist at some point in the future. Default: false.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "deployment-simple"
    },
    "DeploymentStatus": {
      "description": "The status of a deployment.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "creator": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deployment_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "description": "A short description of the status.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "environment": {
          "description": "The environment of the deployment that the status is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment_url": {
          "description": "The URL for accessing your environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "log_url": {
          "description": "The URL to associate with this status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "state": {
          "description": "The state of the status.",
          "type": {
            "name": "DeploymentStatusState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_url": {
          "description": "Closing down notice: the URL to associate with this status.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "deployment-status"
    },
    "DiffEntry": {
      "description": "Diff Entry",
      "fields": {
        "additions": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "blob_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "changes": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "contents_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "deletions": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "filename": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "patch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "previous_filename": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "raw_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "name": "DiffEntryStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "diff-entry"
    },
    "Email": {
      "description": "Email",
      "fields": {
        "email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "primary": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "visibility": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "email"
    },
    "EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to add to the runner.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "EnterpriseAdminCreateGlobalWebhookBodyConfigInput": {
      "description": "Key/value pairs to provide settings for this webhook.",
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers) header.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminCreateGlobalWebhookBodyInput": {
      "fields": {
        "active": {
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "description": "Key/value pairs to provide settings for this webhook.",
          "type": {
            "name": "EnterpriseAdminCreateGlobalWebhookBodyConfigInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events": {
          "description": "The [events](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "Must be passed as \"web\".",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminCreateImpersonationOAuthTokenBodyInput": {
      "fields": {
        "scopes": {
          "description": "A list of [scopes](https://docs.github.com/enterprise-server@3.15/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminCreateOrgBodyInput": {
      "fields": {
        "admin": {
          "description": "The login of the user who will manage this organization.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "description": "The organization's username.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile_name": {
          "description": "The organization's display name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminCreatePreReceiveEnvironmentBodyInput": {
      "fields": {
        "image_url": {
          "description": "URL from which to download a tarball of this environment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The new pre-receive environment's name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminCreatePreReceiveHookBodyInput": {
      "fields": {
        "allow_downstream_configuration": {
          "description": "Whether enforcement can be overridden at the org or repo level. default: `false`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enforcement": {
          "description": "The state of enforcement for this hook. default: `disabled`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "The pre-receive environment where the script is executed.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the hook.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "script": {
          "description": "The script that the hook runs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "script_repository": {
          "description": "The GitHub repository where the script is kept.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodyInput": {
      "fields": {
        "allows_public_repositories": {
          "description": "Whether the runner group can be used by `public` repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "Name of the runner group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "restricted_to_workflows": {
          "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "runners": {
          "description": "List of runner IDs to add to the runner group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "selected_organization_ids": {
          "description": "List of organization IDs that can access the runner group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "selected_workflows": {
          "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "description": "Visibility of a runner group. You can select all organizations or select individual organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodyVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminCreateUserBodyInput": {
      "fields": {
        "email": {
          "description": "**Required for built-in authentication.** The user's email address. This parameter can be omitted when using CAS, LDAP, or SAML. For more information, see \"[About authentication for your enterprise](https://docs.github.com/enterprise-server@3.15/admin/identity-and-access-management/managing-iam-for-your-enterprise/about-authentication-for-your-enterprise).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "description": "The user's username.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "suspended": {
          "description": "Whether to set the user as suspended when the user is created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "EnterpriseAdminGetManageConfigApplyEventsResult": {
      "fields": {
        "nodes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EnterpriseAdminGetManageConfigApplyEventsResultNodes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminGetManageConfigApplyEventsResultNodes": {
      "fields": {
        "events": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EnterpriseAdminGetManageConfigApplyEventsResultNodesEvents",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "last_request_id": {
          "description": "Unique ID of the last response from a host used for pagination",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node": {
          "description": "Hostname of the node",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminGetManageConfigApplyEventsResultNodesEvents": {
      "fields": {
        "body": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "config_run_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "event_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "severity_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "span_depth": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "span_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "span_parent_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "timestamp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "topology": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "trace_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminGetManageConfigApplyStatusResult": {
      "fields": {
        "nodes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EnterpriseAdminGetManageConfigApplyStatusResultNodes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "running": {
          "description": "Whether the ghe-config-apply run is still running in the environment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "successful": {
          "description": "Whether the ghe-config-apply run was successful in the environment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "EnterpriseAdminGetManageConfigApplyStatusResultNodes": {
      "fields": {
        "hostname": {
          "description": "The hostname of the node",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "run_id": {
          "description": "The unique Run ID of the ghe-config-apply run on the host",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "running": {
          "description": "Whether the ghe-config-apply run is still running on the host",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "successful": {
          "description": "Whether the ghe-config-apply run was successful on the host",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "EnterpriseAdminListLabelsForSelfHostedRunnerForEnterpriseResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "EnterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterpriseResult": {
      "fields": {
        "organizations": {
          "type": {
            "element_type": {
              "name": "OrganizationSimple",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterpriseResult": {
      "fields": {
        "organizations": {
          "type": {
            "element_type": {
              "name": "OrganizationSimple",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "EnterpriseAdminListSelfHostedRunnerGroupsForEnterpriseResult": {
      "fields": {
        "runner_groups": {
          "type": {
            "element_type": {
              "name": "RunnerGroupsEnterprise",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "EnterpriseAdminListSelfHostedRunnersForEnterpriseResult": {
      "fields": {
        "runners": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Runner",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "EnterpriseAdminListSelfHostedRunnersInGroupForEnterpriseResult": {
      "fields": {
        "runners": {
          "type": {
            "element_type": {
              "name": "Runner",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "EnterpriseAdminPostManageRunConfigApplyBodyInput": {
      "fields": {
        "run_id": {
          "description": "The run ID to execute `ghe-config-apply` with. If not provided, a run ID will be generated randomly.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminPostManageRunConfigApplyResult": {
      "fields": {
        "run_id": {
          "description": "Run ID the job was launched with",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseBodyInput": {
      "fields": {
        "labels": {
          "description": "The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseResult": {
      "fields": {
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "EnterpriseAdminSetGithubActionsPermissionsEnterpriseBodyInput": {
      "fields": {
        "allowed_actions": {
          "description": "The permissions policy that controls the actions that are allowed to run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AllowedActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled_organizations": {
          "description": "The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions.",
          "type": {
            "name": "EnabledOrganizations",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBodyInput": {
      "fields": {
        "selected_organization_ids": {
          "description": "List of organization IDs that can access the runner group.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseBodyInput": {
      "fields": {
        "selected_organization_ids": {
          "description": "List of organization IDs to enable for GitHub Actions.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseBodyInput": {
      "fields": {
        "runners": {
          "description": "List of runner IDs to add to the runner group.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminSuspendUserBodyInput": {
      "fields": {
        "reason": {
          "description": "The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.15/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to \"Suspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminSyncLdapMappingForTeamResult": {
      "fields": {
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminSyncLdapMappingForUserResult": {
      "fields": {
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUnsuspendUserBodyInput": {
      "fields": {
        "reason": {
          "description": "The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/enterprise-server@3.15/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/about-the-audit-log-for-your-enterprise). If you don't provide a `reason`, it will default to \"Unsuspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateGlobalWebhookBodyConfigInput": {
      "description": "Key/value pairs to provide settings for this webhook.",
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers) header.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateGlobalWebhookBodyInput": {
      "fields": {
        "active": {
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "description": "Key/value pairs to provide settings for this webhook.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdateGlobalWebhookBodyConfigInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events": {
          "description": "The [events](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "EnterpriseAdminUpdateLdapMappingForTeamBodyInput": {
      "fields": {
        "ldap_dn": {
          "description": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateLdapMappingForUserBodyInput": {
      "fields": {
        "ldap_dn": {
          "description": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateOrgNameBodyInput": {
      "fields": {
        "login": {
          "description": "The organization's new name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateOrgNameResult": {
      "fields": {
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdatePreReceiveEnvironmentBodyInput": {
      "fields": {
        "image_url": {
          "description": "URL from which to download a tarball of this environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "This pre-receive environment's new name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdatePreReceiveHookBodyInput": {
      "fields": {
        "allow_downstream_configuration": {
          "description": "Whether enforcement can be overridden at the org or repo level.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enforcement": {
          "description": "The state of enforcement for this hook.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "The pre-receive environment where the script is executed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the hook.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "script": {
          "description": "The script that the hook runs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "script_repository": {
          "description": "The GitHub repository where the script is kept.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgBodyInput": {
      "fields": {
        "allow_downstream_configuration": {
          "description": "Whether repositories can override enforcement.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enforcement": {
          "description": "The state of enforcement for the hook on this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoBodyInput": {
      "fields": {
        "enforcement": {
          "description": "The state of enforcement for the hook on this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoBodyEnforcement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseBodyInput": {
      "fields": {
        "allows_public_repositories": {
          "description": "Whether the runner group can be used by `public` repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "Name of the runner group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "restricted_to_workflows": {
          "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "selected_workflows": {
          "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "description": "Visibility of a runner group. You can select all organizations or select individual organizations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseBodyVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateUsernameForUserBodyInput": {
      "fields": {
        "login": {
          "description": "The user's new username.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseAdminUpdateUsernameForUserResult": {
      "fields": {
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnterpriseCommentOverview": {
      "fields": {
        "total_commit_comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_gist_comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_issue_comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_pull_request_comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-comment-overview"
    },
    "EnterpriseGistOverview": {
      "fields": {
        "private_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-gist-overview"
    },
    "EnterpriseHookOverview": {
      "fields": {
        "active_hooks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "inactive_hooks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_hooks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-hook-overview"
    },
    "EnterpriseIssueOverview": {
      "fields": {
        "closed_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-issue-overview"
    },
    "EnterpriseMilestoneOverview": {
      "fields": {
        "closed_milestones": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_milestones": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_milestones": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-milestone-overview"
    },
    "EnterpriseOrganizationOverview": {
      "fields": {
        "disabled_orgs": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_orgs": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_team_members": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_teams": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-organization-overview"
    },
    "EnterpriseOverview": {
      "fields": {
        "comments": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseCommentOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseGistOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "hooks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseHookOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issues": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseIssueOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "milestones": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseMilestoneOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "orgs": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseOrganizationOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterprisePageOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pulls": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterprisePullRequestOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseRepositoryOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseUserOverview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "enterprise-overview"
    },
    "EnterprisePageOverview": {
      "fields": {
        "total_pages": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-page-overview"
    },
    "EnterprisePullRequestOverview": {
      "fields": {
        "mergeable_pulls": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "merged_pulls": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_pulls": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "unmergeable_pulls": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-pull-request-overview"
    },
    "EnterpriseRepositoryOverview": {
      "fields": {
        "fork_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "org_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "root_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_pushes": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_wikis": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-repository-overview"
    },
    "EnterpriseSecurityAnalysisSettings": {
      "fields": {
        "advanced_security_enabled_for_new_repositories": {
          "description": "Whether GitHub advanced security is automatically enabled for new repositories and repositories transferred to this enterprise.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "advanced_security_enabled_for_new_user_namespace_repositories": {
          "description": "Whether GitHub Advanced Security is automatically enabled for new user namespace repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dependabot_alerts_enabled_for_new_repositories": {
          "description": "Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this enterprise.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_enabled_for_new_repositories": {
          "description": "Whether secret scanning is automatically enabled for new repositories and repositories transferred to this enterprise.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_non_provider_patterns_enabled_for_new_repositories": {
          "description": "Whether secret scanning of non-provider patterns is enabled for new repositories under this enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_push_protection_custom_link": {
          "description": "An optional URL string to display to contributors who are blocked from pushing a secret.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_push_protection_enabled_for_new_repositories": {
          "description": "Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this enterprise.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "enterprise-security-analysis-settings"
    },
    "EnterpriseSecurityProductsOverview": {
      "fields": {
        "active_committers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "advanced_security_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "code_scanning_default_setup_eligible_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "code_scanning_default_setup_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "code_scanning_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "code_scanning_pr_reviews_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "dependabot_alerts_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "dependabot_security_updates_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "dependabot_version_updates_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "maximum_committers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "nonarchived_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "purchased_committers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "secret_scanning_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "secret_scanning_push_protection_enabled_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-security-products-overview"
    },
    "EnterpriseUserOverview": {
      "fields": {
        "admin_users": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "suspended_users": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_users": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "enterprise-user-overview"
    },
    "Environment": {
      "description": "Details of a deployment environment",
      "fields": {
        "created_at": {
          "description": "The time that the environment was created, in ISO 8601 format.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "deployment_branch_policy": {
          "description": "The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentBranchPolicySettings",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The id of the environment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "description": "The name of the environment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "protection_rules": {
          "description": "Built-in deployment protection rules for the environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EnvironmentProtectionRules",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "updated_at": {
          "description": "The time that the environment was last updated, in ISO 8601 format.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "environment"
    },
    "EnvironmentApprovals": {
      "description": "An entry in the reviews log for environment deployments",
      "fields": {
        "comment": {
          "description": "The comment submitted with the deployment review",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environments": {
          "description": "The list of environments that were approved or rejected",
          "type": {
            "element_type": {
              "name": "EnvironmentApprovalsEnvironments",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "state": {
          "description": "Whether deployment to the environment(s) was approved or rejected or pending (with comments)",
          "type": {
            "name": "EnvironmentApprovalsState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "environment-approvals"
    },
    "EnvironmentApprovalsEnvironments": {
      "fields": {
        "created_at": {
          "description": "The time that the environment was created, in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The id of the environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the environment was last updated, in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnvironmentProtectionRules": {
      "fields": {
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prevent_self_review": {
          "description": "Whether deployments to this environment can be approved by the user who created the deployment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "reviewers": {
          "description": "The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EnvironmentProtectionRules1Reviewers",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "wait_timer": {
          "description": "The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "EnvironmentProtectionRules1Reviewers": {
      "fields": {
        "reviewer": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnvironmentProtectionRules1ReviewersReviewer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of reviewer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentReviewerType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnvironmentProtectionRules1ReviewersReviewer": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "parent": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permission": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "privacy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repositories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "slug": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Event": {
      "description": "Event",
      "fields": {
        "actor": {
          "description": "Actor",
          "type": {
            "name": "Actor",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "org": {
          "description": "Actor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Actor",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "payload": {
          "type": {
            "name": "EventPayload",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "public": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repo": {
          "type": {
            "name": "EventRepo",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "event"
    },
    "EventPayload": {
      "fields": {
        "action": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comment": {
          "description": "Comments provide a way for people to collaborate on an issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueComment",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issue": {
          "description": "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Issue",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventPayloadPages",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "EventPayloadPages": {
      "fields": {
        "action": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "page_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "summary": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventRepo": {
      "fields": {
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "ExternalGroup": {
      "description": "Information about an external group's usage and its members",
      "fields": {
        "group_id": {
          "description": "The internal ID of the group",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "group_name": {
          "description": "The display name for the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members": {
          "description": "An array of external members linked to this group",
          "type": {
            "element_type": {
              "name": "ExternalGroupMembers",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams": {
          "description": "An array of teams linked to this group",
          "type": {
            "element_type": {
              "name": "ExternalGroupTeams",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "updated_at": {
          "description": "The date when the group was last updated_at",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "external-group"
    },
    "ExternalGroupMembers": {
      "fields": {
        "member_email": {
          "description": "An email attached to a user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "member_id": {
          "description": "The internal user ID of the identity",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "member_login": {
          "description": "The handle/login for the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "member_name": {
          "description": "The user display name/profile name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ExternalGroupTeams": {
      "fields": {
        "team_id": {
          "description": "The id for a team",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "team_name": {
          "description": "The name of the team",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ExternalGroups": {
      "description": "A list of external groups available to be connected to a team",
      "fields": {
        "groups": {
          "description": "An array of external groups available to be mapped to a team",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ExternalGroupsGroups",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "external-groups"
    },
    "ExternalGroupsGroups": {
      "fields": {
        "group_id": {
          "description": "The internal ID of the group",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "group_name": {
          "description": "The display name of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time of the last update for this group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Feed": {
      "description": "Feed",
      "fields": {
        "_links": {
          "type": {
            "name": "FeedLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "current_user_actor_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "current_user_organization_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "current_user_organization_urls": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "URI",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri"
            }
          }
        },
        "current_user_public_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "current_user_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_discussions_category_url": {
          "description": "A feed of discussions for a given repository and category.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_discussions_url": {
          "description": "A feed of discussions for a given repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "security_advisories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "timeline_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "feed"
    },
    "FeedLinks": {
      "fields": {
        "current_user": {
          "description": "Hypermedia Link with Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkWithType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "current_user_actor": {
          "description": "Hypermedia Link with Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkWithType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "current_user_organization": {
          "description": "Hypermedia Link with Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkWithType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "current_user_organizations": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "LinkWithType",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "current_user_public": {
          "description": "Hypermedia Link with Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkWithType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository_discussions": {
          "description": "Hypermedia Link with Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkWithType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository_discussions_category": {
          "description": "Hypermedia Link with Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkWithType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "security_advisories": {
          "description": "Hypermedia Link with Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkWithType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "timeline": {
          "description": "Hypermedia Link with Type",
          "type": {
            "name": "LinkWithType",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "Hypermedia Link with Type",
          "type": {
            "name": "LinkWithType",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "FileCommit": {
      "description": "File Commit",
      "fields": {
        "commit": {
          "type": {
            "name": "FileCommitCommit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "content": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileCommitContent",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "file-commit"
    },
    "FileCommitCommit": {
      "fields": {
        "author": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileCommitCommitAuthor",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committer": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileCommitCommitCommitter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parents": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "FileCommitCommitParents",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tree": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileCommitCommitTree",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verification": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileCommitCommitVerification",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "FileCommitCommitAuthor": {
      "fields": {
        "date": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FileCommitCommitCommitter": {
      "fields": {
        "date": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FileCommitCommitParents": {
      "fields": {
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FileCommitCommitTree": {
      "fields": {
        "sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FileCommitCommitVerification": {
      "fields": {
        "payload": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signature": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "FileCommitContent": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FileCommitContentLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "download_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FileCommitContentLinks": {
      "fields": {
        "git": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FullRepository": {
      "description": "Full Repository",
      "fields": {
        "allow_auto_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_forking": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_update_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "anonymous_access_enabled": {
          "description": "Whether anonymous git access is allowed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archive_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "archived": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "assignees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blobs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "branches_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clone_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "code_of_conduct": {
          "description": "Code of Conduct Simple",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeOfConductSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "collaborators_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "compare_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contributors_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "custom_properties": {
          "description": "The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "default_branch": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delete_branch_on_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deployments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "downloads_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "fork": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "forks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "full_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_refs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_tags_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_discussions": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_downloads": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_pages": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "hooks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "is_template": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issue_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issue_events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keys_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "languages_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "license": {
          "description": "License Simple",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LicenseSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "master_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_message": {
          "description": "The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FullRepositoryMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_title": {
          "description": "The default value for a merge commit title.    - `PR_TITLE` - default to the pull request's title.   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FullRepositoryMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merges_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "milestones_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mirror_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "network_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifications_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "organization": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "parent": {
          "description": "A repository on GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Repository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FullRepositoryPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pulls_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "releases_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "security_and_analysis": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysis",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "size": {
          "description": "The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "source": {
          "description": "A repository on GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Repository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "squash_merge_commit_message": {
          "description": "The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FullRepositorySquashMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "squash_merge_commit_title": {
          "description": "The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FullRepositorySquashMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ssh_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stargazers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stargazers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "statuses_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscribers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subscribers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscription_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "svn_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "tags_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "temp_clone_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "template_repository": {
          "description": "A repository on GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Repository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "topics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "use_squash_pr_title_as_default": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "watchers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "watchers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "web_commit_signoff_required": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "full-repository"
    },
    "FullRepositoryPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GhesChecksSystemRequirements": {
      "fields": {
        "nodes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesChecksSystemRequirementsNodes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesChecksResultIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-checks-system-requirements"
    },
    "GhesChecksSystemRequirementsNodes": {
      "fields": {
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "roles_status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesChecksSystemRequirementsNodesRolesStatus",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesChecksResultIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesChecksSystemRequirementsNodesRolesStatus": {
      "fields": {
        "role": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesChecksResultIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesClusterStatus": {
      "fields": {
        "nodes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesClusterStatusNodes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesClusterStatusIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-cluster-status"
    },
    "GhesClusterStatusNodes": {
      "fields": {
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "services": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesClusterStatusNodesServices",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesClusterStatusIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesClusterStatusNodesServices": {
      "fields": {
        "details": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesClusterStatusIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesConfigInitRequestInput": {
      "fields": {
        "license": {
          "description": "The content of your _.ghl_ license file.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "description": "The root site administrator password.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-config-init-request"
    },
    "GhesConfigNodes": {
      "fields": {
        "nodes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesConfigNodesNodes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "topology": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesClusterTopology",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-config-nodes"
    },
    "GhesConfigNodesNodes": {
      "fields": {
        "cluster_roles": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesClusterRoles",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "replica": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "uuid": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesDeleteSshRequestInput": {
      "fields": {
        "key": {
          "description": "The public SSH key to remove from the `authorized_keys` file.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-delete-ssh-request"
    },
    "GhesDeleteSshResponse": {
      "fields": {
        "error": {
          "description": "Error message indicating the reason for the SSH key removal failure. This field is only present if the SSH key removal failed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hostname": {
          "description": "Hostname of the node where the SSH key was removed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "hostname"
          }
        },
        "message": {
          "description": "Message indicating the result of the SSH key removal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "uuid": {
          "description": "UUID of the SSH key that was removed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        }
      },
      "alias": "ghes-delete-ssh-response"
    },
    "GhesGetMaintenance": {
      "fields": {
        "can_unset_maintenance": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "connection_services": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesGetMaintenanceConnectionServices",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "hostname"
          }
        },
        "ip_exception_list": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "ip/cidr"
            }
          }
        },
        "maintenance_mode_message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scheduled_time": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Date",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date"
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetMaintenanceStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "uuid": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        }
      },
      "alias": "ghes-get-maintenance"
    },
    "GhesGetMaintenanceConnectionServices": {
      "fields": {
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GhesGetSettings": {
      "fields": {
        "admin_password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assets": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "auth_mode": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "avatar": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsAvatar",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "cas": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsCas",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "collectd": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsCollectd",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "configuration_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "configuration_run_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "customer": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsCustomer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "expire_sessions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "github_hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "github_oauth": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsGithubOauth",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "github_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsGithubSsl",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "http_proxy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "identicons_host": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ldap": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsLdap",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "license": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsLicense",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "load_balancer": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mapping": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsMapping",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ntp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsNtp",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsPages",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_mode": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "public_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "saml": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsSaml",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "signup_enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "smtp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsSmtp",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "snmp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsSnmp",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subdomain_isolation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "syslog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsSyslog",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "timezone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-get-settings"
    },
    "GhesGetSettingsAvatar": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "uri": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsCas": {
      "fields": {
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsCollectd": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "encryption": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "port": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "server": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsCustomer": {
      "fields": {
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public_key_data": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_key_data": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "uuid": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsGithubOauth": {
      "fields": {
        "client_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_secret": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_team": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsGithubSsl": {
      "fields": {
        "cert": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsLdap": {
      "fields": {
        "admin_group": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "base": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "bind_dn": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "host": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "method": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "port": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "posix_support": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsLdapProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reconciliation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesGetSettingsLdapReconciliation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "recursive_group_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "search_strategy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sync_enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "team_sync_interval": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "uid": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_groups": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "user_sync_emails": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "user_sync_interval": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "user_sync_keys": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "virtual_attribute_enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GhesGetSettingsLdapProfile": {
      "fields": {
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mail": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "uid": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsLdapReconciliation": {
      "fields": {
        "org": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsLicense": {
      "fields": {
        "cluster_support": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "evaluation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "expire_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "perpetual": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "seats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ssh_allowed": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "support_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unlimited_seating": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GhesGetSettingsMapping": {
      "fields": {
        "basemap": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "tileserver": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsNtp": {
      "fields": {
        "primary_server": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secondary_server": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsPages": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GhesGetSettingsSaml": {
      "fields": {
        "certificate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "certificate_path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disable_admin_demote": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "idp_initiated_sso": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issuer": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sso_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsSmtp": {
      "fields": {
        "address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "authentication": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "discard-to-noreply-address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "domain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enable_starttls_auto": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "noreply_address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "port": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "support_address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "support_address_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSettingsSnmp": {
      "fields": {
        "community": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GhesGetSettingsSyslog": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "protocol_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "server": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesGetSsh": {
      "fields": {
        "fingerprint": {
          "description": "The fingerprint of the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ssh-key fingerprint"
          }
        },
        "key": {
          "description": "The full public key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ssh-key"
          }
        }
      },
      "alias": "ghes-get-ssh"
    },
    "GhesLicenseCheck": {
      "fields": {
        "status": {
          "description": "The license status of the currently active enterprise license.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesLicenseCheckStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-license-check"
    },
    "GhesLicenseInfo": {
      "fields": {
        "advancedSecurityEnabled": {
          "description": "Whether the GitHub Advanced Security feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "advancedSecuritySeats": {
          "description": "If the GitHub Advanced Security feature is enabled, the seat count.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "clusterSupport": {
          "description": "Whether the cluster support feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "company": {
          "description": "The company under which the license is issued.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "croquetSupport": {
          "description": "Whether the GitHub Connect feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "customTerms": {
          "description": "Whether this license is issued under custom terms.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "evaluation": {
          "description": "Wheter this license is issued as an evaluation license.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "expireAt": {
          "description": "The expiration date of the license.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "insightsEnabled": {
          "description": "Whether the insights feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "insightsExpireAt": {
          "description": "If the insights feature is enabled, the expiration date.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "learningLabEvaluationExpires": {
          "description": "If the learning lab feature is enabled, the expiration date.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "learningLabSeats": {
          "description": "If the learning lab feature is enabled, the seat count.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "perpetual": {
          "description": "Whether the perpetual feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "referenceNumber": {
          "description": "The unique reference number of the license.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "seats": {
          "description": "If the license is issued with limited seating, the seat count.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "sshAllowed": {
          "description": "Whether the SSH feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "supportKey": {
          "description": "The support key of the license.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unlimitedSeating": {
          "description": "Whether the license is issued with unlimited seat count.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "ghes-license-info"
    },
    "GhesReplicationStatus": {
      "fields": {
        "nodes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesReplicationStatusNodes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesReplicationStatusIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-replication-status"
    },
    "GhesReplicationStatusNodes": {
      "fields": {
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "services": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GhesReplicationStatusNodesServices",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesReplicationStatusIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesReplicationStatusNodesServices": {
      "fields": {
        "details": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesReplicationStatusIndicator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GhesSetMaintenanceRequestInput": {
      "fields": {
        "enabled": {
          "description": "Whether to enable maintenance mode.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "ip_exception_list": {
          "description": "The list of IP addresses to exclude from maintenance mode. IPv4, IPv6, and CIDR addresses are supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "ip/cidr"
            }
          }
        },
        "maintenance_mode_message": {
          "description": "The message to display to users when maintenance mode is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "uuid": {
          "description": "The UUID of the node to target. This parameter is incompatible with maintenance mode scheduling. Only use `uuid` if the value of `when` is empty or `now`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        },
        "when": {
          "description": "The time to enable maintenance mode. If this parameter is empty or set to `now`, maintenance mode is enabled immediately. Otherwise, maintenance mode is enabled at the specified time. The format is ISO 8601.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "ghes-set-maintenance-request"
    },
    "GhesSetMaintenanceResponse": {
      "fields": {
        "error": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "hostname"
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "uuid": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        }
      },
      "alias": "ghes-set-maintenance-response"
    },
    "GhesSetSshRequestInput": {
      "fields": {
        "key": {
          "description": "The public SSH key to add to the `authorized_keys` file.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-set-ssh-request"
    },
    "GhesSetSshResponse": {
      "fields": {
        "error": {
          "description": "Error message indicating the reason for the SSH key addition failure. This field is only present if the SSH key addition failed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hostname": {
          "description": "Hostname of the node where the SSH key was added.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "hostname"
          }
        },
        "message": {
          "description": "Message indicating the result of the SSH key addition.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "modified": {
          "description": "Whether the SSH key was already present on the `authorized_keys` file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "uuid": {
          "description": "UUID of the SSH key that was added.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UUID",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uuid"
          }
        }
      },
      "alias": "ghes-set-ssh-response"
    },
    "GhesUploadLicenseRequestInput": {
      "fields": {
        "license": {
          "description": "The content of your _.ghl_ license file.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ghes-upload-license-request"
    },
    "GhesVersion": {
      "fields": {
        "hostname": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "hostname"
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesVersionVersion",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "ghes-version"
    },
    "GhesVersionVersion": {
      "fields": {
        "build_date": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Date",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date"
          }
        },
        "build_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "[0-9a-f]{8}"
          }
        },
        "platform": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GhesVersionVersionPlatform",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "[0-9]\\.[0-9]{2}\\.[0-9]"
          }
        }
      }
    },
    "GistComment": {
      "description": "A comment made to a gist.",
      "fields": {
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "The comment text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 65535
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "gist-comment"
    },
    "GistCommit": {
      "description": "Gist Commit",
      "fields": {
        "change_status": {
          "type": {
            "name": "GistCommitChangeStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committed_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "version": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "gist-commit"
    },
    "GistCommitChangeStatus": {
      "fields": {
        "additions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "deletions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GistHistory": {
      "description": "Gist History",
      "fields": {
        "change_status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GistHistoryChangeStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "gist-history"
    },
    "GistHistoryChangeStatus": {
      "fields": {
        "additions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "deletions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "GistSimple": {
      "description": "Gist Simple",
      "fields": {
        "comments": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "comments_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "files": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "fork_of": {
          "description": "Gist",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GistSimpleForkOf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "forks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GistSimpleForks",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "forks_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_pull_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_push_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "history": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GistHistory",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "public": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "truncated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "gist-simple"
    },
    "GistSimpleForkOf": {
      "description": "Gist",
      "fields": {
        "comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "commits_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "files": {
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "forks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "forks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "git_pull_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "git_push_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "history": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "public": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "truncated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GistSimpleForks": {
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "Public User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PublicUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GistsCreateBodyInput": {
      "fields": {
        "description": {
          "description": "Description of the gist",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "files": {
          "description": "Names and content for the files that make up the gist",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "public": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {}
        }
      }
    },
    "GistsCreateCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The comment text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 65535
          }
        }
      }
    },
    "GistsUpdateBodyInput": {
      "fields": {
        "description": {
          "description": "The description of the gist.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "files": {
          "description": "The gist files to be updated, renamed, or deleted. Each `key` must match the current filename (including extension) of the targeted gist file. For example: `hello.py`.  To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be deleted if the specified object does not contain at least one of `content` or `filename`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GistsUpdateCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The comment text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 65535
          }
        }
      }
    },
    "GitCommit": {
      "description": "Low-level Git commit operations within a repository",
      "fields": {
        "author": {
          "description": "Identifying information for the git-user",
          "type": {
            "name": "GitCommitAuthor",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committer": {
          "description": "Identifying information for the git-user",
          "type": {
            "name": "GitCommitCommitter",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "message": {
          "description": "Message describing the purpose of the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parents": {
          "type": {
            "element_type": {
              "name": "GitCommitParents",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "sha": {
          "description": "SHA for the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tree": {
          "type": {
            "name": "GitCommitTree",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "verification": {
          "type": {
            "name": "GitCommitVerification",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "git-commit"
    },
    "GitCommitAuthor": {
      "description": "Identifying information for the git-user",
      "fields": {
        "date": {
          "description": "Timestamp of the commit",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "description": "Git email address of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the git user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCommitCommitter": {
      "description": "Identifying information for the git-user",
      "fields": {
        "date": {
          "description": "Timestamp of the commit",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "description": "Git email address of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the git user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCommitParents": {
      "fields": {
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "sha": {
          "description": "SHA for the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "GitCommitTree": {
      "fields": {
        "sha": {
          "description": "SHA for the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "GitCommitVerification": {
      "fields": {
        "payload": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signature": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GitCreateBlobBodyInput": {
      "fields": {
        "content": {
          "description": "The new blob's content.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "encoding": {
          "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCreateCommitBodyAuthorInput": {
      "description": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
      "fields": {
        "date": {
          "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "description": "The email of the author (or committer) of the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the author (or committer) of the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCreateCommitBodyCommitterInput": {
      "description": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
      "fields": {
        "date": {
          "description": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "description": "The email of the author (or committer) of the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the author (or committer) of the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCreateCommitBodyInput": {
      "fields": {
        "author": {
          "description": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitCreateCommitBodyAuthorInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committer": {
          "description": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitCreateCommitBodyCommitterInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "message": {
          "description": "The commit message",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parents": {
          "description": "The full SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "signature": {
          "description": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tree": {
          "description": "The SHA of the tree object this commit points to",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCreateRefBodyInput": {
      "fields": {
        "ref": {
          "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "description": "The SHA1 value for this reference.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCreateTagBodyInput": {
      "fields": {
        "message": {
          "description": "The tag message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "description": "The SHA of the git object this is tagging.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tag": {
          "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tagger": {
          "description": "An object with information about the individual creating the tag.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitCreateTagBodyTaggerInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
          "type": {
            "name": "GitCreateTagBodyType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCreateTagBodyTaggerInput": {
      "description": "An object with information about the individual creating the tag.",
      "fields": {
        "date": {
          "description": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "description": "The email of the author of the tag",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the author of the tag",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitCreateTreeBodyInput": {
      "fields": {
        "base_tree": {
          "description": "The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on. If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tree": {
          "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.",
          "type": {
            "element_type": {
              "name": "GitCreateTreeBodyTreeInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "GitCreateTreeBodyTreeInput": {
      "fields": {
        "content": {
          "description": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mode": {
          "description": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitCreateTreeBodyTreeMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "description": "The file referenced in the tree.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "description": "The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.      **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Either `blob`, `tree`, or `commit`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GitCreateTreeBodyTreeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitRef": {
      "description": "Git references within a repository",
      "fields": {
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "GitRefObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ref": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "git-ref"
    },
    "GitRefObject": {
      "fields": {
        "sha": {
          "description": "SHA for the reference",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 40,
            "minLength": 40
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "GitTag": {
      "description": "Metadata for a Git tag",
      "fields": {
        "message": {
          "description": "Message describing the purpose of the tag",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object": {
          "type": {
            "name": "GitTagObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tag": {
          "description": "Name of the tag",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tagger": {
          "type": {
            "name": "GitTagTagger",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "description": "URL for the tag",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "verification": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Verification",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "git-tag"
    },
    "GitTagObject": {
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "GitTagTagger": {
      "fields": {
        "date": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitTree": {
      "description": "The hierarchy between files in a Git repository.",
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tree": {
          "description": "Objects specifying a tree structure",
          "type": {
            "element_type": {
              "name": "GitTreeTree",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "truncated": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "git-tree"
    },
    "GitTreeTree": {
      "fields": {
        "mode": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitUpdateRefBodyInput": {
      "fields": {
        "force": {
          "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "sha": {
          "description": "The SHA1 value to set this reference to",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GitUser": {
      "description": "Metaproperties for Git author/committer information.",
      "fields": {
        "date": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "git-user"
    },
    "GitignoreTemplate": {
      "description": "Gitignore Template",
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "gitignore-template"
    },
    "GlobalAdvisory": {
      "description": "A GitHub Security Advisory.",
      "fields": {
        "credits": {
          "description": "In GitHub Enterprise Server, this field will always be empty because the user metadata of credited users will not be available.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GlobalAdvisoryCredits",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "cve_id": {
          "description": "The Common Vulnerabilities and Exposures (CVE) ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cvss": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GlobalAdvisoryCvss",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "cvss_severities": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CvssSeverities",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "cwes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GlobalAdvisoryCwes",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "description": {
          "description": "A detailed description of what the advisory entails.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 65535
          }
        },
        "epss": {
          "description": "The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAdvisoryEpss",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ghsa_id": {
          "description": "The GitHub Security Advisory ID.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "github_reviewed_at": {
          "description": "The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The URL for the advisory.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "identifiers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GlobalAdvisoryIdentifiers",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "nvd_published_at": {
          "description": "The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format. This field is only populated when the advisory is imported from the National Vulnerability Database.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "published_at": {
          "description": "The date and time of when the advisory was published, in ISO 8601 format.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "references": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_advisory_url": {
          "description": "The API URL for the repository advisory.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "severity": {
          "description": "The severity of the advisory.",
          "type": {
            "name": "GlobalAdvisorySeverity",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source_code_location": {
          "description": "The URL of the advisory's source code.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "summary": {
          "description": "A short summary of the advisory.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        },
        "type": {
          "description": "The type of advisory.",
          "type": {
            "name": "GlobalAdvisoryType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The date and time of when the advisory was last updated, in ISO 8601 format.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The API URL for the advisory.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vulnerabilities": {
          "description": "The products and respective version ranges affected by the advisory.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Vulnerability",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "withdrawn_at": {
          "description": "The date and time of when the advisory was withdrawn, in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "global-advisory"
    },
    "GlobalAdvisoryCredits": {
      "fields": {
        "type": {
          "description": "The type of credit the user is receiving.",
          "type": {
            "name": "SecurityAdvisoryCreditTypes",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GlobalAdvisoryCvss": {
      "fields": {
        "score": {
          "description": "The CVSS score.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 10,
            "minimum": 0
          }
        },
        "vector_string": {
          "description": "The CVSS vector.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GlobalAdvisoryCwes": {
      "fields": {
        "cwe_id": {
          "description": "The Common Weakness Enumeration (CWE) identifier.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the CWE.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GlobalAdvisoryIdentifiers": {
      "fields": {
        "type": {
          "description": "The type of identifier.",
          "type": {
            "name": "GlobalAdvisoryIdentifiersType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The identifier value.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GlobalHook": {
      "fields": {
        "active": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GlobalHookConfig",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ping_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "global-hook"
    },
    "GlobalHook2": {
      "fields": {
        "active": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GlobalHook2Config",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ping_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "global-hook-2"
    },
    "GlobalHook2Config": {
      "fields": {
        "content_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GlobalHookConfig": {
      "fields": {
        "content_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GpgKey": {
      "description": "A unique encryption key",
      "fields": {
        "can_certify": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "can_encrypt_comms": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "can_encrypt_storage": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "can_sign": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "emails": {
          "type": {
            "element_type": {
              "name": "GpgKeyEmails",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "expires_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "key_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primary_key_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "raw_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "revoked": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subkeys": {
          "type": {
            "element_type": {
              "name": "GpgKeySubkeys",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "gpg-key"
    },
    "GpgKeyEmails": {
      "fields": {
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GpgKeySubkeys": {
      "fields": {
        "can_certify": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "can_encrypt_comms": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "can_encrypt_storage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "can_sign": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "emails": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GpgKeySubkeysEmails",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "expires_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "key_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primary_key_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "raw_key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "revoked": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "subkeys": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        }
      }
    },
    "GpgKeySubkeysEmails": {
      "fields": {
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GroupInput": {
      "fields": {
        "displayName": {
          "description": "A human-readable name for a security group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalId": {
          "description": "A unique identifier for the resource as defined by the provisioning client.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members": {
          "description": "The group members.",
          "type": {
            "element_type": {
              "name": "GroupMembersInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "schemas": {
          "description": "The URIs that are used to indicate the namespaces of the SCIM schemas.",
          "type": {
            "element_type": {
              "name": "GroupSchemas",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "group"
    },
    "GroupMembersInput": {
      "fields": {
        "displayName": {
          "description": "The display name associated with the member",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The local unique identifier for the member",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Hook": {
      "description": "Webhooks for repositories.",
      "fields": {
        "active": {
          "description": "Determines whether the hook is actually triggered on pushes.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "description": "Configuration object of the webhook",
          "type": {
            "name": "WebhookConfig",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "deliveries_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events": {
          "description": "Determines what events the hook is triggered for. Default: ['push'].",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "description": "Unique identifier of the webhook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "last_response": {
          "type": {
            "name": "HookResponse",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of a valid service, use 'web' for a webhook.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ping_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "test_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "hook"
    },
    "HookDelivery": {
      "description": "Delivery made by a webhook.",
      "fields": {
        "action": {
          "description": "The type of activity for the event that triggered the delivery.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delivered_at": {
          "description": "Time when the delivery was delivered.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "duration": {
          "description": "Time spent delivering.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "event": {
          "description": "The event that triggered the delivery.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "guid": {
          "description": "Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "installation_id": {
          "description": "The id of the GitHub App installation associated with this event.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "redelivery": {
          "description": "Whether the delivery is a redelivery.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repository_id": {
          "description": "The id of the repository associated with this event.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "request": {
          "type": {
            "name": "HookDeliveryRequest",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "response": {
          "type": {
            "name": "HookDeliveryResponse",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "Description of the status of the attempted delivery",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status_code": {
          "description": "Status code received when delivery was made.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "throttled_at": {
          "description": "Time when the webhook delivery was throttled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The URL target of the delivery.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "hook-delivery"
    },
    "HookDeliveryItem": {
      "description": "Delivery made by a webhook, without request and response information.",
      "fields": {
        "action": {
          "description": "The type of activity for the event that triggered the delivery.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delivered_at": {
          "description": "Time when the webhook delivery occurred.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "duration": {
          "description": "Time spent delivering.",
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "event": {
          "description": "The event that triggered the delivery.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "guid": {
          "description": "Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the webhook delivery.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "installation_id": {
          "description": "The id of the GitHub App installation associated with this event.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "redelivery": {
          "description": "Whether the webhook delivery is a redelivery.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repository_id": {
          "description": "The id of the repository associated with this event.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "status": {
          "description": "Describes the response returned after attempting the delivery.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status_code": {
          "description": "Status code received when delivery was made.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "throttled_at": {
          "description": "Time when the webhook delivery was throttled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "hook-delivery-item"
    },
    "HookDeliveryRequest": {
      "fields": {
        "headers": {
          "description": "The request headers sent with the webhook delivery.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "payload": {
          "description": "The webhook payload.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "HookDeliveryResponse": {
      "fields": {
        "headers": {
          "description": "The response headers received when the delivery was made.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "payload": {
          "description": "The response payload received.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "HookResponse": {
      "fields": {
        "code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "hook-response"
    },
    "Hovercard": {
      "description": "Hovercard",
      "fields": {
        "contexts": {
          "type": {
            "element_type": {
              "name": "HovercardContexts",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "hovercard"
    },
    "HovercardContexts": {
      "fields": {
        "message": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "octicon": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Installation": {
      "description": "Installation",
      "fields": {
        "access_tokens_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "account": {
          "type": {
            "name": "InstallationAccount",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "app_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "app_slug": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contact_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "events": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "has_multiple_single_files": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "The ID of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "permissions": {
          "description": "The permissions granted to the user access token.",
          "type": {
            "name": "AppPermissions",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repository_selection": {
          "description": "Describe whether all repositories have been selected or there's a selection involved",
          "type": {
            "name": "InstallationRepositorySelection",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file_paths": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "suspended_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "suspended_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "target_id": {
          "description": "The ID of the user or organization this token is being scoped to.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "target_type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "installation"
    },
    "InstallationAccount": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A short description of the enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the enterprise",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the enterprise.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "slug": {
          "description": "The slug url identifier for the enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website_url": {
          "description": "The enterprise's website URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "InstallationToken": {
      "description": "Authentication token for a GitHub App installed on a user or org.",
      "fields": {
        "expires_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_multiple_single_files": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "permissions": {
          "description": "The permissions granted to the user access token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Repository",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository_selection": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InstallationTokenRepositorySelection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file_paths": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "installation-token"
    },
    "Integration": {
      "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
      "fields": {
        "client_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_secret": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events": {
          "description": "The list of events for the GitHub app",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "external_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the GitHub app",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "installations_count": {
          "description": "The number of installations associated with the GitHub app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the GitHub app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "type": {
            "name": "IntegrationOwner",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pem": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "The set of permissions for the GitHub app",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "slug": {
          "description": "The slug name of the GitHub app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "webhook_secret": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "integration"
    },
    "IntegrationInstallationRequest": {
      "description": "Request to install an integration on a target",
      "fields": {
        "account": {
          "type": {
            "name": "IntegrationInstallationRequestAccount",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique identifier of the request installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "requester": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "integration-installation-request"
    },
    "IntegrationInstallationRequestAccount": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A short description of the enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the enterprise",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the enterprise.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "slug": {
          "description": "The slug url identifier for the enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website_url": {
          "description": "The enterprise's website URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "IntegrationOwner": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A short description of the enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the enterprise",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the enterprise.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "slug": {
          "description": "The slug url identifier for the enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website_url": {
          "description": "The enterprise's website URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "Issue": {
      "description": "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
      "fields": {
        "active_lock_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignees": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "Contents of the issue",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "closed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "closed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "draft": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "labels": {
          "description": "Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository",
          "type": {
            "element_type": {
              "name": "JSON",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "labels_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "locked": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "milestone": {
          "description": "A collection of related issues and pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Milestone",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "description": "Number uniquely identifying the issue within its repository",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_request": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuePullRequest",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository": {
          "description": "A repository on GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Repository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "state": {
          "description": "State of the issue; either 'open' or 'closed'",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state_reason": {
          "description": "The reason for the current state",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueStateReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sub_issues_summary": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SubIssuesSummary",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "timeline_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "title": {
          "description": "Title of the issue",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "URL for the issue",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "issue"
    },
    "IssueComment": {
      "description": "Comments provide a way for people to collaborate on an issue.",
      "fields": {
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "Contents of the issue comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the issue comment",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "issue_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "URL for the issue comment",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "issue-comment"
    },
    "IssueEvent": {
      "description": "Issue Event",
      "fields": {
        "actor": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assigner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorAssociation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "dismissed_review": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueEventDismissedReview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "event": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "issue": {
          "description": "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Issue",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "label": {
          "description": "Issue Event Label",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueEventLabel",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lock_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "milestone": {
          "description": "Issue Event Milestone",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueEventMilestone",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "project_card": {
          "description": "Issue Event Project Card",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueEventProjectCard",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rename": {
          "description": "Issue Event Rename",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueEventRename",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "requested_reviewer": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "requested_team": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Team",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "review_requester": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "issue-event"
    },
    "IssueEventDismissedReview": {
      "fields": {
        "dismissal_commit_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dismissal_message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "review_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "issue-event-dismissed-review"
    },
    "IssueEventForIssue": {
      "description": "Issue Event for Issue",
      "fields": {
        "actor": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assigner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "commit_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dismissed_review": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReviewDismissedIssueEventDismissedReview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "event": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "label": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lock_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "milestone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "project_card": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rename": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RenamedIssueEventRename",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "requested_reviewer": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "requested_team": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Team",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "review_requester": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssueEventLabel": {
      "description": "Issue Event Label",
      "fields": {
        "color": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "issue-event-label"
    },
    "IssueEventMilestone": {
      "description": "Issue Event Milestone",
      "fields": {
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "issue-event-milestone"
    },
    "IssueEventProjectCard": {
      "description": "Issue Event Project Card",
      "fields": {
        "column_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "previous_column_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "project_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "project_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "issue-event-project-card"
    },
    "IssueEventRename": {
      "description": "Issue Event Rename",
      "fields": {
        "from": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "to": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "issue-event-rename"
    },
    "IssuePullRequest": {
      "fields": {
        "diff_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "merged_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "patch_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "IssueSearchResultItem": {
      "description": "Issue Search Result Item",
      "fields": {
        "active_lock_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignees": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "closed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "draft": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "labels": {
          "type": {
            "element_type": {
              "name": "IssueSearchResultItemLabels",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "labels_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "locked": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "milestone": {
          "description": "A collection of related issues and pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Milestone",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_request": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueSearchResultItemPullRequest",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository": {
          "description": "A repository on GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Repository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "score": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sub_issues_summary": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueSearchResultItemSubIssuesSummary",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "text_matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "timeline_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "issue-search-result-item"
    },
    "IssueSearchResultItemLabels": {
      "fields": {
        "color": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssueSearchResultItemPullRequest": {
      "fields": {
        "diff_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "merged_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "patch_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "IssueSearchResultItemSubIssuesSummary": {
      "fields": {
        "completed": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "percent_completed": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "IssueType": {
      "description": "The type of issue.",
      "fields": {
        "color": {
          "description": "The color of the issue type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssueTypeColor",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "description": "The time the issue type created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "The description of the issue type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of the issue type.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_enabled": {
          "description": "The enabled state of the issue type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of the issue type.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "description": "The node identifier of the issue type.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time the issue type last updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "issue-type"
    },
    "IssuesAddAssigneesBodyInput": {
      "fields": {
        "assignees": {
          "description": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "IssuesAddLabelsBody0Input": {
      "fields": {
        "labels": {
          "description": "The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see \"[Set labels for an issue](https://docs.github.com/enterprise-server@3.15/rest/issues/labels#set-labels-for-an-issue).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "IssuesAddLabelsBody2Input": {
      "fields": {
        "labels": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IssuesAddLabelsBody2LabelsInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "IssuesAddLabelsBody2LabelsInput": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesAddLabelsBody3Input": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesCreateBodyInput": {
      "fields": {
        "assignee": {
          "description": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is closing down.**_",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignees": {
          "description": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "The contents of the issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels": {
          "description": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "milestone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string",
              "integer"
            ]
          }
        },
        "title": {
          "description": "The title of the issue.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {}
        },
        "type": {
          "description": "The name of the issue type to associate with this issue. _NOTE: Only users with push access can set the type for new issues. The type is silently dropped otherwise._",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesCreateCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The contents of the comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesCreateLabelBodyInput": {
      "fields": {
        "color": {
          "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A short description of the label. Must be 100 characters or fewer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\"",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesCreateMilestoneBodyInput": {
      "fields": {
        "description": {
          "description": "A description of the milestone.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "due_on": {
          "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "state": {
          "description": "The state of the milestone. Either `open` or `closed`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesCreateMilestoneBodyState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the milestone.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesLockBodyInput": {
      "fields": {
        "lock_reason": {
          "description": "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:    * `off-topic`    * `too heated`    * `resolved`    * `spam`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesLockBodyLockReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesRemoveAssigneesBodyInput": {
      "fields": {
        "assignees": {
          "description": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "IssuesSetLabelsBody0Input": {
      "fields": {
        "labels": {
          "description": "The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see \"[Add labels to an issue](https://docs.github.com/enterprise-server@3.15/rest/issues/labels#add-labels-to-an-issue).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "IssuesSetLabelsBody2Input": {
      "fields": {
        "labels": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IssuesSetLabelsBody2LabelsInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "IssuesSetLabelsBody2LabelsInput": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesSetLabelsBody3Input": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesUpdateBodyInput": {
      "fields": {
        "assignee": {
          "description": "Username to assign to this issue. **This field is closing down.**",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignees": {
          "description": "Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "The contents of the issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels": {
          "description": "Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "milestone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string",
              "integer"
            ]
          }
        },
        "state": {
          "description": "The open or closed state of the issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesUpdateBodyState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state_reason": {
          "description": "The reason for the state change. Ignored unless `state` is changed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesUpdateBodyStateReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the issue.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string",
              "integer"
            ]
          }
        },
        "type": {
          "description": "The name of the issue type to associate with this issue or use `null` to remove the current issue type. Only users with push access can set the type for issues. Without push access to the repository, type changes are silently dropped.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesUpdateCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The contents of the comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesUpdateLabelBodyInput": {
      "fields": {
        "color": {
          "description": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A short description of the label. Must be 100 characters or fewer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "new_name": {
          "description": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IssuesUpdateMilestoneBodyInput": {
      "fields": {
        "description": {
          "description": "A description of the milestone.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "due_on": {
          "description": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "state": {
          "description": "The state of the milestone. Either `open` or `closed`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesUpdateMilestoneBodyState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the milestone.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Job": {
      "description": "Information of a job execution in a workflow run",
      "fields": {
        "check_run_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "completed_at": {
          "description": "The time that the job finished, in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "conclusion": {
          "description": "The outcome of the job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JobConclusion",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "description": "The time that the job created, in ISO 8601 format.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "head_branch": {
          "description": "The name of the current branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head_sha": {
          "description": "The SHA of the commit that is being run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The id of the job.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "labels": {
          "description": "Labels for the workflow job. Specified by the \"runs_on\" attribute in the action's workflow file.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the job.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "run_attempt": {
          "description": "Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "run_id": {
          "description": "The id of the associated workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "run_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner_group_id": {
          "description": "The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "runner_group_name": {
          "description": "The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner_id": {
          "description": "The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "runner_name": {
          "description": "The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "started_at": {
          "description": "The time that the job started, in ISO 8601 format.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "description": "The phase of the lifecycle that the job is currently in.",
          "type": {
            "name": "JobStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "steps": {
          "description": "Steps in this job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JobSteps",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workflow_name": {
          "description": "The name of the workflow.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "job"
    },
    "JobSteps": {
      "fields": {
        "completed_at": {
          "description": "The time that the job finished, in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "conclusion": {
          "description": "The outcome of the job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the job.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "started_at": {
          "description": "The time that the step started, in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "description": "The phase of the lifecycle that the job is currently in.",
          "type": {
            "name": "JobStepsStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Key": {
      "description": "Key",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "read_only": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "key"
    },
    "KeySimple": {
      "description": "Key Simple",
      "fields": {
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "key-simple"
    },
    "Label": {
      "description": "Color-coded labels help you categorize and filter your issues (just like labels in Gmail).",
      "fields": {
        "color": {
          "description": "6-character hex code, without the leading #, identifying the color",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "description": "Whether this label comes by default in a new repository.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "Optional description of the label, such as its purpose.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for the label.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "description": "The name of the label.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "URL for the label",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "label"
    },
    "LabelSearchResultItem": {
      "description": "Label Search Result Item",
      "fields": {
        "color": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "score": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "text_matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "label-search-result-item"
    },
    "LdapMappingTeam": {
      "fields": {
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ldap_dn": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "permission": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privacy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "slug": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ldap-mapping-team"
    },
    "LdapMappingUser": {
      "description": "Ldap Private User",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "bio": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "business_plus": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "collaborators": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "disk_usage": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "followers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "ldap_dn": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "owned_private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LdapMappingUserPlan",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "suspended_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "total_private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "two_factor_authentication": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ldap-mapping-user"
    },
    "LdapMappingUserPlan": {
      "fields": {
        "collaborators": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "space": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "License": {
      "description": "License",
      "fields": {
        "body": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "conditions": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "description": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "featured": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "implementation": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "limitations": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "spdx_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "license"
    },
    "LicenseContent": {
      "description": "License Content",
      "fields": {
        "_links": {
          "type": {
            "name": "LicenseContentLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "content": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "download_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "encoding": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "license": {
          "description": "License Simple",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LicenseSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "license-content"
    },
    "LicenseContentLinks": {
      "fields": {
        "git": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "self": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "LicenseInfo": {
      "fields": {
        "days_until_expiration": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "expire_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kind": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "seats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "seats_available": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "seats_used": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "license-info"
    },
    "LicenseSimple": {
      "description": "License Simple",
      "fields": {
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "spdx_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "license-simple"
    },
    "Link": {
      "description": "Hypermedia Link",
      "fields": {
        "href": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "link"
    },
    "LinkWithType": {
      "description": "Hypermedia Link with Type",
      "fields": {
        "href": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "link-with-type"
    },
    "MarkdownRenderBodyInput": {
      "fields": {
        "context": {
          "description": "The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mode": {
          "description": "The rendering mode.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MarkdownRenderBodyMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text": {
          "description": "The Markdown text to render in HTML.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MergedUpstream": {
      "description": "Results of a successful merge upstream request",
      "fields": {
        "base_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MergedUpstreamMergeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "merged-upstream"
    },
    "Meta": {
      "description": "The metadata associated with the creation/updates to the user.",
      "fields": {
        "created": {
          "description": "A date and time when the user was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastModified": {
          "description": "A data and time when the user was last modified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "description": "A URL location of an object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resourceType": {
          "description": "A type of a resource",
          "type": {
            "name": "MetaResourceType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "meta"
    },
    "Migration": {
      "description": "A migration.",
      "fields": {
        "archive_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "exclude": {
          "description": "Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `\"repositories\"`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "exclude_attachments": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_git_data": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_metadata": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_owner_projects": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_releases": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "guid": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "lock_repositories": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "org_metadata_only": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories": {
          "description": "The repositories included in the migration. Only returned for export migrations.",
          "type": {
            "element_type": {
              "name": "Repository",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "migration"
    },
    "MigrationsStartForAuthenticatedUserBodyInput": {
      "fields": {
        "exclude": {
          "description": "Exclude attributes from the API response to improve performance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "MigrationsStartForAuthenticatedUserBodyExclude",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "exclude_attachments": {
          "description": "Do not include attachments in the migration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_git_data": {
          "description": "Indicates whether the repository git data should be excluded from the migration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_metadata": {
          "description": "Indicates whether metadata should be excluded and only git source should be included for the migration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_owner_projects": {
          "description": "Indicates whether projects owned by the organization or users should be excluded.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_releases": {
          "description": "Do not include releases in the migration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "lock_repositories": {
          "description": "Lock the repositories being migrated at the start of the migration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "org_metadata_only": {
          "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repositories": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "MigrationsStartForOrgBodyInput": {
      "fields": {
        "exclude": {
          "description": "Exclude related items from being returned in the response in order to improve performance of the request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "MigrationsStartForOrgBodyExclude",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "exclude_attachments": {
          "description": "Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_git_data": {
          "description": "Indicates whether the repository git data should be excluded from the migration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_metadata": {
          "description": "Indicates whether metadata should be excluded and only git source should be included for the migration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_owner_projects": {
          "description": "Indicates whether projects owned by the organization or users should be excluded. from the migration.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exclude_releases": {
          "description": "Indicates whether releases should be excluded from the migration (to reduce migration archive file size).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "lock_repositories": {
          "description": "Indicates whether repositories should be locked (to prevent manipulation) while migrating data.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "org_metadata_only": {
          "description": "Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repositories": {
          "description": "A list of arrays indicating which repositories should be migrated.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "Milestone": {
      "description": "A collection of related issues and pull requests.",
      "fields": {
        "closed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "closed_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "creator": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "due_on": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "labels_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "description": "The number of the milestone.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "state": {
          "description": "The state of the milestone.",
          "type": {
            "name": "MilestoneState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the milestone.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "milestone"
    },
    "MinimalRepository": {
      "description": "Minimal Repository",
      "fields": {
        "allow_forking": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archive_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "archived": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "assignees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blobs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "branches_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clone_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "code_of_conduct": {
          "description": "Code Of Conduct",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CodeOfConduct",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "collaborators_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "compare_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contributors_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "default_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delete_branch_on_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deployments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "downloads_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "fork": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "forks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "full_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_refs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_tags_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_discussions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_downloads": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hooks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "is_template": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issue_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issue_events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keys_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "languages_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "license": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MinimalRepositoryLicense",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "merges_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "milestones_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mirror_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "network_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifications_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open_issues": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MinimalRepositoryPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pulls_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "releases_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "security_and_analysis": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysis",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "size": {
          "description": "The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ssh_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stargazers_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stargazers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "statuses_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscribers_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subscribers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscription_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "svn_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tags_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "temp_clone_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "topics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "visibility": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "watchers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "watchers_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "web_commit_signoff_required": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "minimal-repository"
    },
    "MinimalRepositoryLicense": {
      "fields": {
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "spdx_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "MinimalRepositoryPermissions": {
      "fields": {
        "admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "OauthAuthorizationsCreateAuthorizationBodyInput": {
      "fields": {
        "client_id": {
          "description": "The OAuth app client key for which to create the token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 20
          }
        },
        "client_secret": {
          "description": "The OAuth app client secret for which to create the token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 40
          }
        },
        "fingerprint": {
          "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note": {
          "description": "A note to remind you what the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note_url": {
          "description": "A URL to remind you what app the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "A list of scopes that this authorization is in.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodyInput": {
      "fields": {
        "client_secret": {
          "description": "The OAuth app client secret for which to create the token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 40
          }
        },
        "note": {
          "description": "A note to remind you what the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note_url": {
          "description": "A URL to remind you what app the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "A list of scopes that this authorization is in.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OauthAuthorizationsGetOrCreateAuthorizationForAppBodyInput": {
      "fields": {
        "client_secret": {
          "description": "The OAuth app client secret for which to create the token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 40
          }
        },
        "fingerprint": {
          "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note": {
          "description": "A note to remind you what the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note_url": {
          "description": "A URL to remind you what app the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "A list of scopes that this authorization is in.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OauthAuthorizationsUpdateAuthorizationBodyInput": {
      "fields": {
        "add_scopes": {
          "description": "A list of scopes to add to this authorization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "fingerprint": {
          "description": "A unique string to distinguish an authorization from others created for the same client ID and user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note": {
          "description": "A note to remind you what the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note_url": {
          "description": "A URL to remind you what app the OAuth token is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "remove_scopes": {
          "description": "A list of scopes to remove from this authorization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scopes": {
          "description": "A list of scopes that this authorization is in.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OidcCustomSub": {
      "description": "Actions OIDC Subject customization",
      "fields": {
        "include_claim_keys": {
          "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "oidc-custom-sub"
    },
    "OidcCustomSubInput": {
      "description": "Actions OIDC Subject customization",
      "fields": {
        "include_claim_keys": {
          "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "oidc-custom-sub"
    },
    "OidcCustomSubRepo": {
      "description": "Actions OIDC subject customization for a repository",
      "fields": {
        "include_claim_keys": {
          "description": "Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "use_default": {
          "description": "Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "oidc-custom-sub-repo"
    },
    "OrgHook": {
      "description": "Org Hook",
      "fields": {
        "active": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "type": {
            "name": "OrgHookConfig",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "deliveries_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ping_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "org-hook"
    },
    "OrgHookConfig": {
      "fields": {
        "content_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgMembership": {
      "description": "Org Membership",
      "fields": {
        "organization": {
          "description": "A GitHub organization.",
          "type": {
            "name": "OrganizationSimple",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "organization_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgMembershipPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "role": {
          "description": "The user's membership type in the organization.",
          "type": {
            "name": "OrgMembershipRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.",
          "type": {
            "name": "OrgMembershipState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "org-membership"
    },
    "OrgMembershipPermissions": {
      "fields": {
        "can_create_repository": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "OrgPreReceiveHook": {
      "fields": {
        "allow_downstream_configuration": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "configuration_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enforcement": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "org-pre-receive-hook"
    },
    "OrgRepoCustomPropertyValues": {
      "description": "List of custom property values for a repository",
      "fields": {
        "properties": {
          "description": "List of custom property names and associated values",
          "type": {
            "element_type": {
              "name": "CustomPropertyValue",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository_full_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repository_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "org-repo-custom-property-values"
    },
    "OrganizationActionsSecret": {
      "description": "Secrets for GitHub Actions for an organization.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repositories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "visibility": {
          "description": "Visibility of a secret",
          "type": {
            "name": "OrganizationActionsSecretVisibility",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "organization-actions-secret"
    },
    "OrganizationActionsVariable": {
      "description": "Organization variable for GitHub Actions.",
      "fields": {
        "created_at": {
          "description": "The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repositories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "updated_at": {
          "description": "The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "value": {
          "description": "The value of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "visibility": {
          "description": "Visibility of a variable",
          "type": {
            "name": "OrganizationActionsVariableVisibility",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "organization-actions-variable"
    },
    "OrganizationCustomOrganizationRoleCreateSchemaInput": {
      "fields": {
        "base_role": {
          "description": "The system role from which this role can inherit permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationCustomOrganizationRoleCreateSchemaBaseRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A short description about the intended usage of this role or what permissions it grants.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the custom role.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "A list of additional permissions included in this role.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "organization-custom-organization-role-create-schema"
    },
    "OrganizationCustomOrganizationRoleUpdateSchemaInput": {
      "fields": {
        "base_role": {
          "description": "The system role from which this role can inherit permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationCustomOrganizationRoleUpdateSchemaBaseRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A short description about the intended use of this role or the permissions it grants.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the custom role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "A list of additional permissions included in this role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "organization-custom-organization-role-update-schema"
    },
    "OrganizationCustomRepositoryRole": {
      "description": "Custom repository roles created by organization owners",
      "fields": {
        "base_role": {
          "description": "The system role from which this role inherits permissions.",
          "type": {
            "name": "OrganizationCustomRepositoryRoleBaseRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A short description about who this role is for or what permissions it grants.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of the custom role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the custom role.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "description": "A list of additional permissions included in this role.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "organization-custom-repository-role"
    },
    "OrganizationCustomRepositoryRoleCreateSchemaInput": {
      "fields": {
        "base_role": {
          "description": "The system role from which this role inherits permissions.",
          "type": {
            "name": "OrganizationCustomRepositoryRoleCreateSchemaBaseRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A short description about who this role is for or what permissions it grants.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the custom role.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "A list of additional permissions included in this role.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "organization-custom-repository-role-create-schema"
    },
    "OrganizationCustomRepositoryRoleUpdateSchemaInput": {
      "fields": {
        "base_role": {
          "description": "The system role from which this role inherits permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationCustomRepositoryRoleUpdateSchemaBaseRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A short description about who this role is for or what permissions it grants.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the custom role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "A list of additional permissions included in this role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "organization-custom-repository-role-update-schema"
    },
    "OrganizationDependabotSecret": {
      "description": "Secrets for GitHub Dependabot for an organization.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repositories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "visibility": {
          "description": "Visibility of a secret",
          "type": {
            "name": "OrganizationDependabotSecretVisibility",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "organization-dependabot-secret"
    },
    "OrganizationFineGrainedPermission": {
      "description": "A fine-grained permission that protects organization resources.",
      "fields": {
        "description": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "organization-fine-grained-permission"
    },
    "OrganizationFull": {
      "description": "Organization Full",
      "fields": {
        "advanced_security_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archived_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "avatar_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "billing_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "collaborators": {
          "description": "The number of collaborators on private repositories.  This field may be null if the number of private repositories is over 50,000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "default_repository_permission": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_alerts_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dependabot_security_updates_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dependency_graph_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disk_usage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "followers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "has_organization_projects": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_repository_projects": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hooks_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_allowed_repository_creation_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_can_create_internal_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_private_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_private_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_public_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_public_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_fork_private_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owned_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationFullPlan",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "secret_scanning_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_push_protection_custom_link": {
          "description": "An optional URL string to display to contributors who are blocked from pushing a secret.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_push_protection_custom_link_enabled": {
          "description": "Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_push_protection_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.  This field is only visible to organization owners or members of a team with the security manager role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "total_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "two_factor_requirement_enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "web_commit_signoff_required": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "organization-full"
    },
    "OrganizationFullPlan": {
      "fields": {
        "filled_seats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "seats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "space": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "OrganizationProgrammaticAccessGrant": {
      "description": "Minimal representation of an organization programmatic access grant for enumerations",
      "fields": {
        "access_granted_at": {
          "description": "Date and time when the fine-grained personal access token was approved to access the organization.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the fine-grained personal access token grant. The `pat_id` used to get details about an approved fine-grained personal access token.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "description": "Permissions requested, categorized by type of permission.",
          "type": {
            "name": "OrganizationProgrammaticAccessGrantPermissions",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories_url": {
          "description": "URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_selection": {
          "description": "Type of repository selection requested.",
          "type": {
            "name": "OrganizationProgrammaticAccessGrantRepositorySelection",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_expired": {
          "description": "Whether the associated fine-grained personal access token has expired.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "token_expires_at": {
          "description": "Date and time when the associated fine-grained personal access token expires.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_id": {
          "description": "Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "token_last_used_at": {
          "description": "Date and time when the associated fine-grained personal access token was last used for authentication.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_name": {
          "description": "The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "organization-programmatic-access-grant"
    },
    "OrganizationProgrammaticAccessGrantPermissions": {
      "description": "Permissions requested, categorized by type of permission.",
      "fields": {
        "organization": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "other": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrganizationProgrammaticAccessGrantRequest": {
      "description": "Minimal representation of an organization programmatic access grant request for enumerations",
      "fields": {
        "created_at": {
          "description": "Date and time when the request for access was created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "description": "Permissions requested, categorized by type of permission.",
          "type": {
            "name": "OrganizationProgrammaticAccessGrantRequestPermissions",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reason": {
          "description": "Reason for requesting access.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repositories_url": {
          "description": "URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_selection": {
          "description": "Type of repository selection requested.",
          "type": {
            "name": "OrganizationProgrammaticAccessGrantRequestRepositorySelection",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_expired": {
          "description": "Whether the associated fine-grained personal access token has expired.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "token_expires_at": {
          "description": "Date and time when the associated fine-grained personal access token expires.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_id": {
          "description": "Unique identifier of the user's token. This field can also be found in audit log events and the organization's settings for their PAT grants.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "token_last_used_at": {
          "description": "Date and time when the associated fine-grained personal access token was last used for authentication.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_name": {
          "description": "The name given to the user's token. This field can also be found in an organization's settings page for Active Tokens.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "organization-programmatic-access-grant-request"
    },
    "OrganizationProgrammaticAccessGrantRequestPermissions": {
      "description": "Permissions requested, categorized by type of permission.",
      "fields": {
        "organization": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "other": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrganizationRole": {
      "description": "Organization roles",
      "fields": {
        "base_role": {
          "description": "The system role from which this role inherits permissions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationRoleBaseRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "description": "The date and time the role was created.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A short description about who this role is for or what permissions it grants.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "description": "The name of the role.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "description": "A list of permissions included in this role.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "source": {
          "description": "Source answers the question, \"where did this role come from?\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationRoleSource",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The date and time the role was last updated.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "organization-role"
    },
    "OrganizationSecretScanningAlert": {
      "fields": {
        "created_at": {
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The GitHub URL of the alert resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "locations_url": {
          "description": "The REST API URL of the code locations for this alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "number": {
          "description": "The security alert number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "push_protection_bypassed": {
          "description": "Whether push protection was bypassed for the detected secret.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push_protection_bypassed_at": {
          "description": "The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "push_protection_bypassed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repository": {
          "description": "A GitHub repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleRepository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resolution": {
          "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningAlertResolution",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resolution_comment": {
          "description": "The comment that was optionally added when this alert was closed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resolved_at": {
          "description": "The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resolved_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret": {
          "description": "The secret that was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_type": {
          "description": "The type of secret that secret scanning detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_type_display_name": {
          "description": "User-friendly name for the detected secret, matching the `secret_type`. For a list of built-in patterns, see \"[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.15/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningAlertState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The REST API URL of the alert resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "validity": {
          "description": "The token status as of the latest validity check.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrganizationSecretScanningAlertValidity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "organization-secret-scanning-alert"
    },
    "OrganizationSimple": {
      "description": "A GitHub organization.",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "hooks_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public_members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "organization-simple"
    },
    "OrgsConvertMemberToOutsideCollaboratorBodyInput": {
      "fields": {
        "async": {
          "description": "When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "OrgsCreateOrUpdateCustomPropertiesBodyInput": {
      "fields": {
        "properties": {
          "description": "The array of custom properties to create or update.",
          "type": {
            "element_type": {
              "name": "CustomPropertyInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "OrgsCreateOrUpdateCustomPropertiesValuesForReposBodyInput": {
      "fields": {
        "properties": {
          "description": "List of custom property names and associated values to apply to the repositories.",
          "type": {
            "element_type": {
              "name": "CustomPropertyValueInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository_names": {
          "description": "The names of repositories that the custom property values will be applied to.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OrgsCreateWebhookBodyConfigInput": {
      "description": "Key/value pairs to provide settings for this webhook.",
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "password": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgsCreateWebhookBodyInput": {
      "fields": {
        "active": {
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "description": "Key/value pairs to provide settings for this webhook.",
          "type": {
            "name": "OrgsCreateWebhookBodyConfigInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events": {
          "description": "Determines what [events](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads) the hook is triggered for. Set to `[\"*\"]` to receive all possible events.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "Must be passed as \"web\".",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgsEnableOrDisableSecurityProductOnAllOrgReposBodyInput": {
      "fields": {
        "query_suite": {
          "description": "CodeQL query suite to be used. If you specify the `query_suite` parameter, the default setup will be configured with this query suite only on all repositories that didn't have default setup already configured. It will not change the query suite on repositories that already have default setup configured. If you don't specify any `query_suite` in your request, the preferred query suite of the organization will be applied.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsEnableOrDisableSecurityProductOnAllOrgReposBodyQuerySuite",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgsListAppInstallationsResult": {
      "fields": {
        "installations": {
          "type": {
            "element_type": {
              "name": "Installation",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "OrgsListCustomRepoRolesResult": {
      "fields": {
        "custom_roles": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OrganizationCustomRepositoryRole",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "The number of custom roles in this organization",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "OrgsListCustomRolesResult": {
      "fields": {
        "custom_roles": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OrganizationCustomRepositoryRole",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "The number of custom roles in this organization",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "OrgsListOrgRolesResult": {
      "fields": {
        "roles": {
          "description": "The list of organization roles available to the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OrganizationRole",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "The total number of organization roles available to the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "OrgsReviewPatGrantRequestBodyInput": {
      "fields": {
        "action": {
          "description": "Action to apply to the request.",
          "type": {
            "name": "OrgsReviewPatGrantRequestBodyAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "description": "Reason for approving or denying the request. Max 1024 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        }
      }
    },
    "OrgsReviewPatGrantRequestsInBulkBodyInput": {
      "fields": {
        "action": {
          "description": "Action to apply to the requests.",
          "type": {
            "name": "OrgsReviewPatGrantRequestsInBulkBodyAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pat_request_ids": {
          "description": "Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "reason": {
          "description": "Reason for approving or denying the requests. Max 1024 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        }
      }
    },
    "OrgsSetMembershipForUserBodyInput": {
      "fields": {
        "role": {
          "description": "The role to give the user in the organization. Can be one of:    * `admin` - The user will become an owner of the organization.    * `member` - The user will become a non-owner member of the organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsSetMembershipForUserBodyRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgsUpdateBodyInput": {
      "fields": {
        "advanced_security_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "billing_email": {
          "description": "Billing email address. This address is not publicized.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "company": {
          "description": "The company name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default_repository_permission": {
          "description": "Default permission level members have for organization repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsUpdateBodyDefaultRepositoryPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dependabot_alerts_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether Dependabot alerts are automatically enabled for new repositories and repositories transferred to this organization.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dependabot_security_updates_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether Dependabot security updates are automatically enabled for new repositories and repositories transferred to this organization.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dependency_graph_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "The description of the company. The maximum size is 160 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "The publicly visible email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_organization_projects": {
          "description": "Whether an organization can use organization projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_repository_projects": {
          "description": "Whether repositories that belong to the organization can use repository projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "location": {
          "description": "The location.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_allowed_repository_creation_type": {
          "description": "Specifies which types of repositories non-admin organization members can create.  **Note:** This parameter is closing down and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsUpdateBodyMembersAllowedRepositoryCreationType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_can_create_internal_repositories": {
          "description": "Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/enterprise-server@3.15/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_pages": {
          "description": "Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_private_repositories": {
          "description": "Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/enterprise-server@3.15/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_public_repositories": {
          "description": "Whether organization members can create public repositories, which are visible to anyone. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/enterprise-server@3.15/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_repositories": {
          "description": "Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_fork_private_repositories": {
          "description": "Whether organization members can fork private organization repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The shorthand name of the company.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_push_protection_custom_link": {
          "description": "If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_push_protection_custom_link_enabled": {
          "description": "Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_push_protection_enabled_for_new_repositories": {
          "description": "**Endpoint closing down notice.** Please use [code security configurations](https://docs.github.com/enterprise-server@3.15/rest/code-security/configurations) instead.  Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this organization.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "twitter_username": {
          "description": "The Twitter username of the company.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "web_commit_signoff_required": {
          "description": "Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "OrgsUpdateMembershipForAuthenticatedUserBodyInput": {
      "fields": {
        "state": {
          "description": "The state that the membership should be in. Only `\"active\"` will be accepted.",
          "type": {
            "name": "OrgsUpdateMembershipForAuthenticatedUserBodyState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgsUpdatePatAccessBodyInput": {
      "fields": {
        "action": {
          "description": "Action to apply to the fine-grained personal access token.",
          "type": {
            "name": "OrgsUpdatePatAccessBodyAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgsUpdatePatAccessesBodyInput": {
      "fields": {
        "action": {
          "description": "Action to apply to the fine-grained personal access token.",
          "type": {
            "name": "OrgsUpdatePatAccessesBodyAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pat_ids": {
          "description": "The IDs of the fine-grained personal access tokens.",
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "OrgsUpdateWebhookBodyConfigInput": {
      "description": "Key/value pairs to provide settings for this webhook.",
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "OrgsUpdateWebhookBodyInput": {
      "fields": {
        "active": {
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "description": "Key/value pairs to provide settings for this webhook.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsUpdateWebhookBodyConfigInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events": {
          "description": "Determines what [events](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads) the hook is triggered for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgsUpdateWebhookConfigForOrgBodyInput": {
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "Package": {
      "description": "A software package",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the package.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "package_type": {
          "type": {
            "name": "PackagePackageType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "MinimalRepository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version_count": {
          "description": "The number of versions of the package.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "visibility": {
          "type": {
            "name": "PackageVisibility",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "package"
    },
    "PackageVersion": {
      "description": "A version of a software package",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "deleted_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "license": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackageVersionMetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of the package version.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "package_html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "package-version"
    },
    "PackageVersionMetadata": {
      "fields": {
        "container": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackageVersionMetadataContainer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "docker": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PackageVersionMetadataDocker",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "package_type": {
          "type": {
            "name": "PackageVersionMetadataPackageType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PackageVersionMetadataContainer": {
      "fields": {
        "tags": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PackageVersionMetadataDocker": {
      "fields": {
        "tag": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "Page": {
      "description": "The configuration for GitHub Pages for a repository.",
      "fields": {
        "build_type": {
          "description": "The process in which the Page will be built.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PageBuildType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cname": {
          "description": "The Pages site's custom domain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "custom_404": {
          "description": "Whether the Page has a custom 404 page.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "description": "The web address the Page can be accessed from.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "https_certificate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PagesHttpsCertificate",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "https_enforced": {
          "description": "Whether https is enabled on the domain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pending_domain_unverified_at": {
          "description": "The timestamp when a pending domain becomes unverified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "protected_domain_state": {
          "description": "The state if the domain is verified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PageProtectedDomainState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public": {
          "description": "Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "source": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PagesSourceHash",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "The status of the most recent build of the Page.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PageStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The API address for accessing this Page resource.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "page"
    },
    "PageBuild": {
      "description": "Page Build",
      "fields": {
        "commit": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "duration": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "error": {
          "type": {
            "name": "PageBuildError",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pusher": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "page-build"
    },
    "PageBuildError": {
      "fields": {
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PageBuildStatus": {
      "description": "Page Build Status",
      "fields": {
        "status": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "page-build-status"
    },
    "PageDeployment": {
      "description": "The GitHub Pages deployment status.",
      "fields": {
        "id": {
          "description": "The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {}
        },
        "page_url": {
          "description": "The URI to the deployed GitHub Pages.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "preview_url": {
          "description": "The URI to the deployed GitHub Pages preview.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "status_url": {
          "description": "The URI to monitor GitHub Pages deployment status.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "page-deployment"
    },
    "PagesDeploymentStatus": {
      "fields": {
        "status": {
          "description": "The current status of the deployment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PagesDeploymentStatusStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "pages-deployment-status"
    },
    "PagesHttpsCertificate": {
      "fields": {
        "description": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "domains": {
          "description": "Array of the domain set and its alternate name (if it is configured)",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expires_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Date",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date"
          }
        },
        "state": {
          "type": {
            "name": "PagesHttpsCertificateState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "pages-https-certificate"
    },
    "PagesSourceHash": {
      "fields": {
        "branch": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "pages-source-hash"
    },
    "ParticipationStats": {
      "fields": {
        "all": {
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "type": {
            "element_type": {
              "name": "Int32",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "alias": "participation-stats"
    },
    "PatchSchemaInput": {
      "fields": {
        "Operations": {
          "description": "patch operations list",
          "type": {
            "element_type": {
              "name": "PatchSchemaOperationsInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "schemas": {
          "type": {
            "element_type": {
              "name": "PatchSchemaSchemas",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "patch-schema"
    },
    "PatchSchemaOperationsInput": {
      "fields": {
        "op": {
          "type": {
            "name": "PatchSchemaOperationsOp",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "Corresponding 'value' of that field specified by 'path'",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PendingDeployment": {
      "description": "Details of a deployment that is waiting for protection rules to pass",
      "fields": {
        "current_user_can_approve": {
          "description": "Whether the currently authenticated user can approve the deployment",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "environment": {
          "type": {
            "name": "PendingDeploymentEnvironment",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reviewers": {
          "description": "The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
          "type": {
            "element_type": {
              "name": "PendingDeploymentReviewers",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "wait_timer": {
          "description": "The set duration of the wait timer",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "wait_timer_started_at": {
          "description": "The time that the wait timer began.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "pending-deployment"
    },
    "PendingDeploymentEnvironment": {
      "fields": {
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The id of the environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "description": "The name of the environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PendingDeploymentReviewers": {
      "fields": {
        "reviewer": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PendingDeploymentReviewersReviewer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The type of reviewer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentReviewerType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PendingDeploymentReviewersReviewer": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "parent": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permission": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "privacy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repositories_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "slug": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PreReceiveEnvironment": {
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default_environment": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "download": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PreReceiveEnvironmentDownload",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "hooks_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "image_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "pre-receive-environment"
    },
    "PreReceiveEnvironmentDownload": {
      "fields": {
        "downloaded_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PreReceiveEnvironmentDownloadStatus": {
      "fields": {
        "downloaded_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "pre-receive-environment-download-status"
    },
    "PreReceiveHook": {
      "fields": {
        "allow_downstream_configuration": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enforcement": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PreReceiveHookEnvironment",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "script": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "script_repository": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PreReceiveHookScriptRepository",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "pre-receive-hook"
    },
    "PreReceiveHookEnvironment": {
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default_environment": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "download": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PreReceiveHookEnvironmentDownload",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "hooks_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "image_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PreReceiveHookEnvironmentDownload": {
      "fields": {
        "downloaded_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PreReceiveHookScriptRepository": {
      "fields": {
        "full_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PrivateUser": {
      "description": "Private User",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "bio": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "business_plus": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "collaborators": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "disk_usage": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "followers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "ldap_dn": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "organizations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "owned_private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PrivateUserPlan",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "total_private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "two_factor_authentication": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "private-user"
    },
    "PrivateUserPlan": {
      "fields": {
        "collaborators": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "space": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "Project": {
      "description": "Projects are a way to organize columns and cards of work.",
      "fields": {
        "body": {
          "description": "Body of the project",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "columns_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "creator": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "Name of the project",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "organization_permission": {
          "description": "The baseline permission that all organization members have on this project. Only present if owner is an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectOrganizationPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "private": {
          "description": "Whether or not this project can be seen by everyone. Only present if owner is an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "state": {
          "description": "State of the project; either 'open' or 'closed'",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "project"
    },
    "ProjectCard": {
      "description": "Project cards represent a scope of work.",
      "fields": {
        "archived": {
          "description": "Whether or not the card is archived",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "column_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "column_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "content_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "creator": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The project card's ID",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "note": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "project_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "project_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "project-card"
    },
    "ProjectCollaboratorPermission": {
      "description": "Project Collaborator Permission",
      "fields": {
        "permission": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "project-collaborator-permission"
    },
    "ProjectColumn": {
      "description": "Project columns contain cards of work.",
      "fields": {
        "cards_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "The unique identifier of the project column",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "Name of the project column",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "project_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "project-column"
    },
    "ProjectsAddCollaboratorBodyInput": {
      "fields": {
        "permission": {
          "description": "The permission to grant the collaborator.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsAddCollaboratorBodyPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsCreateCardBody0Input": {
      "fields": {
        "note": {
          "description": "The project card's note",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsCreateCardBody1Input": {
      "fields": {
        "content_id": {
          "description": "The unique identifier of the content associated with the card",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "content_type": {
          "description": "The piece of content associated with the card",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsCreateColumnBodyInput": {
      "fields": {
        "name": {
          "description": "Name of the project column",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsCreateForAuthenticatedUserBodyInput": {
      "fields": {
        "body": {
          "description": "Body of the project",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the project",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsCreateForOrgBodyInput": {
      "fields": {
        "body": {
          "description": "The description of the project.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsCreateForRepoBodyInput": {
      "fields": {
        "body": {
          "description": "The description of the project.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the project.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsMoveCardBodyInput": {
      "fields": {
        "column_id": {
          "description": "The unique identifier of the column the card should be moved to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "position": {
          "description": "The position of the card in a column. Can be one of: `top`, `bottom`, or `after:` to place after the specified card.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(?:top|bottom|after:\\d+)$"
          }
        }
      }
    },
    "ProjectsMoveColumnBodyInput": {
      "fields": {
        "position": {
          "description": "The position of the column in a project. Can be one of: `first`, `last`, or `after:` to place after the specified column.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(?:first|last|after:\\d+)$"
          }
        }
      }
    },
    "ProjectsUpdateBodyInput": {
      "fields": {
        "body": {
          "description": "Body of the project",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the project",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization_permission": {
          "description": "The baseline permission that all organization members have on this project",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsUpdateBodyOrganizationPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private": {
          "description": "Whether or not this project can be seen by everyone.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "state": {
          "description": "State of the project; either 'open' or 'closed'",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsUpdateCardBodyInput": {
      "fields": {
        "archived": {
          "description": "Whether or not the card is archived",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "note": {
          "description": "The project card's note",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProjectsUpdateColumnBodyInput": {
      "fields": {
        "name": {
          "description": "Name of the project column",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProtectedBranch": {
      "description": "Branch protections protect branches",
      "fields": {
        "allow_deletions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchAllowDeletions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "allow_force_pushes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchAllowForcePushes",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "allow_fork_syncing": {
          "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchAllowForkSyncing",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "block_creations": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchBlockCreations",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "enforce_admins": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchEnforceAdmins",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lock_branch": {
          "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchLockBranch",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_conversation_resolution": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchRequiredConversationResolution",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_linear_history": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchRequiredLinearHistory",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_pull_request_reviews": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchRequiredPullRequestReviews",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_signatures": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchRequiredSignatures",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_status_checks": {
          "description": "Status Check Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StatusCheckPolicy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "restrictions": {
          "description": "Branch Restriction Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchRestrictionPolicy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "protected-branch"
    },
    "ProtectedBranchAdminEnforced": {
      "description": "Protected Branch Admin Enforced",
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "protected-branch-admin-enforced"
    },
    "ProtectedBranchAllowDeletions": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProtectedBranchAllowForcePushes": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProtectedBranchAllowForkSyncing": {
      "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.",
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProtectedBranchBlockCreations": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProtectedBranchEnforceAdmins": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "ProtectedBranchLockBranch": {
      "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.",
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProtectedBranchPullRequestReview": {
      "description": "Protected Branch Pull Request Review",
      "fields": {
        "bypass_pull_request_allowances": {
          "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchPullRequestReviewBypassPullRequestAllowances",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismiss_stale_reviews": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dismissal_restrictions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchPullRequestReviewDismissalRestrictions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "require_code_owner_reviews": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "require_last_push_approval": {
          "description": "Whether the most recent push must be approved by someone other than the person who pushed it.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_approving_review_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 6,
            "minimum": 0
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "protected-branch-pull-request-review"
    },
    "ProtectedBranchPullRequestReviewBypassPullRequestAllowances": {
      "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
      "fields": {
        "apps": {
          "description": "The list of apps allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "Integration",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams": {
          "description": "The list of teams allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Team",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "users": {
          "description": "The list of users allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ProtectedBranchPullRequestReviewDismissalRestrictions": {
      "fields": {
        "apps": {
          "description": "The list of apps with review dismissal access.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "Integration",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams": {
          "description": "The list of teams with review dismissal access.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Team",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "users": {
          "description": "The list of users with review dismissal access.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "users_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProtectedBranchRequiredConversationResolution": {
      "fields": {
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProtectedBranchRequiredLinearHistory": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProtectedBranchRequiredPullRequestReviews": {
      "fields": {
        "bypass_pull_request_allowances": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchRequiredPullRequestReviewsBypassPullRequestAllowances",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismiss_stale_reviews": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dismissal_restrictions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "require_code_owner_reviews": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "require_last_push_approval": {
          "description": "Whether the most recent push must be approved by someone other than the person who pushed it.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_approving_review_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "ProtectedBranchRequiredPullRequestReviewsBypassPullRequestAllowances": {
      "fields": {
        "apps": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "Integration",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams": {
          "type": {
            "element_type": {
              "name": "Team",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "users": {
          "type": {
            "element_type": {
              "name": "SimpleUser",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions": {
      "fields": {
        "apps": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "Integration",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams": {
          "type": {
            "element_type": {
              "name": "Team",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "teams_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "users": {
          "type": {
            "element_type": {
              "name": "SimpleUser",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "users_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "ProtectedBranchRequiredSignatures": {
      "fields": {
        "enabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "ProtectedBranchRequiredStatusCheck": {
      "description": "Protected Branch Required Status Check",
      "fields": {
        "checks": {
          "type": {
            "element_type": {
              "name": "ProtectedBranchRequiredStatusCheckChecks",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "contexts": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "contexts_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enforcement_level": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "strict": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "protected-branch-required-status-check"
    },
    "ProtectedBranchRequiredStatusCheckChecks": {
      "fields": {
        "app_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "context": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PublicKeyFull": {
      "fields": {
        "added_by": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_used": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "read_only": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "repository_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "public-key-full"
    },
    "PublicUser": {
      "description": "Public User",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "bio": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "collaborators": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "disk_usage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "followers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "organizations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "owned_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PublicUserPlan",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "total_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "public-user"
    },
    "PublicUserPlan": {
      "fields": {
        "collaborators": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "space": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "PullRequest": {
      "description": "Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.",
      "fields": {
        "_links": {
          "type": {
            "name": "PullRequestLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "active_lock_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "additions": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "assignee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignees": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "auto_merge": {
          "description": "The status of auto merging a pull request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AutoMerge",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "base": {
          "type": {
            "name": "PullRequestBase",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "changed_files": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "closed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "commits": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "commits_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "deletions": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "diff_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "draft": {
          "description": "Indicates whether or not the pull request is a draft.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "head": {
          "type": {
            "name": "PullRequestHead",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "issue_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "labels": {
          "type": {
            "element_type": {
              "name": "PullRequestLabels",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "locked": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintainer_can_modify": {
          "description": "Indicates whether maintainers can modify the pull request.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "merge_commit_sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mergeable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "mergeable_state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merged": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "merged_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "merged_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "milestone": {
          "description": "A collection of related issues and pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Milestone",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "description": "Number uniquely identifying the pull request within its repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "patch_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "rebaseable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "requested_reviewers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "requested_teams": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TeamSimple",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "review_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "review_comments": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "review_comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "state": {
          "description": "State of this Pull Request. Either `open` or `closed`.",
          "type": {
            "name": "PullRequestState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statuses_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "title": {
          "description": "The title of the pull request.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "pull-request"
    },
    "PullRequestBase": {
      "fields": {
        "label": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ref": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo": {
          "description": "A repository on GitHub.",
          "type": {
            "name": "Repository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullRequestHead": {
      "fields": {
        "label": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ref": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo": {
          "description": "A repository on GitHub.",
          "type": {
            "name": "Repository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullRequestLabels": {
      "fields": {
        "color": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestLinks": {
      "fields": {
        "comments": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "commits": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issue": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "review_comment": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "review_comments": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "statuses": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullRequestMergeResult": {
      "description": "Pull Request Merge Result",
      "fields": {
        "merged": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "message": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "pull-request-merge-result"
    },
    "PullRequestMinimal": {
      "fields": {
        "base": {
          "type": {
            "name": "PullRequestMinimalBase",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "head": {
          "type": {
            "name": "PullRequestMinimalHead",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "number": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "pull-request-minimal"
    },
    "PullRequestMinimalBase": {
      "fields": {
        "ref": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo": {
          "type": {
            "name": "PullRequestMinimalBaseRepo",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestMinimalBaseRepo": {
      "fields": {
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestMinimalHead": {
      "fields": {
        "ref": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo": {
          "type": {
            "name": "PullRequestMinimalHeadRepo",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestMinimalHeadRepo": {
      "fields": {
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestReview": {
      "description": "Pull Request Reviews are reviews on pull requests.",
      "fields": {
        "_links": {
          "type": {
            "name": "PullRequestReviewLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "The text of the review.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_id": {
          "description": "A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the review",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pull_request_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "submitted_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "pull-request-review"
    },
    "PullRequestReviewComment": {
      "description": "Pull Request Review Comments are comments on a portion of the Pull Request's diff.",
      "fields": {
        "_links": {
          "type": {
            "name": "PullRequestReviewCommentLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "The text of the comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_id": {
          "description": "The SHA of the commit to which the comment applies.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "diff_hunk": {
          "description": "The diff of the line that the comment refers to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "description": "HTML URL for the pull request review comment.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "The ID of the pull request review comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "in_reply_to_id": {
          "description": "The comment ID to reply to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "line": {
          "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "description": "The node ID of the pull request review comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "original_commit_id": {
          "description": "The SHA of the original commit to which the comment applies.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "original_line": {
          "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "original_position": {
          "description": "The index of the original line in the diff to which the comment applies. This field is closing down; use `original_line` instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "original_start_line": {
          "description": "The first line of the range for a multi-line comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "path": {
          "description": "The relative path of the file to which the comment applies.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "position": {
          "description": "The line index in the diff to which the comment applies. This field is closing down; use `line` instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "pull_request_review_id": {
          "description": "The ID of the pull request review to which the comment belongs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "pull_request_url": {
          "description": "URL for the pull request that the review comment belongs to.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "side": {
          "description": "The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullRequestReviewCommentSide",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_line": {
          "description": "The first line of the range for a multi-line comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "start_side": {
          "description": "The side of the first line of the range for a multi-line comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullRequestReviewCommentStartSide",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject_type": {
          "description": "The level at which the comment is targeted, can be a diff line or a file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullRequestReviewCommentSubjectType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "URL for the pull request review comment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "pull-request-review-comment"
    },
    "PullRequestReviewCommentLinks": {
      "fields": {
        "html": {
          "type": {
            "name": "PullRequestReviewCommentLinksHtml",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_request": {
          "type": {
            "name": "PullRequestReviewCommentLinksPullRequest",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "name": "PullRequestReviewCommentLinksSelf",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullRequestReviewCommentLinksHtml": {
      "fields": {
        "href": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "PullRequestReviewCommentLinksPullRequest": {
      "fields": {
        "href": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "PullRequestReviewCommentLinksSelf": {
      "fields": {
        "href": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "PullRequestReviewLinks": {
      "fields": {
        "html": {
          "type": {
            "name": "PullRequestReviewLinksHtml",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_request": {
          "type": {
            "name": "PullRequestReviewLinksPullRequest",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullRequestReviewLinksHtml": {
      "fields": {
        "href": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestReviewLinksPullRequest": {
      "fields": {
        "href": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestReviewRequest": {
      "description": "Pull Request Review Request",
      "fields": {
        "teams": {
          "type": {
            "element_type": {
              "name": "Team",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "users": {
          "type": {
            "element_type": {
              "name": "SimpleUser",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "pull-request-review-request"
    },
    "PullRequestSimple": {
      "description": "Pull Request Simple",
      "fields": {
        "_links": {
          "type": {
            "name": "PullRequestSimpleLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "active_lock_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignees": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "auto_merge": {
          "description": "The status of auto merging a pull request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AutoMerge",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "base": {
          "type": {
            "name": "PullRequestSimpleBase",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "closed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "commits_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "diff_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "draft": {
          "description": "Indicates whether or not the pull request is a draft.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "head": {
          "type": {
            "name": "PullRequestSimpleHead",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "issue_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "labels": {
          "type": {
            "element_type": {
              "name": "PullRequestSimpleLabels",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "locked": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "merge_commit_sha": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merged_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "milestone": {
          "description": "A collection of related issues and pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Milestone",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "patch_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "requested_reviewers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimpleUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "requested_teams": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Team",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "review_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "review_comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statuses_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "pull-request-simple"
    },
    "PullRequestSimpleBase": {
      "fields": {
        "label": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ref": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo": {
          "description": "A repository on GitHub.",
          "type": {
            "name": "Repository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullRequestSimpleHead": {
      "fields": {
        "label": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ref": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo": {
          "description": "A repository on GitHub.",
          "type": {
            "name": "Repository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullRequestSimpleLabels": {
      "fields": {
        "color": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullRequestSimpleLinks": {
      "fields": {
        "comments": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "commits": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issue": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "review_comment": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "review_comments": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "statuses": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PullsCreateBodyInput": {
      "fields": {
        "base": {
          "description": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "The contents of the pull request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "draft": {
          "description": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/enterprise-server@3.15/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "head": {
          "description": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head_repo": {
          "description": "The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "repo.nwo"
          }
        },
        "issue": {
          "description": "An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "maintainer_can_modify": {
          "description": "Indicates whether [maintainers can modify](https://docs.github.com/enterprise-server@3.15/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "title": {
          "description": "The title of the new pull request. Required unless `issue` is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsCreateReplyForReviewCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The text of the review comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsCreateReviewBodyCommentsInput": {
      "fields": {
        "body": {
          "description": "Text of the review comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "line": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "path": {
          "description": "The relative path to the file that necessitates a review comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "position": {
          "description": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "side": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_line": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "start_side": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsCreateReviewBodyInput": {
      "fields": {
        "body": {
          "description": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments": {
          "description": "Use the following table to specify the location, destination, and contents of the draft review comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PullsCreateReviewBodyCommentsInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "commit_id": {
          "description": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "event": {
          "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.15/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsCreateReviewBodyEvent",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsCreateReviewCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The text of the review comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_id": {
          "description": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "in_reply_to": {
          "description": "The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "line": {
          "description": "**Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "path": {
          "description": "The relative path to the file that necessitates a comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "position": {
          "description": "**This parameter is closing down. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "side": {
          "description": "In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://docs.github.com/enterprise-server@3.15/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsCreateReviewCommentBodySide",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_line": {
          "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/enterprise-server@3.15/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "start_side": {
          "description": "**Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/enterprise-server@3.15/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsCreateReviewCommentBodyStartSide",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject_type": {
          "description": "The level at which the comment is targeted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsCreateReviewCommentBodySubjectType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsDismissReviewBodyInput": {
      "fields": {
        "event": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsDismissReviewBodyEvent",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "The message for the pull request review dismissal",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsMergeBodyInput": {
      "fields": {
        "commit_message": {
          "description": "Extra detail to append to automatic commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_title": {
          "description": "Title for the automatic commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_method": {
          "description": "The merge method to use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsMergeBodyMergeMethod",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "description": "SHA that pull request head must match to allow merge.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsRemoveRequestedReviewersBodyInput": {
      "fields": {
        "reviewers": {
          "description": "An array of user `login`s that will be removed.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_reviewers": {
          "description": "An array of team `slug`s that will be removed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PullsRequestReviewersBodyInput": {
      "fields": {
        "reviewers": {
          "description": "An array of user `login`s that will be requested.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_reviewers": {
          "description": "An array of team `slug`s that will be requested.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PullsSubmitReviewBodyInput": {
      "fields": {
        "body": {
          "description": "The body text of the pull request review",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "event": {
          "description": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
          "type": {
            "name": "PullsSubmitReviewBodyEvent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsUpdateBodyInput": {
      "fields": {
        "base": {
          "description": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "The contents of the pull request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "maintainer_can_modify": {
          "description": "Indicates whether [maintainers can modify](https://docs.github.com/enterprise-server@3.15/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "state": {
          "description": "State of this Pull Request. Either `open` or `closed`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsUpdateBodyState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The title of the pull request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsUpdateBranchBodyInput": {
      "fields": {
        "expected_head_sha": {
          "description": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/enterprise-server@3.15/rest/commits/commits#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsUpdateBranchResult": {
      "fields": {
        "message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsUpdateReviewBodyInput": {
      "fields": {
        "body": {
          "description": "The body text of the pull request review.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PullsUpdateReviewCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The text of the reply to the review comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RateLimit": {
      "fields": {
        "limit": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "remaining": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reset": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "used": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "rate-limit"
    },
    "RateLimitOverview": {
      "description": "Rate Limit Overview",
      "fields": {
        "rate": {
          "type": {
            "name": "RateLimit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resources": {
          "type": {
            "name": "RateLimitOverviewResources",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "rate-limit-overview"
    },
    "RateLimitOverviewResources": {
      "fields": {
        "actions_runner_registration": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "code_scanning_autofix": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "code_scanning_upload": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "code_search": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "core": {
          "type": {
            "name": "RateLimit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "graphql": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "integration_manifest": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scim": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "search": {
          "type": {
            "name": "RateLimit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "source_import": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "Reaction": {
      "description": "Reactions to conversations provide a way to help people express their feelings more simply and effectively.",
      "fields": {
        "content": {
          "description": "The reaction to use",
          "type": {
            "name": "ReactionContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "reaction"
    },
    "ReactionRollup": {
      "fields": {
        "+1": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "-1": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "confused": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "eyes": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "heart": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "hooray": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "laugh": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "rocket": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "reaction-rollup"
    },
    "ReactionsCreateForCommitCommentBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the commit comment.",
          "type": {
            "name": "ReactionsCreateForCommitCommentBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForIssueBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the issue.",
          "type": {
            "name": "ReactionsCreateForIssueBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForIssueCommentBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the issue comment.",
          "type": {
            "name": "ReactionsCreateForIssueCommentBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForPullRequestReviewCommentBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the pull request review comment.",
          "type": {
            "name": "ReactionsCreateForPullRequestReviewCommentBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForReleaseBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the release.",
          "type": {
            "name": "ReactionsCreateForReleaseBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForTeamDiscussionCommentInOrgBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the team discussion comment.",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionCommentInOrgBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForTeamDiscussionCommentLegacyBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the team discussion comment.",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionCommentLegacyBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForTeamDiscussionInOrgBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the team discussion.",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionInOrgBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReactionsCreateForTeamDiscussionLegacyBodyInput": {
      "fields": {
        "content": {
          "description": "The [reaction type](https://docs.github.com/enterprise-server@3.15/rest/reactions/reactions#about-reactions) to add to the team discussion.",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionLegacyBodyContent",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReferencedWorkflow": {
      "description": "A workflow referenced/reused by the initial caller workflow",
      "fields": {
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ref": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "referenced-workflow"
    },
    "Release": {
      "description": "A release.",
      "fields": {
        "assets": {
          "type": {
            "element_type": {
              "name": "ReleaseAsset",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "assets_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "author": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "draft": {
          "description": "true to create a draft (unpublished) release, false to create a published one.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "mentions_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prerelease": {
          "description": "Whether to identify the release as a prerelease or a full release.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "published_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tag_name": {
          "description": "The name of the tag.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tarball_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "target_commitish": {
          "description": "Specifies the commitish value that determines where the Git tag is created from.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "upload_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "zipball_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "release"
    },
    "ReleaseAsset": {
      "description": "Data related to a release.",
      "fields": {
        "browser_download_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "content_type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "download_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "label": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The file name of the asset.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "state": {
          "description": "State of the release asset.",
          "type": {
            "name": "ReleaseAssetState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "uploader": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "release-asset"
    },
    "ReleaseNotesContent": {
      "description": "Generated name and body describing a release",
      "fields": {
        "body": {
          "description": "The generated body describing the contents of the release supporting markdown formatting",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The generated name of the release",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "release-notes-content"
    },
    "RenamedIssueEventRename": {
      "fields": {
        "from": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "to": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RepoSearchResultItem": {
      "description": "Repo Search Result Item",
      "fields": {
        "allow_auto_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_forking": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archive_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "archived": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "assignees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blobs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "branches_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clone_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "collaborators_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "compare_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contributors_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "default_branch": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delete_branch_on_merge": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deployments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "downloads_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "fork": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "forks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "full_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_refs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_tags_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_discussions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_downloads": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_pages": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "hooks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_template": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issue_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issue_events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keys_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "languages_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "license": {
          "description": "License Simple",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LicenseSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "master_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merges_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "milestones_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mirror_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifications_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepoSearchResultItemPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pulls_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "releases_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "score": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "size": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ssh_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stargazers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stargazers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "statuses_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscribers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscription_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "svn_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "tags_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "temp_clone_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text_matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "topics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "watchers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "watchers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "web_commit_signoff_required": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "repo-search-result-item"
    },
    "RepoSearchResultItemPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ReposAddAppAccessRestrictionsBodyInput": {
      "fields": {
        "apps": {
          "description": "The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposAddCollaboratorBodyInput": {
      "fields": {
        "permission": {
          "description": "The permission to grant the collaborator. **Only valid on organization-owned repositories.**",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposAddStatusCheckContextsBody0Input": {
      "fields": {
        "contexts": {
          "description": "The name of the status checks",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposAddTeamAccessRestrictionsBody0Input": {
      "fields": {
        "teams": {
          "description": "The slug values for teams",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposAddUserAccessRestrictionsBodyInput": {
      "fields": {
        "users": {
          "description": "The username for users",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposCreateAutolinkBodyInput": {
      "fields": {
        "is_alphanumeric": {
          "description": "Whether this autolink reference matches alphanumeric characters. If true, the `` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "key_prefix": {
          "description": "This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url_template": {
          "description": "The URL must contain `` for the reference number. `` matches different characters depending on the value of `is_alphanumeric`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateCommitCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The contents of the comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "line": {
          "description": "**Closing down notice**. Use **position** parameter instead. Line number in the file to comment on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "path": {
          "description": "Relative path of the file to comment on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "position": {
          "description": "Line index in the diff to comment on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposCreateCommitStatusBodyInput": {
      "fields": {
        "context": {
          "description": "A string label to differentiate this status from the status of other systems. This field is case-insensitive.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "A short description of the status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The state of the status.",
          "type": {
            "name": "ReposCreateCommitStatusBodyState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_url": {
          "description": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.   For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:   `http://ci.example.com/user/repo/build/sha`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateDeployKeyBodyInput": {
      "fields": {
        "key": {
          "description": "The contents of the key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "read_only": {
          "description": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.      Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://docs.github.com/enterprise-server@3.15/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://docs.github.com/enterprise-server@3.15/articles/permission-levels-for-a-user-account-repository/).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "title": {
          "description": "A name for the key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateDeploymentBodyInput": {
      "fields": {
        "auto_merge": {
          "description": "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "Short description of the deployment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "payload": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "production_environment": {
          "description": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "ref": {
          "description": "The ref to deploy. This can be a branch, tag, or SHA.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "required_contexts": {
          "description": "The [status](https://docs.github.com/enterprise-server@3.15/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "task": {
          "description": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "transient_environment": {
          "description": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ReposCreateDeploymentProtectionRuleBodyInput": {
      "fields": {
        "integration_id": {
          "description": "The ID of the custom app that will be enabled on the environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposCreateDeploymentStatusBodyInput": {
      "fields": {
        "auto_inactive": {
          "description": "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "A short description of the status. The maximum description length is 140 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment_url": {
          "description": "Sets the URL for accessing your environment. Default: `\"\"`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "log_url": {
          "description": "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.",
          "type": {
            "name": "ReposCreateDeploymentStatusBodyState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_url": {
          "description": "It's recommended to use the `log_url` parameter, which replaces `target_url`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateDispatchEventBodyInput": {
      "fields": {
        "client_payload": {
          "description": "JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10. The total size of the JSON payload must be less than 64KB.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "event_type": {
          "description": "A custom webhook event name. Must be 100 characters or fewer.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "ReposCreateForAuthenticatedUserBodyInput": {
      "fields": {
        "allow_auto_merge": {
          "description": "Whether to allow Auto-merge to be used on pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "description": "Whether to allow merge commits for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "description": "Whether to allow rebase merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "description": "Whether to allow squash merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "auto_init": {
          "description": "Whether the repository is initialized with a minimal README.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "delete_branch_on_merge": {
          "description": "Whether to delete head branches when pull requests are merged",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "A short description of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gitignore_template": {
          "description": "The desired language or platform to apply to the .gitignore.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_discussions": {
          "description": "Whether discussions are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_downloads": {
          "description": "Whether downloads are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "description": "Whether issues are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "description": "Whether projects are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "description": "Whether the wiki is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "description": "A URL with more information about the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_template": {
          "description": "Whether this repository acts as a template that can be used to generate new repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "license_template": {
          "description": "The license keyword of the open source license for this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_message": {
          "description": "The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateForAuthenticatedUserBodyMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_title": {
          "description": "Required when using `merge_commit_message`.  The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateForAuthenticatedUserBodyMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private": {
          "description": "Whether the repository is private.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "squash_merge_commit_message": {
          "description": "The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateForAuthenticatedUserBodySquashMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "squash_merge_commit_title": {
          "description": "Required when using `squash_merge_commit_message`.  The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateForAuthenticatedUserBodySquashMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "team_id": {
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposCreateForkBodyInput": {
      "fields": {
        "default_branch_only": {
          "description": "When forking from an existing repository, fork with only the default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "When forking from an existing repository, a new name for the fork.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization": {
          "description": "Optional parameter to specify the organization name if forking into an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateInOrgBodyInput": {
      "fields": {
        "allow_auto_merge": {
          "description": "Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "auto_init": {
          "description": "Pass `true` to create an initial commit with empty README.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "custom_properties": {
          "description": "The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "delete_branch_on_merge": {
          "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "A short description of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gitignore_template": {
          "description": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_downloads": {
          "description": "Whether downloads are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "description": "Either `true` to enable issues for this repository or `false` to disable them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "description": "A URL with more information about the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_template": {
          "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "license_template": {
          "description": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/enterprise-server@3.15/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_message": {
          "description": "The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateInOrgBodyMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_title": {
          "description": "Required when using `merge_commit_message`.  The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateInOrgBodyMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private": {
          "description": "Whether the repository is private.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "squash_merge_commit_message": {
          "description": "The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateInOrgBodySquashMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "squash_merge_commit_title": {
          "description": "Required when using `squash_merge_commit_message`.  The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateInOrgBodySquashMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "team_id": {
          "description": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "use_squash_pr_title_as_default": {
          "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "visibility": {
          "description": "The visibility of the repository. **Note**: For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise. For more information, see \"[Creating an internal repository](https://docs.github.com/enterprise-server@3.15/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.   The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateInOrgBodyVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateOrUpdateCustomPropertiesValuesBodyInput": {
      "fields": {
        "properties": {
          "description": "A list of custom property names and associated values to apply to the repositories.",
          "type": {
            "element_type": {
              "name": "CustomPropertyValueInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ReposCreateOrUpdateEnvironmentBodyInput": {
      "fields": {
        "deployment_branch_policy": {
          "description": "The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentBranchPolicySettingsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "prevent_self_review": {
          "description": "Whether or not a user who created the job is prevented from approving their own job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "reviewers": {
          "description": "The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ReposCreateOrUpdateEnvironmentBodyReviewersInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "wait_timer": {
          "description": "The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposCreateOrUpdateEnvironmentBodyReviewersInput": {
      "fields": {
        "id": {
          "description": "The id of the user or team who can review the deployment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "type": {
          "description": "The type of reviewer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeploymentReviewerType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateOrUpdateFileContentsBodyAuthorInput": {
      "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
      "fields": {
        "date": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateOrUpdateFileContentsBodyCommitterInput": {
      "description": "The person that committed the file. Default: the authenticated user.",
      "fields": {
        "date": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateOrUpdateFileContentsBodyInput": {
      "fields": {
        "author": {
          "description": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateOrUpdateFileContentsBodyAuthorInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "branch": {
          "description": "The branch name. Default: the repositorys default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "committer": {
          "description": "The person that committed the file. Default: the authenticated user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateOrUpdateFileContentsBodyCommitterInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "content": {
          "description": "The new file content, using Base64 encoding.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "The commit message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "description": "**Required if you are updating a file**. The blob SHA of the file being replaced.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateOrgRulesetBodyInput": {
      "fields": {
        "bypass_actors": {
          "description": "The actors that can bypass the rules in this ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRulesetBypassActorInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgRulesetConditions",
              "type": "named"
            }
          },
          "http": {}
        },
        "enforcement": {
          "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target.",
          "type": {
            "name": "RepositoryRuleEnforcement",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the ruleset.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rules": {
          "description": "An array of rules within the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRuleInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "source_type": {
          "description": "The type of the source of the ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateOrgRulesetBodySourceType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target": {
          "description": "The target of the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateOrgRulesetBodyTarget",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreatePagesDeploymentBodyInput": {
      "description": "The object used to create GitHub Pages deployment",
      "fields": {
        "artifact_url": {
          "description": "The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "environment": {
          "description": "The target environment for this GitHub Pages deployment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oidc_token": {
          "description": "The OIDC token issued by GitHub Actions certifying the origin of the deployment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pages_build_version": {
          "description": "A unique string that represents the version of the build for this deployment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateReleaseBodyInput": {
      "fields": {
        "body": {
          "description": "Text describing the contents of the tag.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "draft": {
          "description": "`true` to create a draft (unpublished) release, `false` to create a published one.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "generate_release_notes": {
          "description": "Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "make_latest": {
          "description": "Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateReleaseBodyMakeLatest",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the release.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prerelease": {
          "description": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "tag_name": {
          "description": "The name of the tag.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_commitish": {
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateRepoRulesetBodyInput": {
      "fields": {
        "bypass_actors": {
          "description": "The actors that can bypass the rules in this ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRulesetBypassActorInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "conditions": {
          "description": "Parameters for a repository ruleset ref name condition",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "enforcement": {
          "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target.",
          "type": {
            "name": "RepositoryRuleEnforcement",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the ruleset.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rules": {
          "description": "An array of rules within the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRuleInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "target": {
          "description": "The target of the ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateRepoRulesetBodyTarget",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateTagProtectionBodyInput": {
      "fields": {
        "pattern": {
          "description": "An optional glob pattern to match against when enforcing tag protection.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposCreateUsingTemplateBodyInput": {
      "fields": {
        "description": {
          "description": "A short description of the new repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "include_all_branches": {
          "description": "Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "description": "The name of the new repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "description": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private": {
          "description": "Either `true` to create a new private repository or `false` to create a new public one.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ReposCreateWebhookBodyConfigInput": {
      "description": "Key/value pairs to provide settings for this webhook.",
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "ReposCreateWebhookBodyInput": {
      "fields": {
        "active": {
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "config": {
          "description": "Key/value pairs to provide settings for this webhook.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateWebhookBodyConfigInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events": {
          "description": "Determines what [events](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads) the hook is triggered for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposDeleteFileBodyAuthorInput": {
      "description": "object containing information about the author.",
      "fields": {
        "email": {
          "description": "The email of the author (or committer) of the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the author (or committer) of the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposDeleteFileBodyCommitterInput": {
      "description": "object containing information about the committer.",
      "fields": {
        "email": {
          "description": "The email of the author (or committer) of the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the author (or committer) of the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposDeleteFileBodyInput": {
      "fields": {
        "author": {
          "description": "object containing information about the author.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposDeleteFileBodyAuthorInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "branch": {
          "description": "The branch name. Default: the repositorys default branch",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "committer": {
          "description": "object containing information about the committer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposDeleteFileBodyCommitterInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "message": {
          "description": "The commit message.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha": {
          "description": "The blob SHA of the file being deleted.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposGenerateReleaseNotesBodyInput": {
      "fields": {
        "configuration_file_path": {
          "description": "Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "previous_tag_name": {
          "description": "The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tag_name": {
          "description": "The tag name for the release. This can be an existing tag or a new one.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_commitish": {
          "description": "Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposGetAllDeploymentProtectionRulesResult": {
      "fields": {
        "custom_deployment_protection_rules": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DeploymentProtectionRule",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "The number of enabled custom deployment protection rules for this environment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposGetAllEnvironmentsResult": {
      "fields": {
        "environments": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Environment",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "The number of environments in this repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposListCacheInfoResult": {
      "description": "Status for a cache replica",
      "fields": {
        "git": {
          "type": {
            "name": "ReposListCacheInfoResultGit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "host": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposListCacheInfoResultGit": {
      "fields": {
        "last_sync": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "sync_status": {
          "type": {
            "name": "ReposListCacheInfoResultGitSyncStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposListCustomDeploymentRuleIntegrationsResult": {
      "fields": {
        "available_custom_deployment_protection_rule_integrations": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CustomDeploymentRuleApp",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "The total number of custom deployment protection rule integrations available for this environment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposListDeploymentBranchPoliciesResult": {
      "fields": {
        "branch_policies": {
          "type": {
            "element_type": {
              "name": "DeploymentBranchPolicy",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "description": "The number of deployment branch policies for the environment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposMergeBodyInput": {
      "fields": {
        "base": {
          "description": "The name of the base branch that the head will be merged into.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_message": {
          "description": "Commit message to use for the merge commit. If omitted, a default message will be used.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head": {
          "description": "The head to merge. This can be a branch name or a commit SHA1.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposMergeUpstreamBodyInput": {
      "fields": {
        "branch": {
          "description": "The name of the branch which should be updated to match upstream.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposRemoveAppAccessRestrictionsBodyInput": {
      "fields": {
        "apps": {
          "description": "The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposRemoveStatusCheckContextsBody0Input": {
      "fields": {
        "contexts": {
          "description": "The name of the status checks",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposRemoveTeamAccessRestrictionsBody0Input": {
      "fields": {
        "teams": {
          "description": "The slug values for teams",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposRemoveUserAccessRestrictionsBodyInput": {
      "fields": {
        "users": {
          "description": "The username for users",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposRenameBranchBodyInput": {
      "fields": {
        "new_name": {
          "description": "The new name of the branch.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposReplaceAllTopicsBodyInput": {
      "fields": {
        "names": {
          "description": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` will be saved as lowercase.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposSetAppAccessRestrictionsBodyInput": {
      "fields": {
        "apps": {
          "description": "The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposSetStatusCheckContextsBody0Input": {
      "fields": {
        "contexts": {
          "description": "The name of the status checks",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposSetTeamAccessRestrictionsBody0Input": {
      "fields": {
        "teams": {
          "description": "The slug values for teams",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposSetUserAccessRestrictionsBodyInput": {
      "fields": {
        "users": {
          "description": "The username for users",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposTransferBodyInput": {
      "fields": {
        "new_name": {
          "description": "The new name to be given to the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "new_owner": {
          "description": "The username or organization name the repository will be transferred to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "team_ids": {
          "description": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        }
      }
    },
    "ReposUpdateBodyInput": {
      "fields": {
        "allow_forking": {
          "description": "Either `true` to allow private forks, or `false` to prevent private forks.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "description": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "description": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "description": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_update_branch": {
          "description": "Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archived": {
          "description": "Whether to archive this repository. `false` will unarchive a previously archived repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default_branch": {
          "description": "Updates the default branch for this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delete_branch_on_merge": {
          "description": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "A short description of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_issues": {
          "description": "Either `true` to enable issues for this repository or `false` to disable them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "description": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "description": "Either `true` to enable the wiki for this repository or `false` to disable it.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "description": "A URL with more information about the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "is_template": {
          "description": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "merge_commit_message": {
          "description": "The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodyMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_title": {
          "description": "Required when using `merge_commit_message`.  The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodyMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private": {
          "description": "Either `true` to make the repository private or `false` to make it public. Default: `false`.   **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/enterprise-server@3.15/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "security_and_analysis": {
          "description": "Specify which security and analysis features to enable or disable for the repository.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request: `{ \"security_and_analysis\": {\"advanced_security\": { \"status\": \"enabled\" } } }`.  You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodySecurityAndAnalysisInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "squash_merge_commit_message": {
          "description": "The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodySquashMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "squash_merge_commit_title": {
          "description": "Required when using `squash_merge_commit_message`.  The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodySquashMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use_squash_pr_title_as_default": {
          "description": "Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property is closing down. Please use `squash_merge_commit_title` instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "visibility": {
          "description": "The visibility of the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodyVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "web_commit_signoff_required": {
          "description": "Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ReposUpdateBodySecurityAndAnalysisAdvancedSecurityInput": {
      "description": "Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see \"[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\"",
      "fields": {
        "status": {
          "description": "Can be `enabled` or `disabled`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateBodySecurityAndAnalysisInput": {
      "description": "Specify which security and analysis features to enable or disable for the repository.  To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see \"[Managing security managers in your organization](https://docs.github.com/enterprise-server@3.15/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).\"  For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request: `{ \"security_and_analysis\": {\"advanced_security\": { \"status\": \"enabled\" } } }`.  You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.",
      "fields": {
        "advanced_security": {
          "description": "Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see \"[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodySecurityAndAnalysisAdvancedSecurityInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning": {
          "description": "Use the `status` property to enable or disable secret scanning for this repository. For more information, see \"[About secret scanning](/code-security/secret-security/about-secret-scanning).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodySecurityAndAnalysisSecretScanningInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning_non_provider_patterns": {
          "description": "Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see \"[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodySecurityAndAnalysisSecretScanningNonProviderPatternsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning_push_protection": {
          "description": "Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see \"[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodySecurityAndAnalysisSecretScanningPushProtectionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ReposUpdateBodySecurityAndAnalysisSecretScanningInput": {
      "description": "Use the `status` property to enable or disable secret scanning for this repository. For more information, see \"[About secret scanning](/code-security/secret-security/about-secret-scanning).\"",
      "fields": {
        "status": {
          "description": "Can be `enabled` or `disabled`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateBodySecurityAndAnalysisSecretScanningNonProviderPatternsInput": {
      "description": "Use the `status` property to enable or disable secret scanning non-provider patterns for this repository. For more information, see \"[Supported secret scanning patterns](/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"",
      "fields": {
        "status": {
          "description": "Can be `enabled` or `disabled`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateBodySecurityAndAnalysisSecretScanningPushProtectionInput": {
      "description": "Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see \"[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\"",
      "fields": {
        "status": {
          "description": "Can be `enabled` or `disabled`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateBranchProtectionBodyInput": {
      "fields": {
        "allow_deletions": {
          "description": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/enterprise-server@3.15/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_force_pushes": {
          "description": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/enterprise-server@3.15/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_fork_syncing": {
          "description": "Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "block_creations": {
          "description": "If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "enforce_admins": {
          "description": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "lock_branch": {
          "description": "Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_conversation_resolution": {
          "description": "Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_linear_history": {
          "description": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/enterprise-server@3.15/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_pull_request_reviews": {
          "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBranchProtectionBodyRequiredPullRequestReviewsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required_status_checks": {
          "description": "Require status checks to pass before merging. Set to `null` to disable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBranchProtectionBodyRequiredStatusChecksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "restrictions": {
          "description": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBranchProtectionBodyRestrictionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ReposUpdateBranchProtectionBodyRequiredPullRequestReviewsBypassPullRequestAllowancesInput": {
      "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
      "fields": {
        "apps": {
          "description": "The list of app `slug`s allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "teams": {
          "description": "The list of team `slug`s allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "users": {
          "description": "The list of user `login`s allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposUpdateBranchProtectionBodyRequiredPullRequestReviewsDismissalRestrictionsInput": {
      "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
      "fields": {
        "apps": {
          "description": "The list of app `slug`s with dismissal access",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "teams": {
          "description": "The list of team `slug`s with dismissal access",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "users": {
          "description": "The list of user `login`s with dismissal access",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposUpdateBranchProtectionBodyRequiredPullRequestReviewsInput": {
      "description": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
      "fields": {
        "bypass_pull_request_allowances": {
          "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBranchProtectionBodyRequiredPullRequestReviewsBypassPullRequestAllowancesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismiss_stale_reviews": {
          "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dismissal_restrictions": {
          "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBranchProtectionBodyRequiredPullRequestReviewsDismissalRestrictionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "require_code_owner_reviews": {
          "description": "Blocks merging pull requests until [code owners](https://docs.github.com/enterprise-server@3.15/articles/about-code-owners/) review them.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "require_last_push_approval": {
          "description": "Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_approving_review_count": {
          "description": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposUpdateBranchProtectionBodyRequiredStatusChecksChecksInput": {
      "fields": {
        "app_id": {
          "description": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "context": {
          "description": "The name of the required check",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateBranchProtectionBodyRequiredStatusChecksInput": {
      "description": "Require status checks to pass before merging. Set to `null` to disable.",
      "fields": {
        "checks": {
          "description": "The list of status checks to require in order to merge into this branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ReposUpdateBranchProtectionBodyRequiredStatusChecksChecksInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "contexts": {
          "description": "**Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "strict": {
          "description": "Require branches to be up to date before merging.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ReposUpdateBranchProtectionBodyRestrictionsInput": {
      "description": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
      "fields": {
        "apps": {
          "description": "The list of app `slug`s with push access",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "teams": {
          "description": "The list of team `slug`s with push access",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "users": {
          "description": "The list of user `login`s with push access",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposUpdateCommitCommentBodyInput": {
      "fields": {
        "body": {
          "description": "The contents of the comment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateInformationAboutPagesSiteBodyInput": {
      "fields": {
        "build_type": {
          "description": "The process by which the GitHub Pages site will be built. `workflow` means that the site is built by a custom GitHub Actions workflow. `legacy` means that the site is built by GitHub when changes are pushed to a specific branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateInformationAboutPagesSiteBodyBuildType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cname": {
          "description": "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://docs.github.com/enterprise-server@3.15/pages/configuring-a-custom-domain-for-your-github-pages-site).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "https_enforced": {
          "description": "Specify whether HTTPS should be enforced for the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "source": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        }
      }
    },
    "ReposUpdateInvitationBodyInput": {
      "fields": {
        "permissions": {
          "description": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateInvitationBodyPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateOrgRulesetBodyInput": {
      "fields": {
        "bypass_actors": {
          "description": "The actors that can bypass the rules in this ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRulesetBypassActorInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgRulesetConditions",
              "type": "named"
            }
          },
          "http": {}
        },
        "enforcement": {
          "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRuleEnforcement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rules": {
          "description": "An array of rules within the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRuleInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "target": {
          "description": "The target of the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateOrgRulesetBodyTarget",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdatePullRequestReviewProtectionBodyBypassPullRequestAllowancesInput": {
      "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
      "fields": {
        "apps": {
          "description": "The list of app `slug`s allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "teams": {
          "description": "The list of team `slug`s allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "users": {
          "description": "The list of user `login`s allowed to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposUpdatePullRequestReviewProtectionBodyDismissalRestrictionsInput": {
      "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
      "fields": {
        "apps": {
          "description": "The list of app `slug`s with dismissal access",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "teams": {
          "description": "The list of team `slug`s with dismissal access",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "users": {
          "description": "The list of user `login`s with dismissal access",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposUpdatePullRequestReviewProtectionBodyInput": {
      "fields": {
        "bypass_pull_request_allowances": {
          "description": "Allow specific users, teams, or apps to bypass pull request requirements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdatePullRequestReviewProtectionBodyBypassPullRequestAllowancesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dismiss_stale_reviews": {
          "description": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dismissal_restrictions": {
          "description": "Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdatePullRequestReviewProtectionBodyDismissalRestrictionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "require_code_owner_reviews": {
          "description": "Blocks merging pull requests until [code owners](https://docs.github.com/enterprise-server@3.15/articles/about-code-owners/) have reviewed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "require_last_push_approval": {
          "description": "Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "required_approving_review_count": {
          "description": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ReposUpdateReleaseAssetBodyInput": {
      "fields": {
        "label": {
          "description": "An alternate short description of the asset. Used in place of the filename.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The file name of the asset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateReleaseBodyInput": {
      "fields": {
        "body": {
          "description": "Text describing the contents of the tag.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "draft": {
          "description": "`true` makes the release a draft, and `false` publishes the release.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "make_latest": {
          "description": "Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateReleaseBodyMakeLatest",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the release.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "prerelease": {
          "description": "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "tag_name": {
          "description": "The name of the tag.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_commitish": {
          "description": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateRepoRulesetBodyInput": {
      "fields": {
        "bypass_actors": {
          "description": "The actors that can bypass the rules in this ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRulesetBypassActorInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "conditions": {
          "description": "Parameters for a repository ruleset ref name condition",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "enforcement": {
          "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRuleEnforcement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rules": {
          "description": "An array of rules within the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRuleInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "target": {
          "description": "The target of the ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateRepoRulesetBodyTarget",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateStatusCheckProtectionBodyChecksInput": {
      "fields": {
        "app_id": {
          "description": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "context": {
          "description": "The name of the required check",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ReposUpdateStatusCheckProtectionBodyInput": {
      "fields": {
        "checks": {
          "description": "The list of status checks to require in order to merge into this branch.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ReposUpdateStatusCheckProtectionBodyChecksInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "contexts": {
          "description": "**Closing down notice**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "strict": {
          "description": "Require branches to be up to date before merging.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ReposUpdateWebhookBodyInput": {
      "fields": {
        "active": {
          "description": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "add_events": {
          "description": "Determines a list of events to be added to the list of events that the Hook triggers for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "config": {
          "description": "Configuration object of the webhook",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events": {
          "description": "Determines what [events](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "remove_events": {
          "description": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ReposUpdateWebhookConfigForRepoBodyInput": {
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "Repository": {
      "description": "A repository on GitHub.",
      "fields": {
        "allow_auto_merge": {
          "description": "Whether to allow Auto-merge to be used on pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_forking": {
          "description": "Whether to allow forking this repo",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "description": "Whether to allow merge commits for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "description": "Whether to allow rebase merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "description": "Whether to allow squash merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_update_branch": {
          "description": "Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "anonymous_access_enabled": {
          "description": "Whether anonymous git access is enabled for this repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archive_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "archived": {
          "description": "Whether the repository is archived.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "assignees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blobs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "branches_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clone_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "collaborators_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "compare_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contributors_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "default_branch": {
          "description": "The default branch of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delete_branch_on_merge": {
          "description": "Whether to delete head branches when pull requests are merged",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deployments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "downloads_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "fork": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "forks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "full_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_refs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_tags_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_discussions": {
          "description": "Whether discussions are enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_downloads": {
          "description": "Whether downloads are enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "description": "Whether issues are enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_pages": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "description": "Whether projects are enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "description": "Whether the wiki is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "hooks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the repository",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "is_template": {
          "description": "Whether this repository acts as a template that can be used to generate new repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issue_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issue_events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keys_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "languages_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "license": {
          "description": "License Simple",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LicenseSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "master_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_message": {
          "description": "The default value for a merge commit message.  - `PR_TITLE` - default to the pull request's title. - `PR_BODY` - default to the pull request's body. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merge_commit_title": {
          "description": "The default value for a merge commit title.  - `PR_TITLE` - default to the pull request's title. - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merges_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "milestones_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mirror_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "name": {
          "description": "The name of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifications_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "description": "Whether the repository is private or public.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pulls_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "releases_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "description": "The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "squash_merge_commit_message": {
          "description": "The default value for a squash merge commit message:  - `PR_BODY` - default to the pull request's body. - `COMMIT_MESSAGES` - default to the branch's commit messages. - `BLANK` - default to a blank commit message.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositorySquashMergeCommitMessage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "squash_merge_commit_title": {
          "description": "The default value for a squash merge commit title:  - `PR_TITLE` - default to the pull request's title. - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositorySquashMergeCommitTitle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ssh_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stargazers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stargazers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statuses_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscribers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscription_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "svn_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "tags_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "temp_clone_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "topics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "use_squash_pr_title_as_default": {
          "description": "Whether a squash merge commit can use the pull request title as default. **This property is closing down. Please use `squash_merge_commit_title` instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "watchers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "watchers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "web_commit_signoff_required": {
          "description": "Whether to require contributors to sign off on web-based commits",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "repository"
    },
    "RepositoryCollaboratorPermission": {
      "description": "Repository Collaborator Permission",
      "fields": {
        "permission": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "Collaborator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Collaborator",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "repository-collaborator-permission"
    },
    "RepositoryFineGrainedPermission": {
      "description": "A fine-grained permission that protects repository resources.",
      "fields": {
        "description": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "repository-fine-grained-permission"
    },
    "RepositoryInvitation": {
      "description": "Repository invitations let you manage who you collaborate with.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "expired": {
          "description": "Whether or not the invitation has expired",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier of the repository invitation.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "invitee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "inviter": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "The permission associated with the invitation.",
          "type": {
            "name": "RepositoryInvitationPermissions",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "url": {
          "description": "URL for the repository invitation",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "repository-invitation"
    },
    "RepositoryPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "RepositoryPreReceiveHook": {
      "fields": {
        "configuration_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enforcement": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "repository-pre-receive-hook"
    },
    "RepositoryRule": {
      "description": "A repository rule.",
      "fields": {
        "parameters": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "type": {
            "name": "RepositoryRuleTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RepositoryRuleDetailed": {
      "description": "A repository rule with ruleset details.",
      "fields": {
        "parameters": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ruleset_id": {
          "description": "The ID of the ruleset that includes this rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ruleset_source": {
          "description": "The name of the source of the ruleset that includes this rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ruleset_source_type": {
          "description": "The type of source for the ruleset that includes this rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRuleRulesetInfoRulesetSourceType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "RepositoryRuleDetailedTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RepositoryRuleInput": {
      "description": "A repository rule.",
      "fields": {
        "parameters": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "type": {
            "name": "RepositoryRuleTypeEnum",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RepositoryRuleset": {
      "description": "A set of rules to apply when specified conditions are met.",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "bypass_actors": {
          "description": "The actors that can bypass the rules in this ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRulesetBypassActor",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "conditions": {
          "description": "Parameters for a repository ruleset ref name condition",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetConditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "current_user_can_bypass": {
          "description": "The bypass type of the user making the API request for this ruleset. This field is only returned when querying the repository-level endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetCurrentUserCanBypass",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enforcement": {
          "description": "The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page. `evaluate` is not available for the `repository` target.",
          "type": {
            "name": "RepositoryRuleEnforcement",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the ruleset",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the ruleset",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rules": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RepositoryRule",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "source": {
          "description": "The name of the source",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source_type": {
          "description": "The type of the source of the ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetSourceType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target": {
          "description": "The target of the ruleset.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetTarget",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "repository-ruleset"
    },
    "RepositoryRulesetBypassActor": {
      "description": "An actor that can bypass rules in a ruleset",
      "fields": {
        "actor_id": {
          "description": "The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "actor_type": {
          "description": "The type of actor that can bypass a ruleset",
          "type": {
            "name": "RepositoryRulesetBypassActorActorType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "bypass_mode": {
          "description": "When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetBypassActorBypassMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "repository-ruleset-bypass-actor"
    },
    "RepositoryRulesetBypassActorInput": {
      "description": "An actor that can bypass rules in a ruleset",
      "fields": {
        "actor_id": {
          "description": "The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`. If `actor_type` is `DeployKey`, this should be null. `OrganizationAdmin` is not applicable for personal repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "actor_type": {
          "description": "The type of actor that can bypass a ruleset",
          "type": {
            "name": "RepositoryRulesetBypassActorActorType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "bypass_mode": {
          "description": "When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests. `pull_request` is not applicable for the `DeployKey` actor type. Also, `pull_request` is only applicable to branch rulesets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetBypassActorBypassMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "repository-ruleset-bypass-actor"
    },
    "RepositoryRulesetConditions": {
      "description": "Parameters for a repository ruleset ref name condition",
      "fields": {
        "ref_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetConditionsRefName",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "RepositoryRulesetConditionsInput": {
      "description": "Parameters for a repository ruleset ref name condition",
      "fields": {
        "ref_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetConditionsRefNameInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "RepositoryRulesetConditionsRefName": {
      "fields": {
        "exclude": {
          "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include": {
          "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "RepositoryRulesetConditionsRefNameInput": {
      "fields": {
        "exclude": {
          "description": "Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include": {
          "description": "Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "RepositoryRulesetLinks": {
      "fields": {
        "html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetLinksHtml",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RepositoryRulesetLinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "RepositoryRulesetLinksHtml": {
      "fields": {
        "href": {
          "description": "The html URL of the ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RepositoryRulesetLinksSelf": {
      "fields": {
        "href": {
          "description": "The URL of the ruleset",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RepositorySubscription": {
      "description": "Repository invitations let you manage who you collaborate with.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "ignored": {
          "description": "Determines if all notifications should be blocked from this repository.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscribed": {
          "description": "Determines if notifications should be received from this repository.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "repository-subscription"
    },
    "ReviewComment": {
      "description": "Legacy Review Comment",
      "fields": {
        "_links": {
          "type": {
            "name": "ReviewCommentLinks",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "name": "AuthorAssociation",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "diff_hunk": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "in_reply_to_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "line": {
          "description": "The line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "original_commit_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "original_line": {
          "description": "The original line of the blob to which the comment applies. The last line of the range for a multi-line comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "original_position": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "original_start_line": {
          "description": "The original first line of the range for a multi-line comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "position": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "pull_request_review_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "pull_request_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "side": {
          "description": "The side of the first line of the range for a multi-line comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReviewCommentSide",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "start_line": {
          "description": "The first line of the range for a multi-line comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "start_side": {
          "description": "The side of the first line of the range for a multi-line comment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReviewCommentStartSide",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "review-comment"
    },
    "ReviewCommentLinks": {
      "fields": {
        "html": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_request": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "description": "Hypermedia Link",
          "type": {
            "name": "Link",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ReviewDismissedIssueEventDismissedReview": {
      "fields": {
        "dismissal_commit_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dismissal_message": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "review_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Root": {
      "fields": {
        "authorizations_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "code_search_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "commit_search_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "current_user_authorizations_html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "current_user_repositories_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "current_user_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "emails_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "emojis_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "feeds_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "followers_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "hub_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "issue_search_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "keys_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "label_search_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "notifications_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "organization_repositories_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "organization_teams_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "organization_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "public_gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "rate_limit_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "repository_search_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "repository_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "starred_gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "topic_search_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "user_organizations_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "user_repositories_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "user_search_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        },
        "user_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri-template"
          }
        }
      },
      "alias": "root"
    },
    "RuleSuite": {
      "description": "Response",
      "fields": {
        "actor_id": {
          "description": "The number that identifies the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "actor_name": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "after_sha": {
          "description": "The last commit sha in the push evaluation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "before_sha": {
          "description": "The first commit sha before the push evaluation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "evaluation_result": {
          "description": "The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`. Null if no rules with `evaluate` enforcement status were run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RuleSuiteEvaluationResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of the rule insight.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "ref": {
          "description": "The ref name that the evaluation ran on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_id": {
          "description": "The ID of the repository associated with the rule evaluation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repository_name": {
          "description": "The name of the repository without the `.git` extension.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "result": {
          "description": "The result of the rule evaluations for rules with the `active` enforcement status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RuleSuiteResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rule_evaluations": {
          "description": "Details on the evaluated rules.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RuleSuiteRuleEvaluations",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "rule-suite"
    },
    "RuleSuiteRuleEvaluations": {
      "fields": {
        "details": {
          "description": "The detailed failure message for the rule. Null if the rule passed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enforcement": {
          "description": "The enforcement level of this rule source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RuleSuiteRuleEvaluationsEnforcement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "result": {
          "description": "The result of the evaluation of the individual rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RuleSuiteRuleEvaluationsResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rule_source": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RuleSuiteRuleEvaluationsRuleSource",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rule_type": {
          "description": "The type of rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RuleSuiteRuleEvaluationsRuleSource": {
      "fields": {
        "id": {
          "description": "The ID of the rule source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "The name of the rule source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of rule source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RuleSuites": {
      "fields": {
        "actor_id": {
          "description": "The number that identifies the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "actor_name": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "after_sha": {
          "description": "The last commit sha in the push evaluation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "before_sha": {
          "description": "The first commit sha before the push evaluation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "evaluation_result": {
          "description": "The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RuleSuitesEvaluationResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of the rule insight.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "ref": {
          "description": "The ref name that the evaluation ran on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_id": {
          "description": "The ID of the repository associated with the rule evaluation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repository_name": {
          "description": "The name of the repository without the `.git` extension.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "result": {
          "description": "The result of the rule evaluations for rules with the `active` enforcement status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RuleSuitesResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "rule-suites"
    },
    "Runner": {
      "description": "A self hosted runner",
      "fields": {
        "busy": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "ephemeral": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "description": "The ID of the runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "labels": {
          "type": {
            "element_type": {
              "name": "RunnerLabel",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the runner.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "os": {
          "description": "The Operating System of the runner.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "runner_group_id": {
          "description": "The ID of the runner group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "The status of the runner.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "runner"
    },
    "RunnerApplication": {
      "description": "Runner Application",
      "fields": {
        "architecture": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "download_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "filename": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "os": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sha256_checksum": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "temp_download_token": {
          "description": "A short lived bearer token used to download the runner, if needed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "runner-application"
    },
    "RunnerGroupsEnterprise": {
      "fields": {
        "allows_public_repositories": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "restricted_to_workflows": {
          "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "runners_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_workflows": {
          "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workflow_restrictions_read_only": {
          "description": "If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "runner-groups-enterprise"
    },
    "RunnerGroupsOrg": {
      "fields": {
        "allows_public_repositories": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "default": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "inherited": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "inherited_allows_public_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "restricted_to_workflows": {
          "description": "If `true`, the runner group will be restricted to running only the workflows specified in the `selected_workflows` array.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "runners_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_repositories_url": {
          "description": "Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selected_workflows": {
          "description": "List of workflows the runner group should be allowed to run. This setting will be ignored unless `restricted_to_workflows` is set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "visibility": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workflow_restrictions_read_only": {
          "description": "If `true`, the `restricted_to_workflows` and `selected_workflows` fields cannot be modified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "runner-groups-org"
    },
    "RunnerLabel": {
      "description": "A label for a self hosted runner",
      "fields": {
        "id": {
          "description": "Unique identifier of the label.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "description": "Name of the label.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of label. Read-only labels are applied automatically when the runner is configured.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RunnerLabelType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "runner-label"
    },
    "ScimEnterpriseGroupList": {
      "fields": {
        "Resources": {
          "description": "Information about each provisioned group.",
          "type": {
            "element_type": {
              "name": "ScimEnterpriseGroupResponse",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "itemsPerPage": {
          "description": "Number of objects per page",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "schemas": {
          "description": "The URIs that are used to indicate the namespaces of the list SCIM schemas.",
          "type": {
            "element_type": {
              "name": "ScimEnterpriseGroupListSchemas",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "startIndex": {
          "description": "A starting index for the returned page",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "totalResults": {
          "description": "Number of results found",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "scim-enterprise-group-list"
    },
    "ScimEnterpriseGroupResponse": {
      "fields": {
        "displayName": {
          "description": "A human-readable name for a security group.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalId": {
          "description": "A unique identifier for the resource as defined by the provisioning client.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The internally generated id for the group object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members": {
          "description": "The group members.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "JSON",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "meta": {
          "description": "The metadata associated with the creation/updates to the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Meta",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "schemas": {
          "description": "The URIs that are used to indicate the namespaces of the SCIM schemas.",
          "type": {
            "element_type": {
              "name": "GroupResponseSchemas",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ScimEnterpriseUserList": {
      "fields": {
        "Resources": {
          "description": "Information about each provisioned account.",
          "type": {
            "element_type": {
              "name": "ScimEnterpriseUserResponse",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "itemsPerPage": {
          "description": "Number of objects per page",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "schemas": {
          "description": "The URIs that are used to indicate the namespaces of the list SCIM schemas.",
          "type": {
            "element_type": {
              "name": "ScimEnterpriseUserListSchemas",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "startIndex": {
          "description": "A starting index for the returned page",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "totalResults": {
          "description": "Number of results found",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "scim-enterprise-user-list"
    },
    "ScimEnterpriseUserResponse": {
      "fields": {
        "active": {
          "description": "Whether the user active in the IdP.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "displayName": {
          "description": "A human-readable name for the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "emails": {
          "description": "The emails for the user.",
          "type": {
            "element_type": {
              "name": "UserEmailsResponse",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "externalId": {
          "description": "A unique identifier for the resource as defined by the provisioning client.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "groups": {
          "description": "Provisioned SCIM groups that the user is a member of.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ScimEnterpriseUserResponse1Groups",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The internally generated id for the user object.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "meta": {
          "description": "The metadata associated with the creation/updates to the user.",
          "type": {
            "name": "Meta",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserNameResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "roles": {
          "description": "The roles assigned to the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserRole",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "schemas": {
          "description": "The URIs that are used to indicate the namespaces of the SCIM schemas.",
          "type": {
            "element_type": {
              "name": "UserResponseSchemas",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userName": {
          "description": "The username for the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ScimEnterpriseUserResponse1Groups": {
      "fields": {
        "$ref": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "display": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ScopedInstallation": {
      "fields": {
        "account": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "has_multiple_single_files": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "permissions": {
          "description": "The permissions granted to the user access token.",
          "type": {
            "name": "AppPermissions",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repository_selection": {
          "description": "Describe whether all repositories have been selected or there's a selection involved",
          "type": {
            "name": "ScopedInstallationRepositorySelection",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "single_file_paths": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "scoped-installation"
    },
    "SearchCodeResult": {
      "fields": {
        "incomplete_results": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "items": {
          "type": {
            "element_type": {
              "name": "CodeSearchResultItem",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SearchCommitsResult": {
      "fields": {
        "incomplete_results": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "items": {
          "type": {
            "element_type": {
              "name": "CommitSearchResultItem",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SearchIssuesAndPullRequestsResult": {
      "fields": {
        "incomplete_results": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "items": {
          "type": {
            "element_type": {
              "name": "IssueSearchResultItem",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SearchLabelsResult": {
      "fields": {
        "incomplete_results": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "items": {
          "type": {
            "element_type": {
              "name": "LabelSearchResultItem",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SearchReposResult": {
      "fields": {
        "incomplete_results": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "items": {
          "type": {
            "element_type": {
              "name": "RepoSearchResultItem",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SearchResultTextMatches": {
      "fields": {
        "fragment": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatchesMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "object_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "object_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "property": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "search-result-text-matches"
    },
    "SearchResultTextMatchesMatches": {
      "fields": {
        "indices": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Int32",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SearchTopicsResult": {
      "fields": {
        "incomplete_results": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "items": {
          "type": {
            "element_type": {
              "name": "TopicSearchResultItem",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SearchUsersResult": {
      "fields": {
        "incomplete_results": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "items": {
          "type": {
            "element_type": {
              "name": "UserSearchResultItem",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "total_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "SecretScanningAlert": {
      "fields": {
        "created_at": {
          "description": "The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "description": "The GitHub URL of the alert resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "locations_url": {
          "description": "The REST API URL of the code locations for this alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "number": {
          "description": "The security alert number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "push_protection_bypassed": {
          "description": "Whether push protection was bypassed for the detected secret.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push_protection_bypassed_at": {
          "description": "The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "push_protection_bypassed_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resolution": {
          "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningAlertResolution",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resolution_comment": {
          "description": "An optional comment to resolve an alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resolved_at": {
          "description": "The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resolved_by": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret": {
          "description": "The secret that was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_type": {
          "description": "The type of secret that secret scanning detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_type_display_name": {
          "description": "User-friendly name for the detected secret, matching the `secret_type`. For a list of built-in patterns, see \"[Supported secret scanning patterns](https://docs.github.com/enterprise-server@3.15/code-security/secret-scanning/introduction/supported-secret-scanning-patterns#supported-secrets).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningAlertState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "description": "The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The REST API URL of the alert resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "validity": {
          "description": "The token status as of the latest validity check.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningAlertValidity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "secret-scanning-alert"
    },
    "SecretScanningCreatePushProtectionBypassBodyInput": {
      "fields": {
        "placeholder_id": {
          "description": "The ID of the push protection bypass placeholder. This value is returned on any push protected routes.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "description": "The reason for bypassing push protection.",
          "type": {
            "name": "SecretScanningPushProtectionBypassReason",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SecretScanningLocation": {
      "fields": {
        "details": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningLocationDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningLocationType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "secret-scanning-location"
    },
    "SecretScanningLocationDetails": {
      "fields": {
        "blob_sha": {
          "description": "SHA-1 hash ID of the associated blob",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blob_url": {
          "description": "The API URL to get the associated blob resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_sha": {
          "description": "SHA-1 hash ID of the associated commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_url": {
          "description": "The API URL to get the associated commit resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "discussion_body_url": {
          "description": "The URL to the discussion where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "discussion_comment_url": {
          "description": "The API URL to get the discussion comment where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "discussion_title_url": {
          "description": "The URL to the discussion where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "end_column": {
          "description": "The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "end_line": {
          "description": "Line number at which the secret ends in the file",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "issue_body_url": {
          "description": "The API URL to get the issue where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "issue_comment_url": {
          "description": "The API URL to get the issue comment where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "issue_title_url": {
          "description": "The API URL to get the issue where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "page_url": {
          "description": "The GitHub URL to get the associated wiki page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "description": "The file path in the repository",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pull_request_body_url": {
          "description": "The API URL to get the pull request where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "pull_request_comment_url": {
          "description": "The API URL to get the pull request comment where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "pull_request_review_comment_url": {
          "description": "The API URL to get the pull request review comment where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "pull_request_review_url": {
          "description": "The API URL to get the pull request review where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "pull_request_title_url": {
          "description": "The API URL to get the pull request where the secret was detected.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "start_column": {
          "description": "The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "start_line": {
          "description": "Line number at which the secret starts in the file",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        }
      }
    },
    "SecretScanningPatchSecurityAnalysisSettingsForEnterpriseBodyInput": {
      "fields": {
        "advanced_security_enabled_for_new_repositories": {
          "description": "Whether GitHub Advanced Security is automatically enabled for new repositories. For more information, see \"[About GitHub Advanced Security](https://docs.github.com/enterprise-server@3.15/get-started/learning-about-github/about-github-advanced-security).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "advanced_security_enabled_new_user_namespace_repos": {
          "description": "Whether GitHub Advanced Security is automatically enabled for new user namespace repositories. For more information, see \"[About GitHub Advanced Security](https://docs.github.com/enterprise-server@3.15/get-started/learning-about-github/about-github-advanced-security).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "dependabot_alerts_enabled_for_new_repositories": {
          "description": "Whether Dependabot alerts are automatically enabled for new repositories. For more information, see \"[About Dependabot alerts](https://docs.github.com/enterprise-server@3.15/code-security/dependabot/dependabot-alerts/about-dependabot-alerts).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_enabled_for_new_repositories": {
          "description": "Whether secret scanning is automatically enabled for new repositories. For more information, see \"[About secret scanning](https://docs.github.com/enterprise-server@3.15/code-security/secret-scanning/about-secret-scanning).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_non_provider_patterns_enabled_for_new_repositories": {
          "description": "Whether secret scanning of non-provider patterns is enabled for new repositories under this enterprise.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secret_scanning_push_protection_custom_link": {
          "description": "The URL that will be displayed to contributors who are blocked from pushing a secret. For more information, see \"[Protecting pushes with secret scanning](https://docs.github.com/enterprise-server@3.15/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\" To disable this functionality, set this field to `null`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_scanning_push_protection_enabled_for_new_repositories": {
          "description": "Whether secret scanning push protection is automatically enabled for new repositories. For more information, see \"[Protecting pushes with secret scanning](https://docs.github.com/enterprise-server@3.15/code-security/secret-scanning/protecting-pushes-with-secret-scanning).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "SecretScanningPushProtectionBypass": {
      "fields": {
        "expire_at": {
          "description": "The time that the bypass will expire in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "reason": {
          "description": "The reason for bypassing push protection.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningPushProtectionBypassReason",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token_type": {
          "description": "The token type this bypass is for.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "secret-scanning-push-protection-bypass"
    },
    "SecretScanningUpdateAlertBodyInput": {
      "fields": {
        "resolution": {
          "description": "**Required when the `state` is `resolved`.** The reason for resolving the alert.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningAlertResolution",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resolution_comment": {
          "description": "An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.",
          "type": {
            "name": "SecretScanningAlertState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SecurityAdvisoryEpss": {
      "description": "The EPSS scores as calculated by the [Exploit Prediction Scoring System](https://www.first.org/epss).",
      "fields": {
        "percentage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 100,
            "minimum": 0
          }
        },
        "percentile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "maximum": 100,
            "minimum": 0
          }
        }
      },
      "alias": "security-advisory-epss"
    },
    "SecurityAndAnalysis": {
      "fields": {
        "advanced_security": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisAdvancedSecurity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dependabot_security_updates": {
          "description": "Enable or disable Dependabot security updates for the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisDependabotSecurityUpdates",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisSecretScanning",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning_non_provider_patterns": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisSecretScanningNonProviderPatterns",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secret_scanning_push_protection": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisSecretScanningPushProtection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "security-and-analysis"
    },
    "SecurityAndAnalysisAdvancedSecurity": {
      "fields": {
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisAdvancedSecurityStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SecurityAndAnalysisDependabotSecurityUpdates": {
      "description": "Enable or disable Dependabot security updates for the repository.",
      "fields": {
        "status": {
          "description": "The enablement status of Dependabot security updates for the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisDependabotSecurityUpdatesStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SecurityAndAnalysisSecretScanning": {
      "fields": {
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisSecretScanningStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SecurityAndAnalysisSecretScanningNonProviderPatterns": {
      "fields": {
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisSecretScanningNonProviderPatternsStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SecurityAndAnalysisSecretScanningPushProtection": {
      "fields": {
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityAndAnalysisSecretScanningPushProtectionStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SelectedActions": {
      "fields": {
        "github_owned_allowed": {
          "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "patterns_allowed": {
          "description": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "selected-actions"
    },
    "SelectedActionsInput": {
      "fields": {
        "github_owned_allowed": {
          "description": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "patterns_allowed": {
          "description": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "selected-actions"
    },
    "ShortBlob": {
      "description": "Short Blob",
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "short-blob"
    },
    "ShortBranch": {
      "description": "Short Branch",
      "fields": {
        "commit": {
          "type": {
            "name": "ShortBranchCommit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "protected": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "protection": {
          "description": "Branch Protection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BranchProtection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "protection_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "short-branch"
    },
    "ShortBranchCommit": {
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "SimpleCommit": {
      "description": "A commit.",
      "fields": {
        "author": {
          "description": "Information about the Git author",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleCommitAuthor",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "committer": {
          "description": "Information about the Git committer",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleCommitCommitter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "SHA for the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "Message describing the purpose of the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "timestamp": {
          "description": "Timestamp of the commit",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "tree_id": {
          "description": "SHA for the commit's tree",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "simple-commit"
    },
    "SimpleCommitAuthor": {
      "description": "Information about the Git author",
      "fields": {
        "email": {
          "description": "Git email address of the commit's author",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "name": {
          "description": "Name of the commit's author",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SimpleCommitCommitter": {
      "description": "Information about the Git committer",
      "fields": {
        "email": {
          "description": "Git email address of the commit's committer",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "name": {
          "description": "Name of the commit's committer",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SimpleCommitStatus": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "context": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "required": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "simple-commit-status"
    },
    "SimpleRepository": {
      "description": "A GitHub repository.",
      "fields": {
        "archive_url": {
          "description": "A template for the API URL to download the repository as an archive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignees_url": {
          "description": "A template for the API URL to list the available assignees for issues in the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blobs_url": {
          "description": "A template for the API URL to create or retrieve a raw Git blob in the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "branches_url": {
          "description": "A template for the API URL to get information about branches in the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "collaborators_url": {
          "description": "A template for the API URL to get information about collaborators of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_url": {
          "description": "A template for the API URL to get information about comments on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "description": "A template for the API URL to get information about commits on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "compare_url": {
          "description": "A template for the API URL to compare two commits or refs.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents_url": {
          "description": "A template for the API URL to get the contents of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contributors_url": {
          "description": "A template for the API URL to list the contributors to the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "deployments_url": {
          "description": "The API URL to list the deployments of the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "description": "The repository description.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "downloads_url": {
          "description": "The API URL to list the downloads on the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events_url": {
          "description": "The API URL to list the events of the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "fork": {
          "description": "Whether the repository is a fork.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "forks_url": {
          "description": "The API URL to list the forks of the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "full_name": {
          "description": "The full, globally unique, name of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_commits_url": {
          "description": "A template for the API URL to get information about Git commits of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_refs_url": {
          "description": "A template for the API URL to get information about Git refs of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_tags_url": {
          "description": "A template for the API URL to get information about Git tags of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hooks_url": {
          "description": "The API URL to list the hooks on the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "description": "The URL to view the repository on GitHub.com.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "A unique identifier of the repository.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "issue_comment_url": {
          "description": "A template for the API URL to get information about issue comments on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issue_events_url": {
          "description": "A template for the API URL to get information about issue events on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues_url": {
          "description": "A template for the API URL to get information about issues on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keys_url": {
          "description": "A template for the API URL to get information about deploy keys on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels_url": {
          "description": "A template for the API URL to get information about labels of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "languages_url": {
          "description": "The API URL to get information about the languages of the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "merges_url": {
          "description": "The API URL to merge branches in the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "milestones_url": {
          "description": "A template for the API URL to get information about milestones of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "description": "The GraphQL identifier of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifications_url": {
          "description": "A template for the API URL to get information about notifications on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "description": "Whether the repository is private.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pulls_url": {
          "description": "A template for the API URL to get information about pull requests on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "releases_url": {
          "description": "A template for the API URL to get information about releases on the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stargazers_url": {
          "description": "The API URL to list the stargazers on the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "statuses_url": {
          "description": "A template for the API URL to get information about statuses of a commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscribers_url": {
          "description": "The API URL to list the subscribers on the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscription_url": {
          "description": "The API URL to subscribe to notifications for this repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "tags_url": {
          "description": "The API URL to get information about tags on the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams_url": {
          "description": "The API URL to list the teams on the repository.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "trees_url": {
          "description": "A template for the API URL to create or retrieve a raw Git tree of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to get more information about the repository from the GitHub API.",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "simple-repository"
    },
    "SimpleUser": {
      "description": "A GitHub user.",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "simple-user"
    },
    "SnapshotDetectorInput": {
      "description": "A description of the detector used.",
      "fields": {
        "name": {
          "description": "The name of the detector used.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The url of the detector used.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "The version of the detector used.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SnapshotInput": {
      "description": "Create a new snapshot of a repository's dependencies.",
      "fields": {
        "detector": {
          "description": "A description of the detector used.",
          "type": {
            "name": "SnapshotDetectorInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "job": {
          "type": {
            "name": "SnapshotJobInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "manifests": {
          "description": "A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "metadata": {
          "description": "User-defined metadata to store domain-specific information limited to 8 keys with scalar values.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ref": {
          "description": "The repository branch that triggered this snapshot.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^refs/"
          }
        },
        "scanned": {
          "description": "The time at which the snapshot was scanned.",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "sha": {
          "description": "The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 40,
            "minLength": 40
          }
        },
        "version": {
          "description": "The version of the repository snapshot submission.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "snapshot"
    },
    "SnapshotJobInput": {
      "fields": {
        "correlator": {
          "description": "Correlator provides a key that is used to group snapshots submitted over time. Only the \"latest\" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given \"wave\" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "description": "The url for the job.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The external ID of the job.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SocialAccount": {
      "description": "Social media account",
      "fields": {
        "provider": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "social-account"
    },
    "SshSigningKey": {
      "description": "A public SSH key used to sign Git commits",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "key": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ssh-signing-key"
    },
    "Status": {
      "description": "The status of a commit.",
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "context": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "creator": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "status"
    },
    "StatusCheckPolicy": {
      "description": "Status Check Policy",
      "fields": {
        "checks": {
          "type": {
            "element_type": {
              "name": "StatusCheckPolicyChecks",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "contexts": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "contexts_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "strict": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "status-check-policy"
    },
    "StatusCheckPolicyChecks": {
      "fields": {
        "app_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "context": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SubIssuesSummary": {
      "fields": {
        "completed": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "percent_completed": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "total": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "sub-issues-summary"
    },
    "Tag": {
      "description": "Tag",
      "fields": {
        "commit": {
          "type": {
            "name": "TagCommit",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tarball_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "zipball_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "tag"
    },
    "TagCommit": {
      "fields": {
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "TagProtection": {
      "description": "Tag protection",
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "pattern": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "tag-protection"
    },
    "Team": {
      "description": "Groups of organization members that gives permissions on specified repositories.",
      "fields": {
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permission": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "privacy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "slug": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "team"
    },
    "TeamDiscussion": {
      "description": "A team discussion is a persistent record of a free-form conversation within a team.",
      "fields": {
        "author": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "description": "The main text of the discussion.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_version": {
          "description": "The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "last_edited_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "description": "The unique sequence number of a team discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "pinned": {
          "description": "Whether or not this discussion should be pinned for easy retrieval.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "private": {
          "description": "Whether or not this discussion should be restricted to team members and organization owners.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "team_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "title": {
          "description": "The title of the discussion.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "team-discussion"
    },
    "TeamDiscussionComment": {
      "description": "A reply to a discussion within a team.",
      "fields": {
        "author": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "description": "The main text of the comment.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_version": {
          "description": "The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "discussion_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "last_edited_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "description": "The unique sequence number of a team discussion comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "team-discussion-comment"
    },
    "TeamFull": {
      "description": "Groups of organization members that gives permissions on specified repositories.",
      "fields": {
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the team",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ldap_dn": {
          "description": "Distinguished Name (DN) that team maps to within LDAP environment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the team",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "description": "The notification setting the team has set",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamFullNotificationSetting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organization": {
          "description": "Team Organization",
          "type": {
            "name": "TeamOrganization",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "parent": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permission": {
          "description": "Permission that the team will have for its repositories",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privacy": {
          "description": "The level of privacy this team should have",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamFullPrivacy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repos_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "slug": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "URL for the team",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "team-full"
    },
    "TeamMembership": {
      "description": "Team Membership",
      "fields": {
        "role": {
          "description": "The role of the user in the team.",
          "type": {
            "name": "TeamMembershipRole",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "The state of the user's membership in the team.",
          "type": {
            "name": "TeamMembershipState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "team-membership"
    },
    "TeamOrganization": {
      "description": "Team Organization",
      "fields": {
        "archived_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "avatar_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "billing_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "collaborators": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "default_repository_permission": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disk_usage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "followers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "has_organization_projects": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_repository_projects": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hooks_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_verified": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_allowed_repository_creation_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_can_create_internal_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_private_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_private_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_public_pages": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_public_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_create_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_can_fork_private_repositories": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owned_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamOrganizationPlan",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "public_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "total_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "two_factor_requirement_enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "web_commit_signoff_required": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "team-organization"
    },
    "TeamOrganizationPlan": {
      "fields": {
        "filled_seats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private_repos": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "seats": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "space": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "TeamPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "TeamProject": {
      "description": "A team's access to a project.",
      "fields": {
        "body": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "columns_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "creator": {
          "description": "A GitHub user.",
          "type": {
            "name": "SimpleUser",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "number": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "organization_permission": {
          "description": "The organization permission for this project. Only present when owner is an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "owner_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "type": {
            "name": "TeamProjectPermissions",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "description": "Whether the project is private or not. Only present when owner is an organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "state": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "team-project"
    },
    "TeamProjectPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "read": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "write": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "TeamRepository": {
      "description": "A team's access to a repository.",
      "fields": {
        "allow_auto_merge": {
          "description": "Whether to allow Auto-merge to be used on pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_forking": {
          "description": "Whether to allow forking this repo",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_merge_commit": {
          "description": "Whether to allow merge commits for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_rebase_merge": {
          "description": "Whether to allow rebase merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "allow_squash_merge": {
          "description": "Whether to allow squash merges for pull requests.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "archive_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "archived": {
          "description": "Whether the repository is archived.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "assignees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blobs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "branches_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clone_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "collaborators_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "compare_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contents_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "contributors_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "default_branch": {
          "description": "The default branch of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delete_branch_on_merge": {
          "description": "Whether to delete head branches when pull requests are merged",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "deployments_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "disabled": {
          "description": "Returns whether or not this repository disabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "downloads_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "fork": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "forks": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "forks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "full_name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_commits_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_refs_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_tags_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "git_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "has_downloads": {
          "description": "Whether downloads are enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_issues": {
          "description": "Whether issues are enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_pages": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_projects": {
          "description": "Whether projects are enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "has_wiki": {
          "description": "Whether the wiki is enabled.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "homepage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "hooks_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the repository",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "is_template": {
          "description": "Whether this repository acts as a template that can be used to generate new repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "issue_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issue_events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issues_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keys_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "labels_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "language": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "languages_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "license": {
          "description": "License Simple",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LicenseSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "master_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "merges_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "milestones_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "mirror_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "name": {
          "description": "The name of the repository.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "network_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifications_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "open_issues": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "open_issues_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "owner": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamRepositoryPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private": {
          "description": "Whether the repository is private or public.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pulls_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pushed_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "releases_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "size": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ssh_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stargazers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stargazers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "statuses_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscribers_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subscribers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscription_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "svn_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "tags_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "teams_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "temp_clone_token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "topics": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trees_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "visibility": {
          "description": "The repository visibility: public, private, or internal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "watchers": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "watchers_count": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "web_commit_signoff_required": {
          "description": "Whether to require contributors to sign off on web-based commits",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "team-repository"
    },
    "TeamRepositoryPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "TeamRoleAssignment": {
      "description": "The Relationship a Team has with a role.",
      "fields": {
        "assignment": {
          "description": "Determines if the team has a direct, indirect, or mixed relationship to a role",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamRoleAssignmentAssignment",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamSimple",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "permission": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamRoleAssignmentPermissions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "privacy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "slug": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "team-role-assignment"
    },
    "TeamRoleAssignmentPermissions": {
      "fields": {
        "admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "maintain": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "pull": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "push": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "triage": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "TeamSimple": {
      "description": "Groups of organization members that gives permissions on specified repositories.",
      "fields": {
        "description": {
          "description": "Description of the team",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the team",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "ldap_dn": {
          "description": "Distinguished Name (DN) that team maps to within LDAP environment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "members_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the team",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "description": "The notification setting the team has set",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permission": {
          "description": "Permission that the team will have for its repositories",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privacy": {
          "description": "The level of privacy this team should have",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repositories_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "slug": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "URL for the team",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "team-simple"
    },
    "TeamsAddOrUpdateMembershipForUserInOrgBodyInput": {
      "fields": {
        "role": {
          "description": "The role that this user should have in the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateMembershipForUserInOrgBodyRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsAddOrUpdateMembershipForUserLegacyBodyInput": {
      "fields": {
        "role": {
          "description": "The role that this user should have in the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateMembershipForUserLegacyBodyRole",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsAddOrUpdateProjectPermissionsInOrgBodyInput": {
      "fields": {
        "permission": {
          "description": "The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP method](https://docs.github.com/enterprise-server@3.15/rest/guides/getting-started-with-the-rest-api#http-method).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateProjectPermissionsInOrgBodyPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsAddOrUpdateProjectPermissionsLegacyBodyInput": {
      "fields": {
        "permission": {
          "description": "The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see \"[HTTP method](https://docs.github.com/enterprise-server@3.15/rest/guides/getting-started-with-the-rest-api#http-method).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateProjectPermissionsLegacyBodyPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsAddOrUpdateRepoPermissionsInOrgBodyInput": {
      "fields": {
        "permission": {
          "description": "The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsAddOrUpdateRepoPermissionsLegacyBodyInput": {
      "fields": {
        "permission": {
          "description": "The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateRepoPermissionsLegacyBodyPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsCreateBodyInput": {
      "fields": {
        "description": {
          "description": "The description of the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ldap_dn": {
          "description": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the \"[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.15/rest/enterprise-admin/ldap#update-ldap-mapping-for-a-team)\" endpoint to change the LDAP DN. For more information, see \"[Using LDAP](https://docs.github.com/enterprise-server@3.15/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync).\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "maintainers": {
          "description": "List GitHub IDs for organization members who will become team maintainers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the team.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "description": "The notification setting the team has chosen. The options are:    * `notifications_enabled` - team members receive notifications when the team is @mentioned.    * `notifications_disabled` - no one receives notifications.   Default: `notifications_enabled`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsCreateBodyNotificationSetting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent_team_id": {
          "description": "The ID of a team to set as the parent team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "permission": {
          "description": "**Closing down notice**. The permission that new repositories will be added to the team with when none is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsCreateBodyPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privacy": {
          "description": "The level of privacy this team should have. The options are:   **For a non-nested team:**    * `secret` - only visible to organization owners and members of this team.    * `closed` - visible to all members of this organization.   Default: `secret`   **For a parent or child team:**    * `closed` - visible to all members of this organization.   Default for child team: `closed`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsCreateBodyPrivacy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repo_names": {
          "description": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "TeamsCreateDiscussionCommentInOrgBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion comment's body text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsCreateDiscussionCommentLegacyBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion comment's body text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsCreateDiscussionInOrgBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion post's body text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private": {
          "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "title": {
          "description": "The discussion post's title.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsCreateDiscussionLegacyBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion post's body text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "private": {
          "description": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "title": {
          "description": "The discussion post's title.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsLinkExternalIdpGroupToTeamForOrgBodyInput": {
      "fields": {
        "group_id": {
          "description": "External Group Id",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "TeamsUpdateDiscussionCommentInOrgBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion comment's body text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsUpdateDiscussionCommentLegacyBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion comment's body text.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsUpdateDiscussionInOrgBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion post's body text.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The discussion post's title.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsUpdateDiscussionLegacyBodyInput": {
      "fields": {
        "body": {
          "description": "The discussion post's body text.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "The discussion post's title.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsUpdateInOrgBodyInput": {
      "fields": {
        "description": {
          "description": "The description of the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "description": "The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:   * `notifications_enabled` - team members receive notifications when the team is @mentioned.    * `notifications_disabled` - no one receives notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateInOrgBodyNotificationSetting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent_team_id": {
          "description": "The ID of a team to set as the parent team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "permission": {
          "description": "**Closing down notice**. The permission that new repositories will be added to the team with when none is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateInOrgBodyPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privacy": {
          "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:   **For a non-nested team:**    * `secret` - only visible to organization owners and members of this team.    * `closed` - visible to all members of this organization.   **For a parent or child team:**    * `closed` - visible to all members of this organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateInOrgBodyPrivacy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TeamsUpdateLegacyBodyInput": {
      "fields": {
        "description": {
          "description": "The description of the team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the team.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_setting": {
          "description": "The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:   * `notifications_enabled` - team members receive notifications when the team is @mentioned.    * `notifications_disabled` - no one receives notifications.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateLegacyBodyNotificationSetting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parent_team_id": {
          "description": "The ID of a team to set as the parent team.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "permission": {
          "description": "**Closing down notice**. The permission that new repositories will be added to the team with when none is specified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateLegacyBodyPermission",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privacy": {
          "description": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:   **For a non-nested team:**    * `secret` - only visible to organization owners and members of this team.    * `closed` - visible to all members of this organization.   **For a parent or child team:**    * `closed` - visible to all members of this organization.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateLegacyBodyPrivacy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Thread": {
      "description": "Thread",
      "fields": {
        "id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "last_read_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subject": {
          "type": {
            "name": "ThreadSubject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subscription_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unread": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "thread"
    },
    "ThreadSubject": {
      "fields": {
        "latest_comment_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ThreadSubscription": {
      "description": "Thread Subscription",
      "fields": {
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "ignored": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "subscribed": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "thread_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "thread-subscription"
    },
    "TimelineCommittedEventAuthor": {
      "description": "Identifying information for the git-user",
      "fields": {
        "date": {
          "description": "Timestamp of the commit",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "description": "Git email address of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the git user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TimelineCommittedEventCommitter": {
      "description": "Identifying information for the git-user",
      "fields": {
        "date": {
          "description": "Timestamp of the commit",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "description": "Git email address of the user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the git user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TimelineCommittedEventParents": {
      "fields": {
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "sha": {
          "description": "SHA for the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "TimelineCommittedEventTree": {
      "fields": {
        "sha": {
          "description": "SHA for the commit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "TimelineCommittedEventVerification": {
      "fields": {
        "payload": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signature": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "TimelineCrossReferencedEventSource": {
      "fields": {
        "issue": {
          "description": "Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Issue",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TimelineIssueEvents": {
      "description": "Timeline Event",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimelineReviewedEventLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "actor": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignee": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "author": {
          "description": "Identifying information for the git-user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimelineCommittedEventAuthor",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "author_association": {
          "description": "How the author is associated with the repository.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorAssociation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body": {
          "description": "Contents of the issue comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_html": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "body_text": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "comments": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "JSON",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "commit_id": {
          "description": "A commit SHA for the review.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "commit_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "committer": {
          "description": "Identifying information for the git-user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimelineCommittedEventCommitter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dismissed_review": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReviewDismissedIssueEventDismissedReview",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "event": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "description": "Unique identifier of the issue comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "issue_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "label": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lock_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "Message describing the purpose of the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "milestone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parents": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TimelineCommittedEventParents",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "performed_via_github_app": {
          "description": "GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Integration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "project_card": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_request_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "reactions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReactionRollup",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rename": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RenamedIssueEventRename",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "requested_reviewer": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "requested_team": {
          "description": "Groups of organization members that gives permissions on specified repositories.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Team",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "review_requester": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sha": {
          "description": "SHA for the commit",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimelineCrossReferencedEventSource",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state_reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "submitted_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "tree": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimelineCommittedEventTree",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "URL for the issue comment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "verification": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimelineCommittedEventVerification",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "TimelineReviewedEventLinks": {
      "fields": {
        "html": {
          "type": {
            "name": "TimelineReviewedEventLinksHtml",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pull_request": {
          "type": {
            "name": "TimelineReviewedEventLinksPullRequest",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "TimelineReviewedEventLinksHtml": {
      "fields": {
        "href": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TimelineReviewedEventLinksPullRequest": {
      "fields": {
        "href": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Topic": {
      "description": "A topic aggregates entities that are related to a subject.",
      "fields": {
        "names": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "topic"
    },
    "TopicSearchResultItem": {
      "description": "Topic Search Result Item",
      "fields": {
        "aliases": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TopicSearchResultItemAliases",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "created_by": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "curated": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "display_name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "featured": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "logo_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "related": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TopicSearchResultItemRelated",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "released": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "repository_count": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "score": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "short_description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "text_matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "topic-search-result-item"
    },
    "TopicSearchResultItemAliases": {
      "fields": {
        "topic_relation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TopicSearchResultItemAliasesTopicRelation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "TopicSearchResultItemAliasesTopicRelation": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "relation_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "topic_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "TopicSearchResultItemRelated": {
      "fields": {
        "topic_relation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TopicSearchResultItemRelatedTopicRelation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "TopicSearchResultItemRelatedTopicRelation": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "relation_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "topic_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "UserEmailsInput": {
      "fields": {
        "primary": {
          "description": "Whether this email address is the primary address.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "The type of email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-emails"
    },
    "UserEmailsResponse": {
      "fields": {
        "primary": {
          "description": "Whether this email address is the primary address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "The type of email address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The email address.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-emails-response"
    },
    "UserInput": {
      "fields": {
        "active": {
          "description": "Whether the user active in the IdP.",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "displayName": {
          "description": "A human-readable name for the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "emails": {
          "description": "The emails for the user.",
          "type": {
            "element_type": {
              "name": "UserEmailsInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "externalId": {
          "description": "A unique identifier for the resource as defined by the provisioning client.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserNameInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "roles": {
          "description": "The roles assigned to the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserRoleInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "schemas": {
          "description": "The URIs that are used to indicate the namespaces of the SCIM schemas.",
          "type": {
            "element_type": {
              "name": "UserSchemas",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userName": {
          "description": "The username for the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user"
    },
    "UserNameInput": {
      "fields": {
        "familyName": {
          "description": "The family name of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "formatted": {
          "description": "The full name, including all middle names, titles, and suffixes as appropriate, formatted for display.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "givenName": {
          "description": "The given name of the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "middleName": {
          "description": "The middle name(s) of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-name"
    },
    "UserNameResponse": {
      "fields": {
        "familyName": {
          "description": "The family name of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "formatted": {
          "description": "The full name, including all middle names, titles, and suffixes as appropriate, formatted for display.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "givenName": {
          "description": "The given name of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "middleName": {
          "description": "The middle name(s) of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-name-response"
    },
    "UserRole": {
      "fields": {
        "display": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primary": {
          "description": "Is the role a primary role for the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The role value representing a user role in GitHub.",
          "type": {
            "name": "UserRoleValue",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-role"
    },
    "UserRoleAssignment": {
      "description": "The Relationship a User has with a role.",
      "fields": {
        "assignment": {
          "description": "Determines if the user has a direct, indirect, or mixed relationship to a role",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserRoleAssignmentAssignment",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "inherited_from": {
          "description": "Team the user has gotten the role through",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TeamSimple",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "received_events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-role-assignment"
    },
    "UserRoleInput": {
      "fields": {
        "display": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primary": {
          "description": "Is the role a primary role for the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The role value representing a user role in GitHub.",
          "type": {
            "name": "UserRoleValue",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-role"
    },
    "UserSearchResultItem": {
      "description": "User Search Result Item",
      "fields": {
        "avatar_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "bio": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "followers_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizations_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "public_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "score": {
          "type": {
            "name": "Float64",
            "type": "named"
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "site_admin": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "suspended_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "text_matches": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SearchResultTextMatches",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "user-search-result-item"
    },
    "UsersAddEmailForAuthenticatedUserBody0Input": {
      "fields": {
        "emails": {
          "description": "Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "UsersAddSocialAccountForAuthenticatedUserBodyInput": {
      "fields": {
        "account_urls": {
          "description": "Full URLs for the social media profiles to add.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "UsersCreateGpgKeyForAuthenticatedUserBodyInput": {
      "fields": {
        "armored_public_key": {
          "description": "A GPG key in ASCII-armored format.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "A descriptive name for the new key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsersCreatePublicSshKeyForAuthenticatedUserBodyInput": {
      "fields": {
        "key": {
          "description": "The public SSH key to add to your GitHub account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) "
          }
        },
        "title": {
          "description": "A descriptive name for the new key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsersCreateSshSigningKeyForAuthenticatedUserBodyInput": {
      "fields": {
        "key": {
          "description": "The public SSH key to add to your GitHub account. For more information, see \"[Checking for existing SSH keys](https://docs.github.com/enterprise-server@3.15/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys).\"",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) |^(sk-ssh-ed25519|sk-ecdsa-sha2-nistp256)@openssh.com "
          }
        },
        "title": {
          "description": "A descriptive name for the new key.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsersDeleteEmailForAuthenticatedUserBody0Input": {
      "description": "Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
      "fields": {
        "emails": {
          "description": "Email addresses associated with the GitHub user account.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "UsersDeleteSocialAccountForAuthenticatedUserBodyInput": {
      "fields": {
        "account_urls": {
          "description": "Full URLs for the social media profiles to delete.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "UsersGetAuthenticatedResult": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "bio": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "business_plus": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "collaborators": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "disk_usage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "ldap_dn": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "owned_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "total_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "two_factor_authentication": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsersGetByIdResult": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "bio": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "business_plus": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "collaborators": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "disk_usage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "ldap_dn": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "owned_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "total_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "two_factor_authentication": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsersGetByUsernameResult": {
      "fields": {
        "avatar_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "bio": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "business_plus": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "collaborators": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "company": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "disk_usage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "followers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "followers_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "following": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "following_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gists_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "gravatar_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "html_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "format": "int64"
          }
        },
        "ldap_dn": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "location": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "login": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notification_email": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email"
          }
        },
        "organizations_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "owned_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "plan": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "private_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_gists": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "public_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "received_events_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "repos_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "site_admin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "starred_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subscriptions_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "total_private_repos": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "twitter_username": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "two_factor_authentication": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "user_view_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UsersUpdateAuthenticatedBodyInput": {
      "fields": {
        "bio": {
          "description": "The new short biography of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "blog": {
          "description": "The new blog URL of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "company": {
          "description": "The new company of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "email": {
          "description": "The publicly visible email address of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "hireable": {
          "description": "The new hiring availability of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "location": {
          "description": "The new location of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The new name of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "twitter_username": {
          "description": "The new Twitter username of the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Verification": {
      "fields": {
        "payload": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signature": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verified": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "verification"
    },
    "Vulnerability": {
      "description": "A vulnerability describing the product and its affected versions within a GitHub Security Advisory.",
      "fields": {
        "first_patched_version": {
          "description": "The package version that resolves the vulnerability.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "package": {
          "description": "The name of the package affected by the vulnerability.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VulnerabilityPackage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "vulnerable_functions": {
          "description": "The functions in the package that are affected by the vulnerability.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "vulnerable_version_range": {
          "description": "The range of the package versions affected by the vulnerability.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "vulnerability"
    },
    "VulnerabilityPackage": {
      "description": "The name of the package affected by the vulnerability.",
      "fields": {
        "ecosystem": {
          "description": "The package's language or package management ecosystem.",
          "type": {
            "name": "SecurityAdvisoryEcosystems",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The unique package name within its ecosystem.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "WebhookConfig": {
      "description": "Configuration object of the webhook",
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "webhook-config"
    },
    "WebhookConfigInput": {
      "description": "Configuration object of the webhook",
      "fields": {
        "content_type": {
          "description": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "insecure_ssl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WebhookConfigInsecureSsl",
              "type": "named"
            }
          },
          "http": {}
        },
        "secret": {
          "description": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.15/webhooks/event-payloads/#delivery-headers).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL to which the payloads will be delivered.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      },
      "alias": "webhook-config"
    },
    "Workflow": {
      "description": "A GitHub Actions workflow",
      "fields": {
        "badge_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "deleted_at": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "type": {
            "name": "WorkflowState",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "workflow"
    },
    "WorkflowRun": {
      "description": "An invocation of a workflow",
      "fields": {
        "actor": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "artifacts_url": {
          "description": "The URL to the artifacts for the workflow run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cancel_url": {
          "description": "The URL to cancel the workflow run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "check_suite_id": {
          "description": "The ID of the associated check suite.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "check_suite_node_id": {
          "description": "The node ID of the associated check suite.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "check_suite_url": {
          "description": "The URL to the associated check suite.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "conclusion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "display_title": {
          "description": "The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "event": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head_branch": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "head_commit": {
          "description": "A commit.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleCommit",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "head_repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "head_repository_id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "head_sha": {
          "description": "The SHA of the head commit that points to the version of the workflow being run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "html_url": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "jobs_url": {
          "description": "The URL to the jobs for the workflow run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "logs_url": {
          "description": "The URL to download the logs for the workflow run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the workflow run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "node_id": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "description": "The full path of the workflow",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "previous_attempt_url": {
          "description": "The URL to the previous attempted run of this workflow, if one exists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pull_requests": {
          "description": "Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PullRequestMinimal",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "referenced_workflows": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ReferencedWorkflow",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "repository": {
          "description": "Minimal Repository",
          "type": {
            "name": "MinimalRepository",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rerun_url": {
          "description": "The URL to rerun the workflow run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "run_attempt": {
          "description": "Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "run_number": {
          "description": "The auto incrementing run number for the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "run_started_at": {
          "description": "The start time of the latest run. Resets on re-run.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "triggering_actor": {
          "description": "A GitHub user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimpleUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "updated_at": {
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "url": {
          "description": "The URL to the workflow run.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workflow_id": {
          "description": "The ID of the parent workflow.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "workflow_url": {
          "description": "The URL to the workflow.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "workflow-run"
    }
  },
  "procedures": {
    "actions_add_custom_labels_to_self_hosted_runner_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/{runner_id}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/actions/runners/{runner_id}/labels",
          "type": {
            "name": "ActionsAddCustomLabelsToSelfHostedRunnerForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add custom labels to a self-hosted runner for an organization",
      "result_type": {
        "name": "ActionsAddCustomLabelsToSelfHostedRunnerForOrgResult",
        "type": "named"
      }
    },
    "actions_add_custom_labels_to_self_hosted_runner_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
          "type": {
            "name": "ActionsAddCustomLabelsToSelfHostedRunnerForRepoBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add custom labels to a self-hosted runner for a repository",
      "result_type": {
        "name": "ActionsAddCustomLabelsToSelfHostedRunnerForRepoResult",
        "type": "named"
      }
    },
    "actions_add_repo_access_to_self_hosted_runner_group_in_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add repository access to a self-hosted runner group in an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_add_selected_repo_to_org_secret": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add selected repository to an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_add_selected_repo_to_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add selected repository to an organization variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_add_self_hosted_runner_to_group_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add a self-hosted runner to a group for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_cancel_workflow_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Cancel a workflow run",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_create_environment_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/variables",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/environments/{environment_name}/variables",
          "type": {
            "name": "ActionsCreateEnvironmentVariableBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an environment variable",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_create_or_update_environment_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}",
          "type": {
            "name": "ActionsCreateOrUpdateEnvironmentSecretBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update an environment secret",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_create_or_update_org_secret": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/{secret_name}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/secrets/{secret_name}",
          "type": {
            "name": "ActionsCreateOrUpdateOrgSecretBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update an organization secret",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_create_or_update_repo_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",
          "type": {
            "name": "ActionsCreateOrUpdateRepoSecretBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update a repository secret",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_create_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/actions/variables",
          "type": {
            "name": "ActionsCreateOrgVariableBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an organization variable",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_create_registration_token_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/registration-token",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a registration token for an organization",
      "result_type": {
        "name": "AuthenticationToken",
        "type": "named"
      }
    },
    "actions_create_registration_token_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/registration-token",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a registration token for a repository",
      "result_type": {
        "name": "AuthenticationToken",
        "type": "named"
      }
    },
    "actions_create_remove_token_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/remove-token",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a remove token for an organization",
      "result_type": {
        "name": "AuthenticationToken",
        "type": "named"
      }
    },
    "actions_create_remove_token_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/remove-token",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a remove token for a repository",
      "result_type": {
        "name": "AuthenticationToken",
        "type": "named"
      }
    },
    "actions_create_repo_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/variables",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/variables",
          "type": {
            "name": "ActionsCreateRepoVariableBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a repository variable",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_create_self_hosted_runner_group_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/actions/runner-groups",
          "type": {
            "name": "ActionsCreateSelfHostedRunnerGroupForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a self-hosted runner group for an organization",
      "result_type": {
        "name": "RunnerGroupsOrg",
        "type": "named"
      }
    },
    "actions_create_workflow_dispatch": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
          "type": {
            "name": "ActionsCreateWorkflowDispatchBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "workflow_id": {
          "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "name": "workflow_id",
            "in": "path",
            "schema": {}
          }
        }
      },
      "description": "Create a workflow dispatch event",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_actions_cache_by_id": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/caches/{cache_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "cache_id": {
          "description": "The unique identifier of the GitHub Actions cache.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "cache_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a GitHub Actions cache for a repository (using a cache ID)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_actions_cache_by_key": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/caches",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key": {
          "description": "A key for identifying the cache.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "key",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The full Git reference for narrowing down the cache. The `ref` for a branch should be formatted as `refs/heads/`. To reference a pull request use `refs/pull//merge`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "ref",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete GitHub Actions caches for a repository (using a cache key)",
      "result_type": {
        "name": "ActionsCacheList",
        "type": "named"
      }
    },
    "actions_delete_artifact": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "artifact_id": {
          "description": "The unique identifier of the artifact.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "artifact_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an artifact",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_environment_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an environment secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_environment_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an environment variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_org_secret": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/{secret_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an organization variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_repo_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a repository secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_repo_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/variables/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a repository variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_self_hosted_runner_from_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/{runner_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a self-hosted runner from an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_self_hosted_runner_from_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/{runner_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a self-hosted runner from a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_self_hosted_runner_group_from_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a self-hosted runner group from an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_workflow_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a workflow run",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_delete_workflow_run_logs": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete workflow run logs",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_disable_selected_repository_github_actions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/repositories/{repository_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Disable a selected repository for GitHub Actions in an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_disable_workflow": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "workflow_id": {
          "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "name": "workflow_id",
            "in": "path",
            "schema": {}
          }
        }
      },
      "description": "Disable a workflow",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_enable_selected_repository_github_actions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/repositories/{repository_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Enable a selected repository for GitHub Actions in an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_enable_workflow": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "workflow_id": {
          "description": "The ID of the workflow. You can also pass the workflow file name as a string.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "name": "workflow_id",
            "in": "path",
            "schema": {}
          }
        }
      },
      "description": "Enable a workflow",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_force_cancel_workflow_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Force cancel a workflow run",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_generate_runner_jitconfig_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/generate-jitconfig",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /enterprises/{enterprise}/actions/runners/generate-jitconfig",
          "type": {
            "name": "ActionsGenerateRunnerJitconfigForEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create configuration for a just-in-time runner for an Enterprise",
      "result_type": {
        "name": "ActionsGenerateRunnerJitconfigForEnterpriseResult",
        "type": "named"
      }
    },
    "actions_generate_runner_jitconfig_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/generate-jitconfig",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/actions/runners/generate-jitconfig",
          "type": {
            "name": "ActionsGenerateRunnerJitconfigForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create configuration for a just-in-time runner for an organization",
      "result_type": {
        "name": "ActionsGenerateRunnerJitconfigForOrgResult",
        "type": "named"
      }
    },
    "actions_generate_runner_jitconfig_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/generate-jitconfig",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig",
          "type": {
            "name": "ActionsGenerateRunnerJitconfigForRepoBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create configuration for a just-in-time runner for a repository",
      "result_type": {
        "name": "ActionsGenerateRunnerJitconfigForRepoResult",
        "type": "named"
      }
    },
    "actions_re_run_job_for_workflow_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsReRunJobForWorkflowRunBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "job_id": {
          "description": "The unique identifier of the job.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "job_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Re-run a job from a workflow run",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_re_run_workflow": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsReRunWorkflowBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Re-run a workflow",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_re_run_workflow_failed_jobs": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsReRunWorkflowFailedJobsBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Re-run failed jobs from a workflow run",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_remove_all_custom_labels_from_self_hosted_runner_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/{runner_id}/labels",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove all custom labels from a self-hosted runner for an organization",
      "result_type": {
        "name": "ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgResult",
        "type": "named"
      }
    },
    "actions_remove_all_custom_labels_from_self_hosted_runner_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove all custom labels from a self-hosted runner for a repository",
      "result_type": {
        "name": "ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoResult",
        "type": "named"
      }
    },
    "actions_remove_custom_label_from_self_hosted_runner_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/{runner_id}/labels/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of a self-hosted runner's custom label.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a custom label from a self-hosted runner for an organization",
      "result_type": {
        "name": "ActionsRemoveCustomLabelFromSelfHostedRunnerForOrgResult",
        "type": "named"
      }
    },
    "actions_remove_custom_label_from_self_hosted_runner_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of a self-hosted runner's custom label.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a custom label from a self-hosted runner for a repository",
      "result_type": {
        "name": "ActionsRemoveCustomLabelFromSelfHostedRunnerForRepoResult",
        "type": "named"
      }
    },
    "actions_remove_repo_access_to_self_hosted_runner_group_in_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove repository access to a self-hosted runner group in an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_remove_selected_repo_from_org_secret": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove selected repository from an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_remove_selected_repo_from_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove selected repository from an organization variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_remove_self_hosted_runner_from_group_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a self-hosted runner from a group for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_review_custom_gates_for_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule",
          "type": {
            "name": "ActionsReviewCustomGatesForRunBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Review custom deployment protection rules for a workflow run",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_review_pending_deployments_for_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
          "type": {
            "name": "ActionsReviewPendingDeploymentsForRunBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "run_id": {
          "description": "The unique identifier of the workflow run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Review pending deployments for a workflow run",
      "result_type": {
        "element_type": {
          "name": "Deployment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "actions_set_actions_cache_usage_policy": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/cache/usage-policy",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "GitHub Actions cache usage policy for repository.",
          "type": {
            "name": "ActionsCacheUsagePolicyForRepositoryInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set GitHub Actions cache usage policy for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_actions_cache_usage_policy_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/cache/usage-policy",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "GitHub Actions cache usage policy for an enterprise.",
          "type": {
            "name": "ActionsCacheUsagePolicyEnterpriseInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set GitHub Actions cache usage policy for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_allowed_actions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/selected-actions",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/permissions/selected-actions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SelectedActionsInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set allowed actions for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_allowed_actions_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions/selected-actions",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/actions/permissions/selected-actions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SelectedActionsInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set allowed actions for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_custom_labels_for_self_hosted_runner_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runners/{runner_id}/labels",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/runners/{runner_id}/labels",
          "type": {
            "name": "ActionsSetCustomLabelsForSelfHostedRunnerForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set custom labels for a self-hosted runner for an organization",
      "result_type": {
        "name": "ActionsSetCustomLabelsForSelfHostedRunnerForOrgResult",
        "type": "named"
      }
    },
    "actions_set_custom_labels_for_self_hosted_runner_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
          "type": {
            "name": "ActionsSetCustomLabelsForSelfHostedRunnerForRepoBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set custom labels for a self-hosted runner for a repository",
      "result_type": {
        "name": "ActionsSetCustomLabelsForSelfHostedRunnerForRepoResult",
        "type": "named"
      }
    },
    "actions_set_custom_oidc_sub_claim_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/oidc/customization/sub",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Actions OIDC subject customization for a repository",
          "type": {
            "name": "ActionsSetCustomOidcSubClaimForRepoBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set the customization template for an OIDC subject claim for a repository",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "actions_set_github_actions_default_workflow_permissions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/workflow",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /enterprises/{enterprise}/actions/permissions/workflow",
          "type": {
            "name": "ActionsSetDefaultWorkflowPermissionsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set default workflow permissions for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_github_actions_default_workflow_permissions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/workflow",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/permissions/workflow",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsSetDefaultWorkflowPermissionsInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set default workflow permissions for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_github_actions_default_workflow_permissions_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions/workflow",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/actions/permissions/workflow",
          "type": {
            "name": "ActionsSetDefaultWorkflowPermissionsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set default workflow permissions for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_github_actions_permissions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/permissions",
          "type": {
            "name": "ActionsSetGithubActionsPermissionsOrganizationBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set GitHub Actions permissions for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_github_actions_permissions_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/actions/permissions",
          "type": {
            "name": "ActionsSetGithubActionsPermissionsRepositoryBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set GitHub Actions permissions for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_repo_access_to_self_hosted_runner_group_in_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
          "type": {
            "name": "ActionsSetRepoAccessToSelfHostedRunnerGroupInOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set repository access for a self-hosted runner group in an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_selected_repos_for_org_secret": {
      "request": {
        "url": "/orgs/{org}/actions/secrets/{secret_name}/repositories",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/secrets/{secret_name}/repositories",
          "type": {
            "name": "ActionsSetSelectedReposForOrgSecretBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set selected repositories for an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_selected_repos_for_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables/{name}/repositories",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/variables/{name}/repositories",
          "type": {
            "name": "ActionsSetSelectedReposForOrgVariableBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set selected repositories for an organization variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_selected_repositories_enabled_github_actions_organization": {
      "request": {
        "url": "/orgs/{org}/actions/permissions/repositories",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/permissions/repositories",
          "type": {
            "name": "ActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set selected repositories enabled for GitHub Actions in an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_self_hosted_runners_in_group_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
          "type": {
            "name": "ActionsSetSelfHostedRunnersInGroupForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set self-hosted runners in a group for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_set_workflow_access_to_repository": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/permissions/access",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/actions/permissions/access",
          "type": {
            "name": "ActionsWorkflowAccessToRepositoryInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set the level of access for workflows outside of the repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_update_environment_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/variables/{name}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}",
          "type": {
            "name": "ActionsUpdateEnvironmentVariableBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an environment variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_update_org_variable": {
      "request": {
        "url": "/orgs/{org}/actions/variables/{name}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/actions/variables/{name}",
          "type": {
            "name": "ActionsUpdateOrgVariableBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an organization variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_update_repo_variable": {
      "request": {
        "url": "/repos/{owner}/{repo}/actions/variables/{name}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/actions/variables/{name}",
          "type": {
            "name": "ActionsUpdateRepoVariableBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "name": {
          "description": "The name of the variable.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a repository variable",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "actions_update_self_hosted_runner_group_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}",
          "type": {
            "name": "ActionsUpdateSelfHostedRunnerGroupForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a self-hosted runner group for an organization",
      "result_type": {
        "name": "RunnerGroupsOrg",
        "type": "named"
      }
    },
    "activity_delete_repo_subscription": {
      "request": {
        "url": "/repos/{owner}/{repo}/subscription",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a repository subscription",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activity_delete_thread_subscription": {
      "request": {
        "url": "/notifications/threads/{thread_id}/subscription",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.15/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a thread subscription",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activity_mark_notifications_as_read": {
      "request": {
        "url": "/notifications",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /notifications",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivityMarkNotificationsAsReadBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Mark notifications as read",
      "result_type": {
        "name": "ActivityMarkNotificationsAsReadResult",
        "type": "named"
      }
    },
    "activity_mark_repo_notifications_as_read": {
      "request": {
        "url": "/repos/{owner}/{repo}/notifications",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/notifications",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivityMarkRepoNotificationsAsReadBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Mark repository notifications as read",
      "result_type": {
        "name": "ActivityMarkRepoNotificationsAsReadResult",
        "type": "named"
      }
    },
    "activity_mark_thread_as_done": {
      "request": {
        "url": "/notifications/threads/{thread_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.15/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Mark a thread as done",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activity_mark_thread_as_read": {
      "request": {
        "url": "/notifications/threads/{thread_id}",
        "method": "patch",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "thread_id": {
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.15/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Mark a thread as read",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "activity_set_repo_subscription": {
      "request": {
        "url": "/repos/{owner}/{repo}/subscription",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/subscription",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivitySetRepoSubscriptionBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set a repository subscription",
      "result_type": {
        "name": "RepositorySubscription",
        "type": "named"
      }
    },
    "activity_set_thread_subscription": {
      "request": {
        "url": "/notifications/threads/{thread_id}/subscription",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /notifications/threads/{thread_id}/subscription",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActivitySetThreadSubscriptionBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "thread_id": {
          "description": "The unique identifier of the notification thread. This corresponds to the value returned in the `id` field when you retrieve notifications (for example with the [`GET /notifications` operation](https://docs.github.com/enterprise-server@3.15/rest/activity/notifications#list-notifications-for-the-authenticated-user)).",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "thread_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set a thread subscription",
      "result_type": {
        "name": "ThreadSubscription",
        "type": "named"
      }
    },
    "activity_star_repo_for_authenticated_user": {
      "request": {
        "url": "/user/starred/{owner}/{repo}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Star a repository for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activity_unstar_repo_for_authenticated_user": {
      "request": {
        "url": "/user/starred/{owner}/{repo}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unstar a repository for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "announcement_banners_remove_announcement_banner_for_org": {
      "request": {
        "url": "/orgs/{org}/announcement",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove announcement banner from organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "announcement_banners_set_announcement_banner_for_org": {
      "request": {
        "url": "/orgs/{org}/announcement",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Enterprise global announcement",
          "type": {
            "name": "AnnouncementInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set announcement banner for organization",
      "result_type": {
        "name": "AnnouncementBanner",
        "type": "named"
      }
    },
    "apps_add_repo_to_installation_for_authenticated_user": {
      "request": {
        "url": "/user/installations/{installation_id}/repositories/{repository_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add a repository to an app installation",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_check_token": {
      "request": {
        "url": "/applications/{client_id}/token",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /applications/{client_id}/token",
          "type": {
            "name": "AppsCheckTokenBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "client_id": {
          "description": "The client ID of the GitHub app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "client_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Check a token",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "apps_create_from_manifest": {
      "request": {
        "url": "/app-manifests/{code}/conversions",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "code": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "code",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a GitHub App from a manifest",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "apps_create_installation_access_token": {
      "request": {
        "url": "/app/installations/{installation_id}/access_tokens",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /app/installations/{installation_id}/access_tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppsCreateInstallationAccessTokenBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create an installation access token for an app",
      "result_type": {
        "name": "InstallationToken",
        "type": "named"
      }
    },
    "apps_delete_authorization": {
      "request": {
        "url": "/applications/{client_id}/grant",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /applications/{client_id}/grant",
          "type": {
            "name": "AppsDeleteAuthorizationBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "client_id": {
          "description": "The client ID of the GitHub app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "client_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an app authorization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_delete_installation": {
      "request": {
        "url": "/app/installations/{installation_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete an installation for the authenticated app",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_delete_token": {
      "request": {
        "url": "/applications/{client_id}/token",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /applications/{client_id}/token",
          "type": {
            "name": "AppsDeleteTokenBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "client_id": {
          "description": "The client ID of the GitHub app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "client_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an app token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_redeliver_webhook_delivery": {
      "request": {
        "url": "/app/hook/deliveries/{delivery_id}/attempts",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delivery_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "delivery_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Redeliver a delivery for an app webhook",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "apps_remove_repo_from_installation_for_authenticated_user": {
      "request": {
        "url": "/user/installations/{installation_id}/repositories/{repository_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repository_id": {
          "description": "The unique identifier of the repository.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a repository from an app installation",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_reset_token": {
      "request": {
        "url": "/applications/{client_id}/token",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /applications/{client_id}/token",
          "type": {
            "name": "AppsResetTokenBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "client_id": {
          "description": "The client ID of the GitHub app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "client_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Reset a token",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "apps_revoke_installation_access_token": {
      "request": {
        "url": "/installation/token",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Revoke an installation access token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_scope_token": {
      "request": {
        "url": "/applications/{client_id}/token/scoped",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /applications/{client_id}/token/scoped",
          "type": {
            "name": "AppsScopeTokenBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "client_id": {
          "description": "The client ID of the GitHub app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "client_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a scoped access token",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "apps_suspend_installation": {
      "request": {
        "url": "/app/installations/{installation_id}/suspended",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Suspend an app installation",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_unsuspend_installation": {
      "request": {
        "url": "/app/installations/{installation_id}/suspended",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "installation_id": {
          "description": "The unique identifier of the installation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "installation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Unsuspend an app installation",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "apps_update_webhook_config_for_app": {
      "request": {
        "url": "/app/hook/config",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /app/hook/config",
          "type": {
            "name": "AppsUpdateWebhookConfigForAppBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update a webhook configuration for an app",
      "result_type": {
        "name": "WebhookConfig",
        "type": "named"
      }
    },
    "checks_create_JSON": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-runs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/check-runs",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a check run",
      "result_type": {
        "name": "CheckRun",
        "type": "named"
      }
    },
    "checks_create_suite": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-suites",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/check-suites",
          "type": {
            "name": "ChecksCreateSuiteBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a check suite",
      "result_type": {
        "name": "CheckSuite",
        "type": "named"
      }
    },
    "checks_rerequest_run": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "check_run_id": {
          "description": "The unique identifier of the check run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "check_run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Rerequest a check run",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "checks_rerequest_suite": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "check_suite_id": {
          "description": "The unique identifier of the check suite.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "check_suite_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Rerequest a check suite",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "checks_set_suites_preferences": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-suites/preferences",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/check-suites/preferences",
          "type": {
            "name": "ChecksSetSuitesPreferencesBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update repository preferences for check suites",
      "result_type": {
        "name": "CheckSuitePreference",
        "type": "named"
      }
    },
    "checks_update": {
      "request": {
        "url": "/repos/{owner}/{repo}/check-runs/{check_run_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "check_run_id": {
          "description": "The unique identifier of the check run.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "check_run_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a check run",
      "result_type": {
        "name": "CheckRun",
        "type": "named"
      }
    },
    "code_scanning_delete_analysis": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "analysis_id": {
          "description": "The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "analysis_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "confirm_delete": {
          "description": "Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to `true`, you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "confirm_delete",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a code scanning analysis from a repository",
      "result_type": {
        "name": "CodeScanningAnalysisDeletion",
        "type": "named"
      }
    },
    "code_scanning_update_alert": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
          "type": {
            "name": "CodeScanningUpdateAlertBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a code scanning alert",
      "result_type": {
        "name": "CodeScanningAlert",
        "type": "named"
      }
    },
    "code_scanning_update_default_setup": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/default-setup",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Configuration for code scanning default setup.",
          "type": {
            "name": "CodeScanningDefaultSetupUpdateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a code scanning default setup configuration",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "code_scanning_upload_sarif": {
      "request": {
        "url": "/repos/{owner}/{repo}/code-scanning/sarifs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/code-scanning/sarifs",
          "type": {
            "name": "CodeScanningUploadSarifBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload an analysis as SARIF data",
      "result_type": {
        "name": "CodeScanningSarifsReceipt",
        "type": "named"
      }
    },
    "code_security_attach_configuration": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/{configuration_id}/attach",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/code-security/configurations/{configuration_id}/attach",
          "type": {
            "name": "CodeSecurityAttachConfigurationBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "configuration_id": {
          "description": "The unique identifier of the code security configuration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "configuration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Attach a configuration to repositories",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "code_security_create_configuration": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/code-security/configurations",
          "type": {
            "name": "CodeSecurityCreateConfigurationBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a code security configuration",
      "result_type": {
        "name": "CodeSecurityConfiguration",
        "type": "named"
      }
    },
    "code_security_delete_configuration": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/{configuration_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "configuration_id": {
          "description": "The unique identifier of the code security configuration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "configuration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a code security configuration",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "code_security_detach_configuration": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/detach",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /orgs/{org}/code-security/configurations/detach",
          "type": {
            "name": "CodeSecurityDetachConfigurationBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Detach configurations from repositories",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "code_security_set_configuration_as_default": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/{configuration_id}/defaults",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults",
          "type": {
            "name": "CodeSecuritySetConfigurationAsDefaultBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "configuration_id": {
          "description": "The unique identifier of the code security configuration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "configuration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set a code security configuration as a default for an organization",
      "result_type": {
        "name": "CodeSecuritySetConfigurationAsDefaultResult",
        "type": "named"
      }
    },
    "code_security_update_configuration": {
      "request": {
        "url": "/orgs/{org}/code-security/configurations/{configuration_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/code-security/configurations/{configuration_id}",
          "type": {
            "name": "CodeSecurityUpdateConfigurationBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "configuration_id": {
          "description": "The unique identifier of the code security configuration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "configuration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a code security configuration",
      "result_type": {
        "name": "CodeSecurityConfiguration",
        "type": "named"
      }
    },
    "dependabot_add_selected_repo_to_org_secret": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add selected repository to an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "dependabot_create_or_update_org_secret": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/{secret_name}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/dependabot/secrets/{secret_name}",
          "type": {
            "name": "DependabotCreateOrUpdateOrgSecretBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update an organization secret",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "dependabot_create_or_update_repo_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
          "type": {
            "name": "DependabotCreateOrUpdateRepoSecretBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update a repository secret",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "dependabot_delete_org_secret": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/{secret_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "dependabot_delete_repo_secret": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a repository secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "dependabot_remove_selected_repo_from_org_secret": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repository_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "repository_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove selected repository from an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "dependabot_set_selected_repos_for_org_secret": {
      "request": {
        "url": "/orgs/{org}/dependabot/secrets/{secret_name}/repositories",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
          "type": {
            "name": "DependabotSetSelectedReposForOrgSecretBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secret_name": {
          "description": "The name of the secret.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secret_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set selected repositories for an organization secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "dependabot_update_alert": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies a Dependabot alert in its repository. You can find this at the end of the URL for a Dependabot alert within GitHub, or in `number` fields in the response from the `GET /repos/{owner}/{repo}/dependabot/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
          "type": {
            "name": "DependabotUpdateAlertBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a Dependabot alert",
      "result_type": {
        "name": "DependabotAlert",
        "type": "named"
      }
    },
    "dependency_graph_create_repository_snapshot": {
      "request": {
        "url": "/repos/{owner}/{repo}/dependency-graph/snapshots",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Create a new snapshot of a repository's dependencies.",
          "type": {
            "name": "SnapshotInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a snapshot of dependencies for a repository",
      "result_type": {
        "name": "DependencyGraphCreateRepositorySnapshotResult",
        "type": "named"
      }
    },
    "enterprise_admin_add_custom_labels_to_self_hosted_runner_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/{runner_id}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /enterprises/{enterprise}/actions/runners/{runner_id}/labels",
          "type": {
            "name": "EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add custom labels to a self-hosted runner for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminAddCustomLabelsToSelfHostedRunnerForEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_add_org_access_to_self_hosted_runner_group_in_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org_id": {
          "description": "The unique identifier of the organization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "org_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add organization access to a self-hosted runner group in an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_add_self_hosted_runner_to_group_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add a self-hosted runner to a group for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_create_global_webhook": {
      "request": {
        "url": "/admin/hooks",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /admin/hooks",
          "type": {
            "name": "EnterpriseAdminCreateGlobalWebhookBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a global webhook",
      "result_type": {
        "name": "GlobalHook",
        "type": "named"
      }
    },
    "enterprise_admin_create_impersonation_o_auth_token": {
      "request": {
        "url": "/admin/users/{username}/authorizations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /admin/users/{username}/authorizations",
          "type": {
            "name": "EnterpriseAdminCreateImpersonationOAuthTokenBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an impersonation OAuth token",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "enterprise_admin_create_org": {
      "request": {
        "url": "/admin/organizations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /admin/organizations",
          "type": {
            "name": "EnterpriseAdminCreateOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an organization",
      "result_type": {
        "name": "OrganizationSimple",
        "type": "named"
      }
    },
    "enterprise_admin_create_pre_receive_environment": {
      "request": {
        "url": "/admin/pre-receive-environments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /admin/pre-receive-environments",
          "type": {
            "name": "EnterpriseAdminCreatePreReceiveEnvironmentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a pre-receive environment",
      "result_type": {
        "name": "PreReceiveEnvironment",
        "type": "named"
      }
    },
    "enterprise_admin_create_pre_receive_hook": {
      "request": {
        "url": "/admin/pre-receive-hooks",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /admin/pre-receive-hooks",
          "type": {
            "name": "EnterpriseAdminCreatePreReceiveHookBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a pre-receive hook",
      "result_type": {
        "name": "PreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_create_registration_token_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/registration-token",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a registration token for an enterprise",
      "result_type": {
        "name": "AuthenticationToken",
        "type": "named"
      }
    },
    "enterprise_admin_create_remove_token_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/remove-token",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a remove token for an enterprise",
      "result_type": {
        "name": "AuthenticationToken",
        "type": "named"
      }
    },
    "enterprise_admin_create_self_hosted_runner_group_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /enterprises/{enterprise}/actions/runner-groups",
          "type": {
            "name": "EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a self-hosted runner group for an enterprise",
      "result_type": {
        "name": "RunnerGroupsEnterprise",
        "type": "named"
      }
    },
    "enterprise_admin_create_user": {
      "request": {
        "url": "/admin/users",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /admin/users",
          "type": {
            "name": "EnterpriseAdminCreateUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a user",
      "result_type": {
        "name": "SimpleUser",
        "type": "named"
      }
    },
    "enterprise_admin_delete_global_webhook": {
      "request": {
        "url": "/admin/hooks/{hook_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a global webhook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_impersonation_o_auth_token": {
      "request": {
        "url": "/admin/users/{username}/authorizations",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an impersonation OAuth token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_manage_ssh": {
      "request": {
        "url": "/manage/v1/access/ssh",
        "method": "delete",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /manage/v1/access/ssh",
          "type": {
            "name": "GhesDeleteSshRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Delete a SSH key",
      "result_type": {
        "element_type": {
          "name": "GhesDeleteSshResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_delete_personal_access_token": {
      "request": {
        "url": "/admin/tokens/{token_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "token_id": {
          "description": "The unique identifier of the token.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "token_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a personal access token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_pre_receive_environment": {
      "request": {
        "url": "/admin/pre-receive-environments/{pre_receive_environment_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pre_receive_environment_id": {
          "description": "The unique identifier of the pre-receive environment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_environment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a pre-receive environment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_pre_receive_hook": {
      "request": {
        "url": "/admin/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a pre-receive hook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_public_key": {
      "request": {
        "url": "/admin/keys/{key_ids}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_ids": {
          "description": "The unique identifier of the key.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "key_ids",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a public key",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_scim_group_from_enterprise": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_group_id": {
          "description": "A unique identifier of the SCIM group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a SCIM group from an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_self_hosted_runner_from_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/{runner_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a self-hosted runner from an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_self_hosted_runner_group_from_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a self-hosted runner group from an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_user": {
      "request": {
        "url": "/admin/users/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_delete_user_from_enterprise": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_user_id": {
          "description": "The unique identifier of the SCIM user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a SCIM user from an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_demote_site_administrator": {
      "request": {
        "url": "/users/{username}/site_admin",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Demote a site administrator",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_disable_selected_organization_github_actions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org_id": {
          "description": "The unique identifier of the organization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "org_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Disable a selected organization for GitHub Actions in an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_enable_selected_organization_github_actions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org_id": {
          "description": "The unique identifier of the organization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "org_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Enable a selected organization for GitHub Actions in an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_initialize_instance_configuration": {
      "request": {
        "url": "/manage/v1/config/init",
        "method": "post",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /manage/v1/config/init",
          "type": {
            "name": "GhesConfigInitRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Initialize instance configuration with license and password",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "enterprise_admin_license_upload": {
      "request": {
        "url": "/manage/v1/config/license",
        "method": "put",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apply": {
          "description": "Whether to instantly apply changes from the license. Otherwise the new license can be applied using the [`/manage/v1/config/apply`](https://docs.github.com/enterprise-server@3.15/rest/enterprise-admin/manage-ghes#start-configuration-apply-process) endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "apply",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /manage/v1/config/license",
          "type": {
            "name": "GhesUploadLicenseRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Upload an enterprise license",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "enterprise_admin_ping_global_webhook": {
      "request": {
        "url": "/admin/hooks/{hook_id}/pings",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Ping a global webhook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_post_manage_run_config_apply": {
      "request": {
        "url": "/manage/v1/config/apply",
        "method": "post",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /manage/v1/config/apply",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminPostManageRunConfigApplyBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Trigger a ghe-config-apply run",
      "result_type": {
        "name": "EnterpriseAdminPostManageRunConfigApplyResult",
        "type": "named"
      }
    },
    "enterprise_admin_promote_user_to_be_site_administrator": {
      "request": {
        "url": "/users/{username}/site_admin",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Promote a user to be a site administrator",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_provision_enterprise_group": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Groups",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /scim/v2/enterprises/{enterprise}/Groups",
          "type": {
            "name": "GroupInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Provision a SCIM enterprise group",
      "result_type": {
        "name": "ScimEnterpriseGroupResponse",
        "type": "named"
      }
    },
    "enterprise_admin_provision_enterprise_user": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Users",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /scim/v2/enterprises/{enterprise}/Users",
          "type": {
            "name": "UserInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Provision a SCIM enterprise user",
      "result_type": {
        "name": "ScimEnterpriseUserResponse",
        "type": "named"
      }
    },
    "enterprise_admin_remove_all_custom_labels_from_self_hosted_runner_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/{runner_id}/labels",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove all custom labels from a self-hosted runner for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminRemoveAllCustomLabelsFromSelfHostedRunnerForEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_remove_announcement": {
      "request": {
        "url": "/enterprise/announcement",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Remove the global announcement banner",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_remove_custom_label_from_self_hosted_runner_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/{runner_id}/labels/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "description": "The name of a self-hosted runner's custom label.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a custom label from a self-hosted runner for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminRemoveCustomLabelFromSelfHostedRunnerForEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_remove_org_access_to_self_hosted_runner_group_in_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org_id": {
          "description": "The unique identifier of the organization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "org_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove organization access to a self-hosted runner group in an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_remove_pre_receive_hook_enforcement_for_org": {
      "request": {
        "url": "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove pre-receive hook enforcement for an organization",
      "result_type": {
        "name": "OrgPreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_remove_pre_receive_hook_enforcement_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove pre-receive hook enforcement for a repository",
      "result_type": {
        "name": "RepositoryPreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_remove_self_hosted_runner_from_group_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a self-hosted runner from a group for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_set_allowed_actions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/selected-actions",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /enterprises/{enterprise}/actions/permissions/selected-actions",
          "type": {
            "name": "SelectedActionsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set allowed actions for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_set_announcement": {
      "request": {
        "url": "/enterprise/announcement",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Enterprise global announcement",
          "type": {
            "name": "AnnouncementInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Set the global announcement banner",
      "result_type": {
        "name": "Announcement",
        "type": "named"
      }
    },
    "enterprise_admin_set_custom_labels_for_self_hosted_runner_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runners/{runner_id}/labels",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /enterprises/{enterprise}/actions/runners/{runner_id}/labels",
          "type": {
            "name": "EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_id": {
          "description": "Unique identifier of the self-hosted runner.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set custom labels for a self-hosted runner for an enterprise",
      "result_type": {
        "name": "EnterpriseAdminSetCustomLabelsForSelfHostedRunnerForEnterpriseResult",
        "type": "named"
      }
    },
    "enterprise_admin_set_github_actions_permissions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /enterprises/{enterprise}/actions/permissions",
          "type": {
            "name": "EnterpriseAdminSetGithubActionsPermissionsEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set GitHub Actions permissions for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_set_information_for_provisioned_enterprise_group": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
          "type": {
            "name": "GroupInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_group_id": {
          "description": "A unique identifier of the SCIM group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set SCIM information for a provisioned enterprise group",
      "result_type": {
        "name": "ScimEnterpriseGroupResponse",
        "type": "named"
      }
    },
    "enterprise_admin_set_information_for_provisioned_enterprise_user": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
          "type": {
            "name": "UserInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_user_id": {
          "description": "The unique identifier of the SCIM user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set SCIM information for a provisioned enterprise user",
      "result_type": {
        "name": "ScimEnterpriseUserResponse",
        "type": "named"
      }
    },
    "enterprise_admin_set_manage_maintenance": {
      "request": {
        "url": "/manage/v1/maintenance",
        "method": "post",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /manage/v1/maintenance",
          "type": {
            "name": "GhesSetMaintenanceRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Set the status of maintenance mode",
      "result_type": {
        "element_type": {
          "name": "GhesSetMaintenanceResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_set_manage_settings": {
      "request": {
        "url": "/manage/v1/config/settings",
        "method": "put",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /manage/v1/config/settings",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Set settings",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_set_manage_ssh": {
      "request": {
        "url": "/manage/v1/access/ssh",
        "method": "post",
        "servers": [
          {
            "url": {
              "value": "http://HOSTNAME",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /manage/v1/access/ssh",
          "type": {
            "name": "GhesSetSshRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Set a new SSH key",
      "result_type": {
        "element_type": {
          "name": "GhesSetSshResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "enterprise_admin_set_org_access_to_self_hosted_runner_group_in_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
          "type": {
            "name": "EnterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set organization access for a self-hosted runner group in an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_set_selected_organizations_enabled_github_actions_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/permissions/organizations",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /enterprises/{enterprise}/actions/permissions/organizations",
          "type": {
            "name": "EnterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set selected organizations enabled for GitHub Actions in an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_set_self_hosted_runners_in_group_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
          "type": {
            "name": "EnterpriseAdminSetSelfHostedRunnersInGroupForEnterpriseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Set self-hosted runners in a group for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_start_pre_receive_environment_download": {
      "request": {
        "url": "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pre_receive_environment_id": {
          "description": "The unique identifier of the pre-receive environment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_environment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Start a pre-receive environment download",
      "result_type": {
        "name": "PreReceiveEnvironmentDownloadStatus",
        "type": "named"
      }
    },
    "enterprise_admin_suspend_user": {
      "request": {
        "url": "/users/{username}/suspended",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /users/{username}/suspended",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminSuspendUserBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Suspend a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_sync_ldap_mapping_for_team": {
      "request": {
        "url": "/admin/ldap/teams/{team_id}/sync",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Sync LDAP mapping for a team",
      "result_type": {
        "name": "EnterpriseAdminSyncLdapMappingForTeamResult",
        "type": "named"
      }
    },
    "enterprise_admin_sync_ldap_mapping_for_user": {
      "request": {
        "url": "/admin/ldap/users/{username}/sync",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Sync LDAP mapping for a user",
      "result_type": {
        "name": "EnterpriseAdminSyncLdapMappingForUserResult",
        "type": "named"
      }
    },
    "enterprise_admin_unsuspend_user": {
      "request": {
        "url": "/users/{username}/suspended",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /users/{username}/suspended",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUnsuspendUserBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unsuspend a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_update_attribute_for_enterprise_group": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}",
          "type": {
            "name": "PatchSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_group_id": {
          "description": "A unique identifier of the SCIM group.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_group_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an attribute for a SCIM enterprise group",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enterprise_admin_update_attribute_for_enterprise_user": {
      "request": {
        "url": "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/scim+json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /scim/v2/enterprises/{enterprise}/Users/{scim_user_id}",
          "type": {
            "name": "PatchSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scim_user_id": {
          "description": "The unique identifier of the SCIM user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scim_user_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an attribute for a SCIM enterprise user",
      "result_type": {
        "name": "ScimEnterpriseUserResponse",
        "type": "named"
      }
    },
    "enterprise_admin_update_global_webhook": {
      "request": {
        "url": "/admin/hooks/{hook_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /admin/hooks/{hook_id}",
          "type": {
            "name": "EnterpriseAdminUpdateGlobalWebhookBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a global webhook",
      "result_type": {
        "name": "GlobalHook2",
        "type": "named"
      }
    },
    "enterprise_admin_update_ldap_mapping_for_team": {
      "request": {
        "url": "/admin/ldap/teams/{team_id}/mapping",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /admin/ldap/teams/{team_id}/mapping",
          "type": {
            "name": "EnterpriseAdminUpdateLdapMappingForTeamBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update LDAP mapping for a team",
      "result_type": {
        "name": "LdapMappingTeam",
        "type": "named"
      }
    },
    "enterprise_admin_update_ldap_mapping_for_user": {
      "request": {
        "url": "/admin/ldap/users/{username}/mapping",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /admin/ldap/users/{username}/mapping",
          "type": {
            "name": "EnterpriseAdminUpdateLdapMappingForUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update LDAP mapping for a user",
      "result_type": {
        "name": "LdapMappingUser",
        "type": "named"
      }
    },
    "enterprise_admin_update_org_name": {
      "request": {
        "url": "/admin/organizations/{org}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /admin/organizations/{org}",
          "type": {
            "name": "EnterpriseAdminUpdateOrgNameBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an organization name",
      "result_type": {
        "name": "EnterpriseAdminUpdateOrgNameResult",
        "type": "named"
      }
    },
    "enterprise_admin_update_pre_receive_environment": {
      "request": {
        "url": "/admin/pre-receive-environments/{pre_receive_environment_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /admin/pre-receive-environments/{pre_receive_environment_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdatePreReceiveEnvironmentBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pre_receive_environment_id": {
          "description": "The unique identifier of the pre-receive environment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_environment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a pre-receive environment",
      "result_type": {
        "name": "PreReceiveEnvironment",
        "type": "named"
      }
    },
    "enterprise_admin_update_pre_receive_hook": {
      "request": {
        "url": "/admin/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /admin/pre-receive-hooks/{pre_receive_hook_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdatePreReceiveHookBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a pre-receive hook",
      "result_type": {
        "name": "PreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_update_pre_receive_hook_enforcement_for_org": {
      "request": {
        "url": "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdatePreReceiveHookEnforcementForOrgBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update pre-receive hook enforcement for an organization",
      "result_type": {
        "name": "OrgPreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_update_pre_receive_hook_enforcement_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pre_receive_hook_id": {
          "description": "The unique identifier of the pre-receive hook.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pre_receive_hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update pre-receive hook enforcement for a repository",
      "result_type": {
        "name": "RepositoryPreReceiveHook",
        "type": "named"
      }
    },
    "enterprise_admin_update_self_hosted_runner_group_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "runner_group_id": {
          "description": "Unique identifier of the self-hosted runner group.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "runner_group_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a self-hosted runner group for an enterprise",
      "result_type": {
        "name": "RunnerGroupsEnterprise",
        "type": "named"
      }
    },
    "enterprise_admin_update_username_for_user": {
      "request": {
        "url": "/admin/users/{username}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /admin/users/{username}",
          "type": {
            "name": "EnterpriseAdminUpdateUsernameForUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update the username for a user",
      "result_type": {
        "name": "EnterpriseAdminUpdateUsernameForUserResult",
        "type": "named"
      }
    },
    "gists_create": {
      "request": {
        "url": "/gists",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /gists",
          "type": {
            "name": "GistsCreateBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a gist",
      "result_type": {
        "name": "GistSimple",
        "type": "named"
      }
    },
    "gists_create_comment": {
      "request": {
        "url": "/gists/{gist_id}/comments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /gists/{gist_id}/comments",
          "type": {
            "name": "GistsCreateCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a gist comment",
      "result_type": {
        "name": "GistComment",
        "type": "named"
      }
    },
    "gists_delete": {
      "request": {
        "url": "/gists/{gist_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a gist",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "gists_delete_comment": {
      "request": {
        "url": "/gists/{gist_id}/comments/{comment_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a gist comment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "gists_fork": {
      "request": {
        "url": "/gists/{gist_id}/forks",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Fork a gist",
      "result_type": {
        "name": "BaseGist",
        "type": "named"
      }
    },
    "gists_star": {
      "request": {
        "url": "/gists/{gist_id}/star",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Star a gist",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "gists_unstar": {
      "request": {
        "url": "/gists/{gist_id}/star",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unstar a gist",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "gists_update": {
      "request": {
        "url": "/gists/{gist_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /gists/{gist_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GistsUpdateBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a gist",
      "result_type": {
        "name": "GistSimple",
        "type": "named"
      }
    },
    "gists_update_comment": {
      "request": {
        "url": "/gists/{gist_id}/comments/{comment_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /gists/{gist_id}/comments/{comment_id}",
          "type": {
            "name": "GistsUpdateCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "gist_id": {
          "description": "The unique identifier of the gist.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "gist_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a gist comment",
      "result_type": {
        "name": "GistComment",
        "type": "named"
      }
    },
    "git_create_blob": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/blobs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/git/blobs",
          "type": {
            "name": "GitCreateBlobBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a blob",
      "result_type": {
        "name": "ShortBlob",
        "type": "named"
      }
    },
    "git_create_commit": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/commits",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/git/commits",
          "type": {
            "name": "GitCreateCommitBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a commit",
      "result_type": {
        "name": "GitCommit",
        "type": "named"
      }
    },
    "git_create_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/refs",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/git/refs",
          "type": {
            "name": "GitCreateRefBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a reference",
      "result_type": {
        "name": "GitRef",
        "type": "named"
      }
    },
    "git_create_tag": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/tags",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/git/tags",
          "type": {
            "name": "GitCreateTagBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a tag object",
      "result_type": {
        "name": "GitTag",
        "type": "named"
      }
    },
    "git_create_tree": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/trees",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/git/trees",
          "type": {
            "name": "GitCreateTreeBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a tree",
      "result_type": {
        "name": "GitTree",
        "type": "named"
      }
    },
    "git_delete_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/refs/{ref}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a reference",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "git_update_ref": {
      "request": {
        "url": "/repos/{owner}/{repo}/git/refs/{ref}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/git/refs/{ref}",
          "type": {
            "name": "GitUpdateRefBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ref": {
          "description": "The Git reference. For more information, see \"[Git References](https://git-scm.com/book/en/v2/Git-Internals-Git-References)\" in the Git documentation.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ref",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a reference",
      "result_type": {
        "name": "GitRef",
        "type": "named"
      }
    },
    "issues_add_assignees": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/{issue_number}/assignees",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesAddAssigneesBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add assignees to an issue",
      "result_type": {
        "name": "Issue",
        "type": "named"
      }
    },
    "issues_add_labels_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "name": "IssuesAddLabelsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add labels to an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_add_labels_Body2": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "name": "IssuesAddLabelsBody2Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add labels to an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_add_labels_Body3": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "element_type": {
              "name": "IssuesAddLabelsBody3Input",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "object"
                ]
              }
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add labels to an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_add_labels_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add labels to an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_create": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues",
          "type": {
            "name": "IssuesCreateBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an issue",
      "result_type": {
        "name": "Issue",
        "type": "named"
      }
    },
    "issues_create_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
          "type": {
            "name": "IssuesCreateCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an issue comment",
      "result_type": {
        "name": "IssueComment",
        "type": "named"
      }
    },
    "issues_create_label": {
      "request": {
        "url": "/repos/{owner}/{repo}/labels",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/labels",
          "type": {
            "name": "IssuesCreateLabelBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a label",
      "result_type": {
        "name": "Label",
        "type": "named"
      }
    },
    "issues_create_milestone": {
      "request": {
        "url": "/repos/{owner}/{repo}/milestones",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/milestones",
          "type": {
            "name": "IssuesCreateMilestoneBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a milestone",
      "result_type": {
        "name": "Milestone",
        "type": "named"
      }
    },
    "issues_delete_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an issue comment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_delete_label": {
      "request": {
        "url": "/repos/{owner}/{repo}/labels/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a label",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_delete_milestone": {
      "request": {
        "url": "/repos/{owner}/{repo}/milestones/{milestone_number}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "milestone_number": {
          "description": "The number that identifies the milestone.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "milestone_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a milestone",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_lock": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/issues/{issue_number}/lock",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesLockBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Lock an issue",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_remove_all_labels": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove all labels from an issue",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_remove_assignees": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesRemoveAssigneesBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove assignees from an issue",
      "result_type": {
        "name": "Issue",
        "type": "named"
      }
    },
    "issues_remove_label": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove a label from an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_set_labels_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "name": "IssuesSetLabelsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set labels for an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_set_labels_Body2": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "name": "IssuesSetLabelsBody2Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set labels for an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_set_labels_Body3": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "element_type": {
              "name": "IssuesSetLabelsBody3Input",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "object"
                ]
              }
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set labels for an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_set_labels_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/issues/{issue_number}/labels",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set labels for an issue",
      "result_type": {
        "element_type": {
          "name": "Label",
          "type": "named"
        },
        "type": "array"
      }
    },
    "issues_unlock": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unlock an issue",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "issues_update": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/issues/{issue_number}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesUpdateBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an issue",
      "result_type": {
        "name": "Issue",
        "type": "named"
      }
    },
    "issues_update_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}",
          "type": {
            "name": "IssuesUpdateCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an issue comment",
      "result_type": {
        "name": "IssueComment",
        "type": "named"
      }
    },
    "issues_update_label": {
      "request": {
        "url": "/repos/{owner}/{repo}/labels/{name}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/labels/{name}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesUpdateLabelBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a label",
      "result_type": {
        "name": "Label",
        "type": "named"
      }
    },
    "issues_update_milestone": {
      "request": {
        "url": "/repos/{owner}/{repo}/milestones/{milestone_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/milestones/{milestone_number}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IssuesUpdateMilestoneBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "milestone_number": {
          "description": "The number that identifies the milestone.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "milestone_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a milestone",
      "result_type": {
        "name": "Milestone",
        "type": "named"
      }
    },
    "markdown_render": {
      "request": {
        "url": "/markdown",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "text/html"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /markdown",
          "type": {
            "name": "MarkdownRenderBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Render a Markdown document",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "markdown_render_raw": {
      "request": {
        "url": "/markdown/raw",
        "method": "post",
        "requestBody": {
          "contentType": "text/plain"
        },
        "response": {
          "contentType": "text/html"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /markdown/raw",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Render a Markdown document in raw mode",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "migrations_delete_archive_for_org": {
      "request": {
        "url": "/orgs/{org}/migrations/{migration_id}/archive",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "migration_id": {
          "description": "The unique identifier of the migration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "migration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an organization migration archive",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "migrations_start_for_authenticated_user": {
      "request": {
        "url": "/user/migrations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/migrations",
          "type": {
            "name": "MigrationsStartForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Start a user migration",
      "result_type": {
        "name": "Migration",
        "type": "named"
      }
    },
    "migrations_start_for_org": {
      "request": {
        "url": "/orgs/{org}/migrations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/migrations",
          "type": {
            "name": "MigrationsStartForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Start an organization migration",
      "result_type": {
        "name": "Migration",
        "type": "named"
      }
    },
    "migrations_unlock_repo_for_org": {
      "request": {
        "url": "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "migration_id": {
          "description": "The unique identifier of the migration.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "migration_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo_name": {
          "description": "repo_name parameter",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unlock an organization repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "oauth_authorizations_create_authorization": {
      "request": {
        "url": "/authorizations",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /authorizations",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OauthAuthorizationsCreateAuthorizationBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a new authorization",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "oauth_authorizations_delete_authorization": {
      "request": {
        "url": "/authorizations/{authorization_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authorization_id": {
          "description": "The unique identifier of the authorization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "authorization_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete an authorization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "oauth_authorizations_delete_grant": {
      "request": {
        "url": "/applications/grants/{grant_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "grant_id": {
          "description": "The unique identifier of the grant.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "grant_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a grant",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "oauth_authorizations_get_or_create_authorization_for_app": {
      "request": {
        "url": "/authorizations/clients/{client_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /authorizations/clients/{client_id}",
          "type": {
            "name": "OauthAuthorizationsGetOrCreateAuthorizationForAppBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "client_id": {
          "description": "The client ID of the OAuth app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "client_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get-or-create an authorization for a specific app",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "oauth_authorizations_get_or_create_authorization_for_app_and_fingerprint": {
      "request": {
        "url": "/authorizations/clients/{client_id}/{fingerprint}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /authorizations/clients/{client_id}/{fingerprint}",
          "type": {
            "name": "OauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprintBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "client_id": {
          "description": "The client ID of the OAuth app.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "client_id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "fingerprint": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "fingerprint",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Get-or-create an authorization for a specific app and fingerprint",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "oauth_authorizations_update_authorization": {
      "request": {
        "url": "/authorizations/{authorization_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authorization_id": {
          "description": "The unique identifier of the authorization.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "authorization_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /authorizations/{authorization_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OauthAuthorizationsUpdateAuthorizationBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update an existing authorization",
      "result_type": {
        "name": "Authorization",
        "type": "named"
      }
    },
    "oidc_update_oidc_custom_sub_template_for_org": {
      "request": {
        "url": "/orgs/{org}/actions/oidc/customization/sub",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Actions OIDC Subject customization",
          "type": {
            "name": "OidcCustomSubInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set the customization template for an OIDC subject claim for an organization",
      "result_type": {
        "name": "EmptyObject",
        "type": "named"
      }
    },
    "orgs_add_security_manager_team": {
      "request": {
        "url": "/orgs/{org}/security-managers/teams/{team_slug}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add a security manager team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_assign_team_to_org_role": {
      "request": {
        "url": "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an organization role to a team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_assign_user_to_org_role": {
      "request": {
        "url": "/orgs/{org}/organization-roles/users/{username}/{role_id}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an organization role to a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_convert_member_to_outside_collaborator": {
      "request": {
        "url": "/orgs/{org}/outside_collaborators/{username}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/outside_collaborators/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsConvertMemberToOutsideCollaboratorBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Convert an organization member to outside collaborator",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "orgs_create_custom_organization_role": {
      "request": {
        "url": "/orgs/{org}/organization-roles",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/organization-roles",
          "type": {
            "name": "OrganizationCustomOrganizationRoleCreateSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a custom organization role",
      "result_type": {
        "name": "OrganizationRole",
        "type": "named"
      }
    },
    "orgs_create_custom_repo_role": {
      "request": {
        "url": "/orgs/{org}/custom-repository-roles",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/custom-repository-roles",
          "type": {
            "name": "OrganizationCustomRepositoryRoleCreateSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a custom repository role",
      "result_type": {
        "name": "OrganizationCustomRepositoryRole",
        "type": "named"
      }
    },
    "orgs_create_or_update_custom_properties": {
      "request": {
        "url": "/orgs/{org}/properties/schema",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/properties/schema",
          "type": {
            "name": "OrgsCreateOrUpdateCustomPropertiesBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update custom properties for an organization",
      "result_type": {
        "element_type": {
          "name": "CustomProperty",
          "type": "named"
        },
        "type": "array"
      }
    },
    "orgs_create_or_update_custom_properties_values_for_repos": {
      "request": {
        "url": "/orgs/{org}/properties/values",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/properties/values",
          "type": {
            "name": "OrgsCreateOrUpdateCustomPropertiesValuesForReposBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update custom property values for organization repositories",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_create_or_update_custom_property": {
      "request": {
        "url": "/orgs/{org}/properties/schema/{custom_property_name}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Custom property set payload",
          "type": {
            "name": "CustomPropertySetPayloadInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "custom_property_name": {
          "description": "The custom property name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "custom_property_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update a custom property for an organization",
      "result_type": {
        "name": "CustomProperty",
        "type": "named"
      }
    },
    "orgs_create_webhook": {
      "request": {
        "url": "/orgs/{org}/hooks",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/hooks",
          "type": {
            "name": "OrgsCreateWebhookBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an organization webhook",
      "result_type": {
        "name": "OrgHook",
        "type": "named"
      }
    },
    "orgs_delete": {
      "request": {
        "url": "/orgs/{org}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an organization",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "orgs_delete_custom_organization_role": {
      "request": {
        "url": "/orgs/{org}/organization-roles/{role_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a custom organization role.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_delete_custom_repo_role": {
      "request": {
        "url": "/orgs/{org}/custom-repository-roles/{role_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a custom repository role",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_delete_webhook": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an organization webhook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_enable_or_disable_security_product_on_all_org_repos": {
      "request": {
        "url": "/orgs/{org}/{security_product}/{enablement}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/{security_product}/{enablement}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsEnableOrDisableSecurityProductOnAllOrgReposBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "enablement": {
          "description": "The action to take.  `enable_all` means to enable the specified security feature for all repositories in the organization. `disable_all` means to disable the specified security feature for all repositories in the organization.",
          "type": {
            "name": "OrgsEnableOrDisableSecurityProductOnAllOrgReposEnablement",
            "type": "named"
          },
          "http": {
            "name": "enablement",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "security_product": {
          "description": "The security feature to enable or disable.",
          "type": {
            "name": "OrgsEnableOrDisableSecurityProductOnAllOrgReposSecurityProduct",
            "type": "named"
          },
          "http": {
            "name": "security_product",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Enable or disable a security feature for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_patch_custom_organization_role": {
      "request": {
        "url": "/orgs/{org}/organization-roles/{role_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/organization-roles/{role_id}",
          "type": {
            "name": "OrganizationCustomOrganizationRoleUpdateSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a custom organization role",
      "result_type": {
        "name": "OrganizationRole",
        "type": "named"
      }
    },
    "orgs_ping_webhook": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}/pings",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Ping an organization webhook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_redeliver_webhook_delivery": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delivery_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "delivery_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Redeliver a delivery for an organization webhook",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "orgs_remove_custom_property": {
      "request": {
        "url": "/orgs/{org}/properties/schema/{custom_property_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "custom_property_name": {
          "description": "The custom property name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "custom_property_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove a custom property for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_remove_member": {
      "request": {
        "url": "/orgs/{org}/members/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove an organization member",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_remove_membership_for_user": {
      "request": {
        "url": "/orgs/{org}/memberships/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove organization membership for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_remove_outside_collaborator": {
      "request": {
        "url": "/orgs/{org}/outside_collaborators/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove outside collaborator from an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_remove_public_membership_for_authenticated_user": {
      "request": {
        "url": "/orgs/{org}/public_members/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove public organization membership for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_remove_security_manager_team": {
      "request": {
        "url": "/orgs/{org}/security-managers/teams/{team_slug}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove a security manager team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_review_pat_grant_request": {
      "request": {
        "url": "/orgs/{org}/personal-access-token-requests/{pat_request_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/personal-access-token-requests/{pat_request_id}",
          "type": {
            "name": "OrgsReviewPatGrantRequestBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pat_request_id": {
          "description": "Unique identifier of the request for access via fine-grained personal access token.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pat_request_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Review a request to access organization resources with a fine-grained personal access token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_review_pat_grant_requests_in_bulk": {
      "request": {
        "url": "/orgs/{org}/personal-access-token-requests",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/personal-access-token-requests",
          "type": {
            "name": "OrgsReviewPatGrantRequestsInBulkBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Review requests to access organization resources with fine-grained personal access tokens",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "orgs_revoke_all_org_roles_team": {
      "request": {
        "url": "/orgs/{org}/organization-roles/teams/{team_slug}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove all organization roles for a team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_revoke_all_org_roles_user": {
      "request": {
        "url": "/orgs/{org}/organization-roles/users/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove all organization roles for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_revoke_org_role_team": {
      "request": {
        "url": "/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove an organization role from a team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_revoke_org_role_user": {
      "request": {
        "url": "/orgs/{org}/organization-roles/users/{username}/{role_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove an organization role from a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_set_membership_for_user": {
      "request": {
        "url": "/orgs/{org}/memberships/{username}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/memberships/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsSetMembershipForUserBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set organization membership for a user",
      "result_type": {
        "name": "OrgMembership",
        "type": "named"
      }
    },
    "orgs_set_public_membership_for_authenticated_user": {
      "request": {
        "url": "/orgs/{org}/public_members/{username}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set public organization membership for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_update": {
      "request": {
        "url": "/orgs/{org}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsUpdateBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an organization",
      "result_type": {
        "name": "OrganizationFull",
        "type": "named"
      }
    },
    "orgs_update_custom_repo_role": {
      "request": {
        "url": "/orgs/{org}/custom-repository-roles/{role_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/custom-repository-roles/{role_id}",
          "type": {
            "name": "OrganizationCustomRepositoryRoleUpdateSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role_id": {
          "description": "The unique identifier of the role.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "role_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a custom repository role",
      "result_type": {
        "name": "OrganizationCustomRepositoryRole",
        "type": "named"
      }
    },
    "orgs_update_membership_for_authenticated_user": {
      "request": {
        "url": "/user/memberships/orgs/{org}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /user/memberships/orgs/{org}",
          "type": {
            "name": "OrgsUpdateMembershipForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an organization membership for the authenticated user",
      "result_type": {
        "name": "OrgMembership",
        "type": "named"
      }
    },
    "orgs_update_pat_access": {
      "request": {
        "url": "/orgs/{org}/personal-access-tokens/{pat_id}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/personal-access-tokens/{pat_id}",
          "type": {
            "name": "OrgsUpdatePatAccessBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pat_id": {
          "description": "The unique identifier of the fine-grained personal access token.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pat_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update the access a fine-grained personal access token has to organization resources",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "orgs_update_pat_accesses": {
      "request": {
        "url": "/orgs/{org}/personal-access-tokens",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/personal-access-tokens",
          "type": {
            "name": "OrgsUpdatePatAccessesBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update the access to organization resources via fine-grained personal access tokens",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "orgs_update_webhook": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/hooks/{hook_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsUpdateWebhookBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an organization webhook",
      "result_type": {
        "name": "OrgHook",
        "type": "named"
      }
    },
    "orgs_update_webhook_config_for_org": {
      "request": {
        "url": "/orgs/{org}/hooks/{hook_id}/config",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/hooks/{hook_id}/config",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgsUpdateWebhookConfigForOrgBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a webhook configuration for an organization",
      "result_type": {
        "name": "WebhookConfig",
        "type": "named"
      }
    },
    "packages_delete_package_for_authenticated_user": {
      "request": {
        "url": "/user/packages/{package_type}/{package_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesDeletePackageForAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a package for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_delete_package_for_org": {
      "request": {
        "url": "/orgs/{org}/packages/{package_type}/{package_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesDeletePackageForOrgPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a package for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_delete_package_for_user": {
      "request": {
        "url": "/users/{username}/packages/{package_type}/{package_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesDeletePackageForUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a package for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_delete_package_version_for_authenticated_user": {
      "request": {
        "url": "/user/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesDeletePackageVersionForAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a package version for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_delete_package_version_for_org": {
      "request": {
        "url": "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesDeletePackageVersionForOrgPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete package version for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_delete_package_version_for_user": {
      "request": {
        "url": "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesDeletePackageVersionForUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete package version for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_restore_package_for_authenticated_user": {
      "request": {
        "url": "/user/packages/{package_type}/{package_name}/restore",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesRestorePackageForAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "package token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Restore a package for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_restore_package_for_org": {
      "request": {
        "url": "/orgs/{org}/packages/{package_type}/{package_name}/restore",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesRestorePackageForOrgPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "package token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Restore a package for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_restore_package_for_user": {
      "request": {
        "url": "/users/{username}/packages/{package_type}/{package_name}/restore",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesRestorePackageForUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "package token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "token",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Restore a package for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_restore_package_version_for_authenticated_user": {
      "request": {
        "url": "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesRestorePackageVersionForAuthenticatedUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Restore a package version for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_restore_package_version_for_org": {
      "request": {
        "url": "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesRestorePackageVersionForOrgPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Restore package version for an organization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "packages_restore_package_version_for_user": {
      "request": {
        "url": "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "package_name": {
          "description": "The name of the package.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "package_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_type": {
          "description": "The type of supported package. Packages in GitHub's Gradle registry have the type `maven`. Docker images pushed to GitHub's Container registry (`ghcr.io`) have the type `container`. You can use the type `docker` to find images that were pushed to GitHub's Docker registry (`docker.pkg.github.com`), even if these have now been migrated to the Container registry.",
          "type": {
            "name": "PackagesRestorePackageVersionForUserPackageType",
            "type": "named"
          },
          "http": {
            "name": "package_type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "package_version_id": {
          "description": "Unique identifier of the package version.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "package_version_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Restore package version for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "projects_add_collaborator": {
      "request": {
        "url": "/projects/{project_id}/collaborators/{username}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /projects/{project_id}/collaborators/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsAddCollaboratorBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add project collaborator",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "projects_create_card_Body0": {
      "request": {
        "url": "/projects/columns/{column_id}/cards",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /projects/columns/{column_id}/cards",
          "type": {
            "name": "ProjectsCreateCardBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "column_id": {
          "description": "The unique identifier of the column.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "column_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create a project card",
      "result_type": {
        "name": "ProjectCard",
        "type": "named"
      }
    },
    "projects_create_card_Body1": {
      "request": {
        "url": "/projects/columns/{column_id}/cards",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /projects/columns/{column_id}/cards",
          "type": {
            "name": "ProjectsCreateCardBody1Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "column_id": {
          "description": "The unique identifier of the column.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "column_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create a project card",
      "result_type": {
        "name": "ProjectCard",
        "type": "named"
      }
    },
    "projects_create_column": {
      "request": {
        "url": "/projects/{project_id}/columns",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /projects/{project_id}/columns",
          "type": {
            "name": "ProjectsCreateColumnBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create a project column",
      "result_type": {
        "name": "ProjectColumn",
        "type": "named"
      }
    },
    "projects_create_for_authenticated_user": {
      "request": {
        "url": "/user/projects",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/projects",
          "type": {
            "name": "ProjectsCreateForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a user project",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "projects_create_for_org": {
      "request": {
        "url": "/orgs/{org}/projects",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/projects",
          "type": {
            "name": "ProjectsCreateForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an organization project",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "projects_create_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/projects",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/projects",
          "type": {
            "name": "ProjectsCreateForRepoBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a repository project",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "projects_delete": {
      "request": {
        "url": "/projects/{project_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a project",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "projects_delete_card": {
      "request": {
        "url": "/projects/columns/cards/{card_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "card_id": {
          "description": "The unique identifier of the card.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "card_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a project card",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "projects_delete_column": {
      "request": {
        "url": "/projects/columns/{column_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "column_id": {
          "description": "The unique identifier of the column.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "column_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a project column",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "projects_move_card": {
      "request": {
        "url": "/projects/columns/cards/{card_id}/moves",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /projects/columns/cards/{card_id}/moves",
          "type": {
            "name": "ProjectsMoveCardBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "card_id": {
          "description": "The unique identifier of the card.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "card_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Move a project card",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "projects_move_column": {
      "request": {
        "url": "/projects/columns/{column_id}/moves",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /projects/columns/{column_id}/moves",
          "type": {
            "name": "ProjectsMoveColumnBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "column_id": {
          "description": "The unique identifier of the column.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "column_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Move a project column",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "projects_remove_collaborator": {
      "request": {
        "url": "/projects/{project_id}/collaborators/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove user as a collaborator",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "projects_update": {
      "request": {
        "url": "/projects/{project_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /projects/{project_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsUpdateBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a project",
      "result_type": {
        "name": "Project",
        "type": "named"
      }
    },
    "projects_update_card": {
      "request": {
        "url": "/projects/columns/cards/{card_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /projects/columns/cards/{card_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProjectsUpdateCardBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "card_id": {
          "description": "The unique identifier of the card.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "card_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update an existing project card",
      "result_type": {
        "name": "ProjectCard",
        "type": "named"
      }
    },
    "projects_update_column": {
      "request": {
        "url": "/projects/columns/{column_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /projects/columns/{column_id}",
          "type": {
            "name": "ProjectsUpdateColumnBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "column_id": {
          "description": "The unique identifier of the column.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "column_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update an existing project column",
      "result_type": {
        "name": "ProjectColumn",
        "type": "named"
      }
    },
    "pulls_create": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/pulls",
          "type": {
            "name": "PullsCreateBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a pull request",
      "result_type": {
        "name": "PullRequest",
        "type": "named"
      }
    },
    "pulls_create_reply_for_review_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
          "type": {
            "name": "PullsCreateReplyForReviewCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a reply for a review comment",
      "result_type": {
        "name": "PullRequestReviewComment",
        "type": "named"
      }
    },
    "pulls_create_review": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsCreateReviewBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a review for a pull request",
      "result_type": {
        "name": "PullRequestReview",
        "type": "named"
      }
    },
    "pulls_create_review_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/pulls/{pull_number}/comments",
          "type": {
            "name": "PullsCreateReviewCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a review comment for a pull request",
      "result_type": {
        "name": "PullRequestReviewComment",
        "type": "named"
      }
    },
    "pulls_delete_pending_review": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "review_id": {
          "description": "The unique identifier of the review.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "review_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a pending review for a pull request",
      "result_type": {
        "name": "PullRequestReview",
        "type": "named"
      }
    },
    "pulls_delete_review_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a review comment for a pull request",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "pulls_dismiss_review": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
          "type": {
            "name": "PullsDismissReviewBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "review_id": {
          "description": "The unique identifier of the review.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "review_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Dismiss a review for a pull request",
      "result_type": {
        "name": "PullRequestReview",
        "type": "named"
      }
    },
    "pulls_merge": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsMergeBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Merge a pull request",
      "result_type": {
        "name": "PullRequestMergeResult",
        "type": "named"
      }
    },
    "pulls_remove_requested_reviewers": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
          "type": {
            "name": "PullsRemoveRequestedReviewersBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove requested reviewers from a pull request",
      "result_type": {
        "name": "PullRequestSimple",
        "type": "named"
      }
    },
    "pulls_request_reviewers": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsRequestReviewersBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Request reviewers for a pull request",
      "result_type": {
        "name": "PullRequestSimple",
        "type": "named"
      }
    },
    "pulls_submit_review": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
          "type": {
            "name": "PullsSubmitReviewBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "review_id": {
          "description": "The unique identifier of the review.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "review_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Submit a review for a pull request",
      "result_type": {
        "name": "PullRequestReview",
        "type": "named"
      }
    },
    "pulls_update": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/pulls/{pull_number}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsUpdateBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a pull request",
      "result_type": {
        "name": "PullRequest",
        "type": "named"
      }
    },
    "pulls_update_branch": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PullsUpdateBranchBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a pull request branch",
      "result_type": {
        "name": "PullsUpdateBranchResult",
        "type": "named"
      }
    },
    "pulls_update_review": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
          "type": {
            "name": "PullsUpdateReviewBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pull_number": {
          "description": "The number that identifies the pull request.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "pull_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "review_id": {
          "description": "The unique identifier of the review.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "review_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a review for a pull request",
      "result_type": {
        "name": "PullRequestReview",
        "type": "named"
      }
    },
    "pulls_update_review_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}",
          "type": {
            "name": "PullsUpdateReviewCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a review comment for a pull request",
      "result_type": {
        "name": "PullRequestReviewComment",
        "type": "named"
      }
    },
    "reactions_create_for_commit_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",
          "type": {
            "name": "ReactionsCreateForCommitCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create reaction for a commit comment",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_issue": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",
          "type": {
            "name": "ReactionsCreateForIssueBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create reaction for an issue",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_issue_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
          "type": {
            "name": "ReactionsCreateForIssueCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create reaction for an issue comment",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_pull_request_review_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
          "type": {
            "name": "ReactionsCreateForPullRequestReviewCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create reaction for a pull request review comment",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/releases/{release_id}/reactions",
          "type": {
            "name": "ReactionsCreateForReleaseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create reaction for a release",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_team_discussion_comment_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionCommentInOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create reaction for a team discussion comment",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_team_discussion_comment_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionCommentLegacyBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create reaction for a team discussion comment (Legacy)",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_team_discussion_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionInOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create reaction for a team discussion",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_create_for_team_discussion_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/reactions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /teams/{team_id}/discussions/{discussion_number}/reactions",
          "type": {
            "name": "ReactionsCreateForTeamDiscussionLegacyBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create reaction for a team discussion (Legacy)",
      "result_type": {
        "name": "Reaction",
        "type": "named"
      }
    },
    "reactions_delete_for_commit_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "reaction_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a commit comment reaction",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "reactions_delete_for_issue": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "issue_number": {
          "description": "The number that identifies the issue.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "issue_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "reaction_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an issue reaction",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "reactions_delete_for_issue_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "reaction_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an issue comment reaction",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "reactions_delete_for_pull_request_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "reaction_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a pull request comment reaction",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "reactions_delete_for_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "reaction_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a release reaction",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "reactions_delete_for_team_discussion": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "reaction_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete team discussion reaction",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "reactions_delete_for_team_discussion_comment": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "reaction_id": {
          "description": "The unique identifier of the reaction.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "reaction_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete team discussion comment reaction",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_accept_invitation_for_authenticated_user": {
      "request": {
        "url": "/user/repository_invitations/{invitation_id}",
        "method": "patch",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "invitation_id": {
          "description": "The unique identifier of the invitation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "invitation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Accept a repository invitation",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_add_app_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          "type": {
            "name": "ReposAddAppAccessRestrictionsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add app access restrictions",
      "result_type": {
        "element_type": {
          "type": "nullable",
          "underlying_type": {
            "name": "Integration",
            "type": "named"
          }
        },
        "type": "array"
      }
    },
    "repos_add_collaborator": {
      "request": {
        "url": "/repos/{owner}/{repo}/collaborators/{username}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/collaborators/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposAddCollaboratorBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add a repository collaborator",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_add_status_check_contexts_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          "type": {
            "name": "ReposAddStatusCheckContextsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add status check contexts",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_add_status_check_contexts_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The name of the status checks",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add status check contexts",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_add_team_access_restrictions_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          "type": {
            "name": "ReposAddTeamAccessRestrictionsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add team access restrictions",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_add_team_access_restrictions_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The slug values for teams",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add team access restrictions",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_add_user_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          "type": {
            "name": "ReposAddUserAccessRestrictionsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add user access restrictions",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_cancel_pages_deployment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "pages_deployment_id": {
          "description": "The ID of the Pages deployment. You can also give the commit SHA of the deployment.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "name": "pages_deployment_id",
            "in": "path",
            "schema": {}
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Cancel a GitHub Pages deployment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_create_autolink": {
      "request": {
        "url": "/repos/{owner}/{repo}/autolinks",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/autolinks",
          "type": {
            "name": "ReposCreateAutolinkBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an autolink reference for a repository",
      "result_type": {
        "name": "Autolink",
        "type": "named"
      }
    },
    "repos_create_commit_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/commits/{commit_sha}/comments",
          "type": {
            "name": "ReposCreateCommitCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "commit_sha": {
          "description": "The SHA of the commit.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "commit_sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a commit comment",
      "result_type": {
        "name": "CommitComment",
        "type": "named"
      }
    },
    "repos_create_commit_signature_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create commit signature protection",
      "result_type": {
        "name": "ProtectedBranchAdminEnforced",
        "type": "named"
      }
    },
    "repos_create_commit_status": {
      "request": {
        "url": "/repos/{owner}/{repo}/statuses/{sha}",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/statuses/{sha}",
          "type": {
            "name": "ReposCreateCommitStatusBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sha": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sha",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a commit status",
      "result_type": {
        "name": "Status",
        "type": "named"
      }
    },
    "repos_create_deploy_key": {
      "request": {
        "url": "/repos/{owner}/{repo}/keys",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/keys",
          "type": {
            "name": "ReposCreateDeployKeyBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a deploy key",
      "result_type": {
        "name": "DeployKey",
        "type": "named"
      }
    },
    "repos_create_deployment": {
      "request": {
        "url": "/repos/{owner}/{repo}/deployments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/deployments",
          "type": {
            "name": "ReposCreateDeploymentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a deployment",
      "result_type": {
        "name": "Deployment",
        "type": "named"
      }
    },
    "repos_create_deployment_branch_policy": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
          "type": {
            "name": "DeploymentBranchPolicyNamePatternWithTypeInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a deployment branch policy",
      "result_type": {
        "name": "DeploymentBranchPolicy",
        "type": "named"
      }
    },
    "repos_create_deployment_protection_rule": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
          "type": {
            "name": "ReposCreateDeploymentProtectionRuleBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a custom deployment protection rule on an environment",
      "result_type": {
        "name": "DeploymentProtectionRule",
        "type": "named"
      }
    },
    "repos_create_deployment_status": {
      "request": {
        "url": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
          "type": {
            "name": "ReposCreateDeploymentStatusBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "deployment_id": {
          "description": "deployment_id parameter",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "deployment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a deployment status",
      "result_type": {
        "name": "DeploymentStatus",
        "type": "named"
      }
    },
    "repos_create_dispatch_event": {
      "request": {
        "url": "/repos/{owner}/{repo}/dispatches",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/dispatches",
          "type": {
            "name": "ReposCreateDispatchEventBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a repository dispatch event",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_create_for_authenticated_user": {
      "request": {
        "url": "/user/repos",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/repos",
          "type": {
            "name": "ReposCreateForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a repository for the authenticated user",
      "result_type": {
        "name": "FullRepository",
        "type": "named"
      }
    },
    "repos_create_fork": {
      "request": {
        "url": "/repos/{owner}/{repo}/forks",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/forks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateForkBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a fork",
      "result_type": {
        "name": "FullRepository",
        "type": "named"
      }
    },
    "repos_create_in_org": {
      "request": {
        "url": "/orgs/{org}/repos",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/repos",
          "type": {
            "name": "ReposCreateInOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an organization repository",
      "result_type": {
        "name": "FullRepository",
        "type": "named"
      }
    },
    "repos_create_or_update_custom_properties_values": {
      "request": {
        "url": "/repos/{owner}/{repo}/properties/values",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/properties/values",
          "type": {
            "name": "ReposCreateOrUpdateCustomPropertiesValuesBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update custom property values for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_create_or_update_environment": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/environments/{environment_name}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateOrUpdateEnvironmentBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update an environment",
      "result_type": {
        "name": "Environment",
        "type": "named"
      }
    },
    "repos_create_or_update_file_contents": {
      "request": {
        "url": "/repos/{owner}/{repo}/contents/{path}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/contents/{path}",
          "type": {
            "name": "ReposCreateOrUpdateFileContentsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "path": {
          "description": "path parameter",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "path",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create or update file contents",
      "result_type": {
        "name": "FileCommit",
        "type": "named"
      }
    },
    "repos_create_org_ruleset": {
      "request": {
        "url": "/orgs/{org}/rulesets",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/rulesets",
          "type": {
            "name": "ReposCreateOrgRulesetBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an organization repository ruleset",
      "result_type": {
        "name": "RepositoryRuleset",
        "type": "named"
      }
    },
    "repos_create_pages_deployment": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages/deployments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The object used to create GitHub Pages deployment",
          "type": {
            "name": "ReposCreatePagesDeploymentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a GitHub Pages deployment",
      "result_type": {
        "name": "PageDeployment",
        "type": "named"
      }
    },
    "repos_create_pages_site": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The source branch and directory used to publish your Pages site.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a GitHub Enterprise Server Pages site",
      "result_type": {
        "name": "Page",
        "type": "named"
      }
    },
    "repos_create_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/releases",
          "type": {
            "name": "ReposCreateReleaseBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a release",
      "result_type": {
        "name": "Release",
        "type": "named"
      }
    },
    "repos_create_repo_ruleset": {
      "request": {
        "url": "/repos/{owner}/{repo}/rulesets",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/rulesets",
          "type": {
            "name": "ReposCreateRepoRulesetBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a repository ruleset",
      "result_type": {
        "name": "RepositoryRuleset",
        "type": "named"
      }
    },
    "repos_create_tag_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/tags/protection",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/tags/protection",
          "type": {
            "name": "ReposCreateTagProtectionBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Closing down - Create a tag protection state for a repository",
      "result_type": {
        "name": "TagProtection",
        "type": "named"
      }
    },
    "repos_create_using_template": {
      "request": {
        "url": "/repos/{template_owner}/{template_repo}/generate",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{template_owner}/{template_repo}/generate",
          "type": {
            "name": "ReposCreateUsingTemplateBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "template_owner": {
          "description": "The account owner of the template repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "template_owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "template_repo": {
          "description": "The name of the template repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "template_repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a repository using a template",
      "result_type": {
        "name": "FullRepository",
        "type": "named"
      }
    },
    "repos_create_webhook": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/hooks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposCreateWebhookBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a repository webhook",
      "result_type": {
        "name": "Hook",
        "type": "named"
      }
    },
    "repos_decline_invitation_for_authenticated_user": {
      "request": {
        "url": "/user/repository_invitations/{invitation_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "invitation_id": {
          "description": "The unique identifier of the invitation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "invitation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Decline a repository invitation",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete": {
      "request": {
        "url": "/repos/{owner}/{repo}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete access restrictions",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_admin_branch_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete admin branch protection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_an_environment": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an environment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_autolink": {
      "request": {
        "url": "/repos/{owner}/{repo}/autolinks/{autolink_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "autolink_id": {
          "description": "The unique identifier of the autolink.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "autolink_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an autolink reference from a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_branch_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete branch protection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_commit_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/comments/{comment_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a commit comment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_commit_signature_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete commit signature protection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_deploy_key": {
      "request": {
        "url": "/repos/{owner}/{repo}/keys/{key_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "description": "The unique identifier of the key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a deploy key",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_deployment": {
      "request": {
        "url": "/repos/{owner}/{repo}/deployments/{deployment_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deployment_id": {
          "description": "deployment_id parameter",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "deployment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a deployment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_deployment_branch_policy": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch_policy_id": {
          "description": "The unique identifier of the branch policy.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "branch_policy_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a deployment branch policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_file": {
      "request": {
        "url": "/repos/{owner}/{repo}/contents/{path}",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /repos/{owner}/{repo}/contents/{path}",
          "type": {
            "name": "ReposDeleteFileBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "path": {
          "description": "path parameter",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "path",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a file",
      "result_type": {
        "name": "FileCommit",
        "type": "named"
      }
    },
    "repos_delete_invitation": {
      "request": {
        "url": "/repos/{owner}/{repo}/invitations/{invitation_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "invitation_id": {
          "description": "The unique identifier of the invitation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "invitation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a repository invitation",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_org_ruleset": {
      "request": {
        "url": "/orgs/{org}/rulesets/{ruleset_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleset_id": {
          "description": "The ID of the ruleset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ruleset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete an organization repository ruleset",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_pages_site": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a GitHub Enterprise Server Pages site",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_pull_request_review_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete pull request review protection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a release",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_release_asset": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "asset_id": {
          "description": "The unique identifier of the asset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "asset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a release asset",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_repo_ruleset": {
      "request": {
        "url": "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleset_id": {
          "description": "The ID of the ruleset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ruleset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a repository ruleset",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_tag_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/tags/protection/{tag_protection_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tag_protection_id": {
          "description": "The unique identifier of the tag protection.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "tag_protection_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Closing down - Delete a tag protection state for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_delete_webhook": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a repository webhook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_disable_deployment_protection_rule": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "protection_rule_id": {
          "description": "The unique identifier of the protection rule.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "protection_rule_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Disable a custom protection rule for an environment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_disable_lfs_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/lfs",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Disable Git LFS for a repository",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_disable_vulnerability_alerts": {
      "request": {
        "url": "/repos/{owner}/{repo}/vulnerability-alerts",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Disable vulnerability alerts",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_enable_lfs_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/lfs",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Enable Git LFS for a repository",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "repos_enable_vulnerability_alerts": {
      "request": {
        "url": "/repos/{owner}/{repo}/vulnerability-alerts",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Enable vulnerability alerts",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_generate_release_notes": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/generate-notes",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/releases/generate-notes",
          "type": {
            "name": "ReposGenerateReleaseNotesBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Generate release notes content for a release",
      "result_type": {
        "name": "ReleaseNotesContent",
        "type": "named"
      }
    },
    "repos_merge": {
      "request": {
        "url": "/repos/{owner}/{repo}/merges",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/merges",
          "type": {
            "name": "ReposMergeBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Merge a branch",
      "result_type": {
        "name": "Commit",
        "type": "named"
      }
    },
    "repos_merge_upstream": {
      "request": {
        "url": "/repos/{owner}/{repo}/merge-upstream",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/merge-upstream",
          "type": {
            "name": "ReposMergeUpstreamBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Sync a fork branch with the upstream repository",
      "result_type": {
        "name": "MergedUpstream",
        "type": "named"
      }
    },
    "repos_ping_webhook": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}/pings",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Ping a repository webhook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_redeliver_webhook_delivery": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "delivery_id": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "delivery_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Redeliver a delivery for a repository webhook",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "repos_remove_app_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          "type": {
            "name": "ReposRemoveAppAccessRestrictionsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove app access restrictions",
      "result_type": {
        "element_type": {
          "type": "nullable",
          "underlying_type": {
            "name": "Integration",
            "type": "named"
          }
        },
        "type": "array"
      }
    },
    "repos_remove_collaborator": {
      "request": {
        "url": "/repos/{owner}/{repo}/collaborators/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove a repository collaborator",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_remove_status_check_contexts_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          "type": {
            "name": "ReposRemoveStatusCheckContextsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove status check contexts",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_remove_status_check_contexts_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The name of the status checks",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove status check contexts",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_remove_status_check_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove status check protection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_remove_team_access_restrictions_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          "type": {
            "name": "ReposRemoveTeamAccessRestrictionsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove team access restrictions",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_remove_team_access_restrictions_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The slug values for teams",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove team access restrictions",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_remove_user_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          "type": {
            "name": "ReposRemoveUserAccessRestrictionsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove user access restrictions",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_rename_branch": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/rename",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/branches/{branch}/rename",
          "type": {
            "name": "ReposRenameBranchBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Rename a branch",
      "result_type": {
        "name": "BranchWithProtection",
        "type": "named"
      }
    },
    "repos_replace_all_topics": {
      "request": {
        "url": "/repos/{owner}/{repo}/topics",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/topics",
          "type": {
            "name": "ReposReplaceAllTopicsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace all repository topics",
      "result_type": {
        "name": "Topic",
        "type": "named"
      }
    },
    "repos_request_pages_build": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages/builds",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Request a GitHub Enterprise Server Pages build",
      "result_type": {
        "name": "PageBuildStatus",
        "type": "named"
      }
    },
    "repos_set_admin_branch_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set admin branch protection",
      "result_type": {
        "name": "ProtectedBranchAdminEnforced",
        "type": "named"
      }
    },
    "repos_set_app_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          "type": {
            "name": "ReposSetAppAccessRestrictionsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set app access restrictions",
      "result_type": {
        "element_type": {
          "type": "nullable",
          "underlying_type": {
            "name": "Integration",
            "type": "named"
          }
        },
        "type": "array"
      }
    },
    "repos_set_status_check_contexts_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          "type": {
            "name": "ReposSetStatusCheckContextsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set status check contexts",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_set_status_check_contexts_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The name of the status checks",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set status check contexts",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_set_team_access_restrictions_Body0": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          "type": {
            "name": "ReposSetTeamAccessRestrictionsBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set team access restrictions",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_set_team_access_restrictions_String": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The slug values for teams",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set team access restrictions",
      "result_type": {
        "element_type": {
          "name": "Team",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_set_user_access_restrictions": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          "type": {
            "name": "ReposSetUserAccessRestrictionsBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Set user access restrictions",
      "result_type": {
        "element_type": {
          "name": "SimpleUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "repos_test_push_webhook": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}/tests",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Test the push repository webhook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_transfer": {
      "request": {
        "url": "/repos/{owner}/{repo}/transfer",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/transfer",
          "type": {
            "name": "ReposTransferBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Transfer a repository",
      "result_type": {
        "name": "MinimalRepository",
        "type": "named"
      }
    },
    "repos_update": {
      "request": {
        "url": "/repos/{owner}/{repo}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a repository",
      "result_type": {
        "name": "FullRepository",
        "type": "named"
      }
    },
    "repos_update_branch_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/branches/{branch}/protection",
          "type": {
            "name": "ReposUpdateBranchProtectionBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update branch protection",
      "result_type": {
        "name": "ProtectedBranch",
        "type": "named"
      }
    },
    "repos_update_commit_comment": {
      "request": {
        "url": "/repos/{owner}/{repo}/comments/{comment_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/comments/{comment_id}",
          "type": {
            "name": "ReposUpdateCommitCommentBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_id": {
          "description": "The unique identifier of the comment.",
          "type": {
            "name": "Int64",
            "type": "named"
          },
          "http": {
            "name": "comment_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int64"
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a commit comment",
      "result_type": {
        "name": "CommitComment",
        "type": "named"
      }
    },
    "repos_update_deployment_branch_policy": {
      "request": {
        "url": "/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
          "type": {
            "name": "DeploymentBranchPolicyNamePatternInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch_policy_id": {
          "description": "The unique identifier of the branch policy.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "branch_policy_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "environment_name": {
          "description": "The name of the environment. The name must be URL encoded. For example, any slashes in the name must be replaced with `%2F`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "environment_name",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a deployment branch policy",
      "result_type": {
        "name": "DeploymentBranchPolicy",
        "type": "named"
      }
    },
    "repos_update_information_about_pages_site": {
      "request": {
        "url": "/repos/{owner}/{repo}/pages",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/pages",
          "type": {
            "name": "ReposUpdateInformationAboutPagesSiteBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update information about a GitHub Enterprise Server Pages site",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "repos_update_invitation": {
      "request": {
        "url": "/repos/{owner}/{repo}/invitations/{invitation_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/invitations/{invitation_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateInvitationBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "invitation_id": {
          "description": "The unique identifier of the invitation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "invitation_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a repository invitation",
      "result_type": {
        "name": "RepositoryInvitation",
        "type": "named"
      }
    },
    "repos_update_org_ruleset": {
      "request": {
        "url": "/orgs/{org}/rulesets/{ruleset_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/rulesets/{ruleset_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateOrgRulesetBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleset_id": {
          "description": "The ID of the ruleset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ruleset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update an organization repository ruleset",
      "result_type": {
        "name": "RepositoryRuleset",
        "type": "named"
      }
    },
    "repos_update_pull_request_review_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdatePullRequestReviewProtectionBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update pull request review protection",
      "result_type": {
        "name": "ProtectedBranchPullRequestReview",
        "type": "named"
      }
    },
    "repos_update_release": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/releases/{release_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateReleaseBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a release",
      "result_type": {
        "name": "Release",
        "type": "named"
      }
    },
    "repos_update_release_asset": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "asset_id": {
          "description": "The unique identifier of the asset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "asset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateReleaseAssetBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a release asset",
      "result_type": {
        "name": "ReleaseAsset",
        "type": "named"
      }
    },
    "repos_update_repo_ruleset": {
      "request": {
        "url": "/repos/{owner}/{repo}/rulesets/{ruleset_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateRepoRulesetBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleset_id": {
          "description": "The ID of the ruleset.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ruleset_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a repository ruleset",
      "result_type": {
        "name": "RepositoryRuleset",
        "type": "named"
      }
    },
    "repos_update_status_check_protection": {
      "request": {
        "url": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateStatusCheckProtectionBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "branch": {
          "description": "The name of the branch. Cannot contain wildcard characters. To use wildcard characters in branch names, use [the GraphQL API](https://docs.github.com/enterprise-server@3.15/graphql).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "branch",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update status check protection",
      "result_type": {
        "name": "StatusCheckPolicy",
        "type": "named"
      }
    },
    "repos_update_webhook": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/hooks/{hook_id}",
          "type": {
            "name": "ReposUpdateWebhookBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a repository webhook",
      "result_type": {
        "name": "Hook",
        "type": "named"
      }
    },
    "repos_update_webhook_config_for_repo": {
      "request": {
        "url": "/repos/{owner}/{repo}/hooks/{hook_id}/config",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReposUpdateWebhookConfigForRepoBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "hook_id": {
          "description": "The unique identifier of the hook. You can find this value in the `X-GitHub-Hook-ID` header of a webhook delivery.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "hook_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a webhook configuration for a repository",
      "result_type": {
        "name": "WebhookConfig",
        "type": "named"
      }
    },
    "repos_upload_release_asset": {
      "request": {
        "url": "/repos/{owner}/{repo}/releases/{release_id}/assets",
        "method": "post",
        "servers": [
          {
            "url": {
              "value": "https://HOSTNAME/api/uploads",
              "env": "GITHUB_SERVER_URL"
            }
          }
        ],
        "requestBody": {
          "contentType": "application/octet-stream"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The raw file data",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Binary",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ],
              "format": "binary"
            }
          }
        },
        "label": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "label",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "name",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "release_id": {
          "description": "The unique identifier of the release.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "release_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload a release asset",
      "result_type": {
        "name": "ReleaseAsset",
        "type": "named"
      }
    },
    "secret_scanning_create_push_protection_bypass": {
      "request": {
        "url": "/repos/{owner}/{repo}/secret-scanning/push-protection-bypasses",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses",
          "type": {
            "name": "SecretScanningCreatePushProtectionBypassBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a push protection bypass",
      "result_type": {
        "name": "SecretScanningPushProtectionBypass",
        "type": "named"
      }
    },
    "secret_scanning_patch_security_analysis_settings_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/code_security_and_analysis",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /enterprises/{enterprise}/code_security_and_analysis",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecretScanningPatchSecurityAnalysisSettingsForEnterpriseBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update code security and analysis features for an enterprise",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "secret_scanning_post_security_product_enablement_for_enterprise": {
      "request": {
        "url": "/enterprises/{enterprise}/{security_product}/{enablement}",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "enablement": {
          "description": "The action to take.  `enable_all` means to enable the specified security feature for all repositories in the enterprise. `disable_all` means to disable the specified security feature for all repositories in the enterprise.",
          "type": {
            "name": "SecretScanningPostSecurityProductEnablementForEnterpriseEnablement",
            "type": "named"
          },
          "http": {
            "name": "enablement",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "enterprise": {
          "description": "The slug version of the enterprise name. You can also substitute this value with the enterprise id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "enterprise",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "security_product": {
          "description": "The security feature to enable or disable.",
          "type": {
            "name": "SecretScanningPostSecurityProductEnablementForEnterpriseSecurityProduct",
            "type": "named"
          },
          "http": {
            "name": "security_product",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Enable or disable a security feature",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "secret_scanning_update_alert": {
      "request": {
        "url": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "alert_number": {
          "description": "The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "alert_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
          "type": {
            "name": "SecretScanningUpdateAlertBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a secret scanning alert",
      "result_type": {
        "name": "SecretScanningAlert",
        "type": "named"
      }
    },
    "teams_add_member_legacy": {
      "request": {
        "url": "/teams/{team_id}/members/{username}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add team member (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_add_or_update_membership_for_user_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/teams/{team_slug}/memberships/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateMembershipForUserInOrgBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add or update team membership for a user",
      "result_type": {
        "name": "TeamMembership",
        "type": "named"
      }
    },
    "teams_add_or_update_membership_for_user_legacy": {
      "request": {
        "url": "/teams/{team_id}/memberships/{username}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /teams/{team_id}/memberships/{username}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateMembershipForUserLegacyBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add or update team membership for a user (Legacy)",
      "result_type": {
        "name": "TeamMembership",
        "type": "named"
      }
    },
    "teams_add_or_update_project_permissions_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateProjectPermissionsInOrgBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add or update team project permissions",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_add_or_update_project_permissions_legacy": {
      "request": {
        "url": "/teams/{team_id}/projects/{project_id}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /teams/{team_id}/projects/{project_id}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateProjectPermissionsLegacyBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add or update team project permissions (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_add_or_update_repo_permissions_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateRepoPermissionsInOrgBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add or update team repository permissions",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_add_or_update_repo_permissions_legacy": {
      "request": {
        "url": "/teams/{team_id}/repos/{owner}/{repo}",
        "method": "put",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /teams/{team_id}/repos/{owner}/{repo}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsAddOrUpdateRepoPermissionsLegacyBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Add or update team repository permissions (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_create": {
      "request": {
        "url": "/orgs/{org}/teams",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/teams",
          "type": {
            "name": "TeamsCreateBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a team",
      "result_type": {
        "name": "TeamFull",
        "type": "named"
      }
    },
    "teams_create_discussion_comment_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
          "type": {
            "name": "TeamsCreateDiscussionCommentInOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a discussion comment",
      "result_type": {
        "name": "TeamDiscussionComment",
        "type": "named"
      }
    },
    "teams_create_discussion_comment_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/comments",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /teams/{team_id}/discussions/{discussion_number}/comments",
          "type": {
            "name": "TeamsCreateDiscussionCommentLegacyBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create a discussion comment (Legacy)",
      "result_type": {
        "name": "TeamDiscussionComment",
        "type": "named"
      }
    },
    "teams_create_discussion_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /orgs/{org}/teams/{team_slug}/discussions",
          "type": {
            "name": "TeamsCreateDiscussionInOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a discussion",
      "result_type": {
        "name": "TeamDiscussion",
        "type": "named"
      }
    },
    "teams_create_discussion_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /teams/{team_id}/discussions",
          "type": {
            "name": "TeamsCreateDiscussionLegacyBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Create a discussion (Legacy)",
      "result_type": {
        "name": "TeamDiscussion",
        "type": "named"
      }
    },
    "teams_delete_discussion_comment_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a discussion comment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_delete_discussion_comment_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a discussion comment (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_delete_discussion_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a discussion",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_delete_discussion_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a discussion (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_delete_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_delete_legacy": {
      "request": {
        "url": "/teams/{team_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a team (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_link_external_idp_group_to_team_for_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/external-groups",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/teams/{team_slug}/external-groups",
          "type": {
            "name": "TeamsLinkExternalIdpGroupToTeamForOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update the connection between an external group and a team",
      "result_type": {
        "name": "ExternalGroup",
        "type": "named"
      }
    },
    "teams_remove_member_legacy": {
      "request": {
        "url": "/teams/{team_id}/members/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove team member (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_remove_membership_for_user_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove team membership for a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_remove_membership_for_user_legacy": {
      "request": {
        "url": "/teams/{team_id}/memberships/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove team membership for a user (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_remove_project_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove a project from a team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_remove_project_legacy": {
      "request": {
        "url": "/teams/{team_id}/projects/{project_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "project_id": {
          "description": "The unique identifier of the project.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "project_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a project from a team (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_remove_repo_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove a repository from a team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_remove_repo_legacy": {
      "request": {
        "url": "/teams/{team_id}/repos/{owner}/{repo}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "owner": {
          "description": "The account owner of the repository. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "owner",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "repo": {
          "description": "The name of the repository without the `.git` extension. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "repo",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Remove a repository from a team (Legacy)",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_unlink_external_idp_group_from_team_for_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/external-groups",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove the connection between an external group and a team",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "teams_update_discussion_comment_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
          "type": {
            "name": "TeamsUpdateDiscussionCommentInOrgBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a discussion comment",
      "result_type": {
        "name": "TeamDiscussionComment",
        "type": "named"
      }
    },
    "teams_update_discussion_comment_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
          "type": {
            "name": "TeamsUpdateDiscussionCommentLegacyBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "comment_number": {
          "description": "The number that identifies the comment.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "comment_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a discussion comment (Legacy)",
      "result_type": {
        "name": "TeamDiscussionComment",
        "type": "named"
      }
    },
    "teams_update_discussion_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateDiscussionInOrgBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a discussion",
      "result_type": {
        "name": "TeamDiscussion",
        "type": "named"
      }
    },
    "teams_update_discussion_legacy": {
      "request": {
        "url": "/teams/{team_id}/discussions/{discussion_number}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /teams/{team_id}/discussions/{discussion_number}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateDiscussionLegacyBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "discussion_number": {
          "description": "The number that identifies the discussion.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "discussion_number",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a discussion (Legacy)",
      "result_type": {
        "name": "TeamDiscussion",
        "type": "named"
      }
    },
    "teams_update_in_org": {
      "request": {
        "url": "/orgs/{org}/teams/{team_slug}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /orgs/{org}/teams/{team_slug}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TeamsUpdateInOrgBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "org": {
          "description": "The organization name. The name is not case sensitive.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "org",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "team_slug": {
          "description": "The slug of the team name.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "team_slug",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a team",
      "result_type": {
        "name": "TeamFull",
        "type": "named"
      }
    },
    "teams_update_legacy": {
      "request": {
        "url": "/teams/{team_id}",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /teams/{team_id}",
          "type": {
            "name": "TeamsUpdateLegacyBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "team_id": {
          "description": "The unique identifier of the team.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "team_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Update a team (Legacy)",
      "result_type": {
        "name": "TeamFull",
        "type": "named"
      }
    },
    "users_add_email_for_authenticated_user_Body0": {
      "request": {
        "url": "/user/emails",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/emails",
          "type": {
            "name": "UsersAddEmailForAuthenticatedUserBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Add an email address for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Email",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_add_email_for_authenticated_user_String": {
      "request": {
        "url": "/user/emails",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/emails",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add an email address for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "Email",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_add_social_account_for_authenticated_user": {
      "request": {
        "url": "/user/social_accounts",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/social_accounts",
          "type": {
            "name": "UsersAddSocialAccountForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Add social accounts for the authenticated user",
      "result_type": {
        "element_type": {
          "name": "SocialAccount",
          "type": "named"
        },
        "type": "array"
      }
    },
    "users_create_gpg_key_for_authenticated_user": {
      "request": {
        "url": "/user/gpg_keys",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/gpg_keys",
          "type": {
            "name": "UsersCreateGpgKeyForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a GPG key for the authenticated user",
      "result_type": {
        "name": "GpgKey",
        "type": "named"
      }
    },
    "users_create_public_ssh_key_for_authenticated_user": {
      "request": {
        "url": "/user/keys",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/keys",
          "type": {
            "name": "UsersCreatePublicSshKeyForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a public SSH key for the authenticated user",
      "result_type": {
        "name": "Key",
        "type": "named"
      }
    },
    "users_create_ssh_signing_key_for_authenticated_user": {
      "request": {
        "url": "/user/ssh_signing_keys",
        "method": "post",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /user/ssh_signing_keys",
          "type": {
            "name": "UsersCreateSshSigningKeyForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a SSH signing key for the authenticated user",
      "result_type": {
        "name": "SshSigningKey",
        "type": "named"
      }
    },
    "users_delete_email_for_authenticated_user_Body0": {
      "request": {
        "url": "/user/emails",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Deletes one or more email addresses from your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
          "type": {
            "name": "UsersDeleteEmailForAuthenticatedUserBody0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Delete an email address for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_delete_email_for_authenticated_user_String": {
      "request": {
        "url": "/user/emails",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /user/emails",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an email address for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_delete_gpg_key_for_authenticated_user": {
      "request": {
        "url": "/user/gpg_keys/{gpg_key_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "gpg_key_id": {
          "description": "The unique identifier of the GPG key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "gpg_key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a GPG key for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_delete_public_ssh_key_for_authenticated_user": {
      "request": {
        "url": "/user/keys/{key_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "key_id": {
          "description": "The unique identifier of the key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete a public SSH key for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_delete_social_account_for_authenticated_user": {
      "request": {
        "url": "/user/social_accounts",
        "method": "delete",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of DELETE /user/social_accounts",
          "type": {
            "name": "UsersDeleteSocialAccountForAuthenticatedUserBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Delete social accounts for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_delete_ssh_signing_key_for_authenticated_user": {
      "request": {
        "url": "/user/ssh_signing_keys/{ssh_signing_key_id}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "ssh_signing_key_id": {
          "description": "The unique identifier of the SSH signing key.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "ssh_signing_key_id",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Delete an SSH signing key for the authenticated user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_follow": {
      "request": {
        "url": "/user/following/{username}",
        "method": "put",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Follow a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_unfollow": {
      "request": {
        "url": "/user/following/{username}",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "username": {
          "description": "The handle for the GitHub user account.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "username",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unfollow a user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "users_update_authenticated": {
      "request": {
        "url": "/user",
        "method": "patch",
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UsersUpdateAuthenticatedBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update the authenticated user",
      "result_type": {
        "name": "PrivateUser",
        "type": "named"
      }
    }
  },
  "scalar_types": {
    "ActionsCreateOrUpdateOrgSecretBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "selected"
        ],
        "type": "enum"
      }
    },
    "ActionsCreateOrgVariableBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "selected"
        ],
        "type": "enum"
      }
    },
    "ActionsCreateSelfHostedRunnerGroupForOrgBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "selected",
          "all",
          "private"
        ],
        "type": "enum"
      }
    },
    "ActionsDefaultWorkflowPermissions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "ActionsGetActionsCacheListDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "ActionsGetActionsCacheListSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created_at",
          "last_accessed_at",
          "size_in_bytes"
        ],
        "type": "enum"
      }
    },
    "ActionsListJobsForWorkflowRunFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "latest",
          "all"
        ],
        "type": "enum"
      }
    },
    "ActionsListWorkflowRunsForRepoStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "completed",
          "action_required",
          "cancelled",
          "failure",
          "neutral",
          "skipped",
          "stale",
          "success",
          "timed_out",
          "in_progress",
          "queued",
          "requested",
          "waiting",
          "pending"
        ],
        "type": "enum"
      }
    },
    "ActionsListWorkflowRunsStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "completed",
          "action_required",
          "cancelled",
          "failure",
          "neutral",
          "skipped",
          "stale",
          "success",
          "timed_out",
          "in_progress",
          "queued",
          "requested",
          "waiting",
          "pending"
        ],
        "type": "enum"
      }
    },
    "ActionsReviewPendingDeploymentsForRunBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "approved",
          "rejected"
        ],
        "type": "enum"
      }
    },
    "ActionsUpdateOrgVariableBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "selected"
        ],
        "type": "enum"
      }
    },
    "ActionsUpdateSelfHostedRunnerGroupForOrgBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "selected",
          "all",
          "private"
        ],
        "type": "enum"
      }
    },
    "ActionsWorkflowAccessToRepositoryAccessLevel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "user",
          "organization",
          "enterprise"
        ],
        "type": "enum"
      }
    },
    "ActivityActivityType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "push",
          "force_push",
          "branch_deletion",
          "branch_creation",
          "pr_merge",
          "merge_queue_merge"
        ],
        "type": "enum"
      }
    },
    "ActivityListReposStarredByAuthenticatedUserDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "ActivityListReposStarredByAuthenticatedUserSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "ActivityListReposStarredByUserDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "ActivityListReposStarredByUserSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "AllowedActions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "local_only",
          "selected"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsActions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsAdministration": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsChecks": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsCodespaces": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsContents": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsDependabotSecrets": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsDeployments": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsEmailAddresses": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsEnterpriseAdministration": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsEnvironments": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsFollowers": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsGitSshKeys": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsGpgKeys": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsInteractionLimits": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsIssues": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsMembers": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsMetadata": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationAdministration": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationAnnouncementBanners": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationCopilotSeatManagement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationCustomOrgRoles": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationCustomProperties": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationCustomRoles": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationEvents": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationHooks": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationPackages": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationPersonalAccessTokenRequests": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationPersonalAccessTokens": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationPlan": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationProjects": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationSecrets": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationSelfHostedRunners": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsOrganizationUserBlocking": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsPackages": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsPages": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsProfile": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsPullRequests": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsRepositoryCustomProperties": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsRepositoryHooks": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsRepositoryProjects": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsSecretScanningAlerts": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsSecrets": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsSecurityEvents": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsSingleFile": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsStarring": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsStatuses": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsTeamDiscussions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsVulnerabilityAlerts": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write"
        ],
        "type": "enum"
      }
    },
    "AppPermissionsWorkflows": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "write"
        ],
        "type": "enum"
      }
    },
    "AuthenticationTokenRepositorySelection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "selected"
        ],
        "type": "enum"
      }
    },
    "AuthorAssociation": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "COLLABORATOR",
          "CONTRIBUTOR",
          "FIRST_TIMER",
          "FIRST_TIME_CONTRIBUTOR",
          "MANNEQUIN",
          "MEMBER",
          "NONE",
          "OWNER"
        ],
        "type": "enum"
      }
    },
    "AutoMergeMergeMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "merge",
          "squash",
          "rebase"
        ],
        "type": "enum"
      }
    },
    "Binary": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "bytes"
      }
    },
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "CheckRunConclusion": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "success",
          "failure",
          "neutral",
          "cancelled",
          "skipped",
          "timed_out",
          "action_required",
          ""
        ],
        "type": "enum"
      }
    },
    "CheckRunStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "queued",
          "in_progress",
          "completed",
          "waiting",
          "requested",
          "pending"
        ],
        "type": "enum"
      }
    },
    "CheckSuiteConclusion": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "success",
          "failure",
          "neutral",
          "cancelled",
          "skipped",
          "timed_out",
          "action_required",
          "startup_failure",
          "stale",
          ""
        ],
        "type": "enum"
      }
    },
    "CheckSuiteStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "queued",
          "in_progress",
          "completed",
          "waiting",
          "requested",
          "pending",
          ""
        ],
        "type": "enum"
      }
    },
    "ChecksListForRefFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "latest",
          "all"
        ],
        "type": "enum"
      }
    },
    "ChecksListForRefStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "queued",
          "in_progress",
          "completed"
        ],
        "type": "enum"
      }
    },
    "ChecksListForSuiteFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "latest",
          "all"
        ],
        "type": "enum"
      }
    },
    "ChecksListForSuiteStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "queued",
          "in_progress",
          "completed"
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertClassification": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "source",
          "generated",
          "test",
          "library",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertDismissedReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "false positive",
          "won't fix",
          "used in tests",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertRuleSecuritySeverityLevel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "low",
          "medium",
          "high",
          "critical",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertRuleSeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "note",
          "warning",
          "error",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertRuleSummarySecuritySeverityLevel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "low",
          "medium",
          "high",
          "critical",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertRuleSummarySeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "note",
          "warning",
          "error",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertSetState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "dismissed"
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertSeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "critical",
          "high",
          "medium",
          "low",
          "warning",
          "note",
          "error"
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "dismissed",
          "fixed",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningAlertStateQuery": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "dismissed",
          "fixed"
        ],
        "type": "enum"
      }
    },
    "CodeScanningDefaultSetupLanguages": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "actions",
          "c-cpp",
          "csharp",
          "go",
          "java-kotlin",
          "javascript-typescript",
          "javascript",
          "python",
          "ruby",
          "typescript",
          "swift"
        ],
        "type": "enum"
      }
    },
    "CodeScanningDefaultSetupQuerySuite": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "default",
          "extended"
        ],
        "type": "enum"
      }
    },
    "CodeScanningDefaultSetupSchedule": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "weekly",
          ""
        ],
        "type": "enum"
      }
    },
    "CodeScanningDefaultSetupState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "configured",
          "not-configured"
        ],
        "type": "enum"
      }
    },
    "CodeScanningDefaultSetupUpdateLanguages": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "actions",
          "c-cpp",
          "csharp",
          "go",
          "java-kotlin",
          "javascript-typescript",
          "python",
          "ruby",
          "swift"
        ],
        "type": "enum"
      }
    },
    "CodeScanningDefaultSetupUpdateQuerySuite": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "default",
          "extended"
        ],
        "type": "enum"
      }
    },
    "CodeScanningDefaultSetupUpdateState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "configured",
          "not-configured"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListAlertsForEnterpriseDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListAlertsForEnterpriseSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListAlertsForOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListAlertsForOrgSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListAlertsForRepoDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListAlertsForRepoSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListRecentAnalysesDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "CodeScanningListRecentAnalysesSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created"
        ],
        "type": "enum"
      }
    },
    "CodeScanningSarifsStatusProcessingStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pending",
          "complete",
          "failed"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityAttachConfigurationBodyScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "all_without_configurations",
          "public",
          "private_or_internal",
          "selected"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationAdvancedSecurity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationCodeScanningDefaultSetup": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationDependabotAlerts": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationDependabotSecurityUpdates": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationDependencyGraph": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationEnforcement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enforced",
          "unenforced"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationForRepositoryStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "attached",
          "attaching",
          "detached",
          "removed",
          "enforced",
          "failed",
          "updating",
          "removed_by_enterprise"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationRepositoriesStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "attached",
          "attaching",
          "detached",
          "removed",
          "enforced",
          "failed",
          "updating",
          "removed_by_enterprise"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationSecretScanning": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationSecretScanningDelegatedBypass": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationSecretScanningDelegatedBypassOptionsReviewersReviewerType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "TEAM",
          "ROLE"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationSecretScanningNonProviderPatterns": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationSecretScanningPushProtection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationSecretScanningValidityChecks": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityConfigurationTargetType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "global",
          "organization",
          "enterprise"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodyAdvancedSecurity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodyCodeScanningDefaultSetup": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodyDependabotAlerts": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodyDependabotSecurityUpdates": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodyDependencyGraph": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodyEnforcement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enforced",
          "unenforced"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodyPrivateVulnerabilityReporting": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanning": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypass": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersReviewerType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "TEAM",
          "ROLE"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanningNonProviderPatterns": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanningPushProtection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityCreateConfigurationBodySecretScanningValidityChecks": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityDefaultConfigurationsDefaultForNewRepos": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "public",
          "private_and_internal",
          "all"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityGetConfigurationsForOrgTargetType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "global",
          "all"
        ],
        "type": "enum"
      }
    },
    "CodeSecuritySetConfigurationAsDefaultBodyDefaultForNewRepos": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "none",
          "private_and_internal",
          "public"
        ],
        "type": "enum"
      }
    },
    "CodeSecuritySetConfigurationAsDefaultResultDefaultForNewRepos": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "none",
          "private_and_internal",
          "public"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodyAdvancedSecurity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodyCodeScanningDefaultSetup": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodyDependabotAlerts": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodyDependabotSecurityUpdates": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodyDependencyGraph": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodyEnforcement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enforced",
          "unenforced"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodyPrivateVulnerabilityReporting": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanning": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypass": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanningDelegatedBypassOptionsReviewersReviewerType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "TEAM",
          "ROLE"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanningNonProviderPatterns": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanningPushProtection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CodeSecurityUpdateConfigurationBodySecretScanningValidityChecks": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "not_set"
        ],
        "type": "enum"
      }
    },
    "CommitComparisonStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "diverged",
          "ahead",
          "behind",
          "identical"
        ],
        "type": "enum"
      }
    },
    "ContentFileType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "file"
        ],
        "type": "enum"
      }
    },
    "CustomPropertySetPayloadValueType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "string",
          "single_select",
          "multi_select",
          "true_false"
        ],
        "type": "enum"
      }
    },
    "CustomPropertySetPayloadValuesEditableBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "org_actors",
          "org_and_repo_actors",
          ""
        ],
        "type": "enum"
      }
    },
    "CustomPropertySourceType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization",
          "enterprise"
        ],
        "type": "enum"
      }
    },
    "CustomPropertyValueType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "string",
          "single_select",
          "multi_select",
          "true_false"
        ],
        "type": "enum"
      }
    },
    "CustomPropertyValuesEditableBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "org_actors",
          "org_and_repo_actors",
          ""
        ],
        "type": "enum"
      }
    },
    "Date": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "date"
      }
    },
    "DependabotAlertDependencyScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "development",
          "runtime",
          ""
        ],
        "type": "enum"
      }
    },
    "DependabotAlertDismissedReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "fix_started",
          "inaccurate",
          "no_bandwidth",
          "not_used",
          "tolerable_risk",
          ""
        ],
        "type": "enum"
      }
    },
    "DependabotAlertSecurityAdvisoryIdentifiersType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CVE",
          "GHSA"
        ],
        "type": "enum"
      }
    },
    "DependabotAlertSecurityAdvisorySeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "low",
          "medium",
          "high",
          "critical"
        ],
        "type": "enum"
      }
    },
    "DependabotAlertSecurityVulnerabilitySeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "low",
          "medium",
          "high",
          "critical"
        ],
        "type": "enum"
      }
    },
    "DependabotAlertState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto_dismissed",
          "dismissed",
          "fixed",
          "open"
        ],
        "type": "enum"
      }
    },
    "DependabotAlertWithRepositoryDependencyScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "development",
          "runtime",
          ""
        ],
        "type": "enum"
      }
    },
    "DependabotAlertWithRepositoryDismissedReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "fix_started",
          "inaccurate",
          "no_bandwidth",
          "not_used",
          "tolerable_risk",
          ""
        ],
        "type": "enum"
      }
    },
    "DependabotAlertWithRepositoryState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "auto_dismissed",
          "dismissed",
          "fixed",
          "open"
        ],
        "type": "enum"
      }
    },
    "DependabotCreateOrUpdateOrgSecretBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "selected"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForEnterpriseDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForEnterpriseScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "development",
          "runtime"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForEnterpriseSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForOrgScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "development",
          "runtime"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForOrgSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForRepoDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForRepoScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "development",
          "runtime"
        ],
        "type": "enum"
      }
    },
    "DependabotListAlertsForRepoSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "DependabotUpdateAlertBodyDismissedReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "fix_started",
          "inaccurate",
          "no_bandwidth",
          "not_used",
          "tolerable_risk"
        ],
        "type": "enum"
      }
    },
    "DependabotUpdateAlertBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "dismissed",
          "open"
        ],
        "type": "enum"
      }
    },
    "DependencyGraphDiffChangeType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "added",
          "removed"
        ],
        "type": "enum"
      }
    },
    "DependencyGraphDiffScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "unknown",
          "runtime",
          "development"
        ],
        "type": "enum"
      }
    },
    "DeploymentBranchPolicyNamePatternWithTypeType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch",
          "tag"
        ],
        "type": "enum"
      }
    },
    "DeploymentBranchPolicyType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch",
          "tag"
        ],
        "type": "enum"
      }
    },
    "DeploymentReviewerType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "User",
          "Team"
        ],
        "type": "enum"
      }
    },
    "DeploymentStatusState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "error",
          "failure",
          "inactive",
          "pending",
          "success",
          "queued",
          "in_progress"
        ],
        "type": "enum"
      }
    },
    "DiffEntryStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "added",
          "removed",
          "modified",
          "renamed",
          "copied",
          "changed",
          "unchanged"
        ],
        "type": "enum"
      }
    },
    "EmptyObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "EnabledOrganizations": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "none",
          "selected"
        ],
        "type": "enum"
      }
    },
    "EnabledRepositories": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "none",
          "selected"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminCreateSelfHostedRunnerGroupForEnterpriseBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "selected",
          "all"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminGetAuditLogInclude": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "web",
          "git",
          "all"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminGetAuditLogOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveEnvironmentsDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveEnvironmentsSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "name"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveHooksDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveHooksForOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveHooksForOrgSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "name"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveHooksForRepoDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveHooksForRepoSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "name"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPreReceiveHooksSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "name"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPublicKeysDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminListPublicKeysSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "accessed"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminUpdatePreReceiveHookEnforcementForRepoBodyEnforcement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled",
          "testing"
        ],
        "type": "enum"
      }
    },
    "EnterpriseAdminUpdateSelfHostedRunnerGroupForEnterpriseBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "selected",
          "all"
        ],
        "type": "enum"
      }
    },
    "EnvironmentApprovalsState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "approved",
          "rejected",
          "pending"
        ],
        "type": "enum"
      }
    },
    "Float64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "float64"
      }
    },
    "FullRepositoryMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "PR_TITLE",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "FullRepositoryMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "MERGE_MESSAGE"
        ],
        "type": "enum"
      }
    },
    "FullRepositorySquashMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "COMMIT_MESSAGES",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "FullRepositorySquashMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "COMMIT_OR_PR_TITLE"
        ],
        "type": "enum"
      }
    },
    "GhesChecksResultIndicator": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OK",
          "FAILED"
        ],
        "type": "enum"
      }
    },
    "GhesClusterRoles": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Blank",
          "ActionsServer",
          "ConsulServer",
          "ElasticsearchServer",
          "GitServer",
          "JobServer",
          "LaunchServer",
          "MemcacheServer",
          "MetricsServer",
          "MssqlServer",
          "MysqlServer",
          "PagesServer",
          "RedisServer",
          "StorageServer",
          "WebServer"
        ],
        "type": "enum"
      }
    },
    "GhesClusterStatusIndicator": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "UNKNOWN",
          "OK",
          "WARNING",
          "CRITICAL"
        ],
        "type": "enum"
      }
    },
    "GhesClusterTopology": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SingleNode",
          "Ha",
          "Cluster"
        ],
        "type": "enum"
      }
    },
    "GhesGetMaintenanceStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "on",
          "off",
          "scheduled"
        ],
        "type": "enum"
      }
    },
    "GhesLicenseCheckStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "valid",
          "invalid",
          "expired",
          "cluster mode not supported"
        ],
        "type": "enum"
      }
    },
    "GhesReplicationStatusIndicator": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "UNKNOWN",
          "OK",
          "WARNING",
          "CRITICAL"
        ],
        "type": "enum"
      }
    },
    "GhesVersionVersionPlatform": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ami",
          "azure",
          "esx",
          "gce",
          "hyperv",
          "kvm"
        ],
        "type": "enum"
      }
    },
    "GitCreateTagBodyType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "commit",
          "tree",
          "blob"
        ],
        "type": "enum"
      }
    },
    "GitCreateTreeBodyTreeMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "100644",
          "100755",
          "040000",
          "160000",
          "120000"
        ],
        "type": "enum"
      }
    },
    "GitCreateTreeBodyTreeType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "blob",
          "tree",
          "commit"
        ],
        "type": "enum"
      }
    },
    "GlobalAdvisoryIdentifiersType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CVE",
          "GHSA"
        ],
        "type": "enum"
      }
    },
    "GlobalAdvisorySeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "critical",
          "high",
          "medium",
          "low",
          "unknown"
        ],
        "type": "enum"
      }
    },
    "GlobalAdvisoryType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "reviewed",
          "unreviewed",
          "malware"
        ],
        "type": "enum"
      }
    },
    "GroupResponseSchemas": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:ietf:params:scim:schemas:core:2.0:Group",
          "urn:ietf:params:scim:api:messages:2.0:ListResponse"
        ],
        "type": "enum"
      }
    },
    "GroupSchemas": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:ietf:params:scim:schemas:core:2.0:Group"
        ],
        "type": "enum"
      }
    },
    "InstallationRepositorySelection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "selected"
        ],
        "type": "enum"
      }
    },
    "InstallationTokenRepositorySelection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "selected"
        ],
        "type": "enum"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "Int64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int64"
      }
    },
    "IssueStateReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "completed",
          "reopened",
          "not_planned",
          ""
        ],
        "type": "enum"
      }
    },
    "IssueTypeColor": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "gray",
          "blue",
          "green",
          "yellow",
          "orange",
          "red",
          "pink",
          "purple",
          ""
        ],
        "type": "enum"
      }
    },
    "IssuesCreateMilestoneBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed"
        ],
        "type": "enum"
      }
    },
    "IssuesListCommentsForRepoDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "IssuesListCommentsForRepoSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "IssuesListDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "IssuesListFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assigned",
          "created",
          "mentioned",
          "subscribed",
          "repos",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesListForAuthenticatedUserDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "IssuesListForAuthenticatedUserFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assigned",
          "created",
          "mentioned",
          "subscribed",
          "repos",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesListForAuthenticatedUserSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "comments"
        ],
        "type": "enum"
      }
    },
    "IssuesListForAuthenticatedUserState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesListForOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "IssuesListForOrgFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "assigned",
          "created",
          "mentioned",
          "subscribed",
          "repos",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesListForOrgSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "comments"
        ],
        "type": "enum"
      }
    },
    "IssuesListForOrgState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesListForRepoDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "IssuesListForRepoSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "comments"
        ],
        "type": "enum"
      }
    },
    "IssuesListForRepoState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesListMilestonesDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "IssuesListMilestonesSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "due_on",
          "completeness"
        ],
        "type": "enum"
      }
    },
    "IssuesListMilestonesState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesListSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "comments"
        ],
        "type": "enum"
      }
    },
    "IssuesListState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "IssuesLockBodyLockReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "off-topic",
          "too heated",
          "resolved",
          "spam"
        ],
        "type": "enum"
      }
    },
    "IssuesUpdateBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed"
        ],
        "type": "enum"
      }
    },
    "IssuesUpdateBodyStateReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "completed",
          "not_planned",
          "reopened",
          ""
        ],
        "type": "enum"
      }
    },
    "IssuesUpdateMilestoneBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed"
        ],
        "type": "enum"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "JobConclusion": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "success",
          "failure",
          "neutral",
          "cancelled",
          "skipped",
          "timed_out",
          "action_required",
          ""
        ],
        "type": "enum"
      }
    },
    "JobStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "queued",
          "in_progress",
          "completed",
          "waiting",
          "requested",
          "pending"
        ],
        "type": "enum"
      }
    },
    "JobStepsStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "queued",
          "in_progress",
          "completed"
        ],
        "type": "enum"
      }
    },
    "Language": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "MarkdownRenderBodyMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "markdown",
          "gfm"
        ],
        "type": "enum"
      }
    },
    "MergedUpstreamMergeType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "merge",
          "fast-forward",
          "none"
        ],
        "type": "enum"
      }
    },
    "MetaResourceType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "User",
          "Group"
        ],
        "type": "enum"
      }
    },
    "Metadata": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "MigrationsGetStatusForOrgExclude": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "repositories"
        ],
        "type": "enum"
      }
    },
    "MigrationsListForOrgExclude": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "repositories"
        ],
        "type": "enum"
      }
    },
    "MigrationsStartForAuthenticatedUserBodyExclude": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "repositories"
        ],
        "type": "enum"
      }
    },
    "MigrationsStartForOrgBodyExclude": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "repositories"
        ],
        "type": "enum"
      }
    },
    "MilestoneState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed"
        ],
        "type": "enum"
      }
    },
    "OrgMembershipRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "admin",
          "member",
          "billing_manager"
        ],
        "type": "enum"
      }
    },
    "OrgMembershipState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "pending"
        ],
        "type": "enum"
      }
    },
    "OrgRulesetConditions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "OrganizationActionsSecretVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "selected"
        ],
        "type": "enum"
      }
    },
    "OrganizationActionsVariableVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "selected"
        ],
        "type": "enum"
      }
    },
    "OrganizationCustomOrganizationRoleCreateSchemaBaseRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "triage",
          "write",
          "maintain",
          "admin"
        ],
        "type": "enum"
      }
    },
    "OrganizationCustomOrganizationRoleUpdateSchemaBaseRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "read",
          "triage",
          "write",
          "maintain",
          "admin"
        ],
        "type": "enum"
      }
    },
    "OrganizationCustomRepositoryRoleBaseRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "triage",
          "write",
          "maintain"
        ],
        "type": "enum"
      }
    },
    "OrganizationCustomRepositoryRoleCreateSchemaBaseRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "triage",
          "write",
          "maintain"
        ],
        "type": "enum"
      }
    },
    "OrganizationCustomRepositoryRoleUpdateSchemaBaseRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "triage",
          "write",
          "maintain"
        ],
        "type": "enum"
      }
    },
    "OrganizationDependabotSecretVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "selected"
        ],
        "type": "enum"
      }
    },
    "OrganizationProgrammaticAccessGrantRepositorySelection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "all",
          "subset"
        ],
        "type": "enum"
      }
    },
    "OrganizationProgrammaticAccessGrantRequestRepositorySelection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "all",
          "subset"
        ],
        "type": "enum"
      }
    },
    "OrganizationRoleBaseRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "triage",
          "write",
          "maintain",
          "admin",
          ""
        ],
        "type": "enum"
      }
    },
    "OrganizationRoleSource": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Organization",
          "Enterprise",
          "Predefined",
          ""
        ],
        "type": "enum"
      }
    },
    "OrganizationSecretScanningAlertValidity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "inactive",
          "unknown"
        ],
        "type": "enum"
      }
    },
    "OrgsEnableOrDisableSecurityProductOnAllOrgReposBodyQuerySuite": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "default",
          "extended"
        ],
        "type": "enum"
      }
    },
    "OrgsEnableOrDisableSecurityProductOnAllOrgReposEnablement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enable_all",
          "disable_all"
        ],
        "type": "enum"
      }
    },
    "OrgsEnableOrDisableSecurityProductOnAllOrgReposSecurityProduct": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "dependency_graph",
          "dependabot_alerts",
          "dependabot_security_updates",
          "advanced_security",
          "code_scanning_default_setup",
          "secret_scanning",
          "secret_scanning_push_protection"
        ],
        "type": "enum"
      }
    },
    "OrgsGetAuditLogInclude": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "web",
          "git",
          "all"
        ],
        "type": "enum"
      }
    },
    "OrgsGetAuditLogOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "OrgsListMembersFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "2fa_disabled",
          "all"
        ],
        "type": "enum"
      }
    },
    "OrgsListMembersRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "admin",
          "member"
        ],
        "type": "enum"
      }
    },
    "OrgsListMembershipsForAuthenticatedUserState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "pending"
        ],
        "type": "enum"
      }
    },
    "OrgsListOutsideCollaboratorsFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "2fa_disabled",
          "all"
        ],
        "type": "enum"
      }
    },
    "OrgsListPatGrantRequestsDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "OrgsListPatGrantRequestsSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created_at"
        ],
        "type": "enum"
      }
    },
    "OrgsListPatGrantsDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "OrgsListPatGrantsSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created_at"
        ],
        "type": "enum"
      }
    },
    "OrgsReviewPatGrantRequestBodyAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "approve",
          "deny"
        ],
        "type": "enum"
      }
    },
    "OrgsReviewPatGrantRequestsInBulkBodyAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "approve",
          "deny"
        ],
        "type": "enum"
      }
    },
    "OrgsSetMembershipForUserBodyRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "admin",
          "member"
        ],
        "type": "enum"
      }
    },
    "OrgsUpdateBodyDefaultRepositoryPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin",
          "none"
        ],
        "type": "enum"
      }
    },
    "OrgsUpdateBodyMembersAllowedRepositoryCreationType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "private",
          "none"
        ],
        "type": "enum"
      }
    },
    "OrgsUpdateMembershipForAuthenticatedUserBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active"
        ],
        "type": "enum"
      }
    },
    "OrgsUpdatePatAccessBodyAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "revoke"
        ],
        "type": "enum"
      }
    },
    "OrgsUpdatePatAccessesBodyAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "revoke"
        ],
        "type": "enum"
      }
    },
    "PackagePackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackageVersionMetadataPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackageVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "private",
          "public"
        ],
        "type": "enum"
      }
    },
    "PackagesDeletePackageForAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesDeletePackageForOrgPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesDeletePackageForUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesDeletePackageVersionForAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesDeletePackageVersionForOrgPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesDeletePackageVersionForUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "deleted"
        ],
        "type": "enum"
      }
    },
    "PackagesGetAllPackageVersionsForPackageOwnedByOrgPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetAllPackageVersionsForPackageOwnedByOrgState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "deleted"
        ],
        "type": "enum"
      }
    },
    "PackagesGetAllPackageVersionsForPackageOwnedByUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetPackageForAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetPackageForOrganizationPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetPackageForUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetPackageVersionForAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetPackageVersionForOrganizationPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesGetPackageVersionForUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesListPackagesForAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesListPackagesForAuthenticatedUserVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "public",
          "private",
          "internal"
        ],
        "type": "enum"
      }
    },
    "PackagesListPackagesForOrganizationPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesListPackagesForOrganizationVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "public",
          "private",
          "internal"
        ],
        "type": "enum"
      }
    },
    "PackagesListPackagesForUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesListPackagesForUserVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "public",
          "private",
          "internal"
        ],
        "type": "enum"
      }
    },
    "PackagesRestorePackageForAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesRestorePackageForOrgPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesRestorePackageForUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesRestorePackageVersionForAuthenticatedUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesRestorePackageVersionForOrgPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PackagesRestorePackageVersionForUserPackageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "npm",
          "maven",
          "rubygems",
          "docker",
          "nuget",
          "container"
        ],
        "type": "enum"
      }
    },
    "PageBuildType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "legacy",
          "workflow",
          ""
        ],
        "type": "enum"
      }
    },
    "PageProtectedDomainState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pending",
          "verified",
          "unverified",
          ""
        ],
        "type": "enum"
      }
    },
    "PageStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "built",
          "building",
          "errored",
          ""
        ],
        "type": "enum"
      }
    },
    "PagesDeploymentStatusStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "deployment_in_progress",
          "syncing_files",
          "finished_file_sync",
          "updating_pages",
          "purging_cdn",
          "deployment_cancelled",
          "deployment_failed",
          "deployment_content_failed",
          "deployment_attempt_error",
          "deployment_lost",
          "succeed"
        ],
        "type": "enum"
      }
    },
    "PagesHttpsCertificateState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "new",
          "authorization_created",
          "authorization_pending",
          "authorized",
          "authorization_revoked",
          "issued",
          "uploaded",
          "approved",
          "errored",
          "bad_authz",
          "destroy_pending",
          "dns_changed"
        ],
        "type": "enum"
      }
    },
    "PatchSchemaOperationsOp": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "add",
          "replace",
          "remove"
        ],
        "type": "enum"
      }
    },
    "PatchSchemaSchemas": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:ietf:params:scim:api:messages:2.0:PatchOp"
        ],
        "type": "enum"
      }
    },
    "ProjectOrganizationPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin",
          "none"
        ],
        "type": "enum"
      }
    },
    "ProjectsAddCollaboratorBodyPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin"
        ],
        "type": "enum"
      }
    },
    "ProjectsListCardsArchivedState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "archived",
          "not_archived"
        ],
        "type": "enum"
      }
    },
    "ProjectsListCollaboratorsAffiliation": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "outside",
          "direct",
          "all"
        ],
        "type": "enum"
      }
    },
    "ProjectsListForOrgState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "ProjectsListForRepoState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "ProjectsListForUserState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "ProjectsUpdateBodyOrganizationPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin",
          "none"
        ],
        "type": "enum"
      }
    },
    "PullRequestReviewCommentSide": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "LEFT",
          "RIGHT"
        ],
        "type": "enum"
      }
    },
    "PullRequestReviewCommentStartSide": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "LEFT",
          "RIGHT",
          ""
        ],
        "type": "enum"
      }
    },
    "PullRequestReviewCommentSubjectType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "line",
          "file"
        ],
        "type": "enum"
      }
    },
    "PullRequestState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed"
        ],
        "type": "enum"
      }
    },
    "PullsCreateReviewBodyEvent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "APPROVE",
          "REQUEST_CHANGES",
          "COMMENT"
        ],
        "type": "enum"
      }
    },
    "PullsCreateReviewCommentBodySide": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "LEFT",
          "RIGHT"
        ],
        "type": "enum"
      }
    },
    "PullsCreateReviewCommentBodyStartSide": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "LEFT",
          "RIGHT",
          "side"
        ],
        "type": "enum"
      }
    },
    "PullsCreateReviewCommentBodySubjectType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "line",
          "file"
        ],
        "type": "enum"
      }
    },
    "PullsDismissReviewBodyEvent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DISMISS"
        ],
        "type": "enum"
      }
    },
    "PullsListDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "PullsListReviewCommentsDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "PullsListReviewCommentsForRepoDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "PullsListReviewCommentsForRepoSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "created_at"
        ],
        "type": "enum"
      }
    },
    "PullsListReviewCommentsSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "PullsListSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "popularity",
          "long-running"
        ],
        "type": "enum"
      }
    },
    "PullsListState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed",
          "all"
        ],
        "type": "enum"
      }
    },
    "PullsMergeBodyMergeMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "merge",
          "squash",
          "rebase"
        ],
        "type": "enum"
      }
    },
    "PullsSubmitReviewBodyEvent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "APPROVE",
          "REQUEST_CHANGES",
          "COMMENT"
        ],
        "type": "enum"
      }
    },
    "PullsUpdateBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "closed"
        ],
        "type": "enum"
      }
    },
    "ReactionContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForCommitCommentBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForIssueBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForIssueCommentBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForPullRequestReviewCommentBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForReleaseBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "laugh",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForTeamDiscussionCommentInOrgBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForTeamDiscussionCommentLegacyBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForTeamDiscussionInOrgBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsCreateForTeamDiscussionLegacyBodyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForCommitCommentContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForIssueCommentContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForIssueContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForPullRequestReviewCommentContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForReleaseContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "laugh",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForTeamDiscussionCommentInOrgContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForTeamDiscussionCommentLegacyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForTeamDiscussionInOrgContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReactionsListForTeamDiscussionLegacyContent": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "+1",
          "-1",
          "laugh",
          "confused",
          "heart",
          "hooray",
          "rocket",
          "eyes"
        ],
        "type": "enum"
      }
    },
    "ReleaseAssetState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "uploaded",
          "open"
        ],
        "type": "enum"
      }
    },
    "ReposCreateCommitStatusBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "error",
          "failure",
          "pending",
          "success"
        ],
        "type": "enum"
      }
    },
    "ReposCreateDeploymentStatusBodyState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "error",
          "failure",
          "inactive",
          "in_progress",
          "queued",
          "pending",
          "success"
        ],
        "type": "enum"
      }
    },
    "ReposCreateForAuthenticatedUserBodyMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "PR_TITLE",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "ReposCreateForAuthenticatedUserBodyMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "MERGE_MESSAGE"
        ],
        "type": "enum"
      }
    },
    "ReposCreateForAuthenticatedUserBodySquashMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "COMMIT_MESSAGES",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "ReposCreateForAuthenticatedUserBodySquashMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "COMMIT_OR_PR_TITLE"
        ],
        "type": "enum"
      }
    },
    "ReposCreateInOrgBodyMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "PR_TITLE",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "ReposCreateInOrgBodyMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "MERGE_MESSAGE"
        ],
        "type": "enum"
      }
    },
    "ReposCreateInOrgBodySquashMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "COMMIT_MESSAGES",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "ReposCreateInOrgBodySquashMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "COMMIT_OR_PR_TITLE"
        ],
        "type": "enum"
      }
    },
    "ReposCreateInOrgBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "public",
          "private",
          "internal"
        ],
        "type": "enum"
      }
    },
    "ReposCreateOrgRulesetBodySourceType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Repository",
          "Organization"
        ],
        "type": "enum"
      }
    },
    "ReposCreateOrgRulesetBodyTarget": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch",
          "tag",
          "push"
        ],
        "type": "enum"
      }
    },
    "ReposCreateReleaseBodyMakeLatest": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "true",
          "false",
          "legacy"
        ],
        "type": "enum"
      }
    },
    "ReposCreateRepoRulesetBodyTarget": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch",
          "tag",
          "push"
        ],
        "type": "enum"
      }
    },
    "ReposGetOrgRuleSuitesRuleSuiteResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pass",
          "fail",
          "bypass",
          "all"
        ],
        "type": "enum"
      }
    },
    "ReposGetOrgRuleSuitesTimePeriod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "hour",
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "ReposGetRepoRuleSuitesRuleSuiteResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pass",
          "fail",
          "bypass",
          "all"
        ],
        "type": "enum"
      }
    },
    "ReposGetRepoRuleSuitesTimePeriod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "hour",
          "day",
          "week",
          "month"
        ],
        "type": "enum"
      }
    },
    "ReposListActivitiesActivityType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "push",
          "force_push",
          "branch_creation",
          "branch_deletion",
          "pr_merge",
          "merge_queue_merge"
        ],
        "type": "enum"
      }
    },
    "ReposListActivitiesDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "ReposListActivitiesTimePeriod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "day",
          "week",
          "month",
          "quarter",
          "year"
        ],
        "type": "enum"
      }
    },
    "ReposListCacheInfoResultGitSyncStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "offline",
          "inactive",
          "in_sync",
          "not_in_sync"
        ],
        "type": "enum"
      }
    },
    "ReposListCollaboratorsAffiliation": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "outside",
          "direct",
          "all"
        ],
        "type": "enum"
      }
    },
    "ReposListCollaboratorsPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pull",
          "triage",
          "push",
          "maintain",
          "admin"
        ],
        "type": "enum"
      }
    },
    "ReposListForAuthenticatedUserDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "ReposListForAuthenticatedUserSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "pushed",
          "full_name"
        ],
        "type": "enum"
      }
    },
    "ReposListForAuthenticatedUserType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "owner",
          "public",
          "private",
          "member"
        ],
        "type": "enum"
      }
    },
    "ReposListForAuthenticatedUserVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "public",
          "private"
        ],
        "type": "enum"
      }
    },
    "ReposListForOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "ReposListForOrgSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "pushed",
          "full_name"
        ],
        "type": "enum"
      }
    },
    "ReposListForOrgType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "public",
          "private",
          "forks",
          "sources",
          "member",
          "internal"
        ],
        "type": "enum"
      }
    },
    "ReposListForUserDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "ReposListForUserSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated",
          "pushed",
          "full_name"
        ],
        "type": "enum"
      }
    },
    "ReposListForUserType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "owner",
          "member"
        ],
        "type": "enum"
      }
    },
    "ReposListForksSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "newest",
          "oldest",
          "stargazers",
          "watchers"
        ],
        "type": "enum"
      }
    },
    "ReposListPublicVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "public"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateBodyMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "PR_TITLE",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateBodyMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "MERGE_MESSAGE"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateBodySquashMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "COMMIT_MESSAGES",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateBodySquashMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "COMMIT_OR_PR_TITLE"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateBodyVisibility": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "public",
          "private",
          "internal"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateInformationAboutPagesSiteBodyBuildType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "legacy",
          "workflow"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateInvitationBodyPermissions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "maintain",
          "triage",
          "admin"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateOrgRulesetBodyTarget": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch",
          "tag",
          "push"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateReleaseBodyMakeLatest": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "true",
          "false",
          "legacy"
        ],
        "type": "enum"
      }
    },
    "ReposUpdateRepoRulesetBodyTarget": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch",
          "tag",
          "push"
        ],
        "type": "enum"
      }
    },
    "RepositoryInvitationPermissions": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin",
          "triage",
          "maintain"
        ],
        "type": "enum"
      }
    },
    "RepositoryMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "PR_TITLE",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "RepositoryMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "MERGE_MESSAGE"
        ],
        "type": "enum"
      }
    },
    "RepositoryRuleDetailedTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch_name_pattern",
          "code_scanning",
          "commit_author_email_pattern",
          "commit_message_pattern",
          "committer_email_pattern",
          "creation",
          "deletion",
          "merge_queue",
          "non_fast_forward",
          "pull_request",
          "required_deployments",
          "required_linear_history",
          "required_signatures",
          "required_status_checks",
          "tag_name_pattern",
          "update",
          "workflows"
        ],
        "type": "enum"
      }
    },
    "RepositoryRuleEnforcement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "disabled",
          "active",
          "evaluate"
        ],
        "type": "enum"
      }
    },
    "RepositoryRuleRulesetInfoRulesetSourceType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Repository",
          "Organization"
        ],
        "type": "enum"
      }
    },
    "RepositoryRuleTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch_name_pattern",
          "code_scanning",
          "commit_author_email_pattern",
          "commit_message_pattern",
          "committer_email_pattern",
          "creation",
          "deletion",
          "merge_queue",
          "non_fast_forward",
          "pull_request",
          "required_deployments",
          "required_linear_history",
          "required_signatures",
          "required_status_checks",
          "tag_name_pattern",
          "update",
          "workflows"
        ],
        "type": "enum"
      }
    },
    "RepositoryRulesetBypassActorActorType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Integration",
          "OrganizationAdmin",
          "RepositoryRole",
          "Team",
          "DeployKey"
        ],
        "type": "enum"
      }
    },
    "RepositoryRulesetBypassActorBypassMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "always",
          "pull_request"
        ],
        "type": "enum"
      }
    },
    "RepositoryRulesetCurrentUserCanBypass": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "always",
          "pull_requests_only",
          "never"
        ],
        "type": "enum"
      }
    },
    "RepositoryRulesetSourceType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Repository",
          "Organization"
        ],
        "type": "enum"
      }
    },
    "RepositoryRulesetTarget": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "branch",
          "tag",
          "push"
        ],
        "type": "enum"
      }
    },
    "RepositorySquashMergeCommitMessage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_BODY",
          "COMMIT_MESSAGES",
          "BLANK"
        ],
        "type": "enum"
      }
    },
    "RepositorySquashMergeCommitTitle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PR_TITLE",
          "COMMIT_OR_PR_TITLE"
        ],
        "type": "enum"
      }
    },
    "ReviewCommentSide": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "LEFT",
          "RIGHT"
        ],
        "type": "enum"
      }
    },
    "ReviewCommentStartSide": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "LEFT",
          "RIGHT",
          ""
        ],
        "type": "enum"
      }
    },
    "ReviewCustomGatesStateRequiredState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "approved",
          "rejected"
        ],
        "type": "enum"
      }
    },
    "RuleSuiteEvaluationResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pass",
          "fail"
        ],
        "type": "enum"
      }
    },
    "RuleSuiteResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pass",
          "fail",
          "bypass"
        ],
        "type": "enum"
      }
    },
    "RuleSuiteRuleEvaluationsEnforcement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "evaluate",
          "deleted ruleset"
        ],
        "type": "enum"
      }
    },
    "RuleSuiteRuleEvaluationsResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pass",
          "fail"
        ],
        "type": "enum"
      }
    },
    "RuleSuitesEvaluationResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pass",
          "fail"
        ],
        "type": "enum"
      }
    },
    "RuleSuitesResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pass",
          "fail",
          "bypass"
        ],
        "type": "enum"
      }
    },
    "RunnerLabelType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read-only",
          "custom"
        ],
        "type": "enum"
      }
    },
    "ScimEnterpriseGroupListSchemas": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:ietf:params:scim:api:messages:2.0:ListResponse"
        ],
        "type": "enum"
      }
    },
    "ScimEnterpriseUserListSchemas": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:ietf:params:scim:api:messages:2.0:ListResponse"
        ],
        "type": "enum"
      }
    },
    "ScopedInstallationRepositorySelection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "all",
          "selected"
        ],
        "type": "enum"
      }
    },
    "SearchCodeOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "SearchCodeSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "indexed"
        ],
        "type": "enum"
      }
    },
    "SearchCommitsOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "SearchCommitsSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "author-date",
          "committer-date"
        ],
        "type": "enum"
      }
    },
    "SearchIssuesAndPullRequestsOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "SearchIssuesAndPullRequestsSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "comments",
          "reactions",
          "reactions-+1",
          "reactions--1",
          "reactions-smile",
          "reactions-thinking_face",
          "reactions-heart",
          "reactions-tada",
          "interactions",
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "SearchLabelsOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "SearchLabelsSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "SearchReposOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "SearchReposSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "stars",
          "forks",
          "help-wanted-issues",
          "updated"
        ],
        "type": "enum"
      }
    },
    "SearchUsersOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "desc",
          "asc"
        ],
        "type": "enum"
      }
    },
    "SearchUsersSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "followers",
          "repositories",
          "joined"
        ],
        "type": "enum"
      }
    },
    "SecretScanningAlertResolution": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "false_positive",
          "wont_fix",
          "revoked",
          "used_in_tests",
          ""
        ],
        "type": "enum"
      }
    },
    "SecretScanningAlertState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "resolved"
        ],
        "type": "enum"
      }
    },
    "SecretScanningAlertValidity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "inactive",
          "unknown"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForEnterpriseDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForEnterpriseSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForEnterpriseState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "resolved"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForOrgSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForOrgState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "resolved"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForRepoDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForRepoSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "created",
          "updated"
        ],
        "type": "enum"
      }
    },
    "SecretScanningListAlertsForRepoState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "open",
          "resolved"
        ],
        "type": "enum"
      }
    },
    "SecretScanningLocationType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "commit",
          "wiki_commit",
          "issue_title",
          "issue_body",
          "issue_comment",
          "discussion_title",
          "discussion_body",
          "discussion_comment",
          "pull_request_title",
          "pull_request_body",
          "pull_request_comment",
          "pull_request_review",
          "pull_request_review_comment"
        ],
        "type": "enum"
      }
    },
    "SecretScanningPostSecurityProductEnablementForEnterpriseEnablement": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enable_all",
          "disable_all"
        ],
        "type": "enum"
      }
    },
    "SecretScanningPostSecurityProductEnablementForEnterpriseSecurityProduct": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "advanced_security",
          "advanced_security_user_namespace",
          "dependabot_alerts",
          "secret_scanning",
          "secret_scanning_push_protection",
          "secret_scanning_non_provider_patterns"
        ],
        "type": "enum"
      }
    },
    "SecretScanningPushProtectionBypassReason": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "false_positive",
          "used_in_tests",
          "will_fix_later"
        ],
        "type": "enum"
      }
    },
    "SecurityAdvisoriesListGlobalAdvisoriesDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "SecurityAdvisoriesListGlobalAdvisoriesSeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "unknown",
          "low",
          "medium",
          "high",
          "critical"
        ],
        "type": "enum"
      }
    },
    "SecurityAdvisoriesListGlobalAdvisoriesSort": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "updated",
          "published",
          "epss_percentage",
          "epss_percentile"
        ],
        "type": "enum"
      }
    },
    "SecurityAdvisoriesListGlobalAdvisoriesType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "reviewed",
          "malware",
          "unreviewed"
        ],
        "type": "enum"
      }
    },
    "SecurityAdvisoryCreditTypes": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "analyst",
          "finder",
          "reporter",
          "coordinator",
          "remediation_developer",
          "remediation_reviewer",
          "remediation_verifier",
          "tool",
          "sponsor",
          "other"
        ],
        "type": "enum"
      }
    },
    "SecurityAdvisoryEcosystems": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "rubygems",
          "npm",
          "pip",
          "maven",
          "nuget",
          "composer",
          "go",
          "rust",
          "erlang",
          "actions",
          "pub",
          "other",
          "swift"
        ],
        "type": "enum"
      }
    },
    "SecurityAndAnalysisAdvancedSecurityStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "SecurityAndAnalysisDependabotSecurityUpdatesStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "SecurityAndAnalysisSecretScanningNonProviderPatternsStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "SecurityAndAnalysisSecretScanningPushProtectionStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "SecurityAndAnalysisSecretScanningStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enabled",
          "disabled"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TeamFullNotificationSetting": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "notifications_enabled",
          "notifications_disabled"
        ],
        "type": "enum"
      }
    },
    "TeamFullPrivacy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "closed",
          "secret"
        ],
        "type": "enum"
      }
    },
    "TeamMembershipRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member",
          "maintainer"
        ],
        "type": "enum"
      }
    },
    "TeamMembershipState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "pending"
        ],
        "type": "enum"
      }
    },
    "TeamRoleAssignmentAssignment": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "direct",
          "indirect",
          "mixed"
        ],
        "type": "enum"
      }
    },
    "TeamsAddOrUpdateMembershipForUserInOrgBodyRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member",
          "maintainer"
        ],
        "type": "enum"
      }
    },
    "TeamsAddOrUpdateMembershipForUserLegacyBodyRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member",
          "maintainer"
        ],
        "type": "enum"
      }
    },
    "TeamsAddOrUpdateProjectPermissionsInOrgBodyPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin"
        ],
        "type": "enum"
      }
    },
    "TeamsAddOrUpdateProjectPermissionsLegacyBodyPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "read",
          "write",
          "admin"
        ],
        "type": "enum"
      }
    },
    "TeamsAddOrUpdateRepoPermissionsLegacyBodyPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pull",
          "push",
          "admin"
        ],
        "type": "enum"
      }
    },
    "TeamsCreateBodyNotificationSetting": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "notifications_enabled",
          "notifications_disabled"
        ],
        "type": "enum"
      }
    },
    "TeamsCreateBodyPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pull",
          "push"
        ],
        "type": "enum"
      }
    },
    "TeamsCreateBodyPrivacy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "secret",
          "closed"
        ],
        "type": "enum"
      }
    },
    "TeamsListDiscussionCommentsInOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "TeamsListDiscussionCommentsLegacyDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "TeamsListDiscussionsInOrgDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "TeamsListDiscussionsLegacyDirection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "asc",
          "desc"
        ],
        "type": "enum"
      }
    },
    "TeamsListMembersInOrgRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member",
          "maintainer",
          "all"
        ],
        "type": "enum"
      }
    },
    "TeamsListMembersLegacyRole": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "member",
          "maintainer",
          "all"
        ],
        "type": "enum"
      }
    },
    "TeamsUpdateInOrgBodyNotificationSetting": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "notifications_enabled",
          "notifications_disabled"
        ],
        "type": "enum"
      }
    },
    "TeamsUpdateInOrgBodyPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pull",
          "push",
          "admin"
        ],
        "type": "enum"
      }
    },
    "TeamsUpdateInOrgBodyPrivacy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "secret",
          "closed"
        ],
        "type": "enum"
      }
    },
    "TeamsUpdateLegacyBodyNotificationSetting": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "notifications_enabled",
          "notifications_disabled"
        ],
        "type": "enum"
      }
    },
    "TeamsUpdateLegacyBodyPermission": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "pull",
          "push",
          "admin"
        ],
        "type": "enum"
      }
    },
    "TeamsUpdateLegacyBodyPrivacy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "secret",
          "closed"
        ],
        "type": "enum"
      }
    },
    "TimestampTZ": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "timestamptz"
      }
    },
    "URI": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "UUID": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "uuid"
      }
    },
    "UserResponseSchemas": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "type": "enum"
      }
    },
    "UserRoleAssignmentAssignment": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "direct",
          "indirect",
          "mixed"
        ],
        "type": "enum"
      }
    },
    "UserRoleValue": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "user",
          "27d9891d-2c17-4f45-a262-781a0e55c80a",
          "guest_collaborator",
          "1ebc4a02-e56c-43a6-92a5-02ee09b90824",
          "enterprise_owner",
          "981df190-8801-4618-a08a-d91f6206c954",
          "ba4987ab-a1c3-412a-b58c-360fc407cb10",
          "billing_manager",
          "0e338b8c-cc7f-498a-928d-ea3470d7e7e3",
          "e6be2762-e4ad-4108-b72d-1bbe884a0f91"
        ],
        "type": "enum"
      }
    },
    "UserSchemas": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:ietf:params:scim:schemas:core:2.0:User"
        ],
        "type": "enum"
      }
    },
    "UsersGetContextForUserSubjectType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "organization",
          "repository",
          "issue",
          "pull_request"
        ],
        "type": "enum"
      }
    },
    "WebhookConfigInsecureSsl": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "WorkflowState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "active",
          "deleted",
          "disabled_fork",
          "disabled_inactivity",
          "disabled_manually"
        ],
        "type": "enum"
      }
    }
  }
}
