{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "value": "https://api-m.paypal.com",
          "env": "PAYPAL_SERVER_URL"
        }
      }
    ],
    "securitySchemes": {
      "Oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": {
              "value": "/v1/oauth2/token",
              "env": "PAYPAL_OAUTH2_TOKEN_URL"
            },
            "scopes": {
              "https://uri.paypal.com/services/vault/customers/read": "Permission to read customer information.",
              "https://uri.paypal.com/services/vault/customers/readwrite": "Permission to create/update customer information.",
              "https://uri.paypal.com/services/vault/payment-tokens/read": "Permission to only read from vault",
              "https://uri.paypal.com/services/vault/payment-tokens/readwrite": "Manage payment instruments"
            },
            "clientId": {
              "env": "PAYPAL_OAUTH2_CLIENT_ID"
            },
            "clientSecret": {
              "env": "PAYPAL_OAUTH2_CLIENT_SECRET"
            }
          }
        }
      }
    },
    "version": "3.1"
  },
  "functions": {
    "customer_payment_tokens_get": {
      "request": {
        "url": "/v3/vault/payment-tokens",
        "method": "get",
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/vault/payment-tokens/readwrite"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "customer_id": {
          "description": "A unique identifier representing a specific customer in merchant's/partner's system or records.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "customer_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^[0-9a-zA-Z_-]+$",
              "maxLength": 36,
              "minLength": 7
            }
          }
        },
        "page": {
          "description": "A non-negative, non-zero integer representing the page of the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 1
            }
          }
        },
        "page_size": {
          "description": "A non-negative, non-zero integer indicating the maximum number of results to return at one time.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "page_size",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 1
            }
          }
        },
        "total_required": {
          "description": "A boolean indicating total number of items (total_items) and pages (total_pages) are expected to be returned in the response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "total_required",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "List all payment tokens",
      "result_type": {
        "name": "CustomerVaultPaymentTokensResponse",
        "type": "named"
      }
    },
    "payment_tokens_get": {
      "request": {
        "url": "/v3/vault/payment-tokens/{id}",
        "method": "get",
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/vault/payment-tokens/readwrite"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID of the setup token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^[0-9a-zA-Z_-]+$",
              "maxLength": 36,
              "minLength": 7
            }
          }
        }
      },
      "description": "Retrieve a payment token",
      "result_type": {
        "name": "PaymentTokenResponse",
        "type": "named"
      }
    },
    "setup_tokens_get": {
      "request": {
        "url": "/v3/vault/setup-tokens/{id}",
        "method": "get",
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/vault/payment-tokens/read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID of the setup token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^[0-9a-zA-Z_-]+$",
              "maxLength": 36,
              "minLength": 7
            }
          }
        }
      },
      "description": "Retrieve a setup token",
      "result_type": {
        "name": "SetupTokenResponse",
        "type": "named"
      }
    }
  },
  "object_types": {
    "AchDebitResponse2": {
      "fields": {
        "verification_status": {
          "description": "The ach debit verification status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "ach_debit_verification_status"
            }
          }
        }
      },
      "xml": {
        "name": "ach_debit_response-2"
      }
    },
    "AddressPortable": {
      "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
      "fields": {
        "address_details": {
          "description": "The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AddressPortableAddressDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "address_line_1": {
          "description": "The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "address_line_2": {
          "description": "The second line of the address. For example, suite or apartment number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "address_line_3": {
          "description": "The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "admin_area_1": {
          "description": "The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:UK. A county.US. A state.Canada. A province.Japan. A prefecture.Switzerland. A kanton.</ul>",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "admin_area_2": {
          "description": "A city, town, or village. Smaller than `admin_area_level_1`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 120
          }
        },
        "admin_area_3": {
          "description": "A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:Brazil. Suburb, bairro, or neighborhood.India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</ul>",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "admin_area_4": {
          "description": "The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:The postal sorting code for Guernsey and many French territories, such as French Guiana.The fine-grained administrative levels in China.</ul>",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "country_code": {
          "description": "The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.Note: The country code for Great Britain is GB and not UK as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ppaas_common_country_code_v2",
            "pattern": "^([A-Z]{2}|C2)$",
            "maxLength": 2,
            "minLength": 2,
            "xml": {
              "name": "country_code"
            }
          }
        },
        "postal_code": {
          "description": "The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 60
          }
        }
      },
      "xml": {
        "name": "address_portable"
      }
    },
    "AddressPortableAddressDetails": {
      "description": "The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.",
      "fields": {
        "building_name": {
          "description": "A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, Craven House.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "delivery_service": {
          "description": "The delivery service. Post office box, bag number, or post office name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "street_name": {
          "description": "The street name. Just `Drury` in `Drury Lane`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "street_number": {
          "description": "The street number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "street_type": {
          "description": "The street type. For example, avenue, boulevard, road, or expressway.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "sub_building": {
          "description": "The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        }
      },
      "xml": {
        "name": "address_portable"
      }
    },
    "AddressPortableAddressDetailsInput": {
      "description": "The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.",
      "fields": {
        "building_name": {
          "description": "A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, Craven House.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "delivery_service": {
          "description": "The delivery service. Post office box, bag number, or post office name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "street_name": {
          "description": "The street name. Just `Drury` in `Drury Lane`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "street_number": {
          "description": "The street number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "street_type": {
          "description": "The street type. For example, avenue, boulevard, road, or expressway.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "sub_building": {
          "description": "The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        }
      },
      "xml": {
        "name": "address_portable"
      }
    },
    "AddressPortableInput": {
      "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
      "fields": {
        "address_details": {
          "description": "The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AddressPortableAddressDetailsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "address_line_1": {
          "description": "The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "address_line_2": {
          "description": "The second line of the address. For example, suite or apartment number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "address_line_3": {
          "description": "The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "admin_area_1": {
          "description": "The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:UK. A county.US. A state.Canada. A province.Japan. A prefecture.Switzerland. A kanton.</ul>",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "admin_area_2": {
          "description": "A city, town, or village. Smaller than `admin_area_level_1`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 120
          }
        },
        "admin_area_3": {
          "description": "A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:Brazil. Suburb, bairro, or neighborhood.India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</ul>",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "admin_area_4": {
          "description": "The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:The postal sorting code for Guernsey and many French territories, such as French Guiana.The fine-grained administrative levels in China.</ul>",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "country_code": {
          "description": "The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.Note: The country code for Great Britain is GB and not UK as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ppaas_common_country_code_v2",
            "pattern": "^([A-Z]{2}|C2)$",
            "maxLength": 2,
            "minLength": 2,
            "xml": {
              "name": "country_code"
            }
          }
        },
        "postal_code": {
          "description": "The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 60
          }
        }
      },
      "xml": {
        "name": "address_portable"
      }
    },
    "ApplePayPaymentTokenResponse": {
      "description": "A resource representing a response for Apple Pay.",
      "fields": {
        "card": {
          "description": "The payment card to use to fund a payment. Can be a credit or debit card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Card",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "card"
            }
          }
        }
      },
      "xml": {
        "name": "apple_pay_payment_token_response"
      }
    },
    "BankResponse": {
      "description": "Full representation of a Bank Payment Token.",
      "fields": {
        "ach_debit": {
          "description": "A Resource representing a response of vaulted a ACH Debit Account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AchDebitResponse2",
              "type": "named"
            }
          },
          "http": {
            "xml": {
              "name": "ach_debit_response-2"
            }
          }
        }
      },
      "xml": {
        "name": "bank_response"
      }
    },
    "Card": {
      "description": "The payment card to use to fund a payment. Can be a credit or debit card.",
      "fields": {
        "billing_address": {
          "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AddressPortable",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "address_portable"
            }
          }
        },
        "brand": {
          "description": "The card network or brand. Applies to credit, debit, gift, and payment cards.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardBrand",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_brand"
            }
          }
        },
        "card_type": {
          "description": "The card network or brand. Applies to credit, debit, gift, and payment cards.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardBrand",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_brand"
            }
          }
        },
        "expiry": {
          "description": "The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])$",
            "maxLength": 7,
            "minLength": 7,
            "xml": {
              "name": "date_year_month"
            }
          }
        },
        "id": {
          "description": "The identifier of the instrument.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Za-z0-9-_.+=]+$",
            "maxLength": 256,
            "minLength": 1,
            "xml": {
              "name": "instrument_id"
            }
          }
        },
        "last_digits": {
          "description": "The last digits of the payment card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{2,4}$",
            "maxLength": 4,
            "minLength": 2
          }
        },
        "name": {
          "description": "The card holder's name as it appears on the card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^.{1,300}$",
            "maxLength": 300,
            "minLength": 1
          }
        },
        "number": {
          "description": "The primary account number (PAN) for the payment card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{13,19}$",
            "maxLength": 19,
            "minLength": 13
          }
        },
        "security_code": {
          "description": "The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{3,4}$",
            "maxLength": 4,
            "minLength": 3
          }
        },
        "type": {
          "description": "Type of card. i.e Credit, Debit and so on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_type"
            }
          }
        }
      },
      "xml": {
        "name": "card"
      }
    },
    "CardRequestInput": {
      "description": "A Resource representing a request to vault a Card.",
      "fields": {
        "billing_address": {
          "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AddressPortableInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "address_portable"
            }
          }
        },
        "brand": {
          "description": "The card network or brand. Applies to credit, debit, gift, and payment cards.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardBrand",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_brand"
            }
          }
        },
        "card_type": {
          "description": "The card network or brand. Applies to credit, debit, gift, and payment cards.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardBrand",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_brand"
            }
          }
        },
        "experience_context": {
          "description": "Customizes the Vault creation flow experience for your customers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ExperienceContextInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "experience_context"
            }
          }
        },
        "expiry": {
          "description": "The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])$",
            "maxLength": 7,
            "minLength": 7,
            "xml": {
              "name": "date_year_month"
            }
          }
        },
        "id": {
          "description": "The identifier of the instrument.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Za-z0-9-_.+=]+$",
            "maxLength": 256,
            "minLength": 1,
            "xml": {
              "name": "instrument_id"
            }
          }
        },
        "name": {
          "description": "The card holder's name as it appears on the card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^.{1,300}$",
            "maxLength": 300,
            "minLength": 1
          }
        },
        "number": {
          "description": "The primary account number (PAN) for the payment card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{13,19}$",
            "maxLength": 19,
            "minLength": 13
          }
        },
        "security_code": {
          "description": "The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{3,4}$",
            "maxLength": 4,
            "minLength": 3
          }
        },
        "type": {
          "description": "Type of card. i.e Credit, Debit and so on.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_type"
            }
          }
        },
        "verification_method": {
          "description": "The verification method of the card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_verification_method"
            }
          }
        }
      }
    },
    "CardResponse": {
      "description": "Full representation of a Card Payment Token.",
      "fields": {
        "billing_address": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AddressEntity",
              "type": "named"
            }
          },
          "http": {
            "xml": {
              "name": "address_entity"
            }
          }
        },
        "brand": {
          "description": "The card network or brand. Applies to credit, debit, gift, and payment cards.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardBrand",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_brand"
            }
          }
        },
        "expiry": {
          "description": "The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])$",
            "maxLength": 7,
            "minLength": 7,
            "xml": {
              "name": "date_year_month"
            }
          }
        },
        "last_digits": {
          "description": "The last digits of the payment card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "[0-9]{2,}",
            "maxLength": 4,
            "minLength": 2
          }
        },
        "name": {
          "description": "The card holder's name as it appears on the card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Za-z ]+$",
            "maxLength": 300,
            "minLength": 2
          }
        },
        "verification": {
          "description": "Card Verification details including the authorization details and 3D SECURE details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardVerificationDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "card_verification_details"
            }
          }
        },
        "verification_status": {
          "description": "Verification status of Card.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "card_verification_status"
            }
          }
        }
      },
      "xml": {
        "name": "card_response"
      }
    },
    "CardVerificationDetails": {
      "description": "Card Verification details including the authorization details and 3D SECURE details.",
      "fields": {
        "amount": {
          "description": "The currency and amount for a financial transaction, such as a balance or payment due.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Money",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "money"
            }
          }
        },
        "network_transaction_id": {
          "description": "Transaction Identifier as given by the network to indicate a previously executed CIT authorization. Only present when authorization is successful for a verification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9-_@.:&+=*^'~#!$%()]+$",
            "maxLength": 1024,
            "minLength": 1
          }
        },
        "processor_response": {
          "description": "The processor information. Might be required for payment requests, such as direct credit card transactions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProcessorResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "processor_response"
            }
          }
        },
        "three_d_secure": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "3dsResult",
              "type": "named"
            }
          },
          "http": {
            "xml": {
              "name": "3ds_result"
            }
          }
        },
        "time": {
          "description": "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.Note: The regular expression provides guidance but does not reject all invalid dates.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ppaas_date_time_v3",
            "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$",
            "maxLength": 64,
            "minLength": 20,
            "xml": {
              "name": "date_time"
            }
          }
        }
      },
      "xml": {
        "name": "card_verification_details"
      }
    },
    "Customer": {
      "description": "Customer in merchant's or partner's system of records.",
      "fields": {
        "id": {
          "description": "The unique ID for a customer generated by PayPal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9a-zA-Z_-]+$",
            "maxLength": 22,
            "minLength": 1,
            "xml": {
              "name": "merchant_partner_customer_id"
            }
          }
        }
      },
      "xml": {
        "name": "customer"
      }
    },
    "CustomerInput": {
      "description": "Customer in merchant's or partner's system of records.",
      "fields": {
        "id": {
          "description": "The unique ID for a customer generated by PayPal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9a-zA-Z_-]+$",
            "maxLength": 22,
            "minLength": 1,
            "xml": {
              "name": "merchant_partner_customer_id"
            }
          }
        }
      },
      "xml": {
        "name": "customer"
      }
    },
    "CustomerVaultPaymentTokensResponse": {
      "description": "Collection of payment tokens saved for a given customer.",
      "fields": {
        "customer": {
          "description": "Customer in merchant's or partner's system of records.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Customer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "customer"
            }
          }
        },
        "links": {
          "description": "An array of related [HATEOAS links](/api/rest/responses/#hateoas).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "LinkDescription",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "link_description"
              }
            }
          }
        },
        "payment_tokens": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PaymentTokenResponse",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "payment_token_response"
              }
            }
          }
        },
        "total_items": {
          "description": "Total number of items.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 50,
            "minimum": 1
          }
        },
        "total_pages": {
          "description": "Total number of pages.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 10,
            "minimum": 1
          }
        }
      },
      "xml": {
        "name": "customer_vault_payment_tokens_response"
      }
    },
    "ExperienceContextInput": {
      "description": "Customizes the Vault creation flow experience for your customers.",
      "fields": {
        "brand_name": {
          "description": "The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^.*$",
            "maxLength": 300,
            "minLength": 1
          }
        },
        "cancel_url": {
          "description": "The URL where the customer is redirected after customer cancels or leaves the flow. It is a required field for contingency flows like PayPal wallet, 3DS.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri",
            "maxLength": 4000,
            "minLength": 1
          }
        },
        "locale": {
          "description": "The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ppaas_common_language_v3",
            "pattern": "^[a-z]{2}(?:-[A-Z][a-z]{3})?(?:-(?:[A-Z]{2}|[0-9]{3}))?$",
            "maxLength": 10,
            "minLength": 2,
            "xml": {
              "name": "language"
            }
          }
        },
        "return_url": {
          "description": "The URL where the customer is redirected after customer approves leaves the flow. It is a required field for contingency flows like PayPal wallet, 3DS.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri",
            "maxLength": 4000,
            "minLength": 1
          }
        },
        "shipping_preference": {
          "description": "The shipping preference. This only applies to PayPal payment source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "vault_instruction": {
          "description": "Vault Instruction on action to be performed after a successful payer approval.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "vault_instruction"
            }
          }
        }
      },
      "xml": {
        "name": "experience_context"
      }
    },
    "LinkDescription": {
      "description": "The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.",
      "fields": {
        "href": {
          "description": "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "method": {
          "description": "The HTTP method required to make the related call.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkDescriptionMethod",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rel": {
          "description": "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "xml": {
        "name": "link_description"
      }
    },
    "Money": {
      "description": "The currency and amount for a financial transaction, such as a balance or payment due.",
      "fields": {
        "currency_code": {
          "description": "The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ppaas_common_currency_code_v2",
            "maxLength": 3,
            "minLength": 3,
            "xml": {
              "name": "currency_code"
            }
          }
        },
        "value": {
          "description": "The value, which might be:An integer for currencies like `JPY` that are not typically fractional.A decimal fraction for currencies like `TND` that are subdivided into thousandths.For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$",
            "maxLength": 32
          }
        }
      },
      "xml": {
        "name": "money"
      }
    },
    "Name": {
      "description": "The name of the party.",
      "fields": {
        "alternate_full_name": {
          "description": "DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "full_name": {
          "description": "When the party is a person, the party's full name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "given_name": {
          "description": "When the party is a person, the party's given, or first, name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "middle_name": {
          "description": "When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "prefix": {
          "description": "The prefix, or title, to the party's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "suffix": {
          "description": "The suffix for the party's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "surname": {
          "description": "When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        }
      },
      "xml": {
        "name": "name"
      }
    },
    "NameInput": {
      "description": "The name of the party.",
      "fields": {
        "alternate_full_name": {
          "description": "DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "full_name": {
          "description": "When the party is a person, the party's full name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 300
          }
        },
        "given_name": {
          "description": "When the party is a person, the party's given, or first, name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "middle_name": {
          "description": "When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "prefix": {
          "description": "The prefix, or title, to the party's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "suffix": {
          "description": "The suffix for the party's name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        },
        "surname": {
          "description": "When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 140
          }
        }
      },
      "xml": {
        "name": "name"
      }
    },
    "PaymentTokenRequestInput": {
      "description": "Payment Token Request where the `source` defines the type of instrument to be stored.",
      "fields": {
        "customer": {
          "description": "Customer in merchant's or partner's system of records.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomerInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "customer"
            }
          }
        },
        "metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "xml": {
              "name": "metadata"
            }
          }
        },
        "payment_source": {
          "description": "The payment method to vault with the instrument details.",
          "type": {
            "name": "PaymentTokenRequestPaymentSourceInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "xml": {
        "name": "payment_token_request"
      }
    },
    "PaymentTokenRequestPaymentSourceInput": {
      "description": "The payment method to vault with the instrument details.",
      "fields": {
        "card": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardRequestInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "card_request"
            }
          }
        },
        "token": {
          "description": "The Tokenized Payment Source representing a Request to Vault a Token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenIdRequestInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "token_id_request"
            }
          }
        }
      },
      "xml": {
        "name": "payment_token_request"
      }
    },
    "PaymentTokenResponse": {
      "description": "Full representation of a saved payment token.",
      "fields": {
        "customer": {
          "description": "Customer in merchant's or partner's system of records.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Customer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "customer"
            }
          }
        },
        "id": {
          "description": "The PayPal-generated ID for the vault token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9a-zA-Z_-]+$",
            "maxLength": 36,
            "minLength": 1,
            "xml": {
              "name": "vault_id"
            }
          }
        },
        "links": {
          "description": "An array of related [HATEOAS links](/api/rest/responses/#hateoas).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "LinkDescription",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "link_description"
              }
            }
          }
        },
        "payment_source": {
          "description": "The vaulted payment method details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PaymentTokenResponsePaymentSource",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "xml": {
        "name": "payment_token_response"
      }
    },
    "PaymentTokenResponsePaymentSource": {
      "description": "The vaulted payment method details.",
      "fields": {
        "apple_pay": {
          "description": "A resource representing a response for Apple Pay.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplePayPaymentTokenResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "apple_pay_payment_token_response"
            }
          }
        },
        "bank": {
          "description": "Full representation of a Bank Payment Token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BankResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "bank_response"
            }
          }
        },
        "card": {
          "description": "Full representation of a Card Payment Token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "card_response"
            }
          }
        },
        "paypal": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PaypalWalletResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "paypal_wallet_response"
            }
          }
        },
        "venmo": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VenmoResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "venmo_response"
            }
          }
        }
      },
      "xml": {
        "name": "payment_token_response"
      }
    },
    "PaypalWalletRequestInput": {
      "description": "A resource representing a request to vault PayPal Wallet.",
      "fields": {
        "customer_type": {
          "description": "The customer type associated with a digital wallet payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "description": {
          "description": "The description displayed to the consumer on the approval flow for a digital wallet, as well as on the merchant view of the payment token management experience. exp: PayPal.com.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9_'\\-., :;\\!?\"]*$",
            "maxLength": 128,
            "minLength": 1
          }
        },
        "experience_context": {
          "description": "Customizes the Vault creation flow experience for your customers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ExperienceContextInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "experience_context"
            }
          }
        },
        "permit_multiple_payment_tokens": {
          "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "shipping": {
          "description": "The shipping details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ShippingDetailInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "shipping_detail"
            }
          }
        },
        "usage_type": {
          "description": "The usage type associated with a digital wallet payment token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        }
      }
    },
    "PaypalWalletResponse": {
      "description": "Full representation of a PayPal Payment Token.",
      "fields": {
        "account_id": {
          "description": "The account identifier for a PayPal account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "ppaas_payer_id_v3",
            "pattern": "^[2-9A-HJ-NP-Z]{13}$",
            "maxLength": 13,
            "minLength": 13,
            "xml": {
              "name": "account_id"
            }
          }
        },
        "customer_type": {
          "description": "The customer type associated with a digital wallet payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "description": {
          "description": "The description displayed to the consumer on the approval flow for a digital wallet, as well as on the merchant view of the payment token management experience. exp: PayPal.com.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9_'\\-., :;\\!?\"]*$",
            "maxLength": 128,
            "minLength": 1
          }
        },
        "permit_multiple_payment_tokens": {
          "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "phone_number": {
          "description": "The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Phone",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "phone"
            }
          }
        },
        "shipping": {
          "description": "The shipping details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ShippingDetail",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "shipping_detail"
            }
          }
        },
        "usage_type": {
          "description": "The usage type associated with a digital wallet payment token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        }
      }
    },
    "Phone": {
      "description": "The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).",
      "fields": {
        "country_code": {
          "description": "The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{1,3}?$",
            "maxLength": 3,
            "minLength": 1
          }
        },
        "extension_number": {
          "description": "The extension number.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{1,15}?$",
            "maxLength": 15,
            "minLength": 1
          }
        },
        "national_number": {
          "description": "The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9]{1,14}?$",
            "maxLength": 14,
            "minLength": 1
          }
        }
      },
      "xml": {
        "name": "phone"
      }
    },
    "ProcessorResponse": {
      "description": "The processor information. Might be required for payment requests, such as direct credit card transactions.",
      "fields": {
        "avs_code": {
          "description": "The address verification code for Visa, Discover, Mastercard, or American Express transactions.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProcessorResponseAvsCode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "cvv_code": {
          "description": "The card verification value code for for Visa, Discover, Mastercard, or American Express.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProcessorResponseCvvCode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "payment_advice_code": {
          "description": "The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProcessorResponsePaymentAdviceCode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "response_code": {
          "description": "Processor response code for the non-PayPal payment processor errors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProcessorResponseResponseCode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "xml": {
        "name": "processor_response"
      }
    },
    "SetupTokenRequestInput": {
      "description": "Setup Token Request where the `source` defines the type of instrument to be stored.",
      "fields": {
        "customer": {
          "description": "Customer in merchant's or partner's system of records.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomerInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "customer"
            }
          }
        },
        "metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Metadata",
              "type": "named"
            }
          },
          "http": {
            "xml": {
              "name": "metadata"
            }
          }
        },
        "payment_source": {
          "description": "The payment method to vault with the instrument details.",
          "type": {
            "name": "SetupTokenRequestPaymentSourceInput",
            "type": "named"
          },
          "http": {}
        }
      },
      "xml": {
        "name": "setup_token_request"
      }
    },
    "SetupTokenRequestPaymentSourceInput": {
      "description": "The payment method to vault with the instrument details.",
      "fields": {
        "card": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardRequestInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "card_request"
            }
          }
        },
        "paypal": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PaypalWalletRequestInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "paypal_wallet_request"
            }
          }
        },
        "token": {
          "description": "The Tokenized Payment Source representing a Request to Vault a Token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenIdRequestInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "token_id_request"
            }
          }
        },
        "venmo": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VenmoRequestInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "venmo_request"
            }
          }
        }
      },
      "xml": {
        "name": "setup_token_request"
      }
    },
    "SetupTokenResponse": {
      "description": "Minimal representation of a cached setup token.",
      "fields": {
        "customer": {
          "description": "Customer in merchant's or partner's system of records.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Customer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "customer"
            }
          }
        },
        "id": {
          "description": "The PayPal-generated ID for the vault token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9a-zA-Z_-]+$",
            "maxLength": 36,
            "minLength": 1,
            "xml": {
              "name": "vault_id"
            }
          }
        },
        "links": {
          "description": "An array of related [HATEOAS links](/api/rest/responses/#hateoas).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "LinkDescription",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "link_description"
              }
            }
          }
        },
        "ordinal": {
          "description": "Ordinal number for sorting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 99,
            "minimum": 1,
            "xml": {
              "name": "ordinal"
            }
          }
        },
        "payment_source": {
          "description": "The setup payment method details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SetupTokenResponsePaymentSource",
              "type": "named"
            }
          },
          "http": {}
        },
        "status": {
          "description": "The status of the payment token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1,
            "xml": {
              "name": "payment_token_status"
            }
          }
        }
      },
      "xml": {
        "name": "setup_token_response"
      }
    },
    "SetupTokenResponsePaymentSource": {
      "description": "The setup payment method details.",
      "fields": {
        "card": {
          "description": "Full representation of a Card Payment Token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CardResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "card_response"
            }
          }
        },
        "paypal": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PaypalWalletResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "paypal_wallet_response"
            }
          }
        },
        "venmo": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "VenmoResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "venmo_response"
            }
          }
        }
      },
      "xml": {
        "name": "setup_token_response"
      }
    },
    "ShippingDetail": {
      "description": "The shipping details.",
      "fields": {
        "address": {
          "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AddressPortable",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "address_portable"
            }
          }
        },
        "name": {
          "description": "The name of the party.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Name",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "name"
            }
          }
        },
        "type": {
          "description": "The method by which the payer wants to get their items from the payee e.g shipping, in-person pickup. Either type or options but not both may be present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ShippingDetailType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "xml": {
        "name": "shipping_detail"
      }
    },
    "ShippingDetailInput": {
      "description": "The shipping details.",
      "fields": {
        "address": {
          "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AddressPortableInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "address_portable"
            }
          }
        },
        "name": {
          "description": "The name of the party.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "NameInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "name"
            }
          }
        },
        "type": {
          "description": "The method by which the payer wants to get their items from the payee e.g shipping, in-person pickup. Either type or options but not both may be present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ShippingDetailType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "xml": {
        "name": "shipping_detail"
      }
    },
    "TokenIdRequestInput": {
      "description": "The Tokenized Payment Source representing a Request to Vault a Token.",
      "fields": {
        "attributes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenAttributes",
              "type": "named"
            }
          },
          "http": {
            "xml": {
              "name": "token_attributes"
            }
          }
        },
        "id": {
          "description": "The PayPal-generated ID for the token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_-]+$",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "type": {
          "description": "The tokenization method that generated the ID.",
          "type": {
            "name": "TokenIdRequestType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_-]+$",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "xml": {
        "name": "token_id_request"
      }
    },
    "VenmoRequestInput": {
      "description": "A resource representing a request to vault Venmo.",
      "fields": {
        "customer_type": {
          "description": "The customer type associated with a digital wallet payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "description": {
          "description": "The description displayed to the consumer on the approval flow for a digital wallet, as well as on the merchant view of the payment token management experience. exp: PayPal.com.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9_'\\-., :;\\!?\"]*$",
            "maxLength": 128,
            "minLength": 1
          }
        },
        "experience_context": {
          "description": "Customizes the Vault creation flow experience for your customers.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ExperienceContextInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "experience_context"
            }
          }
        },
        "permit_multiple_payment_tokens": {
          "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "shipping": {
          "description": "The shipping details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ShippingDetailInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "shipping_detail"
            }
          }
        },
        "usage_type": {
          "description": "The usage type associated with a digital wallet payment token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        }
      }
    },
    "VenmoResponse": {
      "description": "Full representation of a Venmo Payment Token.",
      "fields": {
        "customer_type": {
          "description": "The customer type associated with a digital wallet payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "description": {
          "description": "The description displayed to the consumer on the approval flow for a digital wallet, as well as on the merchant view of the payment token management experience. exp: PayPal.com.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9_'\\-., :;\\!?\"]*$",
            "maxLength": 128,
            "minLength": 1
          }
        },
        "permit_multiple_payment_tokens": {
          "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "shipping": {
          "description": "The shipping details.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ShippingDetail",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "xml": {
              "name": "shipping_detail"
            }
          }
        },
        "usage_type": {
          "description": "The usage type associated with a digital wallet payment token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[0-9A-Z_]+$",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "user_name": {
          "description": "The Venmo username, as chosen by the user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[-a-zA-Z0-9_]*$",
            "maxLength": 50,
            "minLength": 1
          }
        }
      }
    }
  },
  "procedures": {
    "payment_tokens_create": {
      "request": {
        "url": "/v3/vault/payment-tokens",
        "method": "post",
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/vault/payment-tokens/readwrite"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "PayPal-Request-Id": {
          "description": "The server stores keys for 3 hours.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "PayPal-Request-Id",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Payment Token Request where the `source` defines the type of instrument to be stored.",
          "type": {
            "name": "PaymentTokenRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "payment_token_request"
              }
            }
          }
        }
      },
      "description": "Create payment token for a given payment source",
      "result_type": {
        "name": "PaymentTokenResponse",
        "type": "named"
      }
    },
    "payment_tokens_delete": {
      "request": {
        "url": "/v3/vault/payment-tokens/{id}",
        "method": "delete",
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/vault/payment-tokens/readwrite"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID of the setup token.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^[0-9a-zA-Z_-]+$",
              "maxLength": 36,
              "minLength": 7
            }
          }
        }
      },
      "description": "Delete payment token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "setup_tokens_create": {
      "request": {
        "url": "/v3/vault/setup-tokens",
        "method": "post",
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/vault/payment-tokens/read"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "PayPal-Request-Id": {
          "description": "The server stores keys for 3 hours.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "PayPal-Request-Id",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Setup Token Request where the `source` defines the type of instrument to be stored.",
          "type": {
            "name": "SetupTokenRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ],
              "xml": {
                "name": "setup_token_request"
              }
            }
          }
        }
      },
      "description": "Create a setup token",
      "result_type": {
        "name": "SetupTokenResponse",
        "type": "named"
      }
    }
  },
  "scalar_types": {
    "3dsResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "AddressEntity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "CardBrand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "VISA",
          "MASTERCARD",
          "DISCOVER",
          "AMEX",
          "SOLO",
          "JCB",
          "STAR",
          "DELTA",
          "SWITCH",
          "MAESTRO",
          "CB_NATIONALE",
          "CONFIGOGA",
          "CONFIDIS",
          "ELECTRON",
          "CETELEM",
          "CHINA_UNION_PAY"
        ],
        "type": "enum"
      }
    },
    "CardType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CREDIT",
          "DEBIT",
          "PREPAID",
          "STORE",
          "UNKNOWN"
        ],
        "type": "enum"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "LinkDescriptionMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "HEAD",
          "CONNECT",
          "OPTIONS",
          "PATCH"
        ],
        "type": "enum"
      }
    },
    "Metadata": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "ProcessorResponseAvsCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "I",
          "M",
          "N",
          "P",
          "R",
          "S",
          "U",
          "W",
          "X",
          "Y",
          "Z",
          "Null",
          "0",
          "1",
          "2",
          "3",
          "4"
        ],
        "type": "enum"
      }
    },
    "ProcessorResponseCvvCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "E",
          "I",
          "M",
          "N",
          "P",
          "S",
          "U",
          "X",
          "All others",
          "0",
          "1",
          "2",
          "3",
          "4"
        ],
        "type": "enum"
      }
    },
    "ProcessorResponsePaymentAdviceCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "01",
          "02",
          "03",
          "21"
        ],
        "type": "enum"
      }
    },
    "ProcessorResponseResponseCode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "0000",
          "00N7",
          "0100",
          "0390",
          "0500",
          "0580",
          "0800",
          "0880",
          "0R00",
          "1000",
          "10BR",
          "1300",
          "1310",
          "1312",
          "1317",
          "1320",
          "1330",
          "1335",
          "1340",
          "1350",
          "1360",
          "1370",
          "1380",
          "1382",
          "1384",
          "1390",
          "1393",
          "5100",
          "5110",
          "5120",
          "5130",
          "5135",
          "5140",
          "5150",
          "5160",
          "5170",
          "5180",
          "5190",
          "5200",
          "5210",
          "5400",
          "5500",
          "5650",
          "5700",
          "5710",
          "5800",
          "5900",
          "5910",
          "5920",
          "5930",
          "6300",
          "7600",
          "7700",
          "7710",
          "7800",
          "7900",
          "8000",
          "8010",
          "8020",
          "8030",
          "8100",
          "8110",
          "8220",
          "9100",
          "9500",
          "9510",
          "9520",
          "9530",
          "9540",
          "9600",
          "PCNR",
          "PCVV",
          "PPAD",
          "PPAE",
          "PPAG",
          "PPAI",
          "PPAR",
          "PPAU",
          "PPAV",
          "PPAX",
          "PPBG",
          "PPC2",
          "PPCE",
          "PPCO",
          "PPCR",
          "PPCT",
          "PPCU",
          "PPD3",
          "PPDC",
          "PPDI",
          "PPDV",
          "PPEF",
          "PPEL",
          "PPER",
          "PPEX",
          "PPFE",
          "PPFI",
          "PPFR",
          "PPFV",
          "PPGR",
          "PPH1",
          "PPIF",
          "PPII",
          "PPIM",
          "PPIT",
          "PPLR",
          "PPLS",
          "PPMB",
          "PPMC",
          "PPMD",
          "PPNC",
          "PPNL",
          "PPNT",
          "PPPH",
          "PPPI",
          "PPPM",
          "PPQC",
          "PPRE",
          "PPRF",
          "PPRR",
          "PPS0",
          "PPS1",
          "PPS2",
          "PPS3",
          "PPS4",
          "PPS5",
          "PPS6",
          "PPSC",
          "PPSD",
          "PPSE",
          "PPTE",
          "PPTF",
          "PPTI",
          "PPTR",
          "PPTT",
          "PPTV",
          "PPUA",
          "PPUC",
          "PPUE",
          "PPUI",
          "PPUP",
          "PPUR",
          "PPVC",
          "PPVE",
          "PPVT"
        ],
        "type": "enum"
      }
    },
    "ShippingDetailType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SHIPPING",
          "PICKUP_IN_PERSON"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TokenAttributes": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "TokenIdRequestType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BILLING_AGREEMENT"
        ],
        "type": "enum"
      }
    },
    "URI": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    }
  }
}
