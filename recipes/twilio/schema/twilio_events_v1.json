{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "value": "https://events.twilio.com",
          "env": "TWILIO_EVENTS_SERVER_URL"
        }
      }
    ],
    "securitySchemes": {
      "accountSid_authToken": {
        "type": "basic",
        "header": "",
        "username": {
          "env": "TWILIO_ACCOUNT_SID"
        },
        "password": {
          "env": "TWILIO_AUTH_TOKEN"
        }
      }
    },
    "security": [
      {
        "accountSid_authToken": []
      }
    ],
    "version": "1.0.0"
  },
  "functions": {
    "eventsFetchEventType": {
      "request": {
        "url": "/v1/Types/{Type}",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Type": {
          "description": "A string that uniquely identifies this Event Type.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Fetch a specific Event Type.",
      "result_type": {
        "name": "EventsEventsV1EventType",
        "type": "named"
      }
    },
    "eventsFetchSchema": {
      "request": {
        "url": "/v1/Schemas/{Id}",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Id": {
          "description": "The unique identifier of the schema. Each schema can have multiple versions, that share the same id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Fetch a specific schema with its nested versions.",
      "result_type": {
        "name": "EventsEventsV1Schema",
        "type": "named"
      }
    },
    "eventsFetchSchemaVersion": {
      "request": {
        "url": "/v1/Schemas/{Id}/Versions/{SchemaVersion}",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Id": {
          "description": "The unique identifier of the schema. Each schema can have multiple versions, that share the same id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "SchemaVersion": {
          "description": "The version of the schema",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "SchemaVersion",
            "in": "path",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Fetch a specific schema and version.",
      "result_type": {
        "name": "EventsEventsV1SchemaSchemaVersion",
        "type": "named"
      }
    },
    "eventsFetchSink": {
      "request": {
        "url": "/v1/Sinks/{Sid}",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies this Sink.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DG[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        }
      },
      "description": "Fetch a specific Sink.",
      "result_type": {
        "name": "EventsEventsV1Sink",
        "type": "named"
      }
    },
    "eventsFetchSubscribedEvent": {
      "request": {
        "url": "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "SubscriptionSid": {
          "description": "The unique SID identifier of the Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "SubscriptionSid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        },
        "Type": {
          "description": "Type of event being subscribed to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Read an Event for a Subscription.",
      "result_type": {
        "name": "EventsEventsV1SubscriptionSubscribedEvent",
        "type": "named"
      }
    },
    "eventsFetchSubscription": {
      "request": {
        "url": "/v1/Subscriptions/{Sid}",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies this Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        }
      },
      "description": "Fetch a specific Subscription.",
      "result_type": {
        "name": "EventsEventsV1Subscription",
        "type": "named"
      }
    },
    "eventsListEventType": {
      "request": {
        "url": "/v1/Types",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Page": {
          "description": "The page index. This value is simply for client state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "PageSize": {
          "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 1000,
              "minimum": 1
            }
          }
        },
        "PageToken": {
          "description": "The page token. This is provided by the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "PageToken",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "SchemaId": {
          "description": "A string parameter filtering the results to return only the Event Types using a given schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "SchemaId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a paginated list of all the available Event Types.",
      "result_type": {
        "name": "EventsListEventTypeResult",
        "type": "named"
      }
    },
    "eventsListSchemaVersion": {
      "request": {
        "url": "/v1/Schemas/{Id}/Versions",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Id": {
          "description": "The unique identifier of the schema. Each schema can have multiple versions, that share the same id.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "Page": {
          "description": "The page index. This value is simply for client state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "PageSize": {
          "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 1000,
              "minimum": 1
            }
          }
        },
        "PageToken": {
          "description": "The page token. This is provided by the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "PageToken",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a paginated list of versions of the schema.",
      "result_type": {
        "name": "EventsListSchemaVersionResult",
        "type": "named"
      }
    },
    "eventsListSink": {
      "request": {
        "url": "/v1/Sinks",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "InUse": {
          "description": "A boolean query parameter filtering the results to return sinks used/not used by a subscription.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "InUse",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "Page": {
          "description": "The page index. This value is simply for client state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "PageSize": {
          "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 1000,
              "minimum": 1
            }
          }
        },
        "PageToken": {
          "description": "The page token. This is provided by the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "PageToken",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "Status": {
          "description": "A String query parameter filtering the results by status `initialized`, `validating`, `active` or `failed`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Status",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a paginated list of Sinks belonging to the account used to make the request.",
      "result_type": {
        "name": "EventsListSinkResult",
        "type": "named"
      }
    },
    "eventsListSubscribedEvent": {
      "request": {
        "url": "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Page": {
          "description": "The page index. This value is simply for client state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "PageSize": {
          "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 1000,
              "minimum": 1
            }
          }
        },
        "PageToken": {
          "description": "The page token. This is provided by the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "PageToken",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "SubscriptionSid": {
          "description": "The unique SID identifier of the Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "SubscriptionSid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        }
      },
      "description": "Retrieve a list of all Subscribed Event types for a Subscription.",
      "result_type": {
        "name": "EventsListSubscribedEventResult",
        "type": "named"
      }
    },
    "eventsListSubscription": {
      "request": {
        "url": "/v1/Subscriptions",
        "method": "get",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Page": {
          "description": "The page index. This value is simply for client state.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "minimum": 0
            }
          }
        },
        "PageSize": {
          "description": "How many resources to return in each list page. The default is 50, and the maximum is 1000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 1000,
              "minimum": 1
            }
          }
        },
        "PageToken": {
          "description": "The page token. This is provided by the API.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "PageToken",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "SinkSid": {
          "description": "The SID of the sink that the list of Subscriptions should be filtered by.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "SinkSid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DG[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        }
      },
      "description": "Retrieve a paginated list of Subscriptions belonging to the account used to make the request.",
      "result_type": {
        "name": "EventsListSubscriptionResult",
        "type": "named"
      }
    }
  },
  "object_types": {
    "EventsCreateSinkBody": {
      "fields": {
        "Description": {
          "description": "A human readable description for the Sink **This value should not contain PII.**",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "SinkConfiguration": {
          "description": "The information required for Twilio to connect to the provided Sink encoded as JSON.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": null
          }
        },
        "SinkType": {
          "type": {
            "name": "EventsSinkEnumSinkType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventsCreateSinkValidateBody": {
      "fields": {
        "TestId": {
          "description": "A 34 character string that uniquely identifies the test event for a Sink being validated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventsCreateSubscribedEventBody": {
      "fields": {
        "SchemaVersion": {
          "description": "The schema version that the Subscription should use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "Type": {
          "description": "Type of event being subscribed to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventsCreateSubscriptionBody": {
      "fields": {
        "Description": {
          "description": "A human readable description for the Subscription **This value should not contain PII.**",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "SinkSid": {
          "description": "The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^DG[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        },
        "Types": {
          "description": "An array of objects containing the subscribed Event Types",
          "type": {
            "element_type": {
              "name": "JSON",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": null
            }
          }
        }
      }
    },
    "EventsEventsV1EventType": {
      "fields": {
        "date_created": {
          "description": "The date that this Event Type was created, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "date_updated": {
          "description": "The date that this Event Type was updated, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A human readable description for this Event Type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "documentation_url": {
          "description": "The URL to the documentation or to the most relevant Twilio Changelog entry of this Event Type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "format": "uri-map"
          }
        },
        "schema_id": {
          "description": "A string that uniquely identifies the Schema this Event Type adheres to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "A string that describes how this Event Type can be used. For example: `available`, `deprecated`, `restricted`, `discontinued`. When the status is `available`, the Event Type can be used normally.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "A string that uniquely identifies this Event Type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL of this resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsEventsV1Schema": {
      "fields": {
        "id": {
          "description": "The unique identifier of the schema. Each schema can have multiple versions, that share the same id.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "latest_version": {
          "description": "The latest version published of this schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "latest_version_date_created": {
          "description": "The date that the latest schema version was created, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "links": {
          "description": "Contains a dictionary of URL links to nested resources of this schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "format": "uri-map"
          }
        },
        "url": {
          "description": "The URL of this resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsEventsV1SchemaSchemaVersion": {
      "fields": {
        "date_created": {
          "description": "The date the schema version was created, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "The unique identifier of the schema. Each schema can have multiple versions, that share the same id.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "raw": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "schema_version": {
          "description": "The version of this schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "url": {
          "description": "The URL of this resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsEventsV1Sink": {
      "fields": {
        "date_created": {
          "description": "The date that this Sink was created, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "date_updated": {
          "description": "The date that this Sink was updated, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A human readable description for the Sink",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "links": {
          "description": "Contains a dictionary of URL links to nested resources of this Sink.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "format": "uri-map"
          }
        },
        "sid": {
          "description": "A 34 character string that uniquely identifies this Sink.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^DG[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        },
        "sink_configuration": {
          "description": "The information required for Twilio to connect to the provided Sink encoded as JSON.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": null
          }
        },
        "sink_type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsSinkEnumSinkType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsSinkEnumStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL of this resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsEventsV1SinkSinkTest": {
      "fields": {
        "result": {
          "description": "Feedback indicating whether the test event was generated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventsEventsV1SinkSinkValidate": {
      "fields": {
        "result": {
          "description": "Feedback indicating whether the given Sink was validated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventsEventsV1Subscription": {
      "fields": {
        "account_sid": {
          "description": "The unique SID identifier of the Account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^AC[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        },
        "date_created": {
          "description": "The date that this Subscription was created, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "date_updated": {
          "description": "The date that this Subscription was updated, given in ISO 8601 format.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "A human readable description for the Subscription",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "links": {
          "description": "Contains a dictionary of URL links to nested resources of this Subscription.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ],
            "format": "uri-map"
          }
        },
        "sid": {
          "description": "A 34 character string that uniquely identifies this Subscription.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^DF[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        },
        "sink_sid": {
          "description": "The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^DG[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        },
        "url": {
          "description": "The URL of this resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsEventsV1SubscriptionSubscribedEvent": {
      "fields": {
        "account_sid": {
          "description": "The unique SID identifier of the Account.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^AC[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        },
        "schema_version": {
          "description": "The schema version that the Subscription should use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "subscription_sid": {
          "description": "The unique SID identifier of the Subscription.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^DF[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        },
        "type": {
          "description": "Type of event being subscribed to.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "description": "The URL of this resource.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsListEventTypeResult": {
      "fields": {
        "meta": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsListEventTypeResultMeta",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "types": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventsEventsV1EventType",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "EventsListEventTypeResultMeta": {
      "fields": {
        "first_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "next_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "page": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "previous_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsListSchemaVersionResult": {
      "fields": {
        "meta": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsListSchemaVersionResultMeta",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "schema_versions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventsEventsV1SchemaSchemaVersion",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "EventsListSchemaVersionResultMeta": {
      "fields": {
        "first_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "next_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "page": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "previous_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsListSinkResult": {
      "fields": {
        "meta": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsListSinkResultMeta",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sinks": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventsEventsV1Sink",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "EventsListSinkResultMeta": {
      "fields": {
        "first_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "next_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "page": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "previous_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsListSubscribedEventResult": {
      "fields": {
        "meta": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsListSubscribedEventResultMeta",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "types": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventsEventsV1SubscriptionSubscribedEvent",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "EventsListSubscribedEventResultMeta": {
      "fields": {
        "first_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "next_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "page": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "previous_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsListSubscriptionResult": {
      "fields": {
        "meta": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsListSubscriptionResultMeta",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subscriptions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventsEventsV1Subscription",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ]
          }
        }
      }
    },
    "EventsListSubscriptionResultMeta": {
      "fields": {
        "first_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "key": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "next_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "page": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "page_size": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "previous_page_url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "EventsUpdateSinkBody": {
      "fields": {
        "Description": {
          "description": "A human readable description for the Sink **This value should not contain PII.**",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventsUpdateSubscribedEventBody": {
      "fields": {
        "SchemaVersion": {
          "description": "The schema version that the Subscription should use.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "EventsUpdateSubscriptionBody": {
      "fields": {
        "Description": {
          "description": "A human readable description for the Subscription.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "SinkSid": {
          "description": "The SID of the sink that events selected by this subscription should be sent to. Sink must be active for the subscription to be created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^DG[0-9a-fA-F]{32}$",
            "maxLength": 34,
            "minLength": 34
          }
        }
      }
    }
  },
  "procedures": {
    "eventsCreateSink": {
      "request": {
        "url": "/v1/Sinks",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /v1/Sinks",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsCreateSinkBody",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create a new Sink",
      "result_type": {
        "name": "EventsEventsV1Sink",
        "type": "named"
      }
    },
    "eventsCreateSinkTest": {
      "request": {
        "url": "/v1/Sinks/{Sid}/Test",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies the Sink to be Tested.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DG[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        }
      },
      "description": "Create a new Sink Test Event for the given Sink.",
      "result_type": {
        "name": "EventsEventsV1SinkSinkTest",
        "type": "named"
      }
    },
    "eventsCreateSinkValidate": {
      "request": {
        "url": "/v1/Sinks/{Sid}/Validate",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies the Sink being validated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DG[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        },
        "body": {
          "description": "Request body of POST /v1/Sinks/{Sid}/Validate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsCreateSinkValidateBody",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Validate that a test event for a Sink was received.",
      "result_type": {
        "name": "EventsEventsV1SinkSinkValidate",
        "type": "named"
      }
    },
    "eventsCreateSubscribedEvent": {
      "request": {
        "url": "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "SubscriptionSid": {
          "description": "The unique SID identifier of the Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "SubscriptionSid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        },
        "body": {
          "description": "Request body of POST /v1/Subscriptions/{SubscriptionSid}/SubscribedEvents",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsCreateSubscribedEventBody",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Add an event type to a Subscription.",
      "result_type": {
        "name": "EventsEventsV1SubscriptionSubscribedEvent",
        "type": "named"
      }
    },
    "eventsCreateSubscription": {
      "request": {
        "url": "/v1/Subscriptions",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /v1/Subscriptions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsCreateSubscriptionBody",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Create a new Subscription.",
      "result_type": {
        "name": "EventsEventsV1Subscription",
        "type": "named"
      }
    },
    "eventsDeleteSink": {
      "request": {
        "url": "/v1/Sinks/{Sid}",
        "method": "delete",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies this Sink.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DG[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        }
      },
      "description": "Delete a specific Sink.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "eventsDeleteSubscribedEvent": {
      "request": {
        "url": "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}",
        "method": "delete",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "SubscriptionSid": {
          "description": "The unique SID identifier of the Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "SubscriptionSid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        },
        "Type": {
          "description": "Type of event being subscribed to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Remove an event type from a Subscription.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "eventsDeleteSubscription": {
      "request": {
        "url": "/v1/Subscriptions/{Sid}",
        "method": "delete",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies this Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        }
      },
      "description": "Delete a specific Subscription.",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "eventsUpdateSink": {
      "request": {
        "url": "/v1/Sinks/{Sid}",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies this Sink.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DG[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        },
        "body": {
          "description": "Request body of POST /v1/Sinks/{Sid}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsUpdateSinkBody",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Update a specific Sink",
      "result_type": {
        "name": "EventsEventsV1Sink",
        "type": "named"
      }
    },
    "eventsUpdateSubscribedEvent": {
      "request": {
        "url": "/v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "SubscriptionSid": {
          "description": "The unique SID identifier of the Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "SubscriptionSid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        },
        "Type": {
          "description": "Type of event being subscribed to.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Type",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /v1/Subscriptions/{SubscriptionSid}/SubscribedEvents/{Type}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsUpdateSubscribedEventBody",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Update an Event for a Subscription.",
      "result_type": {
        "name": "EventsEventsV1SubscriptionSubscribedEvent",
        "type": "named"
      }
    },
    "eventsUpdateSubscription": {
      "request": {
        "url": "/v1/Subscriptions/{Sid}",
        "method": "post",
        "security": [
          {
            "accountSid_authToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/x-www-form-urlencoded"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Sid": {
          "description": "A 34 character string that uniquely identifies this Subscription.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "Sid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ],
              "pattern": "^DF[0-9a-fA-F]{32}$",
              "maxLength": 34,
              "minLength": 34
            }
          }
        },
        "body": {
          "description": "Request body of POST /v1/Subscriptions/{Sid}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventsUpdateSubscriptionBody",
              "type": "named"
            }
          },
          "http": {
            "in": "body"
          }
        }
      },
      "description": "Update a Subscription.",
      "result_type": {
        "name": "EventsEventsV1Subscription",
        "type": "named"
      }
    }
  },
  "scalar_types": {
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "EventsSinkEnumSinkType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "kinesis",
          "webhook",
          "segment"
        ],
        "type": "enum"
      }
    },
    "EventsSinkEnumStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "initialized",
          "validating",
          "active",
          "failed"
        ],
        "type": "enum"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "TimestampTZ": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "timestamptz"
      }
    },
    "URI": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    }
  }
}
