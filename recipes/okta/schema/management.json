{
  "$schema": "https://raw.githubusercontent.com/hasura/ndc-http/refs/heads/main/ndc-http-schema/jsonschema/ndc-http-schema.schema.json",
  "settings": {
    "servers": [
      {
        "url": {
          "env": "OKTA_SERVER_URL"
        }
      }
    ],
    "securitySchemes": {
      "apiToken": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "value": {
          "env": "OKTA_API_TOKEN"
        }
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth2/v1/authorize",
            "tokenUrl": {
              "value": "/oauth2/v1/token",
              "env": "OKTA_OAUTH2_TOKEN_URL"
            },
            "scopes": {
              "okta.agentPools.manage": "Allows the app to create and manage agent pools in your Okta organization",
              "okta.agentPools.read": "Allows the app to read agent pools in your Okta organization",
              "okta.apiTokens.manage": "Allows the app to manage API Tokens in your Okta organization",
              "okta.apiTokens.read": "Allows the app to read API Tokens in your Okta organization",
              "okta.appGrants.manage": "Allows the app to create and manage grants in your Okta organization",
              "okta.appGrants.read": "Allows the app to read grants in your Okta organization",
              "okta.apps.manage": "Allows the app to create and manage Apps in your Okta organization",
              "okta.apps.read": "Allows the app to read information about Apps in your Okta organization",
              "okta.authenticators.manage": "Allows the app to manage all authenticators. For example, enrollments or resets.",
              "okta.authenticators.manage.self": "Allows the app to manage a user's own authenticators. For example, enrollments or resets.",
              "okta.authenticators.read": "Allows the app to read org authenticators information",
              "okta.authorizationServers.manage": "Allows the app to create and manage Authorization Servers in your Okta organization",
              "okta.authorizationServers.read": "Allows the app to read information about Authorization Servers in your Okta organization",
              "okta.behaviors.manage": "Allows the app to create and manage behavior detection rules in your Okta organization",
              "okta.behaviors.read": "Allows the app to read behavior detection rules in your Okta organization",
              "okta.brands.manage": "Allows the app to create and manage Brands and Themes in your Okta organization",
              "okta.brands.read": "Allows the app to read information about Brands and Themes in your Okta organization",
              "okta.captchas.manage": "Allows the app to create and manage CAPTCHAs in your Okta organization",
              "okta.captchas.read": "Allows the app to read information about CAPTCHAs in your Okta organization",
              "okta.deviceAssurance.manage": "Allows the app to manage device assurances",
              "okta.deviceAssurance.read": "Allows the app to read device assurances",
              "okta.deviceChecks.manage": "Allows the app to manage device checks",
              "okta.deviceChecks.read": "Allows the app to read device checks",
              "okta.devices.manage": "Allows the app to manage device status transitions and delete a device",
              "okta.devices.read": "Allows the app to read the existing device's profile and search devices",
              "okta.directories.groups.manage": "Allows the app to manage AD/LDAP Groups for your Okta organization",
              "okta.domains.manage": "Allows the app to manage custom Domains for your Okta organization",
              "okta.domains.read": "Allows the app to read information about custom Domains for your Okta organization",
              "okta.dr.manage": "Allows the app to manage disaster recovery",
              "okta.dr.read": "Allows the app to read the disaster recovery status",
              "okta.emailDomains.manage": "Allows the app to manage Email Domains for your Okta organization",
              "okta.emailDomains.read": "Allows the app to read information about Email Domains for your Okta organization",
              "okta.emailServers.manage": "Allows the app to manage Email Servers for your Okta organization",
              "okta.emailServers.read": "Allows the app to read information about Email Servers for your Okta organization",
              "okta.eventHooks.manage": "Allows the app to create and manage Event Hooks in your Okta organization",
              "okta.eventHooks.read": "Allows the app to read information about Event Hooks in your Okta organization",
              "okta.features.manage": "Allows the app to create and manage Features in your Okta organization",
              "okta.features.read": "Allows the app to read information about Features in your Okta organization",
              "okta.groups.manage": "Allows the app to manage existing groups in your Okta organization",
              "okta.groups.read": "Allows the app to read information about groups and their members in your Okta organization",
              "okta.identitySources.manage": "Allows the custom identity sources to manage user entities in your Okta organization",
              "okta.identitySources.read": "Allows to read session information for custom identity sources in your Okta organization",
              "okta.idps.manage": "Allows the app to create and manage Identity Providers in your Okta organization",
              "okta.idps.read": "Allows the app to read information about Identity Providers in your Okta organization",
              "okta.inlineHooks.manage": "Allows the app to create and manage Inline Hooks in your Okta organization",
              "okta.inlineHooks.read": "Allows the app to read information about Inline Hooks in your Okta organization",
              "okta.linkedObjects.manage": "Allows the app to manage linked object definitions in your Okta organization",
              "okta.linkedObjects.read": "Allows the app to read linked object definitions in your Okta organization",
              "okta.logStreams.manage": "Allows the app to create and manage log streams in your Okta organization",
              "okta.logStreams.read": "Allows the app to read information about log streams in your Okta organization",
              "okta.logs.read": "Allows the app to read information about System Log entries in your Okta organization",
              "okta.manifests.manage": "Allows the app to manage OIN submissions in your Okta organization",
              "okta.manifests.read": "Allows the app to read OIN submissions in your Okta organization",
              "okta.networkZones.manage": "Allows the app to create and manage Network Zones in your Okta organization",
              "okta.networkZones.read": "Allows the app to read Network Zones in your Okta organization",
              "okta.oauthIntegrations.manage": "Allows the app to create and manage API service Integration instances in your Okta organization",
              "okta.oauthIntegrations.read": "Allows the app to read API service Integration instances in your Okta organization",
              "okta.orgs.manage": "Allows the app to manage organization-specific details for your Okta organization",
              "okta.orgs.read": "Allows the app to read organization-specific details about your Okta organization",
              "okta.personal.adminSettings.manage": "Allows the app to manage the personal admin settings for the signed-in user",
              "okta.personal.adminSettings.read": "Allows the app to read the personal admin settings for the signed-in user",
              "okta.policies.manage": "Allows the app to manage policies in your Okta organization",
              "okta.policies.read": "Allows the app to read information about policies in your Okta organization",
              "okta.principalRateLimits.manage": "Allows the app to create and manage Principal Rate Limits in your Okta organization",
              "okta.principalRateLimits.read": "Allows the app to read information about Principal Rate Limits in your Okta organization",
              "okta.privilegedAccounts.manage": "Allows the app to create and manage Privileged Accounts in your Okta organization",
              "okta.privilegedAccounts.read": "Allows the app to read Privileged Accounts in your Okta organization",
              "okta.privilegedResources.manage": "Allows the app to create privileged resources and manage their details",
              "okta.privilegedResources.read": "Allows the app to read the details of existing privileged resources",
              "okta.profileMappings.manage": "Allows the app to manage user profile mappings in your Okta organization",
              "okta.profileMappings.read": "Allows the app to read user profile mappings in your Okta organization",
              "okta.pushProviders.manage": "Allows the app to create and manage push notification providers such as APNs and FCM",
              "okta.pushProviders.read": "Allows the app to read push notification providers such as APNs and FCM",
              "okta.rateLimits.manage": "Allows the app to create and manage rate limits in your Okta organization",
              "okta.rateLimits.read": "Allows the app to read information about rate limits in your Okta organization",
              "okta.realmAssignments.manage": "Allows a user to manage realm assignments",
              "okta.realmAssignments.read": "Allows a user to read realm assignments",
              "okta.realms.manage": "Allows the app to create new realms and to manage their details",
              "okta.realms.read": "Allows the app to read the existing realms and their details",
              "okta.resourceSelectors.manage": "Allows the app to manage resource selectors in your Okta org",
              "okta.resourceSelectors.read": "Allows the app to read resource selectors in your Okta org",
              "okta.riskEvents.manage": "Allows the app to publish risk events to your Okta organization",
              "okta.riskProviders.manage": "Allows the app to create and manage risk provider integrations in your Okta organization",
              "okta.riskProviders.read": "Allows the app to read all risk provider integrations in your Okta organization",
              "okta.roles.manage": "Allows the app to manage administrative role assignments for users in your Okta organization. Delegated admins with this permission can only manage user credential fields and not the credential values themselves.",
              "okta.roles.read": "Allows the app to read administrative role assignments for users in your Okta organization. Delegated admins with this permission can only manage user credential fields and not the credential values themselves.",
              "okta.schemas.manage": "Allows the app to create and manage Schemas in your Okta organization",
              "okta.schemas.read": "Allows the app to read information about Schemas in your Okta organization",
              "okta.securityEventsProviders.manage": "Allows the app to create and manage Security Events Providers in your Okta organization",
              "okta.securityEventsProviders.read": "Allows the app to read information about Security Events Providers in your Okta organization",
              "okta.sessions.manage": "Allows the app to manage all sessions in your Okta organization",
              "okta.sessions.read": "Allows the app to read all sessions in your Okta organization",
              "okta.templates.manage": "Allows the app to manage all custom templates in your Okta organization",
              "okta.templates.read": "Allows the app to read all custom templates in your Okta organization",
              "okta.threatInsights.manage": "Allows the app to manage all ThreatInsight configurations in your Okta organization",
              "okta.threatInsights.read": "Allows the app to read all ThreatInsight configurations in your Okta organization",
              "okta.trustedOrigins.manage": "Allows the app to manage all Trusted Origins in your Okta organization",
              "okta.trustedOrigins.read": "Allows the app to read all Trusted Origins in your Okta organization",
              "okta.uischemas.manage": "Allows the app to manage all the UI Schemas in your Okta organization",
              "okta.uischemas.read": "Allows the app to read all the UI Schemas in your Okta organization",
              "okta.userRisk.manage": "Allows the app to manage a user's risk in your Okta org",
              "okta.userRisk.read": "Allows the app to read a user's risk in your Okta org",
              "okta.userTypes.manage": "Allows the app to manage user types in your Okta org",
              "okta.userTypes.read": "Allows the app to read user types in your Okta org",
              "okta.users.manage": "Allows the app to create new users and to manage all users' profile and credentials information",
              "okta.users.manage.self": "Allows the app to manage the signed-in user's profile and credentials",
              "okta.users.read": "Allows the app to read the existing users' profiles and credentials",
              "okta.users.read.self": "Allows the app to read the signed-in user's profile and credentials",
              "ssf.manage": "Allows the app to create and manage Shared Signals Framework (SSF) in your Okta organization",
              "ssf.read": "Allows the app to read information about Shared Signals Framework (SSF) in your Okta organization"
            }
          }
        }
      }
    },
    "version": "2024.08.3"
  },
  "functions": {
    "getAerialConsent": {
      "request": {
        "url": "/api/v1/org/privacy/aerial",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve Okta Aerial consent for your Org",
      "result_type": {
        "name": "OrgAerialConsentDetails",
        "type": "named"
      }
    },
    "getAgentPoolsUpdateInstance": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Agent Pool update by id",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "getAgentPoolsUpdateSettings": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/settings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Agent Pool update's settings",
      "result_type": {
        "name": "AgentPoolUpdateSetting",
        "type": "named"
      }
    },
    "getApiServiceIntegrationInstance": {
      "request": {
        "url": "/integrations/api/v1/api-services/{apiServiceId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiServiceId": {
          "description": "`id` of the API Service Integration instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiServiceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an API Service Integration instance",
      "result_type": {
        "name": "APIServiceIntegrationInstance",
        "type": "named"
      }
    },
    "getApiToken": {
      "request": {
        "url": "/api/v1/api-tokens/{apiTokenId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apiTokens.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiTokenId": {
          "description": "id of the API Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiTokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an API Token's Metadata",
      "result_type": {
        "name": "ApiToken",
        "type": "named"
      }
    },
    "getApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional query parameter to return the specified [Application User](/openapi/okta-management/management/tag/ApplicationUsers/) in the `_embedded` property. Valid value: `expand=user/{userId}`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Application",
      "result_type": {
        "name": "Application",
        "type": "named"
      }
    },
    "getApplicationGroupAssignment": {
      "request": {
        "url": "/api/v1/apps/{appId}/groups/{groupId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional query parameter to return the corresponding assigned [Group](/openapi/okta-management/management/tag/Group/) or  the group assignment metadata details in the `_embedded` property.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Application Group",
      "result_type": {
        "name": "ApplicationGroupAssignment",
        "type": "named"
      }
    },
    "getApplicationKey": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/keys/{keyId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyId": {
          "description": "ID of the Key Credential for the application",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Key Credential",
      "result_type": {
        "name": "JsonWebKey",
        "type": "named"
      }
    },
    "getApplicationUser": {
      "request": {
        "url": "/api/v1/apps/{appId}/users/{userId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional query parameter to return the corresponding [User](/openapi/okta-management/management/tag/User/) object in the `_embedded` property. Valid value: `user`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Application User",
      "result_type": {
        "name": "AppUser",
        "type": "named"
      }
    },
    "getApplicationUserSchema": {
      "request": {
        "url": "/api/v1/meta/schemas/apps/{appId}/default",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.schemas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the default App User Schema for an App",
      "result_type": {
        "name": "UserSchema",
        "type": "named"
      }
    },
    "getAuthenticator": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Authenticator",
      "result_type": {
        "name": "AuthenticatorBase",
        "type": "named"
      }
    },
    "getAuthenticatorMethod": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}/methods/{methodType}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "methodType": {
          "description": "Type of authenticator method",
          "type": {
            "name": "AuthenticatorMethodType",
            "type": "named"
          },
          "http": {
            "name": "methodType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Authenticator Method",
      "result_type": {
        "name": "AuthenticatorMethodBase",
        "type": "named"
      }
    },
    "getAuthenticatorSettings": {
      "request": {
        "url": "/attack-protection/api/v1/authenticator-settings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Authenticator Settings",
      "result_type": {
        "element_type": {
          "name": "AttackProtectionAuthenticatorSettings",
          "type": "named"
        },
        "type": "array"
      }
    },
    "getAuthorizationServer": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Authorization Server",
      "result_type": {
        "name": "AuthorizationServer",
        "type": "named"
      }
    },
    "getAuthorizationServerKey": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/credentials/keys/{keyId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyId": {
          "description": "`id` of the certificate key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Authorization Server Key",
      "result_type": {
        "name": "AuthorizationServerJsonWebKey",
        "type": "named"
      }
    },
    "getAuthorizationServerPolicy": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Policy",
      "result_type": {
        "name": "AuthorizationServerPolicy",
        "type": "named"
      }
    },
    "getAuthorizationServerPolicyRule": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Policy Rule",
      "result_type": {
        "name": "AuthorizationServerPolicyRule",
        "type": "named"
      }
    },
    "getBehaviorDetectionRule": {
      "request": {
        "url": "/api/v1/behaviors/{behaviorId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.behaviors.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "behaviorId": {
          "description": "id of the Behavior Detection Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "behaviorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Behavior Detection Rule",
      "result_type": {
        "name": "BehaviorRule",
        "type": "named"
      }
    },
    "getBinding": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Role Resource Set Binding",
      "result_type": {
        "name": "ResourceSetBindingResponse",
        "type": "named"
      }
    },
    "getBrand": {
      "request": {
        "url": "/api/v1/brands/{brandId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GetBrandExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Retrieve a Brand",
      "result_type": {
        "name": "Brand",
        "type": "named"
      }
    },
    "getBrandTheme": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Theme",
      "result_type": {
        "name": "ThemeResponse",
        "type": "named"
      }
    },
    "getCaptchaInstance": {
      "request": {
        "url": "/api/v1/captchas/{captchaId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "captchaId": {
          "description": "The unique key used to identify your CAPTCHA instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "captchaId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a CAPTCHA Instance",
      "result_type": {
        "name": "CAPTCHAInstance",
        "type": "named"
      }
    },
    "getClientPrivilegesSetting": {
      "request": {
        "url": "/api/v1/org/settings/clientPrivilegesSetting",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Default Public Client App Role Setting",
      "result_type": {
        "name": "ClientPrivilegesSetting",
        "type": "named"
      }
    },
    "getCsrForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/csrs/{csrId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "csrId": {
          "description": "`id` of the CSR",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "csrId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Certificate Signing Request",
      "result_type": {
        "name": "Csr",
        "type": "named"
      }
    },
    "getCsrForIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/csrs/{idpCsrId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpCsrId": {
          "description": "`id` of the IdP CSR",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpCsrId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Certificate Signing Request",
      "result_type": {
        "name": "IdPCsr",
        "type": "named"
      }
    },
    "getCurrentConfiguration": {
      "request": {
        "url": "/api/v1/threats/configuration",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.threatInsights.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the ThreatInsight Configuration",
      "result_type": {
        "name": "ThreatInsightConfiguration",
        "type": "named"
      }
    },
    "getCurrentSession": {
      "request": {
        "url": "/api/v1/sessions/me",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Cookie": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the current Session",
      "result_type": {
        "name": "Session",
        "type": "named"
      }
    },
    "getCustomDomain": {
      "request": {
        "url": "/api/v1/domains/{domainId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.domains.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domainId": {
          "description": "`id` of the Domain",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Custom Domain",
      "result_type": {
        "name": "DomainResponse",
        "type": "named"
      }
    },
    "getCustomizationPreview": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}/preview",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "customizationId": {
          "description": "The ID of the email customization",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "customizationId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Preview of an Email Customization",
      "result_type": {
        "name": "EmailPreview",
        "type": "named"
      }
    },
    "getCustomizedErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error/customized",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Customized Error Page",
      "result_type": {
        "name": "ErrorPage",
        "type": "named"
      }
    },
    "getCustomizedSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/customized",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Customized Sign-in Page",
      "result_type": {
        "name": "SignInPage",
        "type": "named"
      }
    },
    "getDefaultErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error/default",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Default Error Page",
      "result_type": {
        "name": "ErrorPage",
        "type": "named"
      }
    },
    "getDefaultProvisioningConnectionForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/connections/default",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the default Provisioning Connection",
      "result_type": {
        "name": "ProvisioningConnectionResponse",
        "type": "named"
      }
    },
    "getDefaultSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/default",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Default Sign-in Page",
      "result_type": {
        "name": "SignInPage",
        "type": "named"
      }
    },
    "getDesktopMFARecoveryPinOrgSetting": {
      "request": {
        "url": "/device-access/api/v1/desktop-mfa/recovery-pin-settings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Desktop MFA Recovery PIN Org setting",
      "result_type": {
        "name": "DesktopMFARecoveryPinOrgSetting",
        "type": "named"
      }
    },
    "getDevice": {
      "request": {
        "url": "/api/v1/devices/{deviceId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceId": {
          "description": "`id` of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Device",
      "result_type": {
        "name": "Device",
        "type": "named"
      }
    },
    "getDeviceAssurancePolicy": {
      "request": {
        "url": "/api/v1/device-assurances/{deviceAssuranceId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.deviceAssurance.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceAssuranceId": {
          "description": "Id of the Device Assurance Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceAssuranceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Device Assurance Policy",
      "result_type": {
        "name": "DeviceAssurance",
        "type": "named"
      }
    },
    "getEmailCustomization": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "customizationId": {
          "description": "The ID of the email customization",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "customizationId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Email Customization",
      "result_type": {
        "name": "EmailCustomization",
        "type": "named"
      }
    },
    "getEmailDefaultContent": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/default-content",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "language": {
          "description": "The language to use for the email. Defaults to the current user's language if unspecified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "language",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Email Template Default Content",
      "result_type": {
        "name": "EmailDefaultContent",
        "type": "named"
      }
    },
    "getEmailDefaultPreview": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/default-content/preview",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "language": {
          "description": "The language to use for the email. Defaults to the current user's language if unspecified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "language",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Preview of the Email Template default content",
      "result_type": {
        "name": "EmailPreview",
        "type": "named"
      }
    },
    "getEmailDomain": {
      "request": {
        "url": "/api/v1/email-domains/{emailDomainId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailDomains.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "emailDomainId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailDomainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GetEmailDomainExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Retrieve an Email Domain",
      "result_type": {
        "name": "BaseEmailDomain",
        "type": "named"
      }
    },
    "getEmailServer": {
      "request": {
        "url": "/api/v1/email-servers/{emailServerId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "emailServerId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an SMTP Server configuration",
      "result_type": {
        "name": "EmailServerListResponse",
        "type": "named"
      }
    },
    "getEmailSettings": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/settings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Email Template Settings",
      "result_type": {
        "name": "EmailSettingsResponse",
        "type": "named"
      }
    },
    "getEmailTemplate": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GetEmailTemplateExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Email Template",
      "result_type": {
        "name": "EmailTemplateResponse",
        "type": "named"
      }
    },
    "getErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GetErrorPageExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Retrieve the Error Page Sub-Resources",
      "result_type": {
        "name": "PageRoot",
        "type": "named"
      }
    },
    "getEventHook": {
      "request": {
        "url": "/api/v1/eventHooks/{eventHookId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "eventHookId": {
          "description": "`id` of the Event Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "eventHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Event Hook",
      "result_type": {
        "name": "EventHook",
        "type": "named"
      }
    },
    "getFactor": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Factor",
      "result_type": {
        "name": "UserFactor",
        "type": "named"
      }
    },
    "getFactorTransactionStatus": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/transactions/{transactionId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "transactionId": {
          "description": "ID of an existing Factor verification transaction",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "transactionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Factor transaction status",
      "result_type": {
        "name": "UserFactorPushTransaction",
        "type": "named"
      }
    },
    "getFeature": {
      "request": {
        "url": "/api/v1/features/{featureId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.features.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "featureId": {
          "description": "`id` of the feature",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "featureId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Feature",
      "result_type": {
        "name": "Feature",
        "type": "named"
      }
    },
    "getFeatureForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/features/{featureName}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "featureName": {
          "description": "Name of the Feature",
          "type": {
            "name": "ApplicationFeatureType",
            "type": "named"
          },
          "http": {
            "name": "featureName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Feature",
      "result_type": {
        "name": "ApplicationFeature",
        "type": "named"
      }
    },
    "getFirstPartyAppSettings": {
      "request": {
        "url": "/api/v1/first-party-app-settings/{appName}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appName": {
          "description": "The key name for the Okta app. Supported apps:   * Okta Admin Console (`admin-console`)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Okta Application Settings",
      "result_type": {
        "name": "AdminConsoleSettings",
        "type": "named"
      }
    },
    "getGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Group",
      "result_type": {
        "name": "Group",
        "type": "named"
      }
    },
    "getGroupAssignedRole": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Group Role Assignment",
      "result_type": {
        "name": "GetGroupAssignedRoleResult",
        "type": "named"
      }
    },
    "getGroupRule": {
      "request": {
        "url": "/api/v1/groups/rules/{groupRuleId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "expand": {
          "description": "If specified as `groupIdToGroupNameMap`, then show Group names",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupRuleId": {
          "description": "The `id` of the group rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupRuleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Group rule",
      "result_type": {
        "name": "GroupRule",
        "type": "named"
      }
    },
    "getGroupSchema": {
      "request": {
        "url": "/api/v1/meta/schemas/group/default",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.schemas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the default Group Schema",
      "result_type": {
        "name": "GroupSchema",
        "type": "named"
      }
    },
    "getHookKey": {
      "request": {
        "url": "/api/v1/hook-keys/{id}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID of the Hook Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a key by ID",
      "result_type": {
        "name": "HookKey",
        "type": "named"
      }
    },
    "getIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Identity Provider",
      "result_type": {
        "name": "IdentityProvider",
        "type": "named"
      }
    },
    "getIdentityProviderApplicationUser": {
      "request": {
        "url": "/api/v1/idps/{idpId}/users/{userId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a User for IdP",
      "result_type": {
        "name": "IdentityProviderApplicationUser",
        "type": "named"
      }
    },
    "getIdentityProviderKey": {
      "request": {
        "url": "/api/v1/idps/credentials/keys/{kid}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "kid": {
          "description": "Unique `id` of the IdP Key Credential",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "kid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an IdP Key Credential",
      "result_type": {
        "name": "IdPKeyCredential",
        "type": "named"
      }
    },
    "getIdentityProviderSigningKey": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/keys/{kid}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "kid": {
          "description": "Unique `id` of the IdP Key Credential",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "kid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a signing Key Credential for IdP",
      "result_type": {
        "name": "IdPKeyCredential",
        "type": "named"
      }
    },
    "getIdentitySourceSession": {
      "request": {
        "url": "/api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.identitySources.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "identitySourceId": {
          "description": "The ID of the Identity Source for which the session is created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identitySourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sessionId": {
          "description": "The ID of the Identity Source Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Identity Source Session",
      "result_type": {
        "name": "IdentitySourceSession",
        "type": "named"
      }
    },
    "getInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks/{inlineHookId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "inlineHookId": {
          "description": "`id` of the Inline Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "inlineHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Inline Hook",
      "result_type": {
        "name": "InlineHook",
        "type": "named"
      }
    },
    "getJwk": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/jwks/{keyId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyId": {
          "description": "Unique `id` of the OAuth 2.0 Client JSON Web Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an OAuth 2.0 Client JSON Web Key",
      "result_type": {
        "name": "OAuth2ClientJsonWebKey",
        "type": "named"
      }
    },
    "getLinkedObjectDefinition": {
      "request": {
        "url": "/api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.linkedObjects.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "linkedObjectName": {
          "description": "Primary or Associated name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "linkedObjectName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Linked Object Definition",
      "result_type": {
        "name": "LinkedObject",
        "type": "named"
      }
    },
    "getLogStream": {
      "request": {
        "url": "/api/v1/logStreams/{logStreamId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "logStreamId": {
          "description": "Unique identifier for the Log Stream",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "logStreamId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Log Stream",
      "result_type": {
        "name": "LogStream",
        "type": "named"
      }
    },
    "getLogStreamSchema": {
      "request": {
        "url": "/api/v1/meta/schemas/logStream/{logStreamType}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "logStreamType": {
          "type": {
            "name": "LogStreamType",
            "type": "named"
          },
          "http": {
            "name": "logStreamType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Log Stream Schema for the schema type",
      "result_type": {
        "name": "LogStreamSchema",
        "type": "named"
      }
    },
    "getMemberOfBinding": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}/members/{memberId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "memberId": {
          "description": "`id` of the Member",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "memberId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Role Resource Set Binding Member",
      "result_type": {
        "name": "ResourceSetBindingMember",
        "type": "named"
      }
    },
    "getNetworkZone": {
      "request": {
        "url": "/api/v1/zones/{zoneId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.networkZones.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "zoneId": {
          "description": "`id` of the Network Zone",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "zoneId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Network Zone",
      "result_type": {
        "name": "NetworkZone",
        "type": "named"
      }
    },
    "getOAuth2Claim": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/claims/{claimId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "claimId": {
          "description": "`id` of Claim",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "claimId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a custom token Claim",
      "result_type": {
        "name": "OAuth2Claim",
        "type": "named"
      }
    },
    "getOAuth2ClientSecret": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/secrets/{secretId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secretId": {
          "description": "Unique `id` of the OAuth 2.0 Client Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an OAuth 2.0 Client Secret",
      "result_type": {
        "name": "OAuth2ClientSecret",
        "type": "named"
      }
    },
    "getOAuth2Scope": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scopeId": {
          "description": "`id` of Scope",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scopeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Custom Token Scope",
      "result_type": {
        "name": "OAuth2Scope",
        "type": "named"
      }
    },
    "getOAuth2TokenForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/tokens/{tokenId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional parameter to return scope details in the `_embedded` property. Valid value: `scope`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenId": {
          "description": "`id` of Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an Application Token",
      "result_type": {
        "name": "OAuth2RefreshToken",
        "type": "named"
      }
    },
    "getOktaCommunicationSettings": {
      "request": {
        "url": "/api/v1/org/privacy/oktaCommunication",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Okta Communication Settings",
      "result_type": {
        "name": "OrgOktaCommunicationSetting",
        "type": "named"
      }
    },
    "getOrgCaptchaSettings": {
      "request": {
        "url": "/api/v1/org/captcha",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Org-wide CAPTCHA Settings",
      "result_type": {
        "name": "OrgCAPTCHASettings",
        "type": "named"
      }
    },
    "getOrgContactUser": {
      "request": {
        "url": "/api/v1/org/contacts/{contactType}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "contactType": {
          "type": {
            "name": "GetOrgContactUserContactType",
            "type": "named"
          },
          "http": {
            "name": "contactType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Contact Type User",
      "result_type": {
        "name": "OrgContactUser",
        "type": "named"
      }
    },
    "getOrgOktaSupportSettings": {
      "request": {
        "url": "/api/v1/org/privacy/oktaSupport",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Okta Support Settings",
      "result_type": {
        "name": "OrgOktaSupportSettingsObj",
        "type": "named"
      }
    },
    "getOrgPreferences": {
      "request": {
        "url": "/api/v1/org/preferences",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Org Preferences",
      "result_type": {
        "name": "OrgPreferences",
        "type": "named"
      }
    },
    "getOrgSettings": {
      "request": {
        "url": "/api/v1/org",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Org General Settings",
      "result_type": {
        "name": "OrgSetting",
        "type": "named"
      }
    },
    "getPolicy": {
      "request": {
        "url": "/api/v1/policies/{policyId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "expand": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Policy",
      "result_type": {
        "name": "Policy",
        "type": "named"
      }
    },
    "getPolicyMapping": {
      "request": {
        "url": "/api/v1/policies/{policyId}/mappings/{mappingId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "mappingId": {
          "description": "`id` of the policy resource Mapping",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "mappingId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a policy resource Mapping",
      "result_type": {
        "name": "PolicyMapping",
        "type": "named"
      }
    },
    "getPolicyRule": {
      "request": {
        "url": "/api/v1/policies/{policyId}/rules/{ruleId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Policy Rule",
      "result_type": {
        "name": "PolicyRule",
        "type": "named"
      }
    },
    "getPreviewErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error/preview",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Preview Error Page Preview",
      "result_type": {
        "name": "ErrorPage",
        "type": "named"
      }
    },
    "getPreviewSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/preview",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Preview Sign-in Page Preview",
      "result_type": {
        "name": "SignInPage",
        "type": "named"
      }
    },
    "getPrincipalRateLimitEntity": {
      "request": {
        "url": "/api/v1/principal-rate-limits/{principalRateLimitId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.principalRateLimits.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "principalRateLimitId": {
          "description": "id of the Principal Rate Limit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "principalRateLimitId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Principal Rate Limit",
      "result_type": {
        "name": "PrincipalRateLimitEntity",
        "type": "named"
      }
    },
    "getProfileMapping": {
      "request": {
        "url": "/api/v1/mappings/{mappingId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.profileMappings.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "mappingId": {
          "description": "`id` of the Mapping",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "mappingId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Profile Mapping",
      "result_type": {
        "name": "ProfileMapping",
        "type": "named"
      }
    },
    "getPublicKey": {
      "request": {
        "url": "/api/v1/hook-keys/public/{keyId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "keyId": {
          "description": "id\" of the Public Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a public key",
      "result_type": {
        "name": "Embedded",
        "type": "named"
      }
    },
    "getPushProvider": {
      "request": {
        "url": "/api/v1/push-providers/{pushProviderId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.pushProviders.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pushProviderId": {
          "description": "Id of the push provider",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pushProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Push Provider",
      "result_type": {
        "name": "PushProvider",
        "type": "named"
      }
    },
    "getRateLimitSettingsAdminNotifications": {
      "request": {
        "url": "/api/v1/rate-limit-settings/admin-notifications",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.rateLimits.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Rate Limit Admin Notification Settings",
      "result_type": {
        "name": "RateLimitAdminNotifications",
        "type": "named"
      }
    },
    "getRateLimitSettingsPerClient": {
      "request": {
        "url": "/api/v1/rate-limit-settings/per-client",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.rateLimits.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Per-Client Rate Limit Settings",
      "result_type": {
        "name": "PerClientRateLimitSettings",
        "type": "named"
      }
    },
    "getRateLimitSettingsWarningThreshold": {
      "request": {
        "url": "/api/v1/rate-limit-settings/warning-threshold",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.rateLimits.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Rate Limit Warning Threshold Percentage",
      "result_type": {
        "name": "RateLimitWarningThresholdResponse",
        "type": "named"
      }
    },
    "getRealm": {
      "request": {
        "url": "/api/v1/realms/{realmId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realms.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "realmId": {
          "description": "`id` of the Realm",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "realmId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Realm",
      "result_type": {
        "name": "Realm",
        "type": "named"
      }
    },
    "getRealmAssignment": {
      "request": {
        "url": "/api/v1/realm-assignments/{assignmentId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignmentId": {
          "description": "`id` of the Realm Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Realm Assignment",
      "result_type": {
        "name": "RealmAssignment",
        "type": "named"
      }
    },
    "getRefreshTokenForAuthorizationServerAndClient": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Valid value: `scope`. If specified, scope details are included in the `_embedded` attribute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenId": {
          "description": "`id` of Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a refresh token for a Client",
      "result_type": {
        "name": "OAuth2RefreshToken",
        "type": "named"
      }
    },
    "getRefreshTokenForUserAndClient": {
      "request": {
        "url": "/api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Valid value: `scope`. If specified, scope details are included in the `_embedded` attribute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenId": {
          "description": "`id` of Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Refresh Token for a Client",
      "result_type": {
        "name": "OAuth2RefreshToken",
        "type": "named"
      }
    },
    "getResourceSet": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Resource Set",
      "result_type": {
        "name": "ResourceSet",
        "type": "named"
      }
    },
    "getRiskProvider": {
      "request": {
        "url": "/api/v1/risk/providers/{riskProviderId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.riskProviders.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "riskProviderId": {
          "description": "`id` of the Risk Provider object",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "riskProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Risk Provider",
      "result_type": {
        "name": "RiskProvider",
        "type": "named"
      }
    },
    "getRole": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Role",
      "result_type": {
        "name": "IamRole",
        "type": "named"
      }
    },
    "getRolePermission": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "permissionType": {
          "description": "An okta permission type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "permissionType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Custom Role Permission",
      "result_type": {
        "name": "Permission",
        "type": "named"
      }
    },
    "getScopeConsentGrant": {
      "request": {
        "url": "/api/v1/apps/{appId}/grants/{grantId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.appGrants.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional parameter to return scope details in the `_embedded` property. Valid value: `scope`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "grantId": {
          "description": "Grant ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "grantId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an app Grant",
      "result_type": {
        "name": "OAuth2ScopeConsentGrant",
        "type": "named"
      }
    },
    "getSecurityEventsProviderInstance": {
      "request": {
        "url": "/api/v1/security-events-providers/{securityEventProviderId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.securityEventsProviders.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "securityEventProviderId": {
          "description": "`id` of the Security Events Provider instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "securityEventProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Security Events Provider",
      "result_type": {
        "name": "SecurityEventsProviderResponse",
        "type": "named"
      }
    },
    "getSession": {
      "request": {
        "url": "/api/v1/sessions/{sessionId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.sessions.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "sessionId": {
          "description": "`id` of the Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Session",
      "result_type": {
        "name": "Session",
        "type": "named"
      }
    },
    "getSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "GetSignInPageExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Retrieve the Sign-in Page Sub-Resources",
      "result_type": {
        "name": "PageRoot",
        "type": "named"
      }
    },
    "getSignOutPageSettings": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-out/customized",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Sign-out Page Settings",
      "result_type": {
        "name": "HostedPage",
        "type": "named"
      }
    },
    "getSmsTemplate": {
      "request": {
        "url": "/api/v1/templates/sms/{templateId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "templateId": {
          "description": "`id` of the Template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve an SMS Template",
      "result_type": {
        "name": "SmsTemplate",
        "type": "named"
      }
    },
    "getSsfStreams": {
      "request": {
        "url": "/api/v1/ssf/stream",
        "method": "get",
        "security": [
          {
            "oauth2": [
              "ssf.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "stream_id": {
          "description": "The ID of the specified SSF Stream configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "stream_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the SSF Stream configuration(s)",
      "result_type": {
        "name": "JSON",
        "type": "named"
      }
    },
    "getSubscriptionsNotificationTypeRole": {
      "request": {
        "url": "/api/v1/roles/{roleRef}/subscriptions/{notificationType}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "notificationType": {
          "type": {
            "name": "NotificationType",
            "type": "named"
          },
          "http": {
            "name": "notificationType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleRef": {
          "description": "A reference to an existing role. Standard roles require a `roleType`, while Custom Roles require a `roleId`. See [Standard Roles](/openapi/okta-management/guides/roles/#standard-roles).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleRef",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Subscription for a Role",
      "result_type": {
        "name": "Subscription",
        "type": "named"
      }
    },
    "getSubscriptionsNotificationTypeUser": {
      "request": {
        "url": "/api/v1/users/{userId}/subscriptions/{notificationType}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "notificationType": {
          "type": {
            "name": "NotificationType",
            "type": "named"
          },
          "http": {
            "name": "notificationType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Subscription for a User",
      "result_type": {
        "name": "Subscription",
        "type": "named"
      }
    },
    "getThirdPartyAdminSetting": {
      "request": {
        "url": "/api/v1/org/orgSettings/thirdPartyAdminSetting",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Org Third-Party Admin Setting",
      "result_type": {
        "name": "ThirdPartyAdminSetting",
        "type": "named"
      }
    },
    "getTrustedOrigin": {
      "request": {
        "url": "/api/v1/trustedOrigins/{trustedOriginId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.trustedOrigins.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "trustedOriginId": {
          "description": "`id` of the Trusted Origin",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "trustedOriginId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Trusted Origin",
      "result_type": {
        "name": "TrustedOrigin",
        "type": "named"
      }
    },
    "getUISchema": {
      "request": {
        "url": "/api/v1/meta/uischemas/{id}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.uischemas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The unique ID of the UI Schema",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a UI Schema",
      "result_type": {
        "name": "UISchemasResponseObject",
        "type": "named"
      }
    },
    "getUser": {
      "request": {
        "url": "/api/v1/users/{id}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Content-Type": {
          "description": "Specifies the media type of the resource. Optional `okta-response` value can be included for performance optimization.  Complex DelAuth configurations may degrade performance when fetching specific parts of the response, and passing this parameter can omit these parts, bypassing the bottleneck.  Enum values for `okta-response`:   * `omitCredentials`: Omits the credentials subobject from the response.   * `omitCredentialsLinks`: Omits the following HAL links from the response: Change Password, Change Recovery Question, Forgot Password, Reset Password, Reset Factors, Unlock.   * `omitTransitioningToStatus`: Omits the `transitioningToStatus` field from the response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional parameter to include metadata in the `_embedded` attribute. Valid value: `blocks`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "description": "`id`, `login`, or `login shortname` (as long as it is unambiguous) of user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a User",
      "result_type": {
        "name": "UserGetSingleton",
        "type": "named"
      }
    },
    "getUserAssignedRole": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a User Role Assignment",
      "result_type": {
        "name": "GetUserAssignedRoleResult",
        "type": "named"
      }
    },
    "getUserGrant": {
      "request": {
        "url": "/api/v1/users/{userId}/grants/{grantId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "expand": {
          "description": "Valid value: `scope`. If specified, scope details are included in the `_embedded` attribute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "grantId": {
          "description": "Grant ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "grantId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a User Grant",
      "result_type": {
        "name": "OAuth2ScopeConsentGrant",
        "type": "named"
      }
    },
    "getUserLockoutSettings": {
      "request": {
        "url": "/attack-protection/api/v1/user-lockout-settings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the User Lockout Settings",
      "result_type": {
        "element_type": {
          "name": "UserLockoutSettings",
          "type": "named"
        },
        "type": "array"
      }
    },
    "getUserSchema": {
      "request": {
        "url": "/api/v1/meta/schemas/user/{schemaId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.schemas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "schemaId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "schemaId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a User Schema",
      "result_type": {
        "name": "UserSchema",
        "type": "named"
      }
    },
    "getUserType": {
      "request": {
        "url": "/api/v1/meta/types/user/{typeId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.userTypes.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "typeId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "typeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a User Type",
      "result_type": {
        "name": "UserType",
        "type": "named"
      }
    },
    "getWellKnownAppAuthenticatorConfiguration": {
      "request": {
        "url": "/.well-known/app-authenticator-configuration",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "oauthClientId": {
          "description": "Filters app authenticator configurations by `oauthClientId`",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "oauthClientId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve the Well-Known App Authenticator Configuration",
      "result_type": {
        "element_type": {
          "name": "WellKnownAppAuthenticatorConfiguration",
          "type": "named"
        },
        "type": "array"
      }
    },
    "getWellknownOrgMetadata": {
      "request": {
        "url": "/.well-known/okta-organization",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the Well-Known Org Metadata",
      "result_type": {
        "name": "WellKnownOrgMetadata",
        "type": "named"
      }
    },
    "getWellknownSsfMetadata": {
      "request": {
        "url": "/.well-known/ssf-configuration",
        "method": "get",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Retrieve the SSF Transmitter metadata",
      "result_type": {
        "name": "WellKnownSSFMetadata",
        "type": "named"
      }
    },
    "getYubikeyOtpTokenById": {
      "request": {
        "url": "/api/v1/org/factors/yubikey_token/tokens/{tokenId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "tokenId": {
          "description": "ID of a Yubikey token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a YubiKey OTP Token",
      "result_type": {
        "name": "UserFactorYubikeyOtpToken",
        "type": "named"
      }
    },
    "listAgentPools": {
      "request": {
        "url": "/api/v1/agentPools",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limitPerPoolType": {
          "description": "Maximum number of AgentPools being returned",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limitPerPoolType",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        },
        "poolType": {
          "description": "Agent type to search for",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "name": "poolType",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Agent Pools",
      "result_type": {
        "element_type": {
          "name": "AgentPool",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAgentPoolsUpdates": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scheduled": {
          "description": "Scope the list only to scheduled or ad-hoc updates. If the parameter is not provided we will return the whole list of updates.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "scheduled",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "List all Agent Pool updates",
      "result_type": {
        "element_type": {
          "name": "AgentPoolUpdate",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAllSignInWidgetVersions": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/widget-versions",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Sign-in Widget Versions",
      "result_type": {
        "element_type": {
          "name": "String",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApiServiceIntegrationInstanceSecrets": {
      "request": {
        "url": "/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiServiceId": {
          "description": "`id` of the API Service Integration instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiServiceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all API Service Integration instance Secrets",
      "result_type": {
        "element_type": {
          "name": "APIServiceIntegrationInstanceSecret",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApiServiceIntegrationInstances": {
      "request": {
        "url": "/integrations/api/v1/api-services",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all API Service Integration instances",
      "result_type": {
        "element_type": {
          "name": "APIServiceIntegrationInstance",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApiTokens": {
      "request": {
        "url": "/api/v1/api-tokens",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apiTokens.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all API Token Metadata",
      "result_type": {
        "element_type": {
          "name": "ApiToken",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAppLinks": {
      "request": {
        "url": "/api/v1/users/{userId}/appLinks",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Assigned App Links",
      "result_type": {
        "element_type": {
          "name": "AppLink",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAppTargetRoleToClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/catalog/apps",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Client Role Application Targets",
      "result_type": {
        "element_type": {
          "name": "CatalogApplication",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApplicationGroupAssignments": {
      "request": {
        "url": "/api/v1/apps/{appId}/groups",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the `next` page of results. Treat this as an opaque value obtained through the next link relationship. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional query parameter to return the corresponding assigned [Group](/openapi/okta-management/management/tag/Group/) or  the group assignment metadata details in the `_embedded` property.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of objects to return per page. If there are multiple pages of results, the Link header contains a `next` link that you need to use as an opaque value (follow it, don't parse it). See [Pagination](/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 200,
              "minimum": 20
            }
          }
        },
        "q": {
          "description": "Specifies a filter for a list of assigned groups returned based on their names. The value of `q` is matched against the group `name`.  This filter only supports the `startsWith` operation that matches the `q` string against the beginning of the [Group name](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Group/#tag/Group/operation/listGroups!c=200&path=profile/name&t=response).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Application Groups",
      "result_type": {
        "element_type": {
          "name": "ApplicationGroupAssignment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApplicationKeys": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/keys",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Key Credentials",
      "result_type": {
        "element_type": {
          "name": "JsonWebKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApplicationTargetsForApplicationAdministratorRoleForGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/catalog/apps",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Group Role Application Targets",
      "result_type": {
        "element_type": {
          "name": "CatalogApplication",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApplicationTargetsForApplicationAdministratorRoleForUser": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/catalog/apps",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Admin Role Application Targets",
      "result_type": {
        "element_type": {
          "name": "CatalogApplication",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApplicationUsers": {
      "request": {
        "url": "/api/v1/apps/{appId}/users",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of results. Treat this as an opaque value obtained through the next link relationship. See [Pagination](/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional query parameter to return the corresponding [User](/openapi/okta-management/management/tag/User/) object in the `_embedded` property. Valid value: `user`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of objects to return per page. If there are multiple pages of results, the Link header contains a `next` link that you need to use as an opaque value (follow it, don't parse it). See [Pagination](/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 500,
              "minimum": 1
            }
          }
        },
        "q": {
          "description": "**Note:** For OIDC apps, user profiles don't contain the `firstName` or `lastName` attributes. Therefore, the query only matches against the `userName` or `email` attributes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Application Users",
      "result_type": {
        "element_type": {
          "name": "AppUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listApplications": {
      "request": {
        "url": "/api/v1/apps",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the [pagination](/#pagination) cursor for the next page of results. Treat this as an opaque value obtained through the `next` link relationship.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional parameter used for link expansion to embed more resources in the response. Only supports `expand=user/{userId}` and must be used with the `user.id eq \"{userId}\"` filter query for the same user. Returns the assigned [Application User](/openapi/okta-management/management/tag/ApplicationUsers/) in the `_embedded` property.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Filters apps by `status`, `user.id`, `group.id`, `credentials.signing.kid` or `name` expression that supports the `eq` operator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "includeNonDeleted": {
          "description": "Specifies whether to include non-active, but not deleted apps in the results",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "includeNonDeleted",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results per page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 200
            }
          }
        },
        "q": {
          "description": "Searches for apps with `name` or `label` properties that starts with the `q` value using the `startsWith` operation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "useOptimization": {
          "description": "Specifies whether to use query optimization. If you specify `useOptimization=true` in the request query, the response contains a subset of app instance properties.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "useOptimization",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "List all Applications",
      "result_type": {
        "element_type": {
          "name": "Application",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAssignedApplicationsForGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/apps",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of apps",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of app results for a page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        }
      },
      "description": "List all Assigned Applications",
      "result_type": {
        "element_type": {
          "name": "Application",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAssignedRolesForUser": {
      "request": {
        "url": "/api/v1/users/{userId}/roles",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "expand": {
          "description": "An optional parameter used to return targets configured for the standard Role Assignment in the `embedded` property. Supported values: `targets/groups` or `targets/catalog/apps`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all User Role Assignments",
      "result_type": {
        "element_type": {
          "name": "ListAssignedRolesForUserResult",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAssociatedServersByTrustedType": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/associatedServers",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of the associated authorization servers",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results for a page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "q": {
          "description": "Searches for the name or audience of the associated authorization servers",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "trusted": {
          "description": "Searches trusted authorization servers when `true` or searches untrusted authorization servers when `false`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "trusted",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "List all associated Authorization Servers",
      "result_type": {
        "element_type": {
          "name": "AuthorizationServer",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAuthenticatorMethods": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}/methods",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Methods of an Authenticator",
      "result_type": {
        "element_type": {
          "name": "AuthenticatorMethodBase",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAuthenticators": {
      "request": {
        "url": "/api/v1/authenticators",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Authenticators",
      "result_type": {
        "element_type": {
          "name": "AuthenticatorBase",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAuthorizationServerKeys": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/credentials/keys",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Credential Keys",
      "result_type": {
        "element_type": {
          "name": "AuthorizationServerJsonWebKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAuthorizationServerPolicies": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Policies",
      "result_type": {
        "element_type": {
          "name": "AuthorizationServerPolicy",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAuthorizationServerPolicyRules": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Policy Rules",
      "result_type": {
        "element_type": {
          "name": "AuthorizationServerPolicyRule",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listAuthorizationServers": {
      "request": {
        "url": "/api/v1/authorizationServers",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of authorization servers. Treat as an opaque value and obtain through the next link relationship.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of authorization server results on a page. Maximum value: 200",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "q": {
          "description": "Searches the `name` and `audiences` of authorization servers for matching values",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Authorization Servers",
      "result_type": {
        "element_type": {
          "name": "AuthorizationServer",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listBehaviorDetectionRules": {
      "request": {
        "url": "/api/v1/behaviors",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.behaviors.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Behavior Detection Rules",
      "result_type": {
        "element_type": {
          "name": "BehaviorRule",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listBindings": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Role Resource Set Bindings",
      "result_type": {
        "name": "ResourceSetBindings",
        "type": "named"
      }
    },
    "listBrandDomains": {
      "request": {
        "url": "/api/v1/brands/{brandId}/domains",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Domains associated with a Brand",
      "result_type": {
        "element_type": {
          "name": "DomainResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listBrandThemes": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Themes",
      "result_type": {
        "element_type": {
          "name": "ThemeResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listBrands": {
      "request": {
        "url": "/api/v1/brands",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ListBrandsExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "q": {
          "description": "Searches the records for matching value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Brands",
      "result_type": {
        "element_type": {
          "name": "Brand",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listCaptchaInstances": {
      "request": {
        "url": "/api/v1/captchas",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all CAPTCHA Instances",
      "result_type": {
        "element_type": {
          "name": "CAPTCHAInstance",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listCsrsForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/csrs",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Certificate Signing Requests",
      "result_type": {
        "element_type": {
          "name": "Csr",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listCsrsForIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/csrs",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Certificate Signing Requests",
      "result_type": {
        "element_type": {
          "name": "IdPCsr",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listCustomDomains": {
      "request": {
        "url": "/api/v1/domains",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.domains.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Custom Domains",
      "result_type": {
        "name": "DomainListResponse",
        "type": "named"
      }
    },
    "listDeviceAssurancePolicies": {
      "request": {
        "url": "/api/v1/device-assurances",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.deviceAssurance.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Device Assurance Policies",
      "result_type": {
        "element_type": {
          "name": "DeviceAssurance",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listDeviceUsers": {
      "request": {
        "url": "/api/v1/devices/{deviceId}/users",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceId": {
          "description": "`id` of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Users for a Device",
      "result_type": {
        "element_type": {
          "name": "DeviceUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listDevices": {
      "request": {
        "url": "/api/v1/devices",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Includes associated user details and management status for the device in the `_embedded` attribute",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListDevicesExpand",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return (recommend `20`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "search": {
          "description": "A SCIM filter expression that filters the results. Searches include all Device `profile` properties and the Device `id`, `status`, and `lastUpdated` properties.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "search",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Devices",
      "result_type": {
        "element_type": {
          "name": "DeviceList",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listEmailCustomizations": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Email Customizations",
      "result_type": {
        "element_type": {
          "name": "EmailCustomization",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listEmailDomains": {
      "request": {
        "url": "/api/v1/email-domains",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailDomains.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ListEmailDomainsExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "List all Email Domains",
      "result_type": {
        "element_type": {
          "name": "BaseEmailDomain",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listEmailServers": {
      "request": {
        "url": "/api/v1/email-servers",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all enrolled SMTP servers",
      "result_type": {
        "name": "EmailServerListResponse",
        "type": "named"
      }
    },
    "listEmailTemplates": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ListEmailTemplatesExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        }
      },
      "description": "List all Email Templates",
      "result_type": {
        "element_type": {
          "name": "EmailTemplateResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listEventHooks": {
      "request": {
        "url": "/api/v1/eventHooks",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Event Hooks",
      "result_type": {
        "element_type": {
          "name": "EventHook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listFactors": {
      "request": {
        "url": "/api/v1/users/{userId}/factors",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all enrolled Factors",
      "result_type": {
        "element_type": {
          "name": "UserFactor",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listFeatureDependencies": {
      "request": {
        "url": "/api/v1/features/{featureId}/dependencies",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.features.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "featureId": {
          "description": "`id` of the feature",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "featureId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all dependencies",
      "result_type": {
        "element_type": {
          "name": "Feature",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listFeatureDependents": {
      "request": {
        "url": "/api/v1/features/{featureId}/dependents",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.features.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "featureId": {
          "description": "`id` of the feature",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "featureId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all dependents",
      "result_type": {
        "element_type": {
          "name": "Feature",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listFeatures": {
      "request": {
        "url": "/api/v1/features",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.features.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Features",
      "result_type": {
        "element_type": {
          "name": "Feature",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listFeaturesForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/features",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Features",
      "result_type": {
        "element_type": {
          "name": "ApplicationFeature",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGrantsForUserAndClient": {
      "request": {
        "url": "/api/v1/users/{userId}/clients/{clientId}/grants",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Valid value: `scope`. If specified, scope details are included in the `_embedded` attribute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of tokens to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Grants for a Client",
      "result_type": {
        "element_type": {
          "name": "OAuth2ScopeConsentGrant",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroupAssignedRoles": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "expand": {
          "description": "An optional parameter used to return targets configured for the standard Role Assignment in the `embedded` property. Supported values: `targets/groups` or `targets/catalog/apps`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Group Role Assignments",
      "result_type": {
        "element_type": {
          "name": "ListGroupAssignedRolesResult",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroupOwners": {
      "request": {
        "url": "/api/v1/groups/{groupId}/owners",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of owners",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of owner results in a page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "search": {
          "description": "SCIM Filter expression for group owners. Allows to filter owners by type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "search",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Group Owners",
      "result_type": {
        "element_type": {
          "name": "GroupOwner",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroupRules": {
      "request": {
        "url": "/api/v1/groups/rules",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of rules",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "If specified as `groupIdToGroupNameMap`, then displays group names",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of rule results in a page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "search": {
          "description": "Specifies the keyword to search rules for",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "search",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Group rules",
      "result_type": {
        "element_type": {
          "name": "GroupRule",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroupTargetRoleForClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/groups",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Client Role Group Targets",
      "result_type": {
        "element_type": {
          "name": "Group",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroupTargetsForGroupRole": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/groups",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Group Role Group Targets",
      "result_type": {
        "element_type": {
          "name": "Group",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroupTargetsForRole": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/groups",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Admin Role Group Targets",
      "result_type": {
        "element_type": {
          "name": "Group",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroupUsers": {
      "request": {
        "url": "/api/v1/groups/{groupId}/users",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of user results in a page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        }
      },
      "description": "List all Member Users",
      "result_type": {
        "element_type": {
          "name": "User",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listGroups": {
      "request": {
        "url": "/api/v1/groups",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of Groups. The `after` cursor should be treated as an opaque value and obtained through the next link relation. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "If specified, additional metadata is included in the response. Possible values are `stats` and `app`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "**Note:** All filters must be [URL encoded](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding). For example, `filter=lastUpdated gt \"2013-06-01T00:00:00.000Z\"` is encoded as `filter=lastUpdated%20gt%20%222013-06-01T00:00:00.000Z%22`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "**Note:** We strongly encourage using a limit that's less than or equal to 200. Any number greater than 200 affects performance and accuracy.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 10000
            }
          }
        },
        "q": {
          "description": "**Note:** Paging and searching are currently mutually exclusive. You can't page a query. The default limit for a query is 300 results. Query is intended for an auto-complete picker use case where users refine their search string to constrain the results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "search": {
          "description": "Searches for groups with a supported [filtering](https://developer.okta.com/docs/reference/core-okta-api/#filter) expression for all attributes except for `_embedded`, `_links`, and `objectClass`.  Search currently performs a `startsWith` match but it should be considered an implementation detail and might change without notice in the future. This operation supports [pagination](https://developer.okta.com/docs/api/#pagination).  Using search requires [URL encoding](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding), for example, `search=type eq \"OKTA_GROUP\"` is encoded as `search=type+eq+%22OKTA_GROUP%22`.  This operation searches many properties:     * Any group profile property, including imported app group profile properties.     * The top-level properties `id`, `created`, `lastMembershipUpdated`, `lastUpdated`, and `type`.     * The [source](/openapi/okta-management/management/tag/Group/#tag/Group/operation/listGroups!c=200&path=_links/source&t=response) of groups with type of `APP_GROUP`, accessed as `source.id`.  You can also use `sortBy` and `sortOrder` parameters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "search",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortBy": {
          "description": "Specifies field to sort by **(for search queries only)**. `sortBy` can be any single property, for example `sortBy=profile.name`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortOrder": {
          "description": "Specifies sort order: `asc` or `desc` (for search queries only). This parameter is ignored if if `sortBy` is not present. Groups with the same value for the `sortBy` property will be ordered by `id`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Groups",
      "result_type": {
        "element_type": {
          "name": "Group",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listHookKeys": {
      "request": {
        "url": "/api/v1/hook-keys",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all keys",
      "result_type": {
        "element_type": {
          "name": "HookKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listIdentityProviderApplicationUsers": {
      "request": {
        "url": "/api/v1/idps/{idpId}/users",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Expand user data",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "q": {
          "description": "Searches the records for matching value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Users for IdP",
      "result_type": {
        "element_type": {
          "name": "IdentityProviderApplicationUser",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listIdentityProviderKeys": {
      "request": {
        "url": "/api/v1/idps/credentials/keys",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        }
      },
      "description": "List all IdP Key Credentials",
      "result_type": {
        "element_type": {
          "name": "IdPKeyCredential",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listIdentityProviderSigningKeys": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/keys",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all signing Key Credentials for IdP",
      "result_type": {
        "element_type": {
          "name": "IdPKeyCredential",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listIdentityProviders": {
      "request": {
        "url": "/api/v1/idps",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "q": {
          "description": "Searches the `name` property of IdPs for matching value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "Filters IdPs by `type`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderType",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Identity Providers",
      "result_type": {
        "element_type": {
          "name": "IdentityProvider",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listIdentitySourceSessions": {
      "request": {
        "url": "/api/v1/identity-sources/{identitySourceId}/sessions",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.identitySources.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "identitySourceId": {
          "description": "The ID of the Identity Source for which the session is created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identitySourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Identity Source Sessions",
      "result_type": {
        "element_type": {
          "name": "IdentitySourceSession",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listInlineHooks": {
      "request": {
        "url": "/api/v1/inlineHooks",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Inline Hooks",
      "result_type": {
        "element_type": {
          "name": "InlineHook",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listJwk": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/jwks",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all the OAuth 2.0 Client JSON Web Keys",
      "result_type": {
        "element_type": {
          "name": "OAuth2ClientJsonWebKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listLinkedObjectDefinitions": {
      "request": {
        "url": "/api/v1/meta/schemas/user/linkedObjects",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.linkedObjects.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Linked Object Definitions",
      "result_type": {
        "element_type": {
          "name": "LinkedObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listLinkedObjectsForUser": {
      "request": {
        "url": "/api/v1/users/{userIdOrLogin}/linkedObjects/{relationshipName}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "relationshipName": {
          "description": "Name of the `primary` or `associated` relationship being queried",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "relationshipName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userIdOrLogin": {
          "description": "If for the `self` link, the ID of the User for whom you want to get the primary User ID. If for the `associated` relation, the User ID or login value of the User assigned the associated relationship.  This can be `me` to represent the current session User.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userIdOrLogin",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List the primary or all of the associated Linked Object values",
      "result_type": {
        "element_type": {
          "name": "ResponseLinks",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listLogEvents": {
      "request": {
        "url": "/api/v1/logs",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Retrieves the next page of results. Okta returns a link in the HTTP Header (`rel=next`) that includes the after query parameter",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "Opaque token"
            }
          }
        },
        "filter": {
          "description": "Filter expression that filters the results. All operators except [ ] are supported. See [Filter](https://developer.okta.com/docs/api/#filter).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "SCIM Filter expression"
            }
          }
        },
        "limit": {
          "description": "Sets the number of results that are returned in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "Integer between 0 and 1000"
            }
          }
        },
        "q": {
          "description": "Filters log events results by one or more case insensitive keywords.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "URL encoded string. Max length is 40 characters per keyword, with a maximum of 10 keyword filters per query (before encoding)"
            }
          }
        },
        "since": {
          "description": "Filters the lower time bound of the log events `published` property for bounded queries or persistence time for polling queries",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "since",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "ISO 8601 compliant timestamp"
            }
          }
        },
        "sortOrder": {
          "description": "The order of the returned events that are sorted by the `published` property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListLogEventsSortOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "until": {
          "description": "Filters the upper time bound of the log events `published` property for bounded queries or persistence time for polling queries.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "until",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "format": "ISO 8601 compliant timestamp"
            }
          }
        }
      },
      "description": "List all System Log Events",
      "result_type": {
        "element_type": {
          "name": "LogEvent",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listLogStreamSchemas": {
      "request": {
        "url": "/api/v1/meta/schemas/logStream",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List the Log Stream Schemas",
      "result_type": {
        "element_type": {
          "name": "LogStreamSchema",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listLogStreams": {
      "request": {
        "url": "/api/v1/logStreams",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "An expression that [filters](/#filter) the returned objects. You can only use the `eq` operator on either the `status` or `type` properties in the filter expression.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        }
      },
      "description": "List all Log Streams",
      "result_type": {
        "element_type": {
          "name": "LogStream",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listMembersOfBinding": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}/members",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Role Resource Set Binding Members",
      "result_type": {
        "name": "ResourceSetBindingMembers",
        "type": "named"
      }
    },
    "listNetworkZones": {
      "request": {
        "url": "/api/v1/zones",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.networkZones.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        }
      },
      "description": "List all Network Zones",
      "result_type": {
        "element_type": {
          "name": "NetworkZone",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listOAuth2Claims": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/claims",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all custom token Claims",
      "result_type": {
        "element_type": {
          "name": "OAuth2Claim",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listOAuth2ClientSecrets": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/secrets",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all OAuth 2.0 Client Secrets",
      "result_type": {
        "element_type": {
          "name": "OAuth2ClientSecret",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listOAuth2ClientsForAuthorizationServer": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/clients",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Client resources for an authorization server",
      "result_type": {
        "element_type": {
          "name": "OAuth2Client",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listOAuth2Scopes": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/scopes",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of scopes. Treat the after cursor as an opaque value and obtain it through the next link relationship. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Filter expression for Custom Token Scopes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of objects to return per page. If there are multiple pages of results, the Link header contains a `next` link that you need to use as an opaque value (follow it, don't parse it). See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200
            }
          }
        },
        "q": {
          "description": "Searches the `name` of Custom Token Scopes for matching values",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Custom Token Scopes",
      "result_type": {
        "element_type": {
          "name": "OAuth2Scope",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listOAuth2TokensForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/tokens",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of results. Treat this as an opaque value obtained through the next link relationship. See [Pagination](/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional parameter to return scope details in the `_embedded` property. Valid value: `scope`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        }
      },
      "description": "List all Application Refresh Tokens",
      "result_type": {
        "element_type": {
          "name": "OAuth2RefreshToken",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listOrgContactTypes": {
      "request": {
        "url": "/api/v1/org/contacts",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Org Contact Types",
      "result_type": {
        "element_type": {
          "name": "OrgContactTypeObj",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listPolicies": {
      "request": {
        "url": "/api/v1/policies",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "End page cursor for pagination, see [Pagination](https://developer.okta.com/docs/api/#pagination)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Defines the number of policies returned, see [Pagination](https://developer.okta.com/docs/api/#pagination)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "q": {
          "description": "Refines the query by policy name prefix (startWith method) passed in as `q=string`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "resourceId": {
          "description": "Reference to the associated authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "resourceId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortBy": {
          "description": "Refines the query by sorting on the policy `name` in ascending order",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status": {
          "description": "Refines the query by the `status` of the policy - `ACTIVE` or `INACTIVE`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "status",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "Specifies the type of policy to return. The following policy types are available only with the Okta Identity Engine - `ACCESS_POLICY`, `PROFILE_ENROLLMENT`, `POST_AUTH_SESSION`, and `ENTITY_RISK`. The `POST_AUTH_SESSION` and `ENTITY_RISK` policy types are in . Contact your Okta account team to enable these features.",
          "type": {
            "name": "ListPoliciesType",
            "type": "named"
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Policies",
      "result_type": {
        "name": "Policy",
        "type": "named"
      }
    },
    "listPolicyApps": {
      "request": {
        "url": "/api/v1/policies/{policyId}/app",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Applications mapped to a Policy",
      "result_type": {
        "element_type": {
          "name": "Application",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listPolicyMappings": {
      "request": {
        "url": "/api/v1/policies/{policyId}/mappings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all resources mapped to a Policy",
      "result_type": {
        "element_type": {
          "name": "PolicyMapping",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listPolicyRules": {
      "request": {
        "url": "/api/v1/policies/{policyId}/rules",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "limit": {
          "description": "Defines the number of policy rules returned. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Policy Rules",
      "result_type": {
        "element_type": {
          "name": "PolicyRule",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listPrincipalRateLimitEntities": {
      "request": {
        "url": "/api/v1/principal-rate-limits",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.principalRateLimits.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 50
            }
          }
        }
      },
      "description": "List all Principal Rate Limits",
      "result_type": {
        "element_type": {
          "name": "PrincipalRateLimitEntity",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listProfileMappings": {
      "request": {
        "url": "/api/v1/mappings",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.profileMappings.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Mapping `id` that specifies the pagination cursor for the next page of mappings",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results per page (maximum 200)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "sourceId": {
          "description": "The UserType or App Instance `id` that acts as the source of expressions in a mapping. If this parameter is included, all returned mappings have this as their `source.id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sourceId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "targetId": {
          "description": "The UserType or App Instance `id` that acts as the target of expressions in a mapping. If this parameter is included, all returned mappings have this as their `target.id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "targetId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Profile Mappings",
      "result_type": {
        "element_type": {
          "name": "ListProfileMappings",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listPushProviders": {
      "request": {
        "url": "/api/v1/push-providers",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.pushProviders.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "type": {
          "description": "Filters push providers by `providerType`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProviderType",
              "type": "named"
            }
          },
          "http": {
            "name": "type",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Push Providers",
      "result_type": {
        "element_type": {
          "name": "PushProvider",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listRealmAssignmentOperations": {
      "request": {
        "url": "/api/v1/realm-assignments/operations",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        }
      },
      "description": "List all Realm Assignment operations",
      "result_type": {
        "element_type": {
          "name": "OperationResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listRealmAssignments": {
      "request": {
        "url": "/api/v1/realm-assignments",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "A limit on the number of objects to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200,
              "minimum": 1
            }
          }
        }
      },
      "description": "List all Realm Assignments",
      "result_type": {
        "element_type": {
          "name": "RealmAssignment",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listRealms": {
      "request": {
        "url": "/api/v1/realms",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realms.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results returned. Defaults to 10 if `search` is provided.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "search": {
          "description": "Searches for Realms with a supported filtering expression for most properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "search",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortBy": {
          "description": "Specifies field to sort by and can be any single property (for search queries only).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortOrder": {
          "description": "Specifies sort order `asc` or `desc` (for search queries only). This parameter is ignored if `sortBy` isn't present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Realms",
      "result_type": {
        "element_type": {
          "name": "Realm",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listRefreshTokensForAuthorizationServerAndClient": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Valid value: `scope`. If specified, scope details are included in the `_embedded` attribute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "The maximum number of tokens to return (maximum 200)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        }
      },
      "description": "List all refresh tokens for a Client",
      "result_type": {
        "element_type": {
          "name": "OAuth2RefreshToken",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listRefreshTokensForUserAndClient": {
      "request": {
        "url": "/api/v1/users/{userId}/clients/{clientId}/tokens",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Valid value: `scope`. If specified, scope details are included in the `_embedded` attribute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of tokens to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Refresh Tokens for a Client",
      "result_type": {
        "element_type": {
          "name": "OAuth2RefreshToken",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listResourceSetResources": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/resources",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Resource Set Resources",
      "result_type": {
        "name": "ResourceSetResources",
        "type": "named"
      }
    },
    "listResourceSets": {
      "request": {
        "url": "/api/v1/iam/resource-sets",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Resource Sets",
      "result_type": {
        "name": "ResourceSets",
        "type": "named"
      }
    },
    "listRiskProviders": {
      "request": {
        "url": "/api/v1/risk/providers",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.riskProviders.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Risk Providers",
      "result_type": {
        "element_type": {
          "name": "RiskProvider",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listRolePermissions": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}/permissions",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Custom Role Permissions",
      "result_type": {
        "name": "Permissions",
        "type": "named"
      }
    },
    "listRoles": {
      "request": {
        "url": "/api/v1/iam/roles",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Custom Roles",
      "result_type": {
        "name": "IamRoles",
        "type": "named"
      }
    },
    "listRolesForClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Client Role Assignments",
      "result_type": {
        "name": "ListRolesForClientResult",
        "type": "named"
      }
    },
    "listScopeConsentGrants": {
      "request": {
        "url": "/api/v1/apps/{appId}/grants",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.appGrants.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "An optional parameter to return scope details in the `_embedded` property. Valid value: `scope`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all app Grants",
      "result_type": {
        "element_type": {
          "name": "OAuth2ScopeConsentGrant",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listSecurityEventsProviderInstances": {
      "request": {
        "url": "/api/v1/security-events-providers",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.securityEventsProviders.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all Security Events Providers",
      "result_type": {
        "element_type": {
          "name": "SecurityEventsProviderResponse",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listSmsTemplates": {
      "request": {
        "url": "/api/v1/templates/sms",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "templateType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SmsTemplateType",
              "type": "named"
            }
          },
          "http": {
            "name": "templateType",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ],
              "maxLength": 50,
              "minLength": 1
            }
          }
        }
      },
      "description": "List all SMS Templates",
      "result_type": {
        "element_type": {
          "name": "SmsTemplate",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listSocialAuthTokens": {
      "request": {
        "url": "/api/v1/idps/{idpId}/users/{userId}/credentials/tokens",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Tokens from OIDC IdP",
      "result_type": {
        "element_type": {
          "name": "SocialAuthToken",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listSubscriptionsRole": {
      "request": {
        "url": "/api/v1/roles/{roleRef}/subscriptions",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "roleRef": {
          "description": "A reference to an existing role. Standard roles require a `roleType`, while Custom Roles require a `roleId`. See [Standard Roles](/openapi/okta-management/guides/roles/#standard-roles).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleRef",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Subscriptions for a Role",
      "result_type": {
        "element_type": {
          "name": "Subscription",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listSubscriptionsUser": {
      "request": {
        "url": "/api/v1/users/{userId}/subscriptions",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Subscriptions for a User",
      "result_type": {
        "element_type": {
          "name": "Subscription",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listSupportedFactors": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/catalog",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all supported Factors",
      "result_type": {
        "element_type": {
          "name": "UserFactorSupported",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listSupportedSecurityQuestions": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/questions",
        "method": "get",
        "security": [
          {
            "apiToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all supported Security Questions",
      "result_type": {
        "element_type": {
          "name": "UserFactorSecurityQuestionProfile",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listTrustedOrigins": {
      "request": {
        "url": "/api/v1/trustedOrigins",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.trustedOrigins.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The after cursor provided by a prior request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "[Filter](/#filter) Trusted Origins with a supported expression for a subset of properties. You can filter on the following properties: `name`, `origin`, `status`, and `type` (type of scopes).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 200
            }
          }
        },
        "q": {
          "description": "A search string that will prefix match against the `name` and `origin`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Trusted Origins",
      "result_type": {
        "element_type": {
          "name": "TrustedOrigin",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUISchemas": {
      "request": {
        "url": "/api/v1/meta/uischemas",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.uischemas.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all UI Schemas",
      "result_type": {
        "element_type": {
          "name": "UISchemasResponseObject",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUserBlocks": {
      "request": {
        "url": "/api/v1/users/{userId}/blocks",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all User Blocks",
      "result_type": {
        "element_type": {
          "name": "UserBlock",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUserClients": {
      "request": {
        "url": "/api/v1/users/{userId}/clients",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Clients",
      "result_type": {
        "element_type": {
          "name": "OAuth2Client",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUserGrants": {
      "request": {
        "url": "/api/v1/users/{userId}/grants",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Valid value: `scope`. If specified, scope details are included in the `_embedded` attribute.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of grants to return",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 200,
              "minimum": 1
            }
          }
        },
        "scopeId": {
          "description": "The scope ID to filter on",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "scopeId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all User Grants",
      "result_type": {
        "element_type": {
          "name": "OAuth2ScopeConsentGrant",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUserGroups": {
      "request": {
        "url": "/api/v1/users/{userId}/groups",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Groups",
      "result_type": {
        "element_type": {
          "name": "Group",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUserIdentityProviders": {
      "request": {
        "url": "/api/v1/users/{userId}/idps",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Identity Providers for User",
      "result_type": {
        "element_type": {
          "name": "IdentityProvider",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUserTypes": {
      "request": {
        "url": "/api/v1/meta/types/user",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.userTypes.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "List all User Types",
      "result_type": {
        "element_type": {
          "name": "UserType",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUsers": {
      "request": {
        "url": "/api/v1/users",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Content-Type": {
          "description": "Specifies the media type of the resource. Optional `okta-response` value can be included for performance optimization.  Complex DelAuth configurations may degrade performance when fetching specific parts of the response, and passing this parameter can omit these parts, bypassing the bottleneck.  Enum values for `okta-response`:   * `omitCredentials`: Omits the credentials subobject from the response.   * `omitCredentialsLinks`: Omits the following HAL links from the response: Change Password, Change Recovery Question, Forgot Password, Reset Password, Reset Factors, Unlock.   * `omitTransitioningToStatus`: Omits the `transitioningToStatus` field from the response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "after": {
          "description": "The cursor to use for pagination. It is an opaque string that specifies your current location in the list and is obtained from the `Link` response header. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Filters users with a supported expression for a subset of properties.  This requires [URL encoding](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding). For example, `filter=lastUpdated gt \"2013-06-01T00:00:00.000Z\"` is encoded as `filter=lastUpdated%20gt%20%222013-06-01T00:00:00.000Z%22`. Filtering is case-sensitive for attribute names and query values, while attribute operators are case-insensitive.  Filtering supports the following limited number of properties: `status`, `lastUpdated`, `id`, `profile.login`, `profile.email`, `profile.firstName`, and `profile.lastName`. Additionally, filtering supports only the equal `eq` operator from the standard Okta API filtering semantics, except in the case of the `lastUpdated` property. This property can also use the inequality operators (`gt`, `ge`, `lt`, and `le`). For logical operators, only the logical operators `and` and `or` are supported. The `not` operator isn't supported.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results returned. Defaults to 10 if `q` is provided.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        },
        "q": {
          "description": "Finds users who match the specified query. This doesn't support pagination.  This might not deliver optimal performance for large orgs, and is deprecated for such use cases. To ensure optimal performance, use a [`search` parameter](/openapi/okta-management/management/tag/User/#tag/User/operation/listUsers!in=query&path=search&t=request) instead.  Use the `q` parameter for a simple lookup of users by name, for example when creating a people picker. The value of `q` is matched against `firstName`, `lastName`, or `email`. This performs a `startsWith` match, but this is an implementation detail and can change without notice. You don't need to specify `firstName`, `lastName`, or `email`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "q",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "search": {
          "description": "**Note:** If you use the special character `\"` within a quoted string, it must also be escaped `\\` and encoded. For example, `search=profile.lastName eq \"bob\"smith\"` is encoded as `search=profile.lastName%20eq%20%22bob%5C%22smith%22`.  This operation searches many properties:   * Any user profile property, including custom-defined properties   * The top-level properties `id`, `status`, `created`, `activated`, `statusChanged`, and `lastUpdated`   * The [User Type](https://developer.okta.com/docs/reference/api/user-types/) accessed as `type.id`  You can also use `sortBy` and `sortOrder` parameters. The `ne` (not equal) operator isn't supported, but you can obtain the same result by using `lt ... or ... gt`. For example, to see all users except those that have a status of `STAGED`, use `(status lt \"STAGED\" or status gt \"STAGED\")`.  You can search properties that are arrays. If any element matches the search term, the entire array (object) is returned. Okta follows the [SCIM Protocol Specification](https://tools.ietf.org/html/rfc7644#section-3.4.2.2) for searching arrays. You can search multiple arrays, multiple values in an array, as well as using the standard logical and filtering operators. See [Filter](https://developer.okta.com/docs/reference/core-okta-api/#filter).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "search",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortBy": {
          "description": "Specifies field to sort by (for search queries only). This can be any single property, for example `sortBy=profile.lastName`. Users with the same value for the `sortBy` property will be ordered by `id`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortOrder": {
          "description": "Specifies sort order asc or desc (for search queries only). Sorting is done in ASCII sort order (that is, by ASCII character value), but isn't case sensitive. `sortOrder` is ignored if `sortBy` is not present.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all Users",
      "result_type": {
        "element_type": {
          "name": "User",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listUsersWithRoleAssignments": {
      "request": {
        "url": "/api/v1/iam/assignees/users",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of targets",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results returned. Defaults to `100`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32"
            }
          }
        }
      },
      "description": "List all Users with Role Assignments",
      "result_type": {
        "name": "RoleAssignedUsers",
        "type": "named"
      }
    },
    "listWebAuthnPreregistrationFactors": {
      "request": {
        "url": "/webauthn-registration/api/v1/users/{userId}/enrollments",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all WebAuthn Preregistration Factors",
      "result_type": {
        "element_type": {
          "name": "WebAuthnPreregistrationFactor",
          "type": "named"
        },
        "type": "array"
      }
    },
    "listYubikeyOtpTokens": {
      "request": {
        "url": "/api/v1/org/factors/yubikey_token/tokens",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Embeds the [User](/openapi/okta-management/management/tag/User/) resource if the YubiKey Token is assigned to a user and `expand` is set to `user`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "The expression used to filter tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListYubikeyOtpTokensFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "forDownload": {
          "description": "Returns tokens in a CSV to download instead of in the response. When you use this query parameter, the `limit` default changes to 1000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "forDownload",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results per page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200
            }
          }
        },
        "sortBy": {
          "description": "The value of how the tokens are sorted",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListYubikeyOtpTokensSortBy",
              "type": "named"
            }
          },
          "http": {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortOrder": {
          "description": "Specifies the sort order, either `ASC` or `DESC`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListYubikeyOtpTokensSortOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "List all YubiKey OTP Tokens",
      "result_type": {
        "element_type": {
          "name": "UserFactorYubikeyOtpToken",
          "type": "named"
        },
        "type": "array"
      }
    },
    "previewSAMLmetadataForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/sso/saml/metadata",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.read"
            ]
          }
        ],
        "response": {
          "contentType": "text/xml"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "kid": {
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "kid",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Preview the application SAML metadata",
      "result_type": {
        "name": "String",
        "type": "named"
      }
    },
    "retrieveClientRole": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}",
        "method": "get",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retrieve a Client Role",
      "result_type": {
        "name": "RetrieveClientRoleResult",
        "type": "named"
      }
    }
  },
  "object_types": {
    "APIServiceIntegrationInstance": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "APIServiceIntegrationLinks",
              "type": "named"
            }
          },
          "http": {}
        },
        "configGuideUrl": {
          "description": "The URL to the API service integration configuration guide",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "createdAt": {
          "description": "Timestamp when the API Service Integration instance was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "createdBy": {
          "description": "The user ID of the API Service Integration instance creator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "grantedScopes": {
          "description": "The list of Okta management scopes granted to the API Service Integration instance. See [Okta management OAuth 2.0 scopes](/oauth2/#okta-admin-management).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the API Service Integration instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the API service integration that corresponds with the `type` property. This is the full name of the API service integration listed in the Okta Integration Network (OIN) catalog.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of the API service integration. This string is an underscore-concatenated, lowercased API service integration name. For example, `my_api_log_integration`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "APIServiceIntegrationInstanceSecret": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "name": "APIServiceIntegrationSecretLinks",
            "type": "named"
          },
          "http": {}
        },
        "client_secret": {
          "description": "The OAuth 2.0 client secret string. The client secret string is returned in the response of a Secret creation request. In other responses (such as list, activate, or deactivate requests), the client secret is returned as an undisclosed hashed value.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the API Service Integration instance Secret was created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the API Service Integration instance Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the API Service Integration instance Secret was updated",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_hash": {
          "description": "OAuth 2.0 client secret string hash",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the API Service Integration instance Secret",
          "type": {
            "name": "APIServiceIntegrationInstanceSecretStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "APIServiceIntegrationLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "client": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logo": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "APIServiceIntegrationSecretLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "delete": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "Actions": {
      "fields": {
        "assignUserToRealm": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssignUserToRealm",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ActionsInput": {
      "fields": {
        "assignUserToRealm": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssignUserToRealmInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "Actions"
    },
    "AddGroupBodyInput": {
      "fields": {
        "profile": {
          "description": "Profile for any Group that is not imported from Active Directory. Specifies the standard and custom profile properties for a Group.  The `objectClass` for these groups is `okta:user_group`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OktaUserGroupProfileInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AdminConsoleSettings": {
      "description": "Settings specific to the Okta Admin Console",
      "fields": {
        "sessionIdleTimeoutMinutes": {
          "description": "The maximum idle time before the Okta Admin Console session expires. Must be no more than 12 hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 720,
            "minimum": 5
          }
        },
        "sessionMaxLifetimeMinutes": {
          "description": "The absolute maximum session lifetime of the Okta Admin Console. Must be no more than 7 days.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 10080,
            "minimum": 5
          }
        }
      }
    },
    "AdminConsoleSettingsInput": {
      "description": "Settings specific to the Okta Admin Console",
      "fields": {
        "sessionIdleTimeoutMinutes": {
          "description": "The maximum idle time before the Okta Admin Console session expires. Must be no more than 12 hours.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 720,
            "minimum": 5
          }
        },
        "sessionMaxLifetimeMinutes": {
          "description": "The absolute maximum session lifetime of the Okta Admin Console. Must be no more than 7 days.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 10080,
            "minimum": 5
          }
        }
      },
      "alias": "AdminConsoleSettings"
    },
    "Agent": {
      "description": "Agent details",
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isHidden": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "isLatestGAedVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "lastConnection": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "operationalStatus": {
          "description": "Operational status of a given agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationalStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "poolId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Agent types that are being monitored",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updateMessage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updateStatus": {
          "description": "Status for one agent regarding the status to auto-update that agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentUpdateInstanceStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AgentActionInput": {
      "description": "Details about the AD Group membership update",
      "fields": {
        "id": {
          "description": "ID of the AD group to update",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "parameters": {
          "description": "Attributes used for processing AD Group membership update",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ParametersInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "AgentAction"
    },
    "AgentInput": {
      "description": "Agent details",
      "fields": {
        "isHidden": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "isLatestGAedVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "lastConnection": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "operationalStatus": {
          "description": "Operational status of a given agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationalStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "poolId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Agent types that are being monitored",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updateMessage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "updateStatus": {
          "description": "Status for one agent regarding the status to auto-update that agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentUpdateInstanceStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Agent"
    },
    "AgentPool": {
      "description": "An AgentPool is a collection of agents that serve a common purpose. An AgentPool has a unique ID within an org, and contains a collection of agents disjoint to every other AgentPool (i.e. no two AgentPools share an Agent).",
      "fields": {
        "agents": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Agent",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "operationalStatus": {
          "description": "Operational status of a given agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationalStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Agent types that are being monitored",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AgentPoolUpdate": {
      "description": "Various information about agent auto update configuration",
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "agentType": {
          "description": "Agent types that are being monitored",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "agents": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Agent",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifyAdmin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "schedule": {
          "description": "The schedule of auto-update configured by admin.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AutoUpdateSchedule",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sortOrder": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "Overall state for the auto-update job from admin perspective",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentUpdateJobStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "targetVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AgentPoolUpdateInput": {
      "description": "Various information about agent auto update configuration",
      "fields": {
        "agentType": {
          "description": "Agent types that are being monitored",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "agents": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "AgentInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "enabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "notifyAdmin": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "reason": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "schedule": {
          "description": "The schedule of auto-update configured by admin.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AutoUpdateScheduleInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "sortOrder": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "Overall state for the auto-update job from admin perspective",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentUpdateJobStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "targetVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AgentPoolUpdate"
    },
    "AgentPoolUpdateSetting": {
      "description": "Setting for auto-update",
      "fields": {
        "agentType": {
          "description": "Agent types that are being monitored",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "continueOnError": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "latestVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "minimalSupportedVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "poolId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "poolName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "releaseChannel": {
          "description": "Release channel for auto-update",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReleaseChannel",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AgentPoolUpdateSettingInput": {
      "description": "Setting for auto-update",
      "fields": {
        "agentType": {
          "description": "Agent types that are being monitored",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AgentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "continueOnError": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "latestVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "minimalSupportedVersion": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "poolName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "releaseChannel": {
          "description": "Release channel for auto-update",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ReleaseChannel",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AgentPoolUpdateSetting"
    },
    "ApiToken": {
      "description": "An API token for an Okta User. This token is NOT scoped any further and can be used for any API the user has permissions to call.",
      "fields": {
        "_link": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "clientName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "expiresAt": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "network": {
          "description": "The Network Condition of the API Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApiTokenNetwork",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tokenWindow": {
          "description": "A time duration specified as an [ISO-8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^P(?:$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(?:\\d)(\\d+H)?(\\d+M)?(\\d+S)?)?$"
          }
        },
        "userId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ApiTokenNetwork": {
      "description": "The Network Condition of the API Token",
      "fields": {
        "connection": {
          "description": "The connection type of the Network Condition",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "exclude": {
          "description": "List of excluded IP network zones",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include": {
          "description": "List of included IP network zones",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ApiTokenUpdateInput": {
      "description": "An API Token Update Object for an Okta user. This token is NOT scoped any further and can be used for any API that the user has permissions to call.",
      "fields": {
        "name": {
          "description": "The name associated with the API Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "network": {
          "description": "The Network Condition of the API Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApiTokenUpdateNetworkInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "userId": {
          "description": "The userId of the user who created the API Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ApiTokenUpdate"
    },
    "ApiTokenUpdateNetworkInput": {
      "description": "The Network Condition of the API Token",
      "fields": {
        "connection": {
          "description": "The connection type of the Network Condition",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "exclude": {
          "description": "List of excluded IP network zones",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "include": {
          "description": "List of included IP network zones",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AppLink": {
      "fields": {
        "appAssignmentId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "appInstanceId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "appName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "credentialsSetup": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hidden": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "linkUrl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "logoUrl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "sortOrder": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "AppResourceHrefObject": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AppResourceHrefObjectInput": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AppResourceHrefObject"
    },
    "AppUser": {
      "description": "The Application User object defines a user's app-specific profile and credentials for an app",
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the Application User using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of resources related to the Application User.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksAppAndUser",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "credentials": {
          "description": "Specifies a user's credentials for the app. This parameter can be omitted for apps with [sign-on mode](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/signOnMode&t=response) (`signOnMode`) or [authentication schemes](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/credentials/scheme&t=response) (`credentials.scheme`) that don't require credentials.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserCredentials",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "externalId": {
          "description": "The ID of the user in the target app that's linked to the Okta Application User object. This value is the native app-specific identifier or primary key for the user in the target app.  The `externalId` is set during import when the user is confirmed (reconciled) or during provisioning when the user is created in the target app. This value isn't populated for SSO app assignments (for example, SAML or SWA) because it isn't synchronized with a target app.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for the Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastSync": {
          "description": "Timestamp of the last synchronization operation. This value is only updated for apps with the `IMPORT_PROFILE_UPDATES` or `PUSH PROFILE_UPDATES` feature.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "passwordChanged": {
          "description": "Timestamp when the Application User password was last changed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "description": "Specifies the default and custom profile properties for a user. Properties that are visible in the Admin Console for an app assignment can also be assigned through the API. Some properties are reference properties that are imported from the target app and can't be configured. See [profile](/openapi/okta-management/management/tag/User/#tag/User/operation/getUser!c=200&path=profile&t=response).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "Indicates if the assignment is direct (`USER`) or by group membership (`GROUP`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of an Application User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statusChanged": {
          "description": "Timestamp when the Application User status was last changed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "syncState": {
          "description": "**Note:** User provisioning currently must be configured through the Admin Console.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserSyncState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AppUserCredentials": {
      "description": "Specifies a user's credentials for the app. This parameter can be omitted for apps with [sign-on mode](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/signOnMode&t=response) (`signOnMode`) or [authentication schemes](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/credentials/scheme&t=response) (`credentials.scheme`) that don't require credentials.",
      "fields": {
        "password": {
          "description": "The user's password. This is a write-only property. An empty `password` object is returned to indicate that a password value exists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserPasswordCredential",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "userName": {
          "description": "\"Credentials should not be set on this resource based on the scheme.\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      }
    },
    "AppUserCredentialsInput": {
      "description": "Specifies a user's credentials for the app. This parameter can be omitted for apps with [sign-on mode](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/signOnMode&t=response) (`signOnMode`) or [authentication schemes](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/credentials/scheme&t=response) (`credentials.scheme`) that don't require credentials.",
      "fields": {
        "password": {
          "description": "The user's password. This is a write-only property. An empty `password` object is returned to indicate that a password value exists.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserPasswordCredentialInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "userName": {
          "description": "\"Credentials should not be set on this resource based on the scheme.\"",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100,
            "minLength": 1
          }
        }
      },
      "alias": "AppUserCredentials"
    },
    "AppUserCredentialsRequestPayloadInput": {
      "description": "Updates the assigned user credentials",
      "fields": {
        "credentials": {
          "description": "Specifies a user's credentials for the app. This parameter can be omitted for apps with [sign-on mode](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/signOnMode&t=response) (`signOnMode`) or [authentication schemes](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/credentials/scheme&t=response) (`credentials.scheme`) that don't require credentials.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserCredentialsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "AppUserCredentialsRequestPayload"
    },
    "AppUserInput": {
      "description": "The Application User object defines a user's app-specific profile and credentials for an app",
      "fields": {
        "credentials": {
          "description": "Specifies a user's credentials for the app. This parameter can be omitted for apps with [sign-on mode](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/signOnMode&t=response) (`signOnMode`) or [authentication schemes](/openapi/okta-management/management/tag/Application/#tag/Application/operation/getApplication!c=200&path=0/credentials/scheme&t=response) (`credentials.scheme`) that don't require credentials.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserCredentialsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for the Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile": {
          "description": "Specifies the default and custom profile properties for a user. Properties that are visible in the Admin Console for an app assignment can also be assigned through the API. Some properties are reference properties that are imported from the target app and can't be configured. See [profile](/openapi/okta-management/management/tag/User/#tag/User/operation/getUser!c=200&path=profile&t=response).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "Indicates if the assignment is direct (`USER`) or by group membership (`GROUP`).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AppUser"
    },
    "AppUserPasswordCredential": {
      "description": "The user's password. This is a write-only property. An empty `password` object is returned to indicate that a password value exists.",
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "AppUserPasswordCredentialInput": {
      "description": "The user's password. This is a write-only property. An empty `password` object is returned to indicate that a password value exists.",
      "fields": {
        "value": {
          "description": "Password value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "password"
          }
        }
      },
      "alias": "AppUserPasswordCredential"
    },
    "AppUserProfileRequestPayloadInput": {
      "description": "**Note:** The Okta API currently doesn't support entity tags for conditional updates. As long as you're the only user updating the the user profile, Okta recommends you fetch the most recent profile with [Retrieve an Application User](/openapi/okta-management/management/tag/ApplicationUsers/#tag/ApplicationUsers/operation/getApplicationUser), apply your profile update, and then `POST` back the updated profile.",
      "fields": {
        "profile": {
          "description": "Specifies the default and custom profile properties for a user. Properties that are visible in the Admin Console for an app assignment can also be assigned through the API. Some properties are reference properties that are imported from the target app and can't be configured. See [profile](/openapi/okta-management/management/tag/User/#tag/User/operation/getUser!c=200&path=profile&t=response).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppUserProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "AppUserProfileRequestPayload"
    },
    "Application": {
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the app using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. If the `expand=user/{userId}` query parameter is specified, then the assigned [Application User](/openapi/okta-management/management/tag/ApplicationUsers/) is embedded.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Discoverable resources related to the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationLinks",
              "type": "named"
            }
          },
          "http": {}
        },
        "accessibility": {
          "description": "Specifies access settings for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationAccessibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Application object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "features": {
          "description": "**Note:** Some apps can support optional provisioning features. See [Application Features](/openapi/okta-management/management/tag/ApplicationFeatures/)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ApplicationFeatures",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "description": "Unique ID for the app instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "User-defined display name for app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Application object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "licensing": {
          "description": "Licenses for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationLicensing",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "orn": {
          "description": "The Okta resource name (ORN) for the current app instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile": {
          "description": "* `profile` doesn't limit the level of nesting in the JSON schema you created, but there is a practical size limit. Okta recommends a JSON schema size of 1 MB or less for best performance.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "signOnMode": {
          "description": "Authentication mode for the app  | signOnMode | Description | | ---------- | ----------- | | AUTO_LOGIN | Secure Web Authentication (SWA) | | BASIC_AUTH | HTTP Basic Authentication with Okta Browser Plugin | | BOOKMARK | Just a bookmark (no-authentication) | | BROWSER_PLUGIN | Secure Web Authentication (SWA) with Okta Browser Plugin | | OPENID_CONNECT | Federated Authentication with OpenID Connect (OIDC) | | SAML_1_1 | Federated Authentication with SAML 1.1 WebSSO (not supported for custom apps) | | SAML_2_0 | Federated Authentication with SAML 2.0 WebSSO | | SECURE_PASSWORD_STORE | Secure Web Authentication (SWA) with POST (plugin not required) | | WS_FEDERATION | Federated Authentication with WS-Federation Passive Requestor Profile |  Select the `signOnMode` for your custom app:",
          "type": {
            "name": "ApplicationSignOnMode",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "App instance status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationLifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "visibility": {
          "description": "Specifies visibility settings for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationVisibility",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ApplicationAccessibility": {
      "description": "Specifies access settings for the app",
      "fields": {
        "errorRedirectUrl": {
          "description": "Custom error page URL for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "loginRedirectUrl": {
          "description": "**Note:** The `loginRedirectUrl` property is deprecated in Identity Engine. This property is used with the custom app login feature. Orgs that actively use this feature can continue to do so. See [Okta-hosted sign-in (redirect authentication)](https://developer.okta.com/docs/guides/redirect-authentication/) or [configure IdP routing rules](https://help.okta.com/okta_help.htm?type=oie&id=ext-cfg-routing-rules) to redirect users to the appropriate sign-in app for orgs that don't use the custom app login feature.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selfService": {
          "description": "Represents whether the app can be self-assignable by users",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ApplicationAccessibilityInput": {
      "description": "Specifies access settings for the app",
      "fields": {
        "errorRedirectUrl": {
          "description": "Custom error page URL for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "loginRedirectUrl": {
          "description": "**Note:** The `loginRedirectUrl` property is deprecated in Identity Engine. This property is used with the custom app login feature. Orgs that actively use this feature can continue to do so. See [Okta-hosted sign-in (redirect authentication)](https://developer.okta.com/docs/guides/redirect-authentication/) or [configure IdP routing rules](https://help.okta.com/okta_help.htm?type=oie&id=ext-cfg-routing-rules) to redirect users to the appropriate sign-in app for orgs that don't use the custom app login feature.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "selfService": {
          "description": "Represents whether the app can be self-assignable by users",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "ApplicationAccessibility"
    },
    "ApplicationEmbedded": {
      "description": "Embedded resources related to the app using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. If the `expand=user/{userId}` query parameter is specified, then the assigned [Application User](/openapi/okta-management/management/tag/ApplicationUsers/) is embedded.",
      "fields": {
        "user": {
          "description": "The specified [Application User](/openapi/okta-management/management/tag/ApplicationUsers/) assigned to the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ApplicationFeature": {
      "description": "The Feature object is used to configure app feature settings.",
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Description of the feature",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Key name of the feature  | Feature name | Description   | | --------- | ------------- | | USER_PROVISIONING  | User profiles are pushed from Okta to the third-party app. Represents the **To App** provisioning feature setting in the Admin Console. | | INBOUND_PROVISIONING | User profiles are imported from the third-party app into Okta. This feature represents the **To Okta** provisioning feature setting in the Admin Console. |  Select the feature:",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationFeatureType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Setting status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnabledStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ApplicationGroupAssignment": {
      "description": "The Application Group object that defines a group of users' app-specific profile and credentials for an app",
      "fields": {
        "_embedded": {
          "description": "Embedded resource related to the Application Group using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. If the `expand=group` query parameter is specified, then the [Group](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Group/) object is embedded.  If the `expand=metadata` query parameter is specified, then the group assignment metadata is embedded.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationGroupAssignmentLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "ID of the [Group](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Group/)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "priority": {
          "description": "Priority assigned to the group. If an app has more than one group assigned to the same user, then the group with the higher priority has its profile applied to the [Application User](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/ApplicationUsers/). If a priority value isn't specified, then the next highest priority is assigned by default. See [Assign attribute group priority](https://help.okta.com/okta_help.htm?type=oie&id=ext-usgp-app-group-priority) and the [sample priority use case](https://help.okta.com/okta_help.htm?type=oie&id=ext-usgp-combine-values-use).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "profile": {
          "description": "Specifies the profile properties applied to [Application Users](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/ApplicationUsers/) that are assigned to the app through group membership.  Some reference properties are imported from the target app and can't be configured. See [profile](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/User/#tag/User/operation/getUser!c=200&path=profile&t=response).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ApplicationGroupAssignmentInput": {
      "description": "The Application Group object that defines a group of users' app-specific profile and credentials for an app",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationGroupAssignmentLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "priority": {
          "description": "Priority assigned to the group. If an app has more than one group assigned to the same user, then the group with the higher priority has its profile applied to the [Application User](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/ApplicationUsers/). If a priority value isn't specified, then the next highest priority is assigned by default. See [Assign attribute group priority](https://help.okta.com/okta_help.htm?type=oie&id=ext-usgp-app-group-priority) and the [sample priority use case](https://help.okta.com/okta_help.htm?type=oie&id=ext-usgp-combine-values-use).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "profile": {
          "description": "Specifies the profile properties applied to [Application Users](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/ApplicationUsers/) that are assigned to the app through group membership.  Some reference properties are imported from the target app and can't be configured. See [profile](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/User/#tag/User/operation/getUser!c=200&path=profile&t=response).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "ApplicationGroupAssignment"
    },
    "ApplicationGroupAssignmentLinks": {
      "fields": {
        "app": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "group": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ApplicationGroupAssignmentLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "ApplicationInput": {
      "fields": {
        "accessibility": {
          "description": "Specifies access settings for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationAccessibilityInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "features": {
          "description": "**Note:** Some apps can support optional provisioning features. See [Application Features](/openapi/okta-management/management/tag/ApplicationFeatures/)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ApplicationFeatures",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "label": {
          "description": "User-defined display name for app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "licensing": {
          "description": "Licenses for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationLicensingInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profile": {
          "description": "* `profile` doesn't limit the level of nesting in the JSON schema you created, but there is a practical size limit. Okta recommends a JSON schema size of 1 MB or less for best performance.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "signOnMode": {
          "description": "Authentication mode for the app  | signOnMode | Description | | ---------- | ----------- | | AUTO_LOGIN | Secure Web Authentication (SWA) | | BASIC_AUTH | HTTP Basic Authentication with Okta Browser Plugin | | BOOKMARK | Just a bookmark (no-authentication) | | BROWSER_PLUGIN | Secure Web Authentication (SWA) with Okta Browser Plugin | | OPENID_CONNECT | Federated Authentication with OpenID Connect (OIDC) | | SAML_1_1 | Federated Authentication with SAML 1.1 WebSSO (not supported for custom apps) | | SAML_2_0 | Federated Authentication with SAML 2.0 WebSSO | | SECURE_PASSWORD_STORE | Secure Web Authentication (SWA) with POST (plugin not required) | | WS_FEDERATION | Federated Authentication with WS-Federation Passive Requestor Profile |  Select the `signOnMode` for your custom app:",
          "type": {
            "name": "ApplicationSignOnMode",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "visibility": {
          "description": "Specifies visibility settings for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationVisibilityInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "Application"
    },
    "ApplicationLicensing": {
      "description": "Licenses for the app",
      "fields": {
        "seatCount": {
          "description": "Number of licenses purchased for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "ApplicationLicensingInput": {
      "description": "Licenses for the app",
      "fields": {
        "seatCount": {
          "description": "Number of licenses purchased for the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "ApplicationLicensing"
    },
    "ApplicationLinks": {
      "description": "Discoverable resources related to the app",
      "fields": {
        "accessPolicy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AccessPolicyLink",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "appLinks": {
          "description": "List of app link resources",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "groups": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "help": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logo": {
          "description": "List of app logo resources",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "metadata": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ApplicationVisibility": {
      "description": "Specifies visibility settings for the app",
      "fields": {
        "appLinks": {
          "description": "Links or icons that appear on the End-User Dashboard if they're set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "autoLaunch": {
          "description": "Automatically signs in to the app when user signs into Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "autoSubmitToolbar": {
          "description": "Automatically sign in when user lands on the sign-in page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hide": {
          "description": "Hides the app for specific end-user apps",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationVisibilityHide",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ApplicationVisibilityHide": {
      "description": "Hides the app for specific end-user apps",
      "fields": {
        "iOS": {
          "description": "Okta Mobile for iOS or Android (pre-dates Android)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "web": {
          "description": "Okta End-User Dashboard on a web browser",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ApplicationVisibilityHideInput": {
      "description": "Hides the app for specific end-user apps",
      "fields": {
        "iOS": {
          "description": "Okta Mobile for iOS or Android (pre-dates Android)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "web": {
          "description": "Okta End-User Dashboard on a web browser",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "ApplicationVisibilityHide"
    },
    "ApplicationVisibilityInput": {
      "description": "Specifies visibility settings for the app",
      "fields": {
        "appLinks": {
          "description": "Links or icons that appear on the End-User Dashboard if they're set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "autoLaunch": {
          "description": "Automatically signs in to the app when user signs into Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "autoSubmitToolbar": {
          "description": "Automatically sign in when user lands on the sign-in page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "hide": {
          "description": "Hides the app for specific end-user apps",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationVisibilityHideInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "ApplicationVisibility"
    },
    "AssignGroupOwnerRequestBodyInput": {
      "fields": {
        "id": {
          "description": "The `id` of the group owner",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The entity type of the owner",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupOwnerType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AssignGroupOwnerRequestBody"
    },
    "AssignRoleToClientResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssignRoleToClientResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AssignRoleToGroupResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssignRoleToGroupResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AssignRoleToUserResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AssignRoleToUserResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AssignUserToRealm": {
      "fields": {
        "realmId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AssignUserToRealmInput": {
      "fields": {
        "realmId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AssignUserToRealm"
    },
    "AssociatedServerMediatedInput": {
      "fields": {
        "trusted": {
          "description": "A list of the authorization server IDs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "AssociatedServerMediated"
    },
    "AttackProtectionAuthenticatorSettings": {
      "fields": {
        "verifyKnowledgeSecondWhen2faRequired": {
          "description": "If true, requires users to verify a possession factor before verifying a knowledge factor when the assurance requires two-factor authentication (2FA).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "AttackProtectionAuthenticatorSettingsInput": {
      "fields": {
        "verifyKnowledgeSecondWhen2faRequired": {
          "description": "If true, requires users to verify a possession factor before verifying a knowledge factor when the assurance requires two-factor authentication (2FA).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "AttackProtectionAuthenticatorSettings"
    },
    "AuthServerLinks": {
      "fields": {
        "claims": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "metadata": {
          "description": "Link to the authorization server metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "policies": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rotateKey": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scopes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthServerLinksInput": {
      "fields": {
        "metadata": {
          "description": "Link to the authorization server metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "AuthenticationProvider": {
      "description": "Specifies the authentication provider that validates the User's password credential. The User's current provider  is managed by the Delegated Authentication settings for your organization. The provider object is **read-only**.",
      "fields": {
        "name": {
          "description": "The name of the authentication provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of authentication provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticationProviderType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthenticatorBase": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Authenticator was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "A unique identifier for the Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "key": {
          "description": "A human-readable string that identifies the Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorKeyEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Authenticator was last modified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Display name of the Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthenticatorBaseInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "key": {
          "description": "A human-readable string that identifies the Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorKeyEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Display name of the Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AuthenticatorBase"
    },
    "AuthenticatorLinks": {
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "methods": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthenticatorLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "AuthenticatorMethodBase": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of authenticator method",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorMethodType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthenticatorMethodBaseInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycleInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of authenticator method",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorMethodType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AuthenticatorMethodBase"
    },
    "AuthorizationServer": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthServerLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "audiences": {
          "description": "The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Okta currently supports only one audience.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "created": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "credentials": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentials",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "The description of the custom authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the custom authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuer": {
          "description": "The complete URL for the custom authorization server. This becomes the `iss` claim in an access token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuerMode": {
          "description": "Indicates which value is specified in the issuer of the tokens that a custom authorization server returns: the Okta org domain URL or a custom domain URL.  `issuerMode` is visible if you have a custom URL domain configured or the Dynamic Issuer Mode feature enabled. If you have a custom URL domain configured, you can set a custom domain URL in a custom authorization server, and this property is returned in the appropriate responses.  When set to `ORG_URL`, then in responses, `issuer` is the Okta org domain URL: `https://${yourOktaDomain}`.  When set to `CUSTOM_URL`, then in responses, `issuer` is the custom domain URL configured in the administration user interface.  When set to `DYNAMIC`, then in responses, `issuer` is the custom domain URL if the OAuth 2.0 request was sent to the custom domain, or is the Okta org's domain URL if the OAuth 2.0 request was sent to the original Okta org domain.  After you configure a custom URL domain, all new custom authorization servers use `CUSTOM_URL` by default. If the Dynamic Issuer Mode feature is enabled, then all new custom authorization servers use `DYNAMIC` by default. All existing custom authorization servers continue to use the original value until they're changed using the Admin Console or the API. This way, existing integrations with the client and resource server continue to work after the feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The name of the custom authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthorizationServerCredentials": {
      "fields": {
        "signing": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentialsSigningConfig",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthorizationServerCredentialsInput": {
      "fields": {
        "signing": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentialsSigningConfigInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "AuthorizationServerCredentials"
    },
    "AuthorizationServerCredentialsSigningConfig": {
      "fields": {
        "kid": {
          "description": "The ID of the JSON Web Key used for signing tokens issued by the authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastRotated": {
          "description": "The timestamp when the authorization server started using the `kid` for signing tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "nextRotation": {
          "description": "The timestamp when the authorization server changes the Key for signing tokens. This is only returned when `rotationMode` is set to `AUTO`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "rotationMode": {
          "description": "The Key rotation mode for the authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentialsRotationMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "How the key is used",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentialsUse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthorizationServerCredentialsSigningConfigInput": {
      "fields": {
        "rotationMode": {
          "description": "The Key rotation mode for the authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentialsRotationMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "How the key is used",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentialsUse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AuthorizationServerCredentialsSigningConfig"
    },
    "AuthorizationServerInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthServerLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "audiences": {
          "description": "The recipients that the tokens are intended for. This becomes the `aud` claim in an access token. Okta currently supports only one audience.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "credentials": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerCredentialsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "The description of the custom authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuer": {
          "description": "The complete URL for the custom authorization server. This becomes the `iss` claim in an access token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuerMode": {
          "description": "Indicates which value is specified in the issuer of the tokens that a custom authorization server returns: the Okta org domain URL or a custom domain URL.  `issuerMode` is visible if you have a custom URL domain configured or the Dynamic Issuer Mode feature enabled. If you have a custom URL domain configured, you can set a custom domain URL in a custom authorization server, and this property is returned in the appropriate responses.  When set to `ORG_URL`, then in responses, `issuer` is the Okta org domain URL: `https://${yourOktaDomain}`.  When set to `CUSTOM_URL`, then in responses, `issuer` is the custom domain URL configured in the administration user interface.  When set to `DYNAMIC`, then in responses, `issuer` is the custom domain URL if the OAuth 2.0 request was sent to the custom domain, or is the Okta org's domain URL if the OAuth 2.0 request was sent to the original Okta org domain.  After you configure a custom URL domain, all new custom authorization servers use `CUSTOM_URL` by default. If the Dynamic Issuer Mode feature is enabled, then all new custom authorization servers use `DYNAMIC` by default. All existing custom authorization servers continue to use the original value until they're changed using the Admin Console or the API. This way, existing integrations with the client and resource server continue to work after the feature is enabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the custom authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AuthorizationServer"
    },
    "AuthorizationServerJsonWebKey": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "alg": {
          "description": "The algorithm used with the Key. Valid value: `RS256`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "e": {
          "description": "RSA key value (public exponent) for Key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kid": {
          "description": "Unique identifier for the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "description": "Cryptographic algorithm family for the certificate's keypair. Valid value: `RSA`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "RSA modulus value that is used by both the public and private keys and provides a link between them",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "An `ACTIVE` Key is used to sign tokens issued by the authorization server. Supported values: `ACTIVE`, `NEXT`, or `EXPIRED` A `NEXT` Key is the next Key that the authorization server uses to sign tokens when Keys are rotated. The `NEXT` Key might not be listed if it hasn't been generated. An `EXPIRED` Key is the previous Key that the authorization server used to sign tokens. The `EXPIRED` Key might not be listed if no Key has expired or the expired Key was deleted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "Acceptable use of the key. Valid value: `sig`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicy": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyConditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Policy was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "Description of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Policy was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Name of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Specifies the order in which this Policy is evaluated in relation to the other Policies in a custom authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "Specifies whether requests have access to this Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Specifies whether Okta created this Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "Indicates that the Policy is an authorization server Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyConditions": {
      "fields": {
        "clients": {
          "description": "Specifies which clients are included in the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ClientPolicyCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyConditionsInput": {
      "fields": {
        "clients": {
          "description": "Specifies which clients are included in the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ClientPolicyConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "AuthorizationServerPolicyConditions"
    },
    "AuthorizationServerPolicyInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Description of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Specifies the order in which this Policy is evaluated in relation to the other Policies in a custom authorization server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "Specifies whether requests have access to this Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Specifies whether Okta created this Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "Indicates that the Policy is an authorization server Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AuthorizationServerPolicy"
    },
    "AuthorizationServerPolicyLinks": {
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rules": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "AuthorizationServerPolicyPeopleCondition": {
      "description": "Identifies Users and Groups that are used together",
      "fields": {
        "groups": {
          "description": "Specifies a set of Groups whose Users are to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleGroupCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Specifies a set of Users to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleUserCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyPeopleConditionInput": {
      "description": "Identifies Users and Groups that are used together",
      "fields": {
        "groups": {
          "description": "Specifies a set of Groups whose Users are to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleGroupConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Specifies a set of Users to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleUserConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "AuthorizationServerPolicyPeopleCondition"
    },
    "AuthorizationServerPolicyRule": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "actions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleConditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the rule was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Identifier of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the rule was last modified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Name of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Priority of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "Status of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Set to `true` for system rules. You can't delete system rules.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "Rule type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyRuleActions": {
      "fields": {
        "token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenAuthorizationServerPolicyRuleAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyRuleActionsInput": {
      "fields": {
        "token": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenAuthorizationServerPolicyRuleActionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyRuleConditions": {
      "fields": {
        "grantTypes": {
          "description": "Array of grant types that this condition includes. Determines the mechanism that Okta uses to authorize the creation of the tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GrantTypePolicyRuleCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "people": {
          "description": "Identifies Users and Groups that are used together",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyPeopleCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scopes": {
          "description": "Array of scopes that the condition includes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopesMediationPolicyRuleCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyRuleConditionsInput": {
      "fields": {
        "grantTypes": {
          "description": "Array of grant types that this condition includes. Determines the mechanism that Okta uses to authorize the creation of the tokens.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GrantTypePolicyRuleConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "people": {
          "description": "Identifies Users and Groups that are used together",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyPeopleConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scopes": {
          "description": "Array of scopes that the condition includes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopesMediationPolicyRuleConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "AuthorizationServerPolicyRuleConditions"
    },
    "AuthorizationServerPolicyRuleGroupCondition": {
      "description": "Specifies a set of Groups whose Users are to be included",
      "fields": {
        "include": {
          "description": "Groups to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AuthorizationServerPolicyRuleGroupConditionInput": {
      "description": "Specifies a set of Groups whose Users are to be included",
      "fields": {
        "include": {
          "description": "Groups to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "AuthorizationServerPolicyRuleGroupCondition"
    },
    "AuthorizationServerPolicyRuleRequestInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycleInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "actions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleActionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "Name of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Priority of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "description": "Status of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Set to `true` for system rules. You can't delete system rules.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "Rule type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerPolicyRuleType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthorizationServerPolicyRuleUserCondition": {
      "description": "Specifies a set of Users to be included",
      "fields": {
        "include": {
          "description": "Users to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "AuthorizationServerPolicyRuleUserConditionInput": {
      "description": "Specifies a set of Users to be included",
      "fields": {
        "include": {
          "description": "Users to be included",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "AuthorizationServerPolicyRuleUserCondition"
    },
    "AuthorizationServerResourceHrefObject": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AuthorizationServerResourceHrefObjectInput": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AuthorizationServerResourceHrefObject"
    },
    "AutoUpdateSchedule": {
      "description": "The schedule of auto-update configured by admin.",
      "fields": {
        "cron": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delay": {
          "description": "delay in days",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "duration": {
          "description": "duration in minutes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "lastUpdated": {
          "description": "last time when the updated finished (success or failed, exclude cancelled), null if job haven't finished once yet.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "timezone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "AutoUpdateScheduleInput": {
      "description": "The schedule of auto-update configured by admin.",
      "fields": {
        "cron": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "delay": {
          "description": "delay in days",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "duration": {
          "description": "duration in minutes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "lastUpdated": {
          "description": "last time when the updated finished (success or failed, exclude cancelled), null if job haven't finished once yet.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "timezone": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "AutoUpdateSchedule"
    },
    "BaseEmailDomain": {
      "fields": {
        "displayName": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userName": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BaseEmailDomainInput": {
      "fields": {
        "displayName": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userName": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "BaseEmailDomain"
    },
    "BehaviorRule": {
      "fields": {
        "_link": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 128
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "BehaviorRuleType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BehaviorRuleInput": {
      "fields": {
        "name": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 128
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "name": "BehaviorRuleType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "BehaviorRule"
    },
    "BouncesRemoveListError": {
      "fields": {
        "emailAddress": {
          "description": "An email address with a validation error",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reason": {
          "description": "Validation error reason",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "BouncesRemoveListObjInput": {
      "fields": {
        "emailAddresses": {
          "description": "A list of email addresses to remove from the email-service bounce list",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "BouncesRemoveListObj"
    },
    "BouncesRemoveListResult": {
      "fields": {
        "errors": {
          "description": "A list of emails that wasn't added to the email-bounced remove list and the error reason",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "BouncesRemoveListError",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "Brand": {
      "fields": {
        "agreeToCustomPrivacyPolicy": {
          "description": "Consent for updating the custom privacy URL. Not required when resetting the URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "customPrivacyPolicyUrl": {
          "description": "Custom privacy policy URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "defaultApp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DefaultApp",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "emailDomainId": {
          "description": "The ID of the email domain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The Brand ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isDefault": {
          "description": "If `true`, the Brand is used for the Okta subdomain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "locale": {
          "description": "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the Brand",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "removePoweredByOkta": {
          "description": "Removes \"Powered by Okta\" from the sign-in page in redirect authentication deployments, and \"© [current year] Okta, Inc.\" from the Okta End-User Dashboard",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "BrandRequestInput": {
      "fields": {
        "agreeToCustomPrivacyPolicy": {
          "description": "Consent for updating the custom privacy URL. Not required when resetting the URL.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "customPrivacyPolicyUrl": {
          "description": "Custom privacy policy URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "defaultApp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DefaultAppInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "emailDomainId": {
          "description": "The ID of the email domain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "locale": {
          "description": "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the Brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "removePoweredByOkta": {
          "description": "Removes \"Powered by Okta\" from the sign-in page in redirect authentication deployments, and \"© [current year] Okta, Inc.\" from the Okta End-User Dashboard",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "BrandRequest"
    },
    "BulkDeleteRequestBodyInput": {
      "fields": {
        "entityType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BulkDeleteRequestBodyEntityType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profiles": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IdentitySourceUserProfileForDeleteInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "BulkDeleteRequestBody"
    },
    "BulkUpsertRequestBodyInput": {
      "fields": {
        "entityType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BulkUpsertRequestBodyEntityType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profiles": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "BulkUpsertRequestBodyProfilesInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "BulkUpsertRequestBody"
    },
    "BulkUpsertRequestBodyProfilesInput": {
      "fields": {
        "externalId": {
          "description": "The external ID of the entity that needs to be created or updated in Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 512
          }
        },
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentitySourceUserProfileForUpsertInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CAPTCHAInstance": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The unique key for the CAPTCHA instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the CAPTCHA instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "siteKey": {
          "description": "The site key issued from the CAPTCHA provider to render a CAPTCHA on a page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of CAPTCHA provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CAPTCHAType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CAPTCHAInstanceInput": {
      "fields": {
        "name": {
          "description": "The name of the CAPTCHA instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secretKey": {
          "description": "The secret key issued from the CAPTCHA provider to perform server-side validation for a CAPTCHA token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "siteKey": {
          "description": "The site key issued from the CAPTCHA provider to render a CAPTCHA on a page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of CAPTCHA provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CAPTCHAType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "CAPTCHAInstance"
    },
    "CSRLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of a CSR object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "publish": {
          "description": "Link to publish CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefCsrPublishLink",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "description": "Link to the resource (self)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefCsrSelfLink",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "CapabilitiesCreateObjectInput": {
      "description": "Determines whether Okta assigns a new app account to each user managed by Okta.  Okta doesn't create a new account if it detects that the username specified in Okta already exists in the app. The user's Okta username is assigned by default.",
      "fields": {
        "lifecycleCreate": {
          "description": "Determines whether to update a user in the app when a user in Okta is updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleCreateSettingObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CapabilitiesCreateObject"
    },
    "CapabilitiesImportRulesObjectInput": {
      "description": "Defines user import rules",
      "fields": {
        "userCreateAndMatch": {
          "description": "Rules for matching and creating users",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CapabilitiesImportRulesUserCreateAndMatchObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CapabilitiesImportRulesObject"
    },
    "CapabilitiesImportRulesUserCreateAndMatchObjectInput": {
      "description": "Rules for matching and creating users",
      "fields": {
        "allowPartialMatch": {
          "description": "Allows user import upon partial matching. Partial matching occurs when the first and last names of an imported user match those of an existing Okta user, even if the username or email attributes don't match.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "autoActivateNewUsers": {
          "description": "If set to `true`, imported new users are automatically activated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "autoConfirmExactMatch": {
          "description": "If set to `true`, exact-matched users are automatically confirmed on activation. If set to `false`, exact-matched users need to be confirmed manually.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "autoConfirmNewUsers": {
          "description": "If set to `true`, imported new users are automatically confirmed on activation. This doesn't apply to imported users that already exist in Okta.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "autoConfirmPartialMatch": {
          "description": "If set to `true`, partially matched users are automatically confirmed on activation. If set to `false`, partially matched users need to be confirmed manually.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "exactMatchCriteria": {
          "description": "Determines the attribute to match users",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CapabilitiesImportRulesUserCreateAndMatchObjectExactMatchCriteria",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "CapabilitiesImportRulesUserCreateAndMatchObject"
    },
    "CapabilitiesImportSettingsObjectInput": {
      "description": "Defines import settings",
      "fields": {
        "schedule": {
          "description": "Import schedule configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ImportScheduleObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "username": {
          "description": "Determines the Okta username for the imported user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ImportUsernameObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CapabilitiesImportSettingsObject"
    },
    "CapabilitiesInboundProvisioningObjectInput": {
      "description": "Defines the configuration for the INBOUND_PROVISIONING feature",
      "fields": {
        "importRules": {
          "description": "Defines user import rules",
          "type": {
            "name": "CapabilitiesImportRulesObjectInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "importSettings": {
          "description": "Defines import settings",
          "type": {
            "name": "CapabilitiesImportSettingsObjectInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CapabilitiesInboundProvisioningObject"
    },
    "CapabilitiesObjectInput": {
      "description": "Defines the configurations for the USER_PROVISIONING feature",
      "fields": {
        "create": {
          "description": "Determines whether Okta assigns a new app account to each user managed by Okta.  Okta doesn't create a new account if it detects that the username specified in Okta already exists in the app. The user's Okta username is assigned by default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CapabilitiesCreateObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "update": {
          "description": "Determines whether updates to a user's profile are pushed to the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CapabilitiesUpdateObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CapabilitiesObject"
    },
    "CapabilitiesUpdateObjectInput": {
      "description": "Determines whether updates to a user's profile are pushed to the app",
      "fields": {
        "lifecycleDeactivate": {
          "description": "Determines whether deprovisioning occurs when the app is unassigned",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleDeactivateSettingObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "password": {
          "description": "Determines whether Okta creates and pushes a password in the app for each assigned user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordSettingObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profile": {
          "description": "This setting determines whether a user in the app gets updated when they're updated in Okta.  If enabled, Okta updates a user's attributes in the app when the app is assigned. Future changes made to the Okta user's profile automatically overwrite the corresponding attribute value in the app.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProfileSettingObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CapabilitiesUpdateObject"
    },
    "CatalogApplication": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "category": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "features": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signOnModes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CatalogApplicationStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verificationStatus": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChangePasswordRequestInput": {
      "fields": {
        "newPassword": {
          "description": "**Password**).  For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "oldPassword": {
          "description": "**Password**).  For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "revokeSessions": {
          "description": "When set to `true`, revokes all User sessions, except for the current session",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "ChangePasswordRequest"
    },
    "ChildOrg": {
      "fields": {
        "_links": {
          "description": "Specifies available link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Org was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "edition": {
          "description": "Edition for the Org. `SKU` is the only supported value.",
          "type": {
            "name": "ChildOrgEdition",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Org ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Org was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Unique name of the Org. This name appears in the HTML `` tag of the new Org sign-in page. Only less than 4-width UTF-8 encoded characters are allowed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "utf-8",
            "maximum": 100,
            "minimum": 1
          }
        },
        "settings": {
          "description": "Settings associated with the created Org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "Status of the Org. `ACTIVE` is returned after the Org is created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChildOrgStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subdomain": {
          "description": "Subdomain of the Org. Must be unique and include no spaces.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 57,
            "minimum": 1
          }
        },
        "token": {
          "description": "**Note:** If this API token expires, sign in to the Admin Console as the super admin user and create a new API token. See [Create an API token](https://developer.okta.com/docs/guides/create-an-api-token/).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tokenType": {
          "description": "Type of returned `token`. See [Okta API tokens](https://developer.okta.com/docs/guides/create-an-api-token/main/#okta-api-tokens).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChildOrgTokenType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "Default website for the Org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ChildOrgInput": {
      "fields": {
        "admin": {
          "description": "**Note:** If you don't provide `credentials`, the super admin user is prompted to set up their credentials when they sign in to the Org for the first time.",
          "type": {
            "name": "OrgCreationAdminInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "edition": {
          "description": "Edition for the Org. `SKU` is the only supported value.",
          "type": {
            "name": "ChildOrgEdition",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Unique name of the Org. This name appears in the HTML `` tag of the new Org sign-in page. Only less than 4-width UTF-8 encoded characters are allowed.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "utf-8",
            "maximum": 100,
            "minimum": 1
          }
        },
        "subdomain": {
          "description": "Subdomain of the Org. Must be unique and include no spaces.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 57,
            "minimum": 1
          }
        },
        "website": {
          "description": "Default website for the Org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ChildOrg"
    },
    "ClientPolicyCondition": {
      "description": "Specifies which clients are included in the Policy",
      "fields": {
        "include": {
          "description": "Which clients are included in the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ClientPolicyConditionInput": {
      "description": "Specifies which clients are included in the Policy",
      "fields": {
        "include": {
          "description": "Which clients are included in the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "ClientPolicyCondition"
    },
    "ClientPrivilegesSetting": {
      "description": "The org setting that assigns the super admin role by default to a public client app",
      "fields": {
        "clientPrivilegesSetting": {
          "description": "If true, assigns the super admin role by default to new public client apps",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ClientPrivilegesSettingInput": {
      "description": "The org setting that assigns the super admin role by default to a public client app",
      "fields": {
        "clientPrivilegesSetting": {
          "description": "If true, assigns the super admin role by default to new public client apps",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "ClientPrivilegesSetting"
    },
    "Conditions": {
      "fields": {
        "expression": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Expression",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profileSourceId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ConditionsInput": {
      "fields": {
        "expression": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ExpressionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profileSourceId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Conditions"
    },
    "ContentSecurityPolicySetting": {
      "fields": {
        "mode": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContentSecurityPolicySettingMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reportUri": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "srcList": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ContentSecurityPolicySettingInput": {
      "fields": {
        "mode": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContentSecurityPolicySettingMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "reportUri": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "srcList": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "ContentSecurityPolicySetting"
    },
    "CreateBrandRequestInput": {
      "fields": {
        "name": {
          "description": "The name of the Brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "CreateBrandRequest"
    },
    "CreateGroupRuleRequestInput": {
      "fields": {
        "actions": {
          "description": "Defines which users and groups to assign",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleActionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "description": "Defines group rule conditions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "Name of the Group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateGroupRuleRequestType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "CreateGroupRuleRequest"
    },
    "CreateIamRoleRequestInput": {
      "fields": {
        "description": {
          "description": "Description of the role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Unique label for the role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "Array of permissions that the Role grants. See [Permissions](/openapi/okta-management/guides/roles/#permissions).",
          "type": {
            "element_type": {
              "name": "RolePermissionType",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "CreateIamRoleRequest"
    },
    "CreateRealmAssignmentRequestInput": {
      "fields": {
        "actions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "CreateRealmAssignmentRequest"
    },
    "CreateRealmRequestInput": {
      "fields": {
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealmProfileInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CreateRealmRequest"
    },
    "CreateResourceSetRequestInput": {
      "fields": {
        "description": {
          "description": "Description of the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Unique name for the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resources": {
          "description": "The endpoint (URL) that references all resource objects included in the Resource Set. Resources are identified by either an Okta Resource Name (ORN) or by a REST URL format. See [Okta Resource Name](/openapi/okta-management/guides/roles/#okta-resource-name-orn).",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "maximum": 1000,
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "CreateResourceSetRequest"
    },
    "CreateSessionRequestInput": {
      "fields": {
        "sessionToken": {
          "description": "The session token obtained during authentication",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "CreateSessionRequest"
    },
    "CreateUISchemaInput": {
      "description": "The request body properties for the new UI Schema",
      "fields": {
        "uiSchema": {
          "description": "Properties of the UI schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UISchemaObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CreateUISchema"
    },
    "CreateUpdateIamRolePermissionRequestInput": {
      "fields": {
        "conditions": {
          "description": "Conditions for further restricting a permission",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PermissionConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CreateUpdateIamRolePermissionRequest"
    },
    "CreateUserRequestInput": {
      "fields": {
        "credentials": {
          "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserCredentialsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "groupIds": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "profile": {
          "description": "Specifies the default and custom profile properties for a user.  The default user profile is based on the [System for Cross-domain Identity Management: Core Schema](https://datatracker.ietf.org/doc/html/rfc7643).  The only permitted customizations of the default profile are to update permissions, change whether the `firstName` and `lastName` properties are nullable, and specify a [pattern](https://developer.okta.com/docs/reference/api/schemas/#login-pattern-validation) for `login`. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to make schema modifications.  You can extend user profiles with custom properties. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to manage schema extensions.  Custom attributes can contain HTML tags. It's the client's responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "realmId": {
          "description": "The ID of the Realm in which the User is residing",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The ID of the User type. Add this value if you want to create a User with a non-default [User Type](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/). The User Type determines which [schema](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Schema/) applies to that user. After a User has been created, the User can only be assigned a different User Type by an administrator through a full replacement (`PUT`) operation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateUserRequestTypeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CreateUserRequest"
    },
    "CreateUserRequestTypeInput": {
      "description": "The ID of the User type. Add this value if you want to create a User with a non-default [User Type](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/). The User Type determines which [schema](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Schema/) applies to that user. After a User has been created, the User can only be assigned a different User Type by an administrator through a full replacement (`PUT`) operation.",
      "fields": {
        "id": {
          "description": "The ID of the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Csr": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of a CSR object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CSRLinks",
              "type": "named"
            }
          },
          "http": {}
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "csr": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "CsrMetadataInput": {
      "fields": {
        "subject": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CsrMetadataSubjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subjectAltNames": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CsrMetadataSubjectAltNamesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "CsrMetadata"
    },
    "CsrMetadataSubjectAltNamesInput": {
      "fields": {
        "dnsNames": {
          "description": "DNS names of the subject",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "CsrMetadataSubjectAltNames"
    },
    "CsrMetadataSubjectInput": {
      "fields": {
        "commonName": {
          "description": "Common name of the subject",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "countryName": {
          "description": "Country name or code",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "localityName": {
          "description": "Locality (city) name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizationName": {
          "description": "Large organization name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "organizationalUnitName": {
          "description": "Name of the smaller organization, for example, the department or the division",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stateOrProvinceName": {
          "description": "State or province name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "CsrMetadataSubject"
    },
    "CsrPublishHrefHints": {
      "description": "Describes allowed HTTP verbs for the `href`",
      "fields": {
        "allow": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CsrPublishHrefHintsAllow",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CsrSelfHrefHints": {
      "description": "Describes allowed HTTP verbs for the `href`",
      "fields": {
        "allow": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CsrSelfHrefHintsAllow",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "CustomRoleAssignmentSchemaInput": {
      "fields": {
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of role. Specify `CUSTOM` for a custom role.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomRoleAssignmentSchemaType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "CustomRoleAssignmentSchema"
    },
    "CustomizablePage": {
      "fields": {
        "pageContent": {
          "description": "The HTML for the page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DNSRecord": {
      "description": "DNS TXT and CNAME records to be registered for the Domain",
      "fields": {
        "expiration": {
          "description": "DNS TXT record expiration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fqdn": {
          "description": "DNS record name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "recordType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DNSRecordType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "values": {
          "description": "DNS record value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "DefaultApp": {
      "fields": {
        "appInstanceId": {
          "description": "ID for the App instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "appLinkName": {
          "description": "Name for the app instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "classicApplicationUri": {
          "description": "Application URI for classic Orgs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DefaultAppInput": {
      "fields": {
        "appInstanceId": {
          "description": "ID for the App instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "appLinkName": {
          "description": "Name for the app instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "classicApplicationUri": {
          "description": "Application URI for classic Orgs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "DefaultApp"
    },
    "DesktopMFARecoveryPinOrgSetting": {
      "fields": {
        "desktopMFARecoveryPinEnabled": {
          "description": "Indicates whether or not the Desktop MFA Recovery PIN feature is enabled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "DesktopMFARecoveryPinOrgSettingInput": {
      "fields": {
        "desktopMFARecoveryPinEnabled": {
          "description": "Indicates whether or not the Desktop MFA Recovery PIN feature is enabled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "DesktopMFARecoveryPinOrgSetting"
    },
    "DetailedHookKeyInstance": {
      "description": "A key object with public key details",
      "fields": {
        "_embedded": {
          "description": "The Public Key Details are defined in the `_embedded` property of the Key object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Embedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the key was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "The unique Okta ID of this key record",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isUsed": {
          "description": "Whether this key is currently in use by other applications",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "boolean"
          }
        },
        "keyId": {
          "description": "The alias of the public key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the key was updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Display name of the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255,
            "minLength": 1
          }
        }
      }
    },
    "Device": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndFullUsersLifecycle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the device was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique key for the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the device record was last updated. Updates occur when Okta collects and saves device signals during authentication, and when the lifecycle state of the device changes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resourceAlternateId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resourceDisplayName": {
          "description": "Display name of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceDisplayName",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resourceId": {
          "description": "Alternate key for the `id`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resourceType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The state object of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeviceAssurance": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "createdBy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "createdDate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdatedBy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Display name of the Device Assurance Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "platform": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Platform",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeviceAssuranceInput": {
      "fields": {
        "name": {
          "description": "Display name of the Device Assurance Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "platform": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Platform",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "DeviceAssurance"
    },
    "DeviceDisplayName": {
      "description": "Display name of the device",
      "fields": {
        "sensitive": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeviceList": {
      "fields": {
        "_embedded": {
          "description": "List of associated users for the device if the `expand=user` query parameter is specified in the request. Use `expand=userSummary` to get only a summary of each associated user for the device.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceList1Embedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndFullUsersLifecycle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the device was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique key for the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the device record was last updated. Updates occur when Okta collects and saves device signals during authentication, and when the lifecycle state of the device changes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resourceAlternateId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resourceDisplayName": {
          "description": "Display name of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceDisplayName",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resourceId": {
          "description": "Alternate key for the `id`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resourceType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The state object of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DeviceList1Embedded": {
      "description": "List of associated users for the device if the `expand=user` query parameter is specified in the request. Use `expand=userSummary` to get only a summary of each associated user for the device.",
      "fields": {
        "users": {
          "description": "Users for the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DeviceUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "DeviceProfile": {
      "fields": {
        "diskEncryptionType": {
          "description": "**Note:** The following values map to Disk Encryption ON: `FULL`, `USER`, `ALL_INTERNAL_VOLUMES`. All other values map to Disk Encryption OFF.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DiskEncryptionTypeDef",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "Display name of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255,
            "minLength": 1
          }
        },
        "imei": {
          "description": "International Mobile Equipment Identity (IMEI) of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 17,
            "minLength": 14
          }
        },
        "integrityJailbreak": {
          "description": "Indicates if the device is jailbroken or rooted. Only applicable to `IOS` and `ANDROID` platforms",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "manufacturer": {
          "description": "Name of the manufacturer of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 127
          }
        },
        "meid": {
          "description": "Mobile equipment identifier of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 14
          }
        },
        "model": {
          "description": "Model of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 127
          }
        },
        "osVersion": {
          "description": "Version of the device OS",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 127
          }
        },
        "platform": {
          "description": "OS platform of the device",
          "type": {
            "name": "DevicePlatform",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "registered": {
          "description": "Indicates if the device is registered at Okta",
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "secureHardwarePresent": {
          "description": "Indicates if the device contains a secure hardware functionality",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "serialNumber": {
          "description": "Serial number of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 127
          }
        },
        "sid": {
          "description": "Windows Security identifier of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 256
          }
        },
        "tpmPublicKeyHash": {
          "description": "Windows Trusted Platform Module hash value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "udid": {
          "description": "macOS Unique Device identifier of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 47
          }
        }
      }
    },
    "DeviceUser": {
      "fields": {
        "created": {
          "description": "Timestamp when device was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "managementStatus": {
          "description": "The management status of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceUserManagementStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "screenLockType": {
          "description": "Screen lock type of the device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeviceUserScreenLockType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "user": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "User",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "DomainCertificateInput": {
      "description": "Defines the properties of the certificate",
      "fields": {
        "certificate": {
          "description": "Certificate content",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "certificateChain": {
          "description": "Certificate chain",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privateKey": {
          "description": "Certificate private key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Certificate type",
          "type": {
            "name": "DomainCertificateType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "DomainCertificate"
    },
    "DomainCertificateMetadata": {
      "description": "Certificate metadata for the domain",
      "fields": {
        "expiration": {
          "description": "Certificate expiration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fingerprint": {
          "description": "Certificate fingerprint",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "Certificate subject",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "DomainLinks": {
      "fields": {
        "brand": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "certificate": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "verify": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "DomainListResponse": {
      "description": "Defines a list of domains with a subset of the properties for each domain.",
      "fields": {
        "domains": {
          "description": "Each element of the array defines an individual domain.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DomainResponse",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "DomainRequestInput": {
      "fields": {
        "certificateSourceType": {
          "description": "Certificate source type that indicates whether the certificate is provided by the user or Okta.",
          "type": {
            "name": "DomainCertificateSourceType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "domain": {
          "description": "Custom domain name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "DomainRequest"
    },
    "DomainResponse": {
      "description": "The properties that define an individual domain.",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DomainLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "brandId": {
          "description": "The ID number of the brand",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "certificateSourceType": {
          "description": "Certificate source type that indicates whether the certificate is provided by the user or Okta.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DomainCertificateSourceType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dnsRecords": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DNSRecord",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "domain": {
          "description": "Custom domain name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique ID of the domain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "publicCertificate": {
          "description": "Certificate metadata for the domain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DomainCertificateMetadata",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "validationStatus": {
          "description": "Status of the domain",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DomainValidationStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ECKeyJWKInput": {
      "description": "Elliptic Curve Key in JWK format, currently used during enrollment to encrypt fulfillment requests to Yubico, or during activation to verify Yubico's JWS objects in fulfillment responses. The currently agreed protocol uses P-384.",
      "fields": {
        "crv": {
          "type": {
            "name": "ECKeyJWKCrv",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kid": {
          "description": "The unique identifier of the key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "description": "The type of public key",
          "type": {
            "name": "ECKeyJWKKty",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "The intended use for the key. The ECKeyJWK is always `enc` because Okta uses it to encrypt requests to Yubico.",
          "type": {
            "name": "ECKeyJWKUse",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "x": {
          "description": "The public x coordinate for the elliptic curve point",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "y": {
          "description": "The public y coordinate for the elliptic curve point",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ECKeyJWK"
    },
    "EmailCustomization": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailCustomization1Links",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "description": "The HTML body of the email. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).    Not required if Custom languages for Okta Email Templates is enabled. A `null` body is replaced with a default value from one of the following in priority order:  1. An existing default email customization, if one exists 2. Okta-provided translated content for the specified language, if one exists 3. Okta-provided translated content for the brand locale, if it's set  4. Okta-provided content in English",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "The UTC time at which this email customization was created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "A unique identifier for this email customization",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isDefault": {
          "description": "Whether this is the default customization for the email template. Each customized email template must have exactly one default customization. Defaults to `true` for the first customization and `false` thereafter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "language": {
          "description": "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "The UTC time at which this email customization was last updated.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "subject": {
          "description": "The email subject. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).   Not required if Custom languages for Okta Email Templates is enabled. A `null` subject is replaced with a default value from one of the following in priority order:  1. An existing default email customization, if one exists 2. Okta-provided translated content for the specified language, if one exists 3. Okta-provided translated content for the brand locale, if it's set 4. Okta-provided content in English",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailCustomization1Links": {
      "fields": {
        "preview": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "template": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "test": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EmailCustomization1LinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "EmailCustomizationInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailCustomization1LinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "description": "The HTML body of the email. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).    Not required if Custom languages for Okta Email Templates is enabled. A `null` body is replaced with a default value from one of the following in priority order:  1. An existing default email customization, if one exists 2. Okta-provided translated content for the specified language, if one exists 3. Okta-provided translated content for the brand locale, if it's set  4. Okta-provided content in English",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isDefault": {
          "description": "Whether this is the default customization for the email template. Each customized email template must have exactly one default customization. Defaults to `true` for the first customization and `false` thereafter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "language": {
          "description": "The language specified as an [IETF BCP 47 language tag](https://datatracker.ietf.org/doc/html/rfc5646)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "The email subject. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).   Not required if Custom languages for Okta Email Templates is enabled. A `null` subject is replaced with a default value from one of the following in priority order:  1. An existing default email customization, if one exists 2. Okta-provided translated content for the specified language, if one exists 3. Okta-provided translated content for the brand locale, if it's set 4. Okta-provided content in English",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailDefaultContent": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailDefaultContent1Links",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "description": "The HTML body of the email. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).    Not required if Custom languages for Okta Email Templates is enabled. A `null` body is replaced with a default value from one of the following in priority order:  1. An existing default email customization, if one exists 2. Okta-provided translated content for the specified language, if one exists 3. Okta-provided translated content for the brand locale, if it's set  4. Okta-provided content in English",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "The email subject. May contain [variable references](https://velocity.apache.org/engine/1.7/user-guide.html#references).   Not required if Custom languages for Okta Email Templates is enabled. A `null` subject is replaced with a default value from one of the following in priority order:  1. An existing default email customization, if one exists 2. Okta-provided translated content for the specified language, if one exists 3. Okta-provided translated content for the brand locale, if it's set 4. Okta-provided content in English",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailDefaultContent1Links": {
      "fields": {
        "preview": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "template": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "test": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EmailPreview": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailPreviewLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "body": {
          "description": "The email's HTML body",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subject": {
          "description": "The email's subject",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailPreviewLinks": {
      "fields": {
        "contentSource": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "defaultContent": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "template": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "test": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EmailServerListResponse": {
      "fields": {
        "email-servers": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EmailServerResponse",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "EmailServerRequestInput": {
      "fields": {
        "alias": {
          "description": "Human-readable name for your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "If `true`, routes all email traffic through your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "host": {
          "description": "Hostname or IP address of your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "password": {
          "description": "Password used to access your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "port": {
          "description": "Port number of your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "Username used to access your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailServerResponse": {
      "fields": {
        "alias": {
          "description": "Human-readable name for your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabled": {
          "description": "If `true`, routes all email traffic through your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "host": {
          "description": "Hostname or IP address of your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "port": {
          "description": "Port number of your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "username": {
          "description": "Username used to access your SMTP server",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailSettings": {
      "fields": {
        "recipients": {
          "type": {
            "name": "EmailSettingsRecipients",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailSettingsInput": {
      "fields": {
        "recipients": {
          "type": {
            "name": "EmailSettingsRecipients",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EmailSettings"
    },
    "EmailSettingsResponse": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailSettingsResponseLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "recipients": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailSettingsResponseRecipients",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailSettingsResponseLinks": {
      "fields": {
        "self": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "template": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EmailTemplateResponse": {
      "fields": {
        "_embedded": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailTemplateResponseEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailTemplateResponseLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "The name of this email template",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EmailTemplateResponseEmbedded": {
      "fields": {
        "customizationCount": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "settings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailSettingsResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EmailTemplateResponseLinks": {
      "fields": {
        "customizations": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "defaultContent": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "settings": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "test": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EmailTestAddressesInput": {
      "fields": {
        "from": {
          "description": "Email address that sends test emails",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "to": {
          "description": "Email address that receives test emails",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EmailTestAddresses"
    },
    "Embedded": {
      "description": "The Public Key Details are defined in the `_embedded` property of the Key object.",
      "fields": {
        "alg": {
          "description": "Algorithm used in the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "e": {
          "description": "RSA key value (exponent) for key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kid": {
          "description": "Unique identifier for the certificate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "description": "Cryptographic algorithm family for the certificate's keypair",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "RSA key value (modulus) for key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "Acceptable use of the certificate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "_embedded"
    },
    "EnrollmentActivationRequestInput": {
      "description": "Enrollment Initialization Request",
      "fields": {
        "credResponses": {
          "description": "List of credential responses from the fulfillment provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "WebAuthnCredResponseInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "fulfillmentProvider": {
          "description": "Name of the fulfillment provider for the WebAuthn Preregistration Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnrollmentActivationRequestFulfillmentProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pinResponseJwe": {
          "description": "Encrypted JWE of PIN response from the fulfillment provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "serial": {
          "description": "Serial number of the YubiKey",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "Firmware version of the YubiKey",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "yubicoSigningJwks": {
          "description": "List of usable signing keys from Yubico (in JWKS format) used to verify the JWS inside the JWE",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ECKeyJWKInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "EnrollmentActivationRequest"
    },
    "EnrollmentActivationResponse": {
      "description": "Enrollment Initialization Response",
      "fields": {
        "authenticatorEnrollmentIds": {
          "description": "List of IDs for preregistered WebAuthn Factors in Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "fulfillmentProvider": {
          "description": "Name of the fulfillment provider for the WebAuthn Preregistration Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnrollmentActivationResponseFulfillmentProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EnrollmentInitializationRequestInput": {
      "description": "Enrollment Initialization Request",
      "fields": {
        "enrollmentRpIds": {
          "description": "List of Relying Party hostnames to register on the YubiKey.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "fulfillmentProvider": {
          "description": "Name of the fulfillment provider for the WebAuthn Preregistration Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnrollmentInitializationRequestFulfillmentProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "yubicoTransportKeyJWK": {
          "description": "Elliptic Curve Key in JWK format, currently used during enrollment to encrypt fulfillment requests to Yubico, or during activation to verify Yubico's JWS objects in fulfillment responses. The currently agreed protocol uses P-384.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ECKeyJWKInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "EnrollmentInitializationRequest"
    },
    "EnrollmentInitializationResponse": {
      "description": "Yubico Transport Key in the form of a JWK, used to encrypt our fulfillment request to Yubico. The currently agreed protocol uses P-384.",
      "fields": {
        "credRequests": {
          "description": "List of credential requests for the fulfillment provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "WebAuthnCredRequest",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "fulfillmentProvider": {
          "description": "Name of the fulfillment provider for the WebAuthn Preregistration Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnrollmentInitializationResponseFulfillmentProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pinRequestJwe": {
          "description": "Encrypted JWE of PIN request for the fulfillment provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ErrorPage": {
      "fields": {
        "contentSecurityPolicySetting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContentSecurityPolicySetting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pageContent": {
          "description": "The HTML for the page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ErrorPageInput": {
      "fields": {
        "contentSecurityPolicySetting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContentSecurityPolicySettingInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pageContent": {
          "description": "The HTML for the page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHook": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "channel": {
          "type": {
            "name": "EventHookChannel",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp of the event hook creation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "createdBy": {
          "description": "The ID of the user who created the event hook",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "description": {
          "description": "Description of the event hook",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events": {
          "type": {
            "name": "EventSubscriptions",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique key for the event hook",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Date of the last event hook update",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Display name for the event hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the event hook",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "verificationStatus": {
          "description": "Verification status of the event hook. `UNVERIFIED` event hooks won't receive any events.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookVerificationStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookChannel": {
      "fields": {
        "config": {
          "type": {
            "name": "EventHookChannelConfig",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The channel type. Currently supports `HTTP`.",
          "type": {
            "name": "EventHookChannelType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "Version of the channel. Currently the only supported version is `1.0.0``.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookChannelConfig": {
      "fields": {
        "authScheme": {
          "description": "The authentication scheme used for this request.  To use Basic Auth for authentication, set `type` to `HEADER`, `key` to `Authorization`, and `value` to the Base64-encoded string of \"username:password\". Ensure that you include the scheme (including space) as part of the `value` parameter. For example, `Basic YWRtaW46c3VwZXJzZWNyZXQ=`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookChannelConfigAuthScheme",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "headers": {
          "description": "Optional list of key/value pairs for headers that can be sent with the request to the external service. For example, `X-Other-Header` is an example of an optional header, with a value of `my-header-value`, that you want Okta to pass to your external service.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "EventHookChannelConfigHeader",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "method": {
          "description": "The method of the Okta event hook request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "uri": {
          "description": "The external service endpoint called to execute the event hook handler",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookChannelConfigAuthScheme": {
      "description": "The authentication scheme used for this request.  To use Basic Auth for authentication, set `type` to `HEADER`, `key` to `Authorization`, and `value` to the Base64-encoded string of \"username:password\". Ensure that you include the scheme (including space) as part of the `value` parameter. For example, `Basic YWRtaW46c3VwZXJzZWNyZXQ=`.",
      "fields": {
        "key": {
          "description": "The name for the authorization header",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The authentication scheme type. Currently only supports `HEADER`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookChannelConfigAuthSchemeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookChannelConfigAuthSchemeInput": {
      "description": "The authentication scheme used for this request.  To use Basic Auth for authentication, set `type` to `HEADER`, `key` to `Authorization`, and `value` to the Base64-encoded string of \"username:password\". Ensure that you include the scheme (including space) as part of the `value` parameter. For example, `Basic YWRtaW46c3VwZXJzZWNyZXQ=`.",
      "fields": {
        "key": {
          "description": "The name for the authorization header",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The authentication scheme type. Currently only supports `HEADER`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookChannelConfigAuthSchemeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The header value. This secret key is passed to your external service endpoint for security verification. This property is not returned in the response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventHookChannelConfigAuthScheme"
    },
    "EventHookChannelConfigHeader": {
      "fields": {
        "key": {
          "description": "The optional field or header name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value for the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookChannelConfigHeaderInput": {
      "fields": {
        "key": {
          "description": "The optional field or header name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The value for the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventHookChannelConfigHeader"
    },
    "EventHookChannelConfigInput": {
      "fields": {
        "authScheme": {
          "description": "The authentication scheme used for this request.  To use Basic Auth for authentication, set `type` to `HEADER`, `key` to `Authorization`, and `value` to the Base64-encoded string of \"username:password\". Ensure that you include the scheme (including space) as part of the `value` parameter. For example, `Basic YWRtaW46c3VwZXJzZWNyZXQ=`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookChannelConfigAuthSchemeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "headers": {
          "description": "Optional list of key/value pairs for headers that can be sent with the request to the external service. For example, `X-Other-Header` is an example of an optional header, with a value of `my-header-value`, that you want Okta to pass to your external service.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "EventHookChannelConfigHeaderInput",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "uri": {
          "description": "The external service endpoint called to execute the event hook handler",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventHookChannelConfig"
    },
    "EventHookChannelInput": {
      "fields": {
        "config": {
          "type": {
            "name": "EventHookChannelConfigInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The channel type. Currently supports `HTTP`.",
          "type": {
            "name": "EventHookChannelType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "Version of the channel. Currently the only supported version is `1.0.0``.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventHookChannel"
    },
    "EventHookFilterMapObject": {
      "fields": {
        "condition": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookFilterMapObjectCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "event": {
          "description": "The filtered event type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookFilterMapObjectCondition": {
      "fields": {
        "expression": {
          "description": "The Okta Expression language statement that filters the event type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "Internal field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookFilterMapObjectConditionInput": {
      "fields": {
        "expression": {
          "description": "The Okta Expression language statement that filters the event type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventHookFilterMapObjectCondition"
    },
    "EventHookFilterMapObjectInput": {
      "fields": {
        "condition": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookFilterMapObjectConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "event": {
          "description": "The filtered event type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventHookFilterMapObject"
    },
    "EventHookFilters": {
      "description": "**Note:** Event hook filters is a [self-service Early Access (EA)](/openapi/okta-management/guides/release-lifecycle/#early-access-ea) to enable. If you want to disable this feature, it's recommended to first remove all event filters.",
      "fields": {
        "eventFilterMap": {
          "description": "The object that maps the filter to the event type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventHookFilterMapObject",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "description": "The type of filter. Currently only supports `EXPRESSION_LANGUAGE`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventHookFiltersInput": {
      "description": "**Note:** Event hook filters is a [self-service Early Access (EA)](/openapi/okta-management/guides/release-lifecycle/#early-access-ea) to enable. If you want to disable this feature, it's recommended to first remove all event filters.",
      "fields": {
        "eventFilterMap": {
          "description": "The object that maps the filter to the event type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EventHookFilterMapObjectInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "EventHookFilters"
    },
    "EventHookInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "channel": {
          "type": {
            "name": "EventHookChannelInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Description of the event hook",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "events": {
          "type": {
            "name": "EventSubscriptionsInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "Display name for the event hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventHook"
    },
    "EventHookLinks": {
      "fields": {
        "deactivate": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "verify": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "EventHookLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "EventSubscriptions": {
      "fields": {
        "filter": {
          "description": "**Note:** Event hook filters is a [self-service Early Access (EA)](/openapi/okta-management/guides/release-lifecycle/#early-access-ea) to enable. If you want to disable this feature, it's recommended to first remove all event filters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookFilters",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "items": {
          "description": "The subscribed event types that trigger the event hook. When you register an event hook you need to specify which events you want to subscribe to. To see the list of event types currently eligible for use in event hooks, use the [Event Types catalog](https://developer.okta.com/docs/reference/api/event-types/#catalog) and search with the parameter `event-hook-eligible`.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The events object type. Currently supports `EVENT_TYPE`.",
          "type": {
            "name": "EventSubscriptionType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "EventSubscriptionsInput": {
      "fields": {
        "filter": {
          "description": "**Note:** Event hook filters is a [self-service Early Access (EA)](/openapi/okta-management/guides/release-lifecycle/#early-access-ea) to enable. If you want to disable this feature, it's recommended to first remove all event filters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EventHookFiltersInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "items": {
          "description": "The subscribed event types that trigger the event hook. When you register an event hook you need to specify which events you want to subscribe to. To see the list of event types currently eligible for use in event hooks, use the [Event Types catalog](https://developer.okta.com/docs/reference/api/event-types/#catalog) and search with the parameter `event-hook-eligible`.",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The events object type. Currently supports `EVENT_TYPE`.",
          "type": {
            "name": "EventSubscriptionType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "EventSubscriptions"
    },
    "Expression": {
      "fields": {
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ExpressionInput": {
      "fields": {
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Expression"
    },
    "Feature": {
      "description": "Specifies feature release cycle information",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FeatureLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Brief description of the feature and what it provides",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for this feature",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the feature",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "stage": {
          "description": "**Note:** If a feature's stage is `OPEN BETA`, you can update it only in Preview cells. If a feature's stage is `CLOSED BETA`, you can disable it only in Preview cells.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FeatureStage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "Setting status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnabledStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of feature",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FeatureType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FeatureLinks": {
      "fields": {
        "dependencies": {
          "description": "Link to feature dependencies",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FeatureLinks1Dependencies",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "dependents": {
          "description": "Link to feature dependents",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FeatureLinks1Dependents",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "FeatureLinks1Dependencies": {
      "description": "Link to feature dependencies",
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FeatureLinks1Dependents": {
      "description": "Link to feature dependents",
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FeatureStage": {
      "description": "**Note:** If a feature's stage is `OPEN BETA`, you can update it only in Preview cells. If a feature's stage is `CLOSED BETA`, you can disable it only in Preview cells.",
      "fields": {
        "state": {
          "description": "Indicates the release state of the feature",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FeatureStageState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "Current release stage of the feature",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FeatureStageValue",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ForgotPasswordResponse": {
      "fields": {
        "resetPasswordUrl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "FulfillmentDataInput": {
      "description": "Fulfillment provider details",
      "fields": {
        "customizationId": {
          "description": "ID for the set of custom configurations of the requested Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "inventoryProductId": {
          "description": "ID for the specific inventory bucket of the requested Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "productId": {
          "description": "ID for the make and model of the requested Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "FulfillmentData"
    },
    "FulfillmentRequestInput": {
      "description": "Fulfillment Request",
      "fields": {
        "fulfillmentData": {
          "description": "Fulfillment provider details",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FulfillmentDataInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "fulfillmentProvider": {
          "description": "Name of the fulfillment provider for the WebAuthn Preregistration Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FulfillmentRequestFulfillmentProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "FulfillmentRequest"
    },
    "GetGroupAssignedRoleResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GetGroupAssignedRoleResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GetUserAssignedRoleResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GetUserAssignedRoleResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GrantResourcesHrefObject": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GrantTypePolicyRuleCondition": {
      "description": "Array of grant types that this condition includes. Determines the mechanism that Okta uses to authorize the creation of the tokens.",
      "fields": {
        "include": {
          "description": "Array of grant types that this condition includes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "GrantTypePolicyRuleConditionInput": {
      "description": "Array of grant types that this condition includes. Determines the mechanism that Okta uses to authorize the creation of the tokens.",
      "fields": {
        "include": {
          "description": "Array of grant types that this condition includes.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "GrantTypePolicyRuleCondition"
    },
    "Group": {
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Group was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique ID for the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastMembershipUpdated": {
          "description": "Timestamp when the Groups memberships were last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Group's Profile was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "objectClass": {
          "description": "Determines the Group's `profile`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Determines how a Group's Profile and memberships are managed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupLinks": {
      "description": "[Discoverable resources](/openapi/okta-management/management/tag/Group/#tag/Group/operation/listGroups!c=200&path=_links&t=response) related to the Group",
      "fields": {
        "apps": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logo": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "source": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GroupOwner": {
      "fields": {
        "displayName": {
          "description": "The display name of the group owner",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The `id` of the group owner",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the group owner was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "originId": {
          "description": "The ID of the app instance if the `originType` is `APPLICATION`. This value is `NULL` if `originType` is `OKTA_DIRECTORY`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "originType": {
          "description": "The source where group ownership is managed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupOwnerOriginType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resolved": {
          "description": "If `originType`is APPLICATION, this parameter is set to `FALSE` until the owners `originId` is reconciled with an associated Okta ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "The entity type of the owner",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupOwnerType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupProfile": {
      "description": "Specifies required and optional properties for a Group. The `objectClass` of a Group determines which additional properties are available.  You can extend Group Profiles with custom properties, but you must first add the properties to the Group Profile schema before you can reference them. Use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Schema/)to manage schema extensions.  Custom properties can contain HTML tags. It is the client's responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.",
      "fields": {
        "description": {
          "description": "Description of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "dn": {
          "description": "The distinguished name of the Windows Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalId": {
          "description": "Base-64 encoded GUID (`objectGUID`) of the Windows Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "samAccountName": {
          "description": "Pre-Windows 2000 name of the Windows Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "windowsDomainQualifiedName": {
          "description": "Fully qualified name of the Windows Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupRule": {
      "fields": {
        "actions": {
          "description": "Defines which users and groups to assign",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "description": "Defines group rule conditions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleConditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Creation date for group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "ID of the group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Date group rule was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Name of the Group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        },
        "status": {
          "description": "Status of group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type to indicate a Group rule operation. Only `group_rule` is allowed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupRuleAction": {
      "description": "Defines which users and groups to assign",
      "fields": {
        "assignUserToGroups": {
          "description": "Contains the `groupIds` array",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleGroupAssignment",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GroupRuleActionInput": {
      "description": "Defines which users and groups to assign",
      "fields": {
        "assignUserToGroups": {
          "description": "Contains the `groupIds` array",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleGroupAssignmentInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "GroupRuleAction"
    },
    "GroupRuleConditions": {
      "description": "Defines group rule conditions",
      "fields": {
        "expression": {
          "description": "Defines Okta specific [group-rules expression](https://developer.okta.com/docs/reference/okta-expression-language/#expressions-in-group-rules)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleExpression",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "people": {
          "description": "Defines conditions for `people` in a group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRulePeopleCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GroupRuleConditionsInput": {
      "description": "Defines group rule conditions",
      "fields": {
        "expression": {
          "description": "Defines Okta specific [group-rules expression](https://developer.okta.com/docs/reference/okta-expression-language/#expressions-in-group-rules)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleExpressionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "people": {
          "description": "Defines conditions for `people` in a group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRulePeopleConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "GroupRuleConditions"
    },
    "GroupRuleExpression": {
      "description": "Defines Okta specific [group-rules expression](https://developer.okta.com/docs/reference/okta-expression-language/#expressions-in-group-rules)",
      "fields": {
        "type": {
          "description": "Expression type. Only valid value is '`urn:okta:expression:1.0`'.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "Okta expression that would result in a Boolean value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupRuleExpressionInput": {
      "description": "Defines Okta specific [group-rules expression](https://developer.okta.com/docs/reference/okta-expression-language/#expressions-in-group-rules)",
      "fields": {
        "type": {
          "description": "Expression type. Only valid value is '`urn:okta:expression:1.0`'.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "Okta expression that would result in a Boolean value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "GroupRuleExpression"
    },
    "GroupRuleGroupAssignment": {
      "description": "Contains the `groupIds` array",
      "fields": {
        "groupIds": {
          "description": "Array of `groupIds` to which Users are added",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "GroupRuleGroupAssignmentInput": {
      "description": "Contains the `groupIds` array",
      "fields": {
        "groupIds": {
          "description": "Array of `groupIds` to which Users are added",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "GroupRuleGroupAssignment"
    },
    "GroupRuleGroupCondition": {
      "description": "Currently not supported",
      "fields": {
        "exclude": {
          "description": "Currently not supported",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "GroupRuleGroupConditionInput": {
      "description": "Currently not supported",
      "fields": {
        "exclude": {
          "description": "Currently not supported",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "GroupRuleGroupCondition"
    },
    "GroupRuleInput": {
      "fields": {
        "actions": {
          "description": "Defines which users and groups to assign",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleActionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "description": "Defines group rule conditions",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "Name of the Group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        },
        "status": {
          "description": "Status of group rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type to indicate a Group rule operation. Only `group_rule` is allowed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "GroupRule"
    },
    "GroupRulePeopleCondition": {
      "description": "Defines conditions for `people` in a group rule",
      "fields": {
        "groups": {
          "description": "Currently not supported",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleGroupCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Defines conditions specific to user exclusion",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleUserCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GroupRulePeopleConditionInput": {
      "description": "Defines conditions for `people` in a group rule",
      "fields": {
        "groups": {
          "description": "Currently not supported",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleGroupConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Defines conditions specific to user exclusion",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupRuleUserConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "GroupRulePeopleCondition"
    },
    "GroupRuleUserCondition": {
      "description": "Defines conditions specific to user exclusion",
      "fields": {
        "exclude": {
          "description": "Excluded `userIds` when processing rules",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "GroupRuleUserConditionInput": {
      "description": "Defines conditions specific to user exclusion",
      "fields": {
        "exclude": {
          "description": "Excluded `userIds` when processing rules",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "GroupRuleUserCondition"
    },
    "GroupSchema": {
      "fields": {
        "$schema": {
          "description": "JSON Schema version identifier",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Schema was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "definitions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaDefinitions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Description for the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "URI of Group Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Schema was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of [root Schema](https://tools.ietf.org/html/draft-zyp-json-schema-04#section-3.4)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupSchemaAttribute": {
      "fields": {
        "description": {
          "description": "Description of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enum": {
          "description": "Enumerated value of the property.  The value of the property is limited to one of the values specified in the enum definition. The list of values for the enum must consist of unique elements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "externalName": {
          "description": "Name of the property as it exists in an external application",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalNamespace": {
          "description": "Namespace from the external application",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "format": {
          "description": "Identifies the type of data represented by the string",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "items": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeItems",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "master": {
          "description": "Identifies where the property is mastered",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMaster",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "maxLength": {
          "description": "Maximum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "minLength": {
          "description": "Minimum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "mutability": {
          "description": "Defines the mutability of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMutabilityString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oneOf": {
          "description": "Non-empty array of valid JSON schemas.  Okta only supports `oneOf` for specifying display names for an `enum`. Each schema has the following format:    ```     {       \"const\": \"enumValue\",       \"title\": \"display name\"     }   ```json  When `enum` is used in conjunction with `oneOf`, you must keep the set of enumerated values and their order.    ```     {\"enum\": [\"S\",\"M\",\"L\",\"XL\"],       \"oneOf\": [         {\"const\": \"S\", \"title\": \"Small\"},         {\"const\": \"M\", \"title\": \"Medium\"},         {\"const\": \"L\", \"title\": \"Large\"},         {\"const\": \"XL\", \"title\": \"Extra Large\"}       ]     }   ```json  The `oneOf` key is only supported in conjunction with `enum` and provides a mechanism to return a display name for the `enum` value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeEnum",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "permissions": {
          "description": "Access control permissions for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributePermission",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "required": {
          "description": "Determines whether the property is required",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scope": {
          "description": "Determines whether a group attribute can be set at the individual or group level",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "type": {
          "description": "Type of property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unique": {
          "description": "Determines whether property values must be unique",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "GroupSchemaAttributeInput": {
      "fields": {
        "description": {
          "description": "Description of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enum": {
          "description": "Enumerated value of the property.  The value of the property is limited to one of the values specified in the enum definition. The list of values for the enum must consist of unique elements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "externalName": {
          "description": "Name of the property as it exists in an external application",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalNamespace": {
          "description": "Namespace from the external application",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "format": {
          "description": "Identifies the type of data represented by the string",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "items": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeItemsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "master": {
          "description": "Identifies where the property is mastered",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMasterInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "maxLength": {
          "description": "Maximum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "minLength": {
          "description": "Minimum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "mutability": {
          "description": "Defines the mutability of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMutabilityString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oneOf": {
          "description": "Non-empty array of valid JSON schemas.  Okta only supports `oneOf` for specifying display names for an `enum`. Each schema has the following format:    ```     {       \"const\": \"enumValue\",       \"title\": \"display name\"     }   ```json  When `enum` is used in conjunction with `oneOf`, you must keep the set of enumerated values and their order.    ```     {\"enum\": [\"S\",\"M\",\"L\",\"XL\"],       \"oneOf\": [         {\"const\": \"S\", \"title\": \"Small\"},         {\"const\": \"M\", \"title\": \"Medium\"},         {\"const\": \"L\", \"title\": \"Large\"},         {\"const\": \"XL\", \"title\": \"Extra Large\"}       ]     }   ```json  The `oneOf` key is only supported in conjunction with `enum` and provides a mechanism to return a display name for the `enum` value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeEnumInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "permissions": {
          "description": "Access control permissions for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributePermissionInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "required": {
          "description": "Determines whether the property is required",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scope": {
          "description": "Determines whether a group attribute can be set at the individual or group level",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "type": {
          "description": "Type of property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unique": {
          "description": "Determines whether property values must be unique",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "GroupSchemaAttribute"
    },
    "GroupSchemaBase": {
      "fields": {
        "id": {
          "description": "The subschema name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. These properties can't be removed or edited, regardless of any attempt to do so.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaBaseProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required": {
          "description": "A collection indicating required property names",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The object type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupSchemaBaseInput": {
      "fields": {
        "properties": {
          "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. These properties can't be removed or edited, regardless of any attempt to do so.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaBasePropertiesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "GroupSchemaBase"
    },
    "GroupSchemaBaseProperties": {
      "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. These properties can't be removed or edited, regardless of any attempt to do so.",
      "fields": {
        "description": {
          "description": "Human readable description of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "Human readable description of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GroupSchemaBasePropertiesInput": {
      "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. These properties can't be removed or edited, regardless of any attempt to do so.",
      "fields": {
        "description": {
          "description": "Human readable description of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "Human readable description of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "GroupSchemaBaseProperties"
    },
    "GroupSchemaCustom": {
      "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
      "fields": {
        "id": {
          "description": "The subschema name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "description": "The `#custom` object properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required": {
          "description": "A collection indicating required property names",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The object type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "GroupSchemaCustomInput": {
      "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
      "fields": {
        "properties": {
          "description": "The `#custom` object properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "GroupSchemaCustom"
    },
    "GroupSchemaDefinitions": {
      "fields": {
        "base": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaBase",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "custom": {
          "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaCustom",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "GroupSchemaDefinitionsInput": {
      "fields": {
        "base": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaBaseInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "custom": {
          "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaCustomInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "GroupSchemaDefinitions"
    },
    "GroupSchemaInput": {
      "fields": {
        "definitions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaDefinitionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Description for the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaPropertiesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "GroupSchema"
    },
    "HookKey": {
      "description": "The `id` property in the response as `id` serves as the unique ID for the key, which you can specify when invoking other CRUD operations.   The `keyId` provided in the response is the alias of the public key that you can use to get details of the public key data in a separate call.",
      "fields": {
        "created": {
          "description": "Timestamp when the key was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "The unique identifier for the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isUsed": {
          "description": "Whether this key is currently in use by other applications",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "boolean"
          }
        },
        "keyId": {
          "description": "The alias of the public key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the key was updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Display name of the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255,
            "minLength": 1
          }
        }
      }
    },
    "HostedPage": {
      "fields": {
        "type": {
          "type": {
            "name": "HostedPageType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "HostedPageInput": {
      "fields": {
        "type": {
          "type": {
            "name": "HostedPageType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "HostedPage"
    },
    "HrefCsrPublishLink": {
      "description": "Link to publish CSR",
      "fields": {
        "hints": {
          "description": "Describes allowed HTTP verbs for the `href`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CsrPublishHrefHints",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "href": {
          "description": "Link URI",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "HrefCsrSelfLink": {
      "description": "Link to the resource (self)",
      "fields": {
        "hints": {
          "description": "Describes allowed HTTP verbs for the `href`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CsrSelfHrefHints",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "href": {
          "description": "Link URI",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "HrefHintsGuidanceObject": {
      "fields": {
        "allow": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "HttpMethod",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "guidance": {
          "description": "Specifies the URI to invoke for granting scope consent required to complete the OAuth 2.0 connection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "HrefObjectAuthorizeLink": {
      "description": "Link to authorize scopes",
      "fields": {
        "hints": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefHintsGuidanceObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "href": {
          "description": "Link URI",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IamRole": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IamRoleLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the role was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "Description of the role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique key for the role",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Unique label for the role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the role was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "IamRoleLinks": {
      "fields": {
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "IamRoles": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. Use the `LinksNext` object for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksNext",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "roles": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IamRole",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "IdPCertificateCredentialInput": {
      "fields": {
        "x5c": {
          "description": "Base64-encoded X.509 certificate chain with DER encoding",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "IdPCertificateCredential"
    },
    "IdPCsr": {
      "description": "Defines a CSR for a signature or decryption credential for an IdP",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdPCsrLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "csr": {
          "description": "Base64-encoded CSR in DER format",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "description": "Cryptographic algorithm family for the CSR's keypair",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IdPCsrLinks": {
      "fields": {
        "publish": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "IdentityProvider": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique key for the IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuerMode": {
          "description": "Indicates whether Okta uses the original Okta org domain URL or a custom domain URL in the request to the social IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderIssuerMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Unique name for the IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "policy": {
          "description": "Policy settings for the IdP.  The following provisioning and account linking actions are supported by each IdP provider: | IdP type                                                          | User provisioning actions | Group provisioning actions            | Account link actions | Account link filters | | ----------------------------------------------------------------- | ------------------------- | ------------------------------------- | -------------------- | -------------------- | | `SAML2`                                                           | `AUTO` or `DISABLED`      | `NONE`, `ASSIGN`, `APPEND`, or `SYNC` | `AUTO`, `DISABLED`   | `groups`             | | `X509`                                                            | `DISABLED`                | No support for JIT provisioning       |                      |                      | | All social IdP types (any IdP type that isn't `SAML2` or `X509`)  | `AUTO`, `DISABLED`        | `NONE` or `ASSIGN`                    | `AUTO`, `DISABLED`   | `groups`             |",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderPolicy",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "properties": {
          "description": "The properties in the Identity Provider Properties object vary depending on the IdP type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "protocol": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderProtocol",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The Identity Provider object's `type` property identifies the social or enterprise Identity Provider used for authentication.  Each Identity Provider uses a specific protocol, therefore the `protocol` property must correspond with the IdP `type`.  If the protocol is OAuth 2.0-based, the Protocol object's `scopes` property must also correspond with the scopes supported by the IdP `type`.  For policy actions supported by each IdP type, see [IdP type policy actions](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/IdentityProvider/#tag/IdentityProvider/operation/createIdentityProvider!path=policy&t=request).  | Type               | Description                                                                                                                                           | Corresponding protocol | Corresponding protocol scopes                                         | | ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | --------------------------------------------------------------------  | | `AMAZON`           | [Amazon](https://developer.amazon.com/settings/console/registration?return_to=/)&nbsp;as the Identity Provider                                        | OpenID Connect         | `profile`, `profile:user_id`                                          | | `APPLE`            | [Apple](https://developer.apple.com/sign-in-with-apple/)&nbsp;as the Identity Provider                                                                | OpenID Connect         | `names`, `email`, `openid`                                            | | `DISCORD`          | [Discord](https://discord.com/login)&nbsp;as the Identity Provider                                                                                    | OAuth 2.0              | `identify`, `email`                                                   | | `FACEBOOK`         | [Facebook](https://developers.facebook.com)&nbsp;as the Identity Provider                                                                             | OAuth 2.0              | `public_profile`, `email`                                             | | `GITHUB`           | [GitHub](https://github.com/join)&nbsp;as the Identity Provider                                                                                       | OAuth 2.0              | `user`                                                                | | `GITLAB`           | [GitLab](https://gitlab.com/users/sign_in)&nbsp;as the Identity Provider                                                                              | OpenID Connect         | `openid`, `read_user`, `profile`, `email`                             | | `GOOGLE`           | [Google](https://accounts.google.com/signup)&nbsp;as the Identity Provider                                                                            | OpenID Connect         | `openid`, `email`, `profile`                                          | | `LINKEDIN`         | [LinkedIn](https://developer.linkedin.com/)&nbsp;as the Identity Provider                                                                             | OAuth 2.0              | `r_emailaddress`, `r_liteprofile`                                     | | `LOGINGOV`         | [Login.gov](https://developers.login.gov/)&nbsp;as the Identity Provider                                                                              | OpenID Connect         | `email`, `profile`, `profile:name`                                    | | `LOGINGOV_SANDBOX` | [Login.gov's identity sandbox](https://developers.login.gov/testing/)&nbsp;as the Identity Provider                                                   | OpenID Connect         | `email`, `profile`, `profile:name`                                    | | `MICROSOFT`        | [Microsoft Enterprise SSO](https://azure.microsoft.com/)&nbsp;as the Identity Provider                                                                | OpenID Connect         | `openid`, `email`, `profile`, `https://graph.microsoft.com/User.Read` | | `OIDC`             | IdP provider that supports [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html)                                                    | OpenID Connect         | `openid`, `email`, `profile`                                          | | `PAYPAL`           | [Paypal](https://www.paypal.com/signin)&nbsp;as the Identity Provider                                                                                 | OpenID Connect         | `openid`, `email`, `profile`                                          | | `PAYPAL_SANDBOX`   | [Paypal Sandbox](https://developer.paypal.com/tools/sandbox/)&nbsp;as the Identity Provider                                                           | OpenID Connect         | `openid`, `email`, `profile`                                          | | `SALESFORCE`       | [SalesForce](https://login.salesforce.com/)&nbsp;as the Identity Provider                                                                             | OAuth 2.0              | `id`, `email`, `profile`                                              | | `SAML2`            | Enterprise IdP provider that supports the [SAML 2.0 Web Browser SSO Profile](https://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf) | SAML 2.0               |                                                                       | | `SPOTIFY`          | [Spotify](https://developer.spotify.com/)&nbsp;as the Identity Provider                                                                               | OpenID Connect         | `user-read-email`, `user-read-private`                                | | `X509`             | [Smart Card IdP](https://tools.ietf.org/html/rfc5280)                                                                                                 | Mutual TLS             |                                                                       | | `XERO`             | [Xero](https://www.xero.com/us/signup/api/)&nbsp;as the Identity Provider                                                                             | OpenID Connect         | `openid`, `profile`, `email`                                          | | `YAHOO`            | [Yahoo](https://login.yahoo.com/)&nbsp;as the Identity Provider                                                                                       | OpenID Connect         | `openid`, `profile`, `email`                                          | | `YAHOOJP`          | [Yahoo Japan](https://login.yahoo.co.jp/config/login)&nbsp;as the Identity Provider                                                                   | OpenID Connect         | `openid`, `profile`, `email`                                          |",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IdentityProviderApplicationUser": {
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the IdP User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderApplicationUserLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "externalId": {
          "description": "Unique IdP-specific identifier for the User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 512
          }
        },
        "id": {
          "description": "Unique key of the User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "description": "**Note:** Okta variable names have reserved characters that may conflict with the name of an IdP assertion attribute. You can use the **External name** to define the attribute name as defined in an IdP assertion such as a SAML attribute name.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "IdentityProviderApplicationUserLinks": {
      "fields": {
        "idp": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "next": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "IdentityProviderInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issuerMode": {
          "description": "Indicates whether Okta uses the original Okta org domain URL or a custom domain URL in the request to the social IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderIssuerMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Unique name for the IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "policy": {
          "description": "Policy settings for the IdP.  The following provisioning and account linking actions are supported by each IdP provider: | IdP type                                                          | User provisioning actions | Group provisioning actions            | Account link actions | Account link filters | | ----------------------------------------------------------------- | ------------------------- | ------------------------------------- | -------------------- | -------------------- | | `SAML2`                                                           | `AUTO` or `DISABLED`      | `NONE`, `ASSIGN`, `APPEND`, or `SYNC` | `AUTO`, `DISABLED`   | `groups`             | | `X509`                                                            | `DISABLED`                | No support for JIT provisioning       |                      |                      | | All social IdP types (any IdP type that isn't `SAML2` or `X509`)  | `AUTO`, `DISABLED`        | `NONE` or `ASSIGN`                    | `AUTO`, `DISABLED`   | `groups`             |",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderPolicyInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "properties": {
          "description": "The properties in the Identity Provider Properties object vary depending on the IdP type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderPropertiesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "protocol": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderProtocolInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The Identity Provider object's `type` property identifies the social or enterprise Identity Provider used for authentication.  Each Identity Provider uses a specific protocol, therefore the `protocol` property must correspond with the IdP `type`.  If the protocol is OAuth 2.0-based, the Protocol object's `scopes` property must also correspond with the scopes supported by the IdP `type`.  For policy actions supported by each IdP type, see [IdP type policy actions](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/IdentityProvider/#tag/IdentityProvider/operation/createIdentityProvider!path=policy&t=request).  | Type               | Description                                                                                                                                           | Corresponding protocol | Corresponding protocol scopes                                         | | ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- | --------------------------------------------------------------------  | | `AMAZON`           | [Amazon](https://developer.amazon.com/settings/console/registration?return_to=/)&nbsp;as the Identity Provider                                        | OpenID Connect         | `profile`, `profile:user_id`                                          | | `APPLE`            | [Apple](https://developer.apple.com/sign-in-with-apple/)&nbsp;as the Identity Provider                                                                | OpenID Connect         | `names`, `email`, `openid`                                            | | `DISCORD`          | [Discord](https://discord.com/login)&nbsp;as the Identity Provider                                                                                    | OAuth 2.0              | `identify`, `email`                                                   | | `FACEBOOK`         | [Facebook](https://developers.facebook.com)&nbsp;as the Identity Provider                                                                             | OAuth 2.0              | `public_profile`, `email`                                             | | `GITHUB`           | [GitHub](https://github.com/join)&nbsp;as the Identity Provider                                                                                       | OAuth 2.0              | `user`                                                                | | `GITLAB`           | [GitLab](https://gitlab.com/users/sign_in)&nbsp;as the Identity Provider                                                                              | OpenID Connect         | `openid`, `read_user`, `profile`, `email`                             | | `GOOGLE`           | [Google](https://accounts.google.com/signup)&nbsp;as the Identity Provider                                                                            | OpenID Connect         | `openid`, `email`, `profile`                                          | | `LINKEDIN`         | [LinkedIn](https://developer.linkedin.com/)&nbsp;as the Identity Provider                                                                             | OAuth 2.0              | `r_emailaddress`, `r_liteprofile`                                     | | `LOGINGOV`         | [Login.gov](https://developers.login.gov/)&nbsp;as the Identity Provider                                                                              | OpenID Connect         | `email`, `profile`, `profile:name`                                    | | `LOGINGOV_SANDBOX` | [Login.gov's identity sandbox](https://developers.login.gov/testing/)&nbsp;as the Identity Provider                                                   | OpenID Connect         | `email`, `profile`, `profile:name`                                    | | `MICROSOFT`        | [Microsoft Enterprise SSO](https://azure.microsoft.com/)&nbsp;as the Identity Provider                                                                | OpenID Connect         | `openid`, `email`, `profile`, `https://graph.microsoft.com/User.Read` | | `OIDC`             | IdP provider that supports [OpenID Connect](https://openid.net/specs/openid-connect-core-1_0.html)                                                    | OpenID Connect         | `openid`, `email`, `profile`                                          | | `PAYPAL`           | [Paypal](https://www.paypal.com/signin)&nbsp;as the Identity Provider                                                                                 | OpenID Connect         | `openid`, `email`, `profile`                                          | | `PAYPAL_SANDBOX`   | [Paypal Sandbox](https://developer.paypal.com/tools/sandbox/)&nbsp;as the Identity Provider                                                           | OpenID Connect         | `openid`, `email`, `profile`                                          | | `SALESFORCE`       | [SalesForce](https://login.salesforce.com/)&nbsp;as the Identity Provider                                                                             | OAuth 2.0              | `id`, `email`, `profile`                                              | | `SAML2`            | Enterprise IdP provider that supports the [SAML 2.0 Web Browser SSO Profile](https://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf) | SAML 2.0               |                                                                       | | `SPOTIFY`          | [Spotify](https://developer.spotify.com/)&nbsp;as the Identity Provider                                                                               | OpenID Connect         | `user-read-email`, `user-read-private`                                | | `X509`             | [Smart Card IdP](https://tools.ietf.org/html/rfc5280)                                                                                                 | Mutual TLS             |                                                                       | | `XERO`             | [Xero](https://www.xero.com/us/signup/api/)&nbsp;as the Identity Provider                                                                             | OpenID Connect         | `openid`, `profile`, `email`                                          | | `YAHOO`            | [Yahoo](https://login.yahoo.com/)&nbsp;as the Identity Provider                                                                                       | OpenID Connect         | `openid`, `profile`, `email`                                          | | `YAHOOJP`          | [Yahoo Japan](https://login.yahoo.co.jp/config/login)&nbsp;as the Identity Provider                                                                   | OpenID Connect         | `openid`, `profile`, `email`                                          |",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "IdentityProvider"
    },
    "IdentityProviderLinks": {
      "fields": {
        "acs": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "activate": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "authorize": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "clientRedirectUri": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "keys": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "metadata": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "IdentityProviderLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "IdentityProviderPolicy": {
      "fields": {
        "accountLink": {
          "description": "Specifies the behavior for linking an IdP User to an existing Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLink",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "maxClockSkew": {
          "description": "Maximum allowable clock skew when processing messages from the IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "provisioning": {
          "description": "Specifies the behavior for just-in-time (JIT) provisioning of an IdP User as a new Okta User and their Group memberships",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Provisioning",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subject": {
          "description": "Specifies the behavior for establishing, validating, and matching a username for an IdP User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicySubject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "IdentityProviderPolicyInput": {
      "fields": {
        "accountLink": {
          "description": "Specifies the behavior for linking an IdP User to an existing Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLinkInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "maxClockSkew": {
          "description": "Maximum allowable clock skew when processing messages from the IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "provisioning": {
          "description": "Specifies the behavior for just-in-time (JIT) provisioning of an IdP User as a new Okta User and their Group memberships",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "subject": {
          "description": "Specifies the behavior for establishing, validating, and matching a username for an IdP User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicySubjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "IdentityProviderPolicy"
    },
    "IdentityProviderProperties": {
      "description": "The properties in the Identity Provider Properties object vary depending on the IdP type",
      "fields": {
        "aalValue": {
          "description": "The [authentication assurance level](https://developers.login.gov/oidc/#aal-values) (AAL) value for the Login.gov IdP.  See [Add a Login.gov IdP](https://developer.okta.com/docs/guides/add-logingov-idp/). Applies to `LOGINGOV` and `LOGINGOV_SANDBOX` IdP types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "additionalAmr": {
          "description": "The additional Assurance Methods References (AMR) values for Smart Card IdPs. Applies to `X509` IdP type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IdentityProviderPropertiesAdditionalAmr",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ialValue": {
          "description": "The [type of identity verification](https://developers.login.gov/oidc/#ial-values) (IAL) value for the Login.gov IdP.  See [Add a Login.gov IdP](https://developer.okta.com/docs/guides/add-logingov-idp/). Applies to `LOGINGOV` and `LOGINGOV_SANDBOX` IdP types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IdentityProviderPropertiesInput": {
      "description": "The properties in the Identity Provider Properties object vary depending on the IdP type",
      "fields": {
        "aalValue": {
          "description": "The [authentication assurance level](https://developers.login.gov/oidc/#aal-values) (AAL) value for the Login.gov IdP.  See [Add a Login.gov IdP](https://developer.okta.com/docs/guides/add-logingov-idp/). Applies to `LOGINGOV` and `LOGINGOV_SANDBOX` IdP types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "additionalAmr": {
          "description": "The additional Assurance Methods References (AMR) values for Smart Card IdPs. Applies to `X509` IdP type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IdentityProviderPropertiesAdditionalAmr",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ialValue": {
          "description": "The [type of identity verification](https://developers.login.gov/oidc/#ial-values) (IAL) value for the Login.gov IdP.  See [Add a Login.gov IdP](https://developer.okta.com/docs/guides/add-logingov-idp/). Applies to `LOGINGOV` and `LOGINGOV_SANDBOX` IdP types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "IdentityProviderProperties"
    },
    "IdentityProviderProtocol": {
      "description": "IdP-specific protocol settings for endpoints, bindings, and algorithms used to connect with the IdP and validate messages",
      "fields": {
        "algorithms": {
          "description": "Settings for signing and verifying SAML messages",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "credentials": {
          "description": "Federation Trust Credentials for verifying assertions from the IdP and signing requests to the IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "endpoints": {
          "description": "SAML 2.0 HTTP binding settings for IdP and SP (Okta)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "relayState": {
          "description": "Relay state settings for IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlRelayState",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scopes": {
          "description": "**Note:** The [Identity Provider type](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/IdentityProvider/#tag/IdentityProvider/operation/createIdentityProvider!path=type&t=request) table lists the scopes that are supported for each Identity Provider.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "String",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "settings": {
          "description": "Advanced settings for the SAML 2.0 protocol",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlSettings",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "SAML 2.0 protocol",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderProtocolTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IdentityProviderProtocolInput": {
      "description": "IdP-specific protocol settings for endpoints, bindings, and algorithms used to connect with the IdP and validate messages",
      "fields": {
        "algorithms": {
          "description": "Settings for signing and verifying SAML messages",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "credentials": {
          "description": "Federation Trust Credentials for verifying assertions from the IdP and signing requests to the IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "endpoints": {
          "description": "SAML 2.0 HTTP binding settings for IdP and SP (Okta)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "relayState": {
          "description": "Relay state settings for IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlRelayStateInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scopes": {
          "description": "**Note:** The [Identity Provider type](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/IdentityProvider/#tag/IdentityProvider/operation/createIdentityProvider!path=type&t=request) table lists the scopes that are supported for each Identity Provider.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "type": "nullable",
                "underlying_type": {
                  "name": "String",
                  "type": "named"
                }
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "settings": {
          "description": "Advanced settings for the SAML 2.0 protocol",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlSettingsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "SAML 2.0 protocol",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentityProviderProtocolTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IdentitySourceSession": {
      "fields": {
        "created": {
          "description": "The timestamp when the Identity Source Session was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "The ID of the Identity Source Session",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "identitySourceId": {
          "description": "The ID of the custom Identity Source for which the session is created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "importType": {
          "description": "The type of import.  All imports are `INCREMENTAL` imports.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "The timestamp when the Identity Source Session was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "IdentitySourceSessionStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "IdentitySourceUserProfileForDeleteInput": {
      "fields": {
        "externalId": {
          "description": "The external ID of the entity that needs to be deleted in Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 512
          }
        }
      },
      "alias": "IdentitySourceUserProfileForDelete"
    },
    "IdentitySourceUserProfileForUpsertInput": {
      "fields": {
        "email": {
          "description": "Email address of the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email",
            "maxLength": 100,
            "minLength": 5
          }
        },
        "firstName": {
          "description": "First name of the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        },
        "homeAddress": {
          "description": "Home address of the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 4096
          }
        },
        "lastName": {
          "description": "Last name of the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        },
        "mobilePhone": {
          "description": "Mobile phone number of the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "secondEmail": {
          "description": "Alternative email address of the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "email",
            "maxLength": 100,
            "minLength": 5
          }
        },
        "userName": {
          "description": "Username of the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        }
      },
      "alias": "IdentitySourceUserProfileForUpsert"
    },
    "ImageUploadResponse": {
      "fields": {
        "url": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ImportScheduleObjectInput": {
      "description": "Import schedule configuration",
      "fields": {
        "fullImport": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ImportScheduleSettingsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "incrementalImport": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ImportScheduleSettingsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "Setting status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnabledStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ImportScheduleObject"
    },
    "ImportScheduleSettingsInput": {
      "fields": {
        "expression": {
          "description": "The import schedule in UNIX cron format",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "timezone": {
          "description": "The import schedule time zone in Internet Assigned Numbers Authority (IANA) time zone name format",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 64,
            "minLength": 1
          }
        }
      },
      "alias": "ImportScheduleSettings"
    },
    "ImportUsernameObjectInput": {
      "description": "Determines the Okta username for the imported user",
      "fields": {
        "userNameExpression": {
          "description": "For `usernameFormat=CUSTOM`, specifies the Okta Expression Language statement for a username format that imported users use to sign in to Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usernameFormat": {
          "description": "Determines the username format when users sign in to Okta",
          "type": {
            "name": "ImportUsernameObjectUsernameFormat",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ImportUsernameObject"
    },
    "InlineHook": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "channel": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookChannel",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "metadata": {
          "description": "Specific properties for the inline hook configuration, for example, `optOutServiceProtectionRateLimit` to opt-out of Telephony Service Protection Rate Limits when using the Telephony inline hook.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InlineHookChannel": {
      "fields": {
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookChannelType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InlineHookChannelInput": {
      "fields": {
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookChannelType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "InlineHookChannel"
    },
    "InlineHookInput": {
      "fields": {
        "channel": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookChannelInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "metadata": {
          "description": "Specific properties for the inline hook configuration, for example, `optOutServiceProtectionRateLimit` to opt-out of Telephony Service Protection Rate Limits when using the Telephony inline hook.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "InlineHookType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "InlineHook"
    },
    "InlineHookResponse": {
      "fields": {
        "commands": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "InlineHookResponseCommands",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "InlineHookResponseCommandValue": {
      "fields": {
        "op": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "InlineHookResponseCommands": {
      "fields": {
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "InlineHookResponseCommandValue",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "JsonPatchOperationInput": {
      "description": "The update action",
      "fields": {
        "op": {
          "description": "The operation (PATCH action)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PatchAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "path": {
          "description": "The resource path of the attribute to update",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "The update operation value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "JsonPatchOperation"
    },
    "JsonWebKey": {
      "fields": {
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "e": {
          "description": "RSA key value (public exponent) for Key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expiresAt": {
          "description": "Timestamp when the certificate expires",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "kid": {
          "description": "Unique identifier for the certificate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "description": "Cryptographic algorithm family for the certificate's keypair. Valid value: `RSA`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "n": {
          "description": "RSA modulus value that is used by both the public and private keys and provides a link between them",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "Acceptable use of the certificate. Valid value: `sig`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "x5c": {
          "description": "X.509 certificate chain that contains a chain of one or more certificates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "x5t#S256": {
          "description": "X.509 certificate SHA-256 thumbprint, which is the base64url-encoded SHA-256 thumbprint (digest) of the DER encoding of an X.509 certificate",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "JwkUseInput": {
      "fields": {
        "use": {
          "description": "Purpose of the certificate. The only supported value is `sig`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JwkUseType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "JwkUse"
    },
    "KeyRequestInput": {
      "fields": {
        "name": {
          "description": "Display name for the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "alias": "KeyRequest"
    },
    "LifecycleCreateSettingObjectInput": {
      "description": "Determines whether to update a user in the app when a user in Okta is updated",
      "fields": {
        "status": {
          "description": "Setting status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnabledStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "LifecycleCreateSettingObject"
    },
    "LifecycleDeactivateSettingObjectInput": {
      "description": "Determines whether deprovisioning occurs when the app is unassigned",
      "fields": {
        "status": {
          "description": "Setting status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnabledStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "LifecycleDeactivateSettingObject"
    },
    "LinkedObject": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkedObjectLinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "associated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkedObjectDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "primary": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkedObjectDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinkedObjectDetails": {
      "fields": {
        "description": {
          "description": "Description of the `primary` or the `associated` relationship",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "API name of the `primary` or the `associated` link. The `name` parameter can't start with a number and can only contain the following characters: `a-z`, `A-Z`,` 0-9`, and `_`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Display name of the `primary` or the `associated` link",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The object type for this relationship",
          "type": {
            "name": "LinkedObjectDetailsType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LinkedObjectDetailsInput": {
      "fields": {
        "description": {
          "description": "Description of the `primary` or the `associated` relationship",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "API name of the `primary` or the `associated` link. The `name` parameter can't start with a number and can only contain the following characters: `a-z`, `A-Z`,` 0-9`, and `_`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Display name of the `primary` or the `associated` link",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The object type for this relationship",
          "type": {
            "name": "LinkedObjectDetailsType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "LinkedObjectDetails"
    },
    "LinkedObjectInput": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkedObjectLinksSelfInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "associated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkedObjectDetailsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "primary": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkedObjectDetailsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "LinkedObject"
    },
    "LinkedObjectLinksSelf": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinkedHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinkedObjectLinksSelfInput": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      },
      "alias": "LinkedObjectLinksSelf"
    },
    "LinksAerialConsentGranted": {
      "fields": {
        "revoke": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksAerialConsentRevoked": {
      "fields": {
        "grant": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksAppAndUser": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of resources related to the Application User.",
      "fields": {
        "app": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "group": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksNext": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. Use the `LinksNext` object for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "next": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksNextForRoleAssignments": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
      "fields": {
        "next": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksSelf": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksSelfAndFullUsersLifecycle": {
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "suspend": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "unsuspend": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksSelfAndLifecycle": {
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksSelfAndLifecycleInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "LinksSelfAndRoles": {
      "fields": {
        "roles": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LinksSelfLifecycleAndAuthorize": {
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "authorize": {
          "description": "Link to authorize scopes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObjectAuthorizeLink",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ListAssignedRolesForUserResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListAssignedRolesForUserResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListGroupAssignedRolesResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListGroupAssignedRolesResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ListProfileMappings": {
      "description": "Okta.",
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for profile mapping",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "description": "**Note:** If the source is Okta and the UserTypes feature isn't enabled, then the source `_links` only has a link to the schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProfileMappingSource",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "target": {
          "description": "**Note:** If the target is Okta and the UserTypes feature isn't enabled, then the target `_links` only has a link to the schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProfileMappingTarget",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ListRolesForClientResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ListRolesForClientResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogActor": {
      "description": "Describes the user, app, client, or other entity (actor) who performs an action on a target. The actor is dependent on the action that is performed. All events have actors.",
      "fields": {
        "alternateId": {
          "description": "Alternative ID of the actor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "detailEntry": {
          "description": "Further details about the actor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "displayName": {
          "description": "Display name of the actor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of the actor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of actor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogAuthenticationContext": {
      "description": "All authentication relies on validating one or more credentials that prove the authenticity of the actor's identity. Credentials are sometimes provided by the actor, as is the case with passwords, and at other times provided by a third party, and validated by the authentication provider.  The authenticationContext contains metadata about how the actor is authenticated. For example, an authenticationContext for an event, where a user authenticates with Integrated Windows Authentication (IWA), looks like the following: ``` {     \"authenticationProvider\": \"ACTIVE_DIRECTORY\",     \"authenticationStep\": 0,     \"credentialProvider\": null,     \"credentialType\": \"IWA\",     \"externalSessionId\": \"102N1EKyPFERROGvK9wizMAPQ\",     \"interface\": null,     \"issuer\": null } ``` In this case, the user enters an IWA credential to authenticate against an Active Directory instance. All of the user's future-generated events in this sign-in session are going to share the same `externalSessionId`.  Among other operations, this response object can be used to scan for suspicious sign-in activity or perform analytics on user authentication habits (for example, how often authentication scheme X is used versus authentication scheme Y).",
      "fields": {
        "authenticationProvider": {
          "description": "The system that proves the identity of an actor using the credentials provided to it",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogAuthenticationProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "authenticationStep": {
          "description": "The zero-based step number in the authentication pipeline. Currently unused and always set to `0`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "credentialProvider": {
          "description": "A credential provider is a software service that manages identities and their associated credentials. When authentication occurs through credentials provided by a credential provider, the credential provider is recorded here.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogCredentialProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "credentialType": {
          "description": "The underlying technology/scheme used in the credential",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogCredentialType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalSessionId": {
          "description": "A proxy for the actor's [session ID](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "interface": {
          "description": "The third-party user interface that the actor authenticates through, if any.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuer": {
          "description": "Describes the issuer of the authorization server when the authentication is performed through OAuth. This is the location where well-known resources regarding the details of the authorization servers are published.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogIssuer",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LogClient": {
      "description": "When an event is triggered by an HTTP request, the `client` object describes the [client](https://datatracker.ietf.org/doc/html/rfc2616) that issues the HTTP request. For instance, the web browser is the client when a user accesses Okta. When this request is received and processed, a sign-in event is fired. When the event isn't sourced to an HTTP request, such as an automatic update, the `client` object field is blank.",
      "fields": {
        "device": {
          "description": "Type of device that the client operates from (for example, computer)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "geographicalContext": {
          "description": "Geographical context describes a set of geographic coordinates. In addition to containing latitude and longitude data, the `GeographicalContext` object also contains address data of postal code-level granularity. Within the `Client` object, the geographical context refers to the physical location of the client when it sends the request that triggers this event. All `Transaction` events with `type` equal to `WEB` have a geographical context set. `Transaction` events with `type` equal to `JOB` don't have a geographical context set. The geographical context data can be missing if the geographical data for a request can't be resolved.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogGeographicalContext",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "For OAuth requests, this is the ID of the OAuth [client](https://datatracker.ietf.org/doc/html/rfc6749#section-1.1) making the request. For SSWS token requests, this is the ID of the agent making the request.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "ipAddress": {
          "description": "IP address that the client is making its request from",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userAgent": {
          "description": "\"A user agent is software (a software agent) that is acting on behalf of a user.\" ([Definition of User Agent](https://developer.mozilla.org/en-US/docs/Glossary/User_agent))  In the Okta event data object, the `UserAgent` object provides specifications about the client software that makes event-triggering HTTP requests. User agent identification is often useful for identifying interoperability problems between servers and clients, and also for browser and operating system usage analytics.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogUserAgent",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "zone": {
          "description": "The `name` of the [Zone](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/NetworkZone/#tag/NetworkZone/operation/getNetworkZone) that the client's location is mapped to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogDebugContext": {
      "description": "**Important:** The information contained in `debugContext.debugData` is intended to add context when troubleshooting customer platform issues. Both key names and values may change from release to release and aren't guaranteed to be stable. Therefore, they shouldn't be viewed as a data contract but as a debugging aid instead.",
      "fields": {
        "debugData": {
          "description": "A dynamic field that contains miscellaneous information that is dependent on the event type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LogEvent": {
      "fields": {
        "actor": {
          "description": "Describes the user, app, client, or other entity (actor) who performs an action on a target. The actor is dependent on the action that is performed. All events have actors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogActor",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "authenticationContext": {
          "description": "All authentication relies on validating one or more credentials that prove the authenticity of the actor's identity. Credentials are sometimes provided by the actor, as is the case with passwords, and at other times provided by a third party, and validated by the authentication provider.  The authenticationContext contains metadata about how the actor is authenticated. For example, an authenticationContext for an event, where a user authenticates with Integrated Windows Authentication (IWA), looks like the following: ``` {     \"authenticationProvider\": \"ACTIVE_DIRECTORY\",     \"authenticationStep\": 0,     \"credentialProvider\": null,     \"credentialType\": \"IWA\",     \"externalSessionId\": \"102N1EKyPFERROGvK9wizMAPQ\",     \"interface\": null,     \"issuer\": null } ``` In this case, the user enters an IWA credential to authenticate against an Active Directory instance. All of the user's future-generated events in this sign-in session are going to share the same `externalSessionId`.  Among other operations, this response object can be used to scan for suspicious sign-in activity or perform analytics on user authentication habits (for example, how often authentication scheme X is used versus authentication scheme Y).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogAuthenticationContext",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "client": {
          "description": "When an event is triggered by an HTTP request, the `client` object describes the [client](https://datatracker.ietf.org/doc/html/rfc2616) that issues the HTTP request. For instance, the web browser is the client when a user accesses Okta. When this request is received and processed, a sign-in event is fired. When the event isn't sourced to an HTTP request, such as an automatic update, the `client` object field is blank.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogClient",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "debugContext": {
          "description": "**Important:** The information contained in `debugContext.debugData` is intended to add context when troubleshooting customer platform issues. Both key names and values may change from release to release and aren't guaranteed to be stable. Therefore, they shouldn't be viewed as a data contract but as a debugging aid instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogDebugContext",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "displayMessage": {
          "description": "The display message for an event",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "eventType": {
          "description": "Type of event that is published",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "legacyEventType": {
          "description": "Associated Events API Action `objectType` attribute value",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "outcome": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogOutcome",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "published": {
          "description": "Timestamp when the event is published",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "request": {
          "description": "The `Request` object describes details that are related to the HTTP request that triggers this event, if available. When the event isn't sourced to an HTTP request, such as an automatic update on the Okta servers, the `Request` object still exists, but the `ipChain` field is empty.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogRequest",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "securityContext": {
          "description": "The `securityContext` object provides security information that is directly related to the evaluation of the event's IP reputation. IP reputation is a trustworthiness rating that evaluates how likely a sender is to be malicious and is based on the sender's IP address. As the name implies, the `securityContext` object is useful for security applications-flagging and inspecting suspicious events.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogSecurityContext",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "severity": {
          "description": "Indicates how severe the event is",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogSeverity",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "target": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "LogTarget",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "transaction": {
          "description": "**API**. See [API token management](https://help.okta.com/okta_help.htm?id=Security_API). For more information on API tokens, see [Create an API token](https://developer.okta.com/docs/guides/create-an-api-token/).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogTransaction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "uuid": {
          "description": "Unique identifier for an individual event",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "Versioning indicator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogGeographicalContext": {
      "description": "Geographical context describes a set of geographic coordinates. In addition to containing latitude and longitude data, the `GeographicalContext` object also contains address data of postal code-level granularity. Within the `Client` object, the geographical context refers to the physical location of the client when it sends the request that triggers this event. All `Transaction` events with `type` equal to `WEB` have a geographical context set. `Transaction` events with `type` equal to `JOB` don't have a geographical context set. The geographical context data can be missing if the geographical data for a request can't be resolved.",
      "fields": {
        "city": {
          "description": "The city that encompasses the area that contains the geolocation coordinates, if available (for example, Seattle, San Francisco)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "Full name of the country that encompasses the area that contains the geolocation coordinates (for example, France, Uganda)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "geolocation": {
          "description": "The latitude and longitude of the geolocation where an action was performed. The object is formatted according to the [ISO-6709](https://www.iso.org/obp/ui/fr/#iso:std:iso:6709:ed-3:v1:en) standard.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogGeolocation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "postalCode": {
          "description": "Postal code of the area that encompasses the geolocation coordinates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "Full name of the state or province that encompasses the area that contains the geolocation coordinates (for example, Montana, Ontario)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogGeolocation": {
      "description": "The latitude and longitude of the geolocation where an action was performed. The object is formatted according to the [ISO-6709](https://www.iso.org/obp/ui/fr/#iso:std:iso:6709:ed-3:v1:en) standard.",
      "fields": {
        "lat": {
          "description": "Latitude which uses two digits for the [integer part](https://www.iso.org/obp/ui/fr/#iso:std:iso:6709:ed-3:v1:en#Latitude)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "double"
          }
        },
        "lon": {
          "description": "Longitude which uses three digits for the [integer part](https://www.iso.org/obp/ui/fr/#iso:std:iso:6709:ed-3:v1:en#Longitude)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ],
            "format": "double"
          }
        }
      }
    },
    "LogIpAddress": {
      "fields": {
        "geographicalContext": {
          "description": "Geographical context describes a set of geographic coordinates. In addition to containing latitude and longitude data, the `GeographicalContext` object also contains address data of postal code-level granularity. Within the `Client` object, the geographical context refers to the physical location of the client when it sends the request that triggers this event. All `Transaction` events with `type` equal to `WEB` have a geographical context set. `Transaction` events with `type` equal to `JOB` don't have a geographical context set. The geographical context data can be missing if the geographical data for a request can't be resolved.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogGeographicalContext",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ip": {
          "description": "IP address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "description": "Details regarding the source",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "version": {
          "description": "IP address version",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogIssuer": {
      "description": "Describes the issuer of the authorization server when the authentication is performed through OAuth. This is the location where well-known resources regarding the details of the authorization servers are published.",
      "fields": {
        "id": {
          "description": "Varies depending on the type of authentication. If authentication is SAML 2.0, `id` is the issuer in the SAML assertion. For social login, `id` is the issuer of the token.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Information on the `issuer` and source of the SAML assertion or token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogOutcome": {
      "fields": {
        "reason": {
          "description": "Reason for the result, for example, `INVALID_CREDENTIALS`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255,
            "minLength": 1
          }
        },
        "result": {
          "description": "Result of the action",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogOutcomeResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogRequest": {
      "description": "The `Request` object describes details that are related to the HTTP request that triggers this event, if available. When the event isn't sourced to an HTTP request, such as an automatic update on the Okta servers, the `Request` object still exists, but the `ipChain` field is empty.",
      "fields": {
        "ipChain": {
          "description": "If the incoming request passes through any proxies, the IP addresses of those proxies are stored here in the format of clientIp, proxy1, proxy2, and so on. This field is useful when working with trusted proxies.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "LogIpAddress",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "LogSecurityContext": {
      "description": "The `securityContext` object provides security information that is directly related to the evaluation of the event's IP reputation. IP reputation is a trustworthiness rating that evaluates how likely a sender is to be malicious and is based on the sender's IP address. As the name implies, the `securityContext` object is useful for security applications-flagging and inspecting suspicious events.",
      "fields": {
        "asNumber": {
          "description": "The [Autonomous system](https://docs.telemetry.mozilla.org/datasets/other/asn_aggregates/reference) number that's associated with the autonomous system the event request was sourced to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "asOrg": {
          "description": "The organization that is associated with the autonomous system that the event request is sourced to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "domain": {
          "description": "The domain name that's associated with the IP address of the inbound event request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isProxy": {
          "description": "Specifies whether an event's request is from a known proxy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "isp": {
          "description": "The Internet service provider that's used to send the event's request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogStream": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "name": "LogStreamLinksSelfAndLifecycle",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Log Stream object was created",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique identifier for the Log Stream",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Log Stream object was last updated",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Unique name for the Log Stream object",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Lifecycle status of the Log Stream object",
          "type": {
            "name": "LogStreamStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Specifies the streaming provider used  Supported providers:   * `aws_eventbridge` ([AWS EventBridge](https://aws.amazon.com/eventbridge))   * `splunk_cloud_logstreaming` ([Splunk Cloud](https://www.splunk.com/en_us/software/splunk-cloud-platform.html))  Select the provider type to see provider-specific configurations in the `settings` property:",
          "type": {
            "name": "LogStreamType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogStreamInput": {
      "fields": {
        "name": {
          "description": "Unique name for the Log Stream object",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Specifies the streaming provider used  Supported providers:   * `aws_eventbridge` ([AWS EventBridge](https://aws.amazon.com/eventbridge))   * `splunk_cloud_logstreaming` ([Splunk Cloud](https://www.splunk.com/en_us/software/splunk-cloud-platform.html))  Select the provider type to see provider-specific configurations in the `settings` property:",
          "type": {
            "name": "LogStreamType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "LogStream"
    },
    "LogStreamLinkObject": {
      "fields": {
        "href": {
          "description": "The URI of the resource",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "method": {
          "description": "HTTP method allowed for the resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogStreamLinkObjectMethod",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogStreamLinksSelfAndLifecycle": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogStreamLinkObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogStreamLinkObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "name": "LogStreamLinkObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LogStreamPutSchemaInput": {
      "fields": {
        "name": {
          "description": "Unique name for the Log Stream object",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Specifies the streaming provider used  Supported providers:   * `aws_eventbridge` ([AWS EventBridge](https://aws.amazon.com/eventbridge))   * `splunk_cloud_logstreaming` ([Splunk Cloud](https://www.splunk.com/en_us/software/splunk-cloud-platform.html))  Select the provider type to see provider-specific configurations in the `settings` property:",
          "type": {
            "name": "LogStreamType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "LogStreamPutSchema"
    },
    "LogStreamSchema": {
      "fields": {
        "$schema": {
          "description": "JSON Schema version identifier",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "errorMessage": {
          "description": "A collection of error messages for individual properties in the schema. Okta implements a subset of [ajv-errors](https://github.com/ajv-validator/ajv-errors).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "URI of Log Stream Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oneOf": {
          "description": "Non-empty array of valid JSON schemas.  Okta only supports `oneOf` for specifying display names for an `enum`. Each schema has the following format:    ```     {       \"const\": \"enumValue\",       \"title\": \"display name\"     }   ```json",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeEnum",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pattern": {
          "description": "For `string` Log Stream Schema property type, specifies the regular expression used to validate the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "description": "Log Stream Schema properties object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required": {
          "description": "Required properties for this Log Stream Schema object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "title": {
          "description": "Name of the Log Streaming integration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of Log Stream Schema property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogTarget": {
      "description": "The entity that an actor performs an action on. Targets can be anything, such as an app user, a sign-in token, or anything else.",
      "fields": {
        "alternateId": {
          "description": "The alternate ID of the target",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "changeDetails": {
          "description": "**Note:** When querying the `changeDetails` property, you can't search on the `to` or `from` objects alone. You must include a property within the object.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LogTargetChangeDetails",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "detailEntry": {
          "description": "Further details on the target",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "displayName": {
          "description": "The display name of the target",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The ID of the target",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of target",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogTargetChangeDetails": {
      "description": "**Note:** When querying the `changeDetails` property, you can't search on the `to` or `from` objects alone. You must include a property within the object.",
      "fields": {
        "from": {
          "description": "The original properties of the target",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "to": {
          "description": "The updated properties of the target",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "LogTransaction": {
      "description": "**API**. See [API token management](https://help.okta.com/okta_help.htm?id=Security_API). For more information on API tokens, see [Create an API token](https://developer.okta.com/docs/guides/create-an-api-token/).",
      "fields": {
        "detail": {
          "description": "Details for this transaction.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for this transaction.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Describes the kind of transaction. `WEB` indicates a web request. `JOB` indicates an asynchronous task.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "LogUserAgent": {
      "description": "\"A user agent is software (a software agent) that is acting on behalf of a user.\" ([Definition of User Agent](https://developer.mozilla.org/en-US/docs/Glossary/User_agent))  In the Okta event data object, the `UserAgent` object provides specifications about the client software that makes event-triggering HTTP requests. User agent identification is often useful for identifying interoperability problems between servers and clients, and also for browser and operating system usage analytics.",
      "fields": {
        "browser": {
          "description": "If the client is a web browser, this field identifies the type of web browser (for example, CHROME, FIREFOX)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "os": {
          "description": "The operating system that the client runs on (for example, Windows 10)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rawUserAgent": {
          "description": "A raw string representation of the user agent that is formatted according to [section 5.5.3 of HTTP/1.1 Semantics and Content](https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.3). Both the `browser` and the `OS` fields can be derived from this field.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "NetworkZone": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique identifier for the Network Zone",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last modified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Unique name for this Network Zone",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 128
          }
        },
        "status": {
          "description": "Network Zone status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "NetworkZoneStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Indicates a system Network Zone: * `true` for system Network Zones * `false` for custom Network Zones  The Okta org provides the following default system Network Zones: * `LegacyIpZone` * `BlockedIpZone` * `DefaultEnhancedDynamicZone`  Admins can modify the name of the default system Network Zone and add up to 5000 gateway or proxy IP entries.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "The type of Network Zone",
          "type": {
            "name": "NetworkZoneType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage": {
          "description": "The usage of the Network Zone",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "NetworkZoneUsage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "NetworkZoneInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycleInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "description": "Unique name for this Network Zone",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 128
          }
        },
        "status": {
          "description": "Network Zone status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "NetworkZoneStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of Network Zone",
          "type": {
            "name": "NetworkZoneType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usage": {
          "description": "The usage of the Network Zone",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "NetworkZoneUsage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "NetworkZone"
    },
    "OAuth2Actor": {
      "description": "User that created the object",
      "fields": {
        "id": {
          "description": "User ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2Claim": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "alwaysIncludeInToken": {
          "description": "Specifies whether to include Claims in the token. The value is always `TRUE` for access token Claims. If the value is set to `FALSE` for an ID token claim, the Claim isn't included in the ID token when the token is requested with the access token or with the `authorization_code`. The client instead uses the access token to get Claims from the `/userinfo` endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "claimType": {
          "description": "Specifies whether the Claim is for an access token (`RESOURCE`) or an ID token (`IDENTITY`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "conditions": {
          "description": "Specifies the scopes for the Claim",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimConditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "group_filter_type": {
          "description": "Specifies the type of group filter if `valueType` is `GROUPS`  If `valueType` is `GROUPS`, then the groups returned are filtered according to the value of `group_filter_type`.  If you have complex filters for Groups, you can [create a Groups allowlist](https://developer.okta.com/docs/guides/customize-tokens-groups-claim/main/) to put them all in a Claim.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimGroupFilterType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of the Claim",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Claim",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "When `true`, indicates that Okta created the Claim",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "value": {
          "description": "Specifies the value of the Claim. This value must be a string literal if `valueType` is `GROUPS`, and the string literal is matched with the selected `group_filter_type`. The value must be an Okta EL expression if `valueType` is `EXPRESSION`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valueType": {
          "description": "Specifies whether the Claim is an Okta Expression Language (EL) expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimValueType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2ClaimConditions": {
      "description": "Specifies the scopes for the Claim",
      "fields": {
        "scopes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OAuth2ClaimConditionsInput": {
      "description": "Specifies the scopes for the Claim",
      "fields": {
        "scopes": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "OAuth2ClaimConditions"
    },
    "OAuth2ClaimInput": {
      "fields": {
        "alwaysIncludeInToken": {
          "description": "Specifies whether to include Claims in the token. The value is always `TRUE` for access token Claims. If the value is set to `FALSE` for an ID token claim, the Claim isn't included in the ID token when the token is requested with the access token or with the `authorization_code`. The client instead uses the access token to get Claims from the `/userinfo` endpoint.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "claimType": {
          "description": "Specifies whether the Claim is for an access token (`RESOURCE`) or an ID token (`IDENTITY`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "conditions": {
          "description": "Specifies the scopes for the Claim",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "group_filter_type": {
          "description": "Specifies the type of group filter if `valueType` is `GROUPS`  If `valueType` is `GROUPS`, then the groups returned are filtered according to the value of `group_filter_type`.  If you have complex filters for Groups, you can [create a Groups allowlist](https://developer.okta.com/docs/guides/customize-tokens-groups-claim/main/) to put them all in a Claim.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimGroupFilterType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Claim",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "When `true`, indicates that Okta created the Claim",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "value": {
          "description": "Specifies the value of the Claim. This value must be a string literal if `valueType` is `GROUPS`, and the string literal is matched with the selected `group_filter_type`. The value must be an Okta EL expression if `valueType` is `EXPRESSION`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "valueType": {
          "description": "Specifies whether the Claim is an Okta Expression Language (EL) expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim (`SYSTEM`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClaimValueType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OAuth2Claim"
    },
    "OAuth2Client": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClientLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "client_id": {
          "description": "Unique key for the client application. The `client_id` is immutable.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_name": {
          "description": "Human-readable string name of the client application",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "client_uri": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "logo_uri": {
          "description": "URL string that references a logo for the client consent dialog (not the sign-in dialog)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2ClientJsonWebKey": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuthClientSecretLinks",
              "type": "named"
            }
          },
          "http": {}
        },
        "alg": {
          "description": "Algorithm used in the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the OAuth Client 2.0 JSON Web Key was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "e": {
          "description": "RSA key value (exponent) for key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique ID of the OAuth Client JSON Web Key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kid": {
          "description": "Unique identifier of the JSON Web Key in the OAUth 2.0 Client's JWKS",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "description": "Cryptographic algorithm family for the certificate's key pair",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the OAuth Client 2.0 JSON Web Key was updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "RSA key value (modulus) for key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the OAuth 2.0 Client JSON Web Key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClientJsonWebKeyStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "Acceptable use of the JSON Web Key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2ClientJsonWebKeyRequestBodyInput": {
      "fields": {
        "alg": {
          "description": "Algorithm used in the key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "e": {
          "description": "RSA key value (exponent) for key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kid": {
          "description": "Unique identifier of the JSON Web Key in the OAUth 2.0 Client's JWKS",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "kty": {
          "description": "Cryptographic algorithm family for the certificate's key pair",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "n": {
          "description": "RSA key value (modulus) for key binding",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the OAuth 2.0 Client JSON Web Key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClientJsonWebKeyRequestBodyStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "use": {
          "description": "Acceptable use of the JSON Web Key",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OAuth2ClientJsonWebKeyRequestBody"
    },
    "OAuth2ClientLinks": {
      "fields": {
        "grants": {
          "description": "Link to the grant resources",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GrantResourcesHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "tokens": {
          "description": "Link to the token resources",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenResourcesHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OAuth2ClientSecret": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuthClientSecretLinks",
              "type": "named"
            }
          },
          "http": {}
        },
        "client_secret": {
          "description": "The OAuth 2.0 client secret string",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the OAuth Client 2.0 Secret was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique ID of the OAuth Client Secret",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the OAuth Client 2.0 Secret was updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secret_hash": {
          "description": "OAuth 2.0 client secret string hash",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the OAuth 2.0 Client Secret",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClientSecretStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2ClientSecretRequestBodyInput": {
      "fields": {
        "client_secret": {
          "description": "The OAuth 2.0 client secret string",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the OAuth 2.0 Client Secret",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClientSecretRequestBodyStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OAuth2ClientSecretRequestBody"
    },
    "OAuth2RefreshToken": {
      "fields": {
        "_embedded": {
          "description": "The embedded resources related to the object if the `expand` query parameter is specified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2RefreshTokenEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2RefreshTokenLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "clientId": {
          "description": "Client ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "expiresAt": {
          "description": "Expiration time of the OAuth 2.0 Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "ID of the Token object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuer": {
          "description": "The complete URL of the authorization server that issued the Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "scopes": {
          "description": "The scope names attached to the Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "status": {
          "description": "Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GrantOrTokenStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "The ID of the user associated with the Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2RefreshTokenEmbedded": {
      "description": "The embedded resources related to the object if the `expand` query parameter is specified",
      "fields": {
        "scopes": {
          "description": "The scope objects attached to the Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2RefreshTokenScope",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "OAuth2RefreshTokenLinks": {
      "fields": {
        "app": {
          "description": "Link to the app resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "authorizationServer": {
          "description": "Link to the Token authorization server resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "client": {
          "description": "Link to the app resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "revoke": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2RefreshTokenLinks1Revoke",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "Link to the user resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OAuth2RefreshTokenLinks1Revoke": {
      "description": "Link to revoke the refresh Token",
      "fields": {
        "hints": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2RefreshTokenLinks1Revoke1Hints",
              "type": "named"
            }
          },
          "http": {}
        },
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2RefreshTokenLinks1Revoke1Hints": {
      "fields": {
        "allow": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "OAuth2RefreshTokenLinks1Revoke1HintsAllow",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "items": {}
          }
        }
      }
    },
    "OAuth2RefreshTokenScope": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2RefreshTokenScopeLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Description of the Scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "Name of the end user displayed in a consent dialog",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Scope object ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Scope name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2RefreshTokenScopeLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "scope": {
          "description": "Link to Scope resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OfflineAccessScopeResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OAuth2Scope": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "consent": {
          "description": "Indicates whether a consent dialog is needed for the Scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeConsentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "description": "Indicates if this Scope is a default scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "Description of the Scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "Name of the end user displayed in a consent dialog",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Scope object ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadataPublish": {
          "description": "Indicates whether the Scope is included in the metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeMetadataPublish",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Scope name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "optional": {
          "description": "Indicates whether the Scope is optional. When set to `true`, the user can skip consent for the scope.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "system": {
          "description": "Indicates if Okta created the Scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "OAuth2ScopeConsentGrant": {
      "description": "Grant object that represents an app consent scope grant",
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the Grant",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeConsentGrantEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeConsentGrantLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "clientId": {
          "description": "Client ID of the app integration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "createdBy": {
          "description": "User that created the object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2Actor",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "ID of the Grant object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "issuer": {
          "description": "The issuer of your org authorization server. This is typically your Okta domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "scopeId": {
          "description": "The name of the [Okta scope](https://developer.okta.com/docs/api/oauth2/#oauth-20-scopes) for which consent is granted",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "source": {
          "description": "User type source that granted consent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeConsentGrantSource",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GrantOrTokenStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "User ID that granted consent (if `source` is `END_USER`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2ScopeConsentGrantEmbedded": {
      "description": "Embedded resources related to the Grant",
      "fields": {
        "scope": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeConsentGrantEmbeddedScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OAuth2ScopeConsentGrantEmbeddedScope": {
      "fields": {
        "id": {
          "description": "The name of the Okta scope for which consent is granted",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OAuth2ScopeConsentGrantInput": {
      "description": "Grant object that represents an app consent scope grant",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeConsentGrantLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "issuer": {
          "description": "The issuer of your org authorization server. This is typically your Okta domain.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopeId": {
          "description": "The name of the [Okta scope](https://developer.okta.com/docs/api/oauth2/#oauth-20-scopes) for which consent is granted",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OAuth2ScopeConsentGrant"
    },
    "OAuth2ScopeConsentGrantLinks": {
      "fields": {
        "app": {
          "description": "Link to the app resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "authorizationServer": {
          "description": "Link to the Token authorization server resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "client": {
          "description": "Link to the app resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "Link to the scope resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ScopeResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "Link to the user resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserResourceHrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OAuth2ScopeConsentGrantLinksInput": {
      "fields": {
        "app": {
          "description": "Link to the app resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppResourceHrefObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "authorizationServer": {
          "description": "Link to the Token authorization server resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthorizationServerResourceHrefObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "client": {
          "description": "Link to the app resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AppResourceHrefObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "Link to the scope resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ScopeResourceHrefObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "Link to the user resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserResourceHrefObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "OAuth2ScopeInput": {
      "fields": {
        "consent": {
          "description": "Indicates whether a consent dialog is needed for the Scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeConsentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "description": "Indicates if this Scope is a default scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "Description of the Scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "Name of the end user displayed in a consent dialog",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "metadataPublish": {
          "description": "Indicates whether the Scope is included in the metadata",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ScopeMetadataPublish",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Scope name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "optional": {
          "description": "Indicates whether the Scope is optional. When set to `true`, the user can skip consent for the scope.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "system": {
          "description": "Indicates if Okta created the Scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "OAuth2Scope"
    },
    "OAuth2ScopesMediationPolicyRuleCondition": {
      "description": "Array of scopes that the condition includes",
      "fields": {
        "include": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OAuth2ScopesMediationPolicyRuleConditionInput": {
      "description": "Array of scopes that the condition includes",
      "fields": {
        "include": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "OAuth2ScopesMediationPolicyRuleCondition"
    },
    "OAuthClientSecretLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
      "fields": {
        "activate": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "delete": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "Office365ProvisioningSettingsInput": {
      "description": "Settings required for the Microsoft Office 365 Provisioning Connection",
      "fields": {
        "adminPassword": {
          "description": "Microsoft Office 365 global administrator password",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "adminUsername": {
          "description": "Microsoft Office 365 global administrator username",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Office365ProvisioningSettings"
    },
    "OfflineAccessScopeResourceHrefObject": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OktaUserGroupProfileInput": {
      "description": "Profile for any Group that is not imported from Active Directory. Specifies the standard and custom profile properties for a Group.  The `objectClass` for these groups is `okta:user_group`.",
      "fields": {
        "description": {
          "description": "Description of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Group",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OktaUserGroupProfile"
    },
    "OperationRequestInput": {
      "fields": {
        "assignmentId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OperationRequest"
    },
    "OperationResponse": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentOperation": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationResponseAssignmentOperation",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "completed": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "created": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "numUserMoved": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Float64",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "number"
            ]
          }
        },
        "realmId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "realmName": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "started": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationResponseStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OperationResponseAssignmentOperation": {
      "fields": {
        "configuration": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationResponseAssignmentOperationConfiguration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OperationResponseAssignmentOperationConfiguration": {
      "fields": {
        "actions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationResponseAssignmentOperationConfigurationActions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Conditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OperationResponseAssignmentOperationConfigurationActions": {
      "fields": {
        "assignUserToRealm": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OperationResponseAssignmentOperationConfigurationActionsAssignUserToRealm",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OperationResponseAssignmentOperationConfigurationActionsAssignUserToRealm": {
      "fields": {
        "realmId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgAerialConsentDetails": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksAerialConsentGranted",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "accountId": {
          "description": "The unique ID of the Aerial account",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "grantedBy": {
          "description": "Principal ID of the user who granted the permission",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "grantedDate": {
          "description": "Date when grant was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgAerialConsentInput": {
      "fields": {
        "accountId": {
          "description": "The unique ID of the Aerial account",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OrgAerialConsent"
    },
    "OrgAerialConsentRevoked": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksAerialConsentRevoked",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrgCAPTCHASettings": {
      "fields": {
        "_links": {
          "description": "Link relations for the CAPTCHA settings object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgCAPTCHASettingsLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "captchaId": {
          "description": "The unique key of the associated CAPTCHA instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabledPages": {
          "description": "An array of pages that have CAPTCHA enabled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EnabledPagesType",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "OrgCAPTCHASettingsInput": {
      "fields": {
        "captchaId": {
          "description": "The unique key of the associated CAPTCHA instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enabledPages": {
          "description": "An array of pages that have CAPTCHA enabled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "EnabledPagesType",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "OrgCAPTCHASettings"
    },
    "OrgCAPTCHASettingsLinks": {
      "description": "Link relations for the CAPTCHA settings object",
      "fields": {
        "self": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrgContactTypeObj": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the org billing Contact Type object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "contactType": {
          "description": "Type of contact",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgContactType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgContactUser": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the Contact Type User object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgContactUserLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "userId": {
          "description": "Contact user ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgContactUserInput": {
      "fields": {
        "userId": {
          "description": "Contact user ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OrgContactUser"
    },
    "OrgContactUserLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the Contact Type User object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
      "fields": {
        "user": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrgCreationAdminCredentialsInput": {
      "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
      "fields": {
        "password": {
          "description": "**Note:** For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgCreationAdminCredentialsPasswordInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "recovery_question": {
          "description": "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RecoveryQuestionCredentialInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrgCreationAdminCredentialsPasswordInput": {
      "description": "**Note:** For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
      "fields": {
        "value": {
          "description": "Password value (which is validated by the Password Policy)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "password"
          }
        }
      }
    },
    "OrgCreationAdminInput": {
      "description": "**Note:** If you don't provide `credentials`, the super admin user is prompted to set up their credentials when they sign in to the Org for the first time.",
      "fields": {
        "credentials": {
          "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgCreationAdminCredentialsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profile": {
          "description": "Specifies the profile attributes for the first super admin user. The minimal set of required attributes are `email`, `firstName`, `lastName`, and `login`. See [profile](/openapi/okta-management/management/tag/User/#tag/User/operation/getUser!c=200&path=profile&t=response) for additional profile attributes.",
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "OrgCreationAdmin"
    },
    "OrgGeneralSettingLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the org using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
      "fields": {
        "contacts": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "logo": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "oktaCommunication": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "oktaSupport": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "preferences": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "uploadLogo": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "orgGeneralSettingLinks"
    },
    "OrgOktaCommunicationSetting": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for this object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgOktaCommunicationSettingLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "optOutEmailUsers": {
          "description": "Indicates whether org users receive Okta communication emails",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "OrgOktaCommunicationSettingLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for this object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
      "fields": {
        "optIn": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "optOut": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrgOktaSupportSettingsObj": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the Okta Support Settings object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgOktaSupportSettingsObjLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "expiration": {
          "description": "Expiration of Okta Support",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "support": {
          "description": "Status of Okta Support Settings",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgOktaSupportSetting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgOktaSupportSettingsObjLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the Okta Support Settings object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
      "fields": {
        "extend": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "grant": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "revoke": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrgPreferences": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for this object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgPreferencesLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "showEndUserFooter": {
          "description": "Indicates if the footer is shown on the End-User Dashboard",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "OrgPreferencesLinks": {
      "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for this object using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
      "fields": {
        "hideEndUserFooter": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "showEndUserFooter": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "OrgSetting": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the org using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgGeneralSettingLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "address1": {
          "description": "Primary address of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "Secondary address of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "City of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "companyName": {
          "description": "Name of org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "County of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "When org was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "endUserSupportHelpURL": {
          "description": "Support link of org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "expiresAt": {
          "description": "Expiration of org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Org ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "When org was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "phoneNumber": {
          "description": "Phone number of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "postalCode": {
          "description": "Postal code of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "State of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgSettingStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "subdomain": {
          "description": "Subdomain of org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "supportPhoneNumber": {
          "description": "Support help phone of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "Website of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "OrgSettingInput": {
      "fields": {
        "address1": {
          "description": "Primary address of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "address2": {
          "description": "Secondary address of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "city": {
          "description": "City of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "companyName": {
          "description": "Name of org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "country": {
          "description": "County of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "endUserSupportHelpURL": {
          "description": "Support link of org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "phoneNumber": {
          "description": "Phone number of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "postalCode": {
          "description": "Postal code of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "state": {
          "description": "State of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "supportPhoneNumber": {
          "description": "Support help phone of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "website": {
          "description": "Website of the organization associated with the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "OrgSetting"
    },
    "PageRoot": {
      "fields": {
        "_embedded": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PageRootEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PageRootLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PageRootEmbedded": {
      "fields": {
        "customized": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomizablePage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "customizedUrl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "default": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomizablePage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "preview": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomizablePage",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "previewUrl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    },
    "PageRootLinks": {
      "fields": {
        "customized": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "default": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "preview": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ParametersInput": {
      "description": "Attributes used for processing AD Group membership update",
      "fields": {
        "action": {
          "description": "The update action to take",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ParametersAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "attribute": {
          "description": "The attribute that tracks group memberships in AD. This should be `member` for AD.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "values": {
          "description": "List of user IDs whose group memberships to update",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "Parameters"
    },
    "PasswordCredential": {
      "description": "**Password**).  For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
      "fields": {
        "hash": {
          "description": "Specifies a hashed password to import into Okta. This allows an existing password to be imported into Okta directly from some other store. Okta supports the BCRYPT, SHA-512, SHA-256, SHA-1, MD5, and PBKDF2 hash functions for password import.  A hashed password may be specified in a Password object when creating or updating a user, but not for other operations.  See [Create User with Imported Hashed Password](https://developer.okta.com/docs/reference/api/users/#create-user-with-imported-hashed-password)  for information on using this object when creating a user. When updating a User with a hashed password, the User must be in the `STAGED` status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialHash",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "hook": {
          "description": "Specify a [password import inline hook](/openapi/okta-management/management/tag/InlineHook/#tag/InlineHook/operation/createPasswordImportInlineHook) to trigger verification of the User's password the first time the User signs in. This allows an existing password to be imported into Okta directly from some other store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialHook",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PasswordCredentialHash": {
      "description": "Specifies a hashed password to import into Okta. This allows an existing password to be imported into Okta directly from some other store. Okta supports the BCRYPT, SHA-512, SHA-256, SHA-1, MD5, and PBKDF2 hash functions for password import.  A hashed password may be specified in a Password object when creating or updating a user, but not for other operations.  See [Create User with Imported Hashed Password](https://developer.okta.com/docs/reference/api/users/#create-user-with-imported-hashed-password)  for information on using this object when creating a user. When updating a User with a hashed password, the User must be in the `STAGED` status.",
      "fields": {
        "algorithm": {
          "description": "The algorithm used to generate the hash using the password (and salt, when applicable).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialHashAlgorithm",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "digestAlgorithm": {
          "description": "Algorithm used to generate the key. Only required for the PBKDF2 algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DigestAlgorithm",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "iterationCount": {
          "description": "= 4096. Only required for PBKDF2 algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "keySize": {
          "description": "Size of the derived key in bytes. Only required for PBKDF2 algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "salt": {
          "description": "Only required for salted hashes. For BCRYPT, this specifies Radix-64 as the encoded salt used to generate the hash, which must be 22 characters long. For other salted hashes, this specifies the Base64-encoded salt used to generate the hash.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "saltOrder": {
          "description": "Specifies whether salt was pre- or postfixed to the password before hashing. Only required for salted algorithms.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "For SHA-512, SHA-256, SHA-1, MD5, and PBKDF2, this is the actual base64-encoded hash of the password (and salt, if used). This is the Base64-encoded `value` of the SHA-512/SHA-256/SHA-1/MD5/PBKDF2 digest that was computed by either pre-fixing or post-fixing the `salt` to the `password`, depending on the `saltOrder`. If a `salt` was not used in the `source` system, then this should just be the Base64-encoded `value` of the password's SHA-512/SHA-256/SHA-1/MD5/PBKDF2 digest. For BCRYPT, this is the actual Radix-64 encoded hashed password.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workFactor": {
          "description": "Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 20,
            "minimum": 1
          }
        }
      }
    },
    "PasswordCredentialHashInput": {
      "description": "Specifies a hashed password to import into Okta. This allows an existing password to be imported into Okta directly from some other store. Okta supports the BCRYPT, SHA-512, SHA-256, SHA-1, MD5, and PBKDF2 hash functions for password import.  A hashed password may be specified in a Password object when creating or updating a user, but not for other operations.  See [Create User with Imported Hashed Password](https://developer.okta.com/docs/reference/api/users/#create-user-with-imported-hashed-password)  for information on using this object when creating a user. When updating a User with a hashed password, the User must be in the `STAGED` status.",
      "fields": {
        "algorithm": {
          "description": "The algorithm used to generate the hash using the password (and salt, when applicable).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialHashAlgorithm",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "digestAlgorithm": {
          "description": "Algorithm used to generate the key. Only required for the PBKDF2 algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DigestAlgorithm",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "iterationCount": {
          "description": "= 4096. Only required for PBKDF2 algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "keySize": {
          "description": "Size of the derived key in bytes. Only required for PBKDF2 algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "salt": {
          "description": "Only required for salted hashes. For BCRYPT, this specifies Radix-64 as the encoded salt used to generate the hash, which must be 22 characters long. For other salted hashes, this specifies the Base64-encoded salt used to generate the hash.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "saltOrder": {
          "description": "Specifies whether salt was pre- or postfixed to the password before hashing. Only required for salted algorithms.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "description": "For SHA-512, SHA-256, SHA-1, MD5, and PBKDF2, this is the actual base64-encoded hash of the password (and salt, if used). This is the Base64-encoded `value` of the SHA-512/SHA-256/SHA-1/MD5/PBKDF2 digest that was computed by either pre-fixing or post-fixing the `salt` to the `password`, depending on the `saltOrder`. If a `salt` was not used in the `source` system, then this should just be the Base64-encoded `value` of the password's SHA-512/SHA-256/SHA-1/MD5/PBKDF2 digest. For BCRYPT, this is the actual Radix-64 encoded hashed password.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "workFactor": {
          "description": "Governs the strength of the hash and the time required to compute it. Only required for BCRYPT algorithm.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 20,
            "minimum": 1
          }
        }
      },
      "alias": "PasswordCredentialHash"
    },
    "PasswordCredentialHook": {
      "description": "Specify a [password import inline hook](/openapi/okta-management/management/tag/InlineHook/#tag/InlineHook/operation/createPasswordImportInlineHook) to trigger verification of the User's password the first time the User signs in. This allows an existing password to be imported into Okta directly from some other store.",
      "fields": {
        "type": {
          "description": "The type of password inline hook. Currently, must be set to default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PasswordCredentialHookInput": {
      "description": "Specify a [password import inline hook](/openapi/okta-management/management/tag/InlineHook/#tag/InlineHook/operation/createPasswordImportInlineHook) to trigger verification of the User's password the first time the User signs in. This allows an existing password to be imported into Okta directly from some other store.",
      "fields": {
        "type": {
          "description": "The type of password inline hook. Currently, must be set to default.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "PasswordCredentialHook"
    },
    "PasswordCredentialInput": {
      "description": "**Password**).  For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
      "fields": {
        "hash": {
          "description": "Specifies a hashed password to import into Okta. This allows an existing password to be imported into Okta directly from some other store. Okta supports the BCRYPT, SHA-512, SHA-256, SHA-1, MD5, and PBKDF2 hash functions for password import.  A hashed password may be specified in a Password object when creating or updating a user, but not for other operations.  See [Create User with Imported Hashed Password](https://developer.okta.com/docs/reference/api/users/#create-user-with-imported-hashed-password)  for information on using this object when creating a user. When updating a User with a hashed password, the User must be in the `STAGED` status.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialHashInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "hook": {
          "description": "Specify a [password import inline hook](/openapi/okta-management/management/tag/InlineHook/#tag/InlineHook/operation/createPasswordImportInlineHook) to trigger verification of the User's password the first time the User signs in. This allows an existing password to be imported into Okta directly from some other store.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialHookInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "value": {
          "description": "Specifies the password for a user. The Password Policy validates this password.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "password"
          }
        }
      },
      "alias": "PasswordCredential"
    },
    "PasswordSettingObjectInput": {
      "description": "Determines whether Okta creates and pushes a password in the app for each assigned user",
      "fields": {
        "change": {
          "description": "Determines whether a change in a user's password also updates the user's password in the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChangeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "seed": {
          "description": "Determines whether the generated password is the user's Okta password or a randomly generated password",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SeedEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Setting status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnabledStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "PasswordSettingObject"
    },
    "PerClientRateLimitSettings": {
      "fields": {
        "defaultMode": {
          "type": {
            "name": "PerClientRateLimitMode",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "useCaseModeOverrides": {
          "description": "A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode. Overrides the `defaultMode` property for the specified use cases.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitSettingsUseCaseModeOverrides",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PerClientRateLimitSettingsInput": {
      "fields": {
        "defaultMode": {
          "type": {
            "name": "PerClientRateLimitMode",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "useCaseModeOverrides": {
          "description": "A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode. Overrides the `defaultMode` property for the specified use cases.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitSettingsUseCaseModeOverridesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "PerClientRateLimitSettings"
    },
    "PerClientRateLimitSettingsUseCaseModeOverrides": {
      "description": "A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode. Overrides the `defaultMode` property for the specified use cases.",
      "fields": {
        "LOGIN_PAGE": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "OAUTH2_AUTHORIZE": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "OIE_APP_INTENT": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PerClientRateLimitSettingsUseCaseModeOverridesInput": {
      "description": "A map of Per-Client Rate Limit Use Case to the applicable PerClientRateLimitMode. Overrides the `defaultMode` property for the specified use cases.",
      "fields": {
        "LOGIN_PAGE": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "OAUTH2_AUTHORIZE": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "OIE_APP_INTENT": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PerClientRateLimitMode",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "Permission": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PermissionLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "description": "Conditions for further restricting a permission",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PermissionConditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the role was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "label": {
          "description": "The permission type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the role was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "PermissionConditions": {
      "description": "Conditions for further restricting a permission",
      "fields": {
        "exclude": {
          "description": "Exclude attributes with specific values for the permission",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "include": {
          "description": "Include attributes with specific values for the permission",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PermissionConditionsInput": {
      "description": "Conditions for further restricting a permission",
      "fields": {
        "exclude": {
          "description": "Exclude attributes with specific values for the permission",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "include": {
          "description": "Include attributes with specific values for the permission",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "PermissionConditions"
    },
    "PermissionLinks": {
      "fields": {
        "role": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "Permissions": {
      "fields": {
        "permissions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Permission",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "PinRequestInput": {
      "description": "Pin Request",
      "fields": {
        "authenticatorEnrollmentId": {
          "description": "ID for a WebAuthn Preregistration Factor in Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "fulfillmentProvider": {
          "description": "Name of the fulfillment provider for the WebAuthn Preregistration Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PinRequestFulfillmentProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "PinRequest"
    },
    "Policy": {
      "fields": {
        "_embedded": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Policy was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "Description of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Identifier of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Policy was last modified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Name of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Specifies the order in which this Policy is evaluated in relation to the other policies",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Specifies whether Okta created the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "All Okta orgs contain only one IdP Discovery Policy with an immutable default Rule routing to your org's sign-in page.  Creating or replacing a policy with the `IDP_DISCOVERY` type isn't supported. The following policy types are available with Identity Engine: `ACCESS_POLICY`, `PROFILE_ENROLLMENT`, `POST_AUTH_SESSION`, and `ENTITY_RISK`. The `POST_AUTH_SESSION`, and `ENTITY_RISK`  policy types are in . Contact your Okta account team to enable these features.",
          "type": {
            "name": "PolicyType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PolicyAccountLink": {
      "description": "Specifies the behavior for linking an IdP User to an existing Okta User",
      "fields": {
        "action": {
          "description": "Specifies the account linking action for an IdP User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLinkAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "filter": {
          "description": "Specifies Group memberships to restrict which Users are available for account linking by an IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLinkFilter",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PolicyAccountLinkFilter": {
      "description": "Specifies Group memberships to restrict which Users are available for account linking by an IdP",
      "fields": {
        "groups": {
          "description": "Group memberships used to determine link candidates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLinkFilterGroups",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PolicyAccountLinkFilterGroups": {
      "description": "Group memberships used to determine link candidates",
      "fields": {
        "include": {
          "description": "Specifies the allowlist of Group identifiers to match against. Group memberships are restricted to type `OKTA_GROUP`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PolicyAccountLinkFilterGroupsInput": {
      "description": "Group memberships used to determine link candidates",
      "fields": {
        "include": {
          "description": "Specifies the allowlist of Group identifiers to match against. Group memberships are restricted to type `OKTA_GROUP`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "PolicyAccountLinkFilterGroups"
    },
    "PolicyAccountLinkFilterInput": {
      "description": "Specifies Group memberships to restrict which Users are available for account linking by an IdP",
      "fields": {
        "groups": {
          "description": "Group memberships used to determine link candidates",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLinkFilterGroupsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "PolicyAccountLinkFilter"
    },
    "PolicyAccountLinkInput": {
      "description": "Specifies the behavior for linking an IdP User to an existing Okta User",
      "fields": {
        "action": {
          "description": "Specifies the account linking action for an IdP User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLinkAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "filter": {
          "description": "Specifies Group memberships to restrict which Users are available for account linking by an IdP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyAccountLinkFilterInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "PolicyAccountLink"
    },
    "PolicyContextDeviceInput": {
      "fields": {
        "assuranceId": {
          "description": "The device assurance policy ID for the simulation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "managed": {
          "description": "If the device is managed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "platform": {
          "description": "The platform of the device, for example, IOS.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "registered": {
          "description": "If the device is registered",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "PolicyContextGroupsInput": {
      "description": "An array of Group IDs for the simulate operation. Only user IDs or Group IDs are allowed, not both.",
      "fields": {
        "ids": {
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PolicyContextInput": {
      "fields": {
        "device": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyContextDeviceInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "groups": {
          "description": "An array of Group IDs for the simulate operation. Only user IDs or Group IDs are allowed, not both.",
          "type": {
            "name": "PolicyContextGroupsInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "ip": {
          "description": "The network rule condition, zone, or IP address",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "risk": {
          "description": "The risk rule condition level",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyContextRiskInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "The user ID for the simulate operation. Only user IDs or Group IDs are allowed, not both.",
          "type": {
            "name": "PolicyContextUserInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "zones": {
          "description": "The zone ID under the network rule condition.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyContextZonesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "PolicyContext"
    },
    "PolicyContextRiskInput": {
      "description": "The risk rule condition level",
      "fields": {
        "level": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyContextRiskLevel",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PolicyContextUserInput": {
      "description": "The user ID for the simulate operation. Only user IDs or Group IDs are allowed, not both.",
      "fields": {
        "id": {
          "description": "The unique ID number for the user.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PolicyContextZonesInput": {
      "description": "The zone ID under the network rule condition.",
      "fields": {
        "ids": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "PolicyInput": {
      "fields": {
        "description": {
          "description": "Description of the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Specifies the order in which this Policy is evaluated in relation to the other policies",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Specifies whether Okta created the Policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "All Okta orgs contain only one IdP Discovery Policy with an immutable default Rule routing to your org's sign-in page.  Creating or replacing a policy with the `IDP_DISCOVERY` type isn't supported. The following policy types are available with Identity Engine: `ACCESS_POLICY`, `PROFILE_ENROLLMENT`, `POST_AUTH_SESSION`, and `ENTITY_RISK`. The `POST_AUTH_SESSION`, and `ENTITY_RISK`  policy types are in . Contact your Okta account team to enable these features.",
          "type": {
            "name": "PolicyType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "Policy"
    },
    "PolicyLinks": {
      "fields": {
        "activate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "mappings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "rules": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PolicyMapping": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyMappingLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PolicyMappingLinks": {
      "fields": {
        "application": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "policy": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PolicyMappingRequestInput": {
      "fields": {
        "resourceId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "resourceType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyMappingResourceType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "PolicyMappingRequest"
    },
    "PolicyRule": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the rule was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Identifier for the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the rule was last modified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Name of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Priority of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Specifies whether Okta created the Policy Rule (`system=true`). You can't delete Policy Rules that have `system` set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "Rule type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyRuleType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PolicyRuleInput": {
      "fields": {
        "id": {
          "description": "Identifier for the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "description": "Priority of the rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "system": {
          "description": "Specifies whether Okta created the Policy Rule (`system=true`). You can't delete Policy Rules that have `system` set to `true`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "type": {
          "description": "Rule type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyRuleType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "PolicyRule"
    },
    "PolicySubject": {
      "description": "Specifies the behavior for establishing, validating, and matching a username for an IdP User",
      "fields": {
        "filter": {
          "description": "Optional [regular expression pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions) used to filter untrusted IdP usernames. * As a best security practice, you should define a regular expression pattern to filter untrusted IdP usernames. This is especially important if multiple IdPs are connected to your org. The filter prevents an IdP from issuing an assertion for any User, including partners or directory Users in your Okta org. * For example, the filter pattern `(\\S+@example\\.com)` allows only Users that have an `@example.com` username suffix. It rejects assertions that have any other suffix such as `@corp.example.com` or `@partner.com`. * Only `SAML2` and `OIDC` IdP providers support the `filter` property.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        },
        "matchAttribute": {
          "description": "Okta User profile attribute for matching a transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`. The `matchAttribute` must be a valid Okta User profile attribute of one of the following types: * String (with no format or 'email' format only) * Integer * Number",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "matchType": {
          "description": "Determines the Okta User profile attribute match conditions for account linking and authentication of the transformed IdP username",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicySubjectMatchType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userNameTemplate": {
          "description": "[Okta Expression Language (EL) expression](https://developer.okta.com/docs/reference/okta-expression-language/) to generate or transform a unique username for the IdP User. * IdP User profile attributes can be referenced with the `idpuser` prefix such as `idpuser.subjectNameId`. * You must define an IdP User profile attribute before it can be referenced in an Okta EL expression. To define an IdP User attribute policy, you may need to create a new IdP instance without a base profile property. Then edit the IdP User profile to update the IdP instance with an expression that references the IdP User profile attribute that you just created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyUserNameTemplate",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "PolicySubjectInput": {
      "description": "Specifies the behavior for establishing, validating, and matching a username for an IdP User",
      "fields": {
        "filter": {
          "description": "Optional [regular expression pattern](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions) used to filter untrusted IdP usernames. * As a best security practice, you should define a regular expression pattern to filter untrusted IdP usernames. This is especially important if multiple IdPs are connected to your org. The filter prevents an IdP from issuing an assertion for any User, including partners or directory Users in your Okta org. * For example, the filter pattern `(\\S+@example\\.com)` allows only Users that have an `@example.com` username suffix. It rejects assertions that have any other suffix such as `@corp.example.com` or `@partner.com`. * Only `SAML2` and `OIDC` IdP providers support the `filter` property.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        },
        "matchAttribute": {
          "description": "Okta User profile attribute for matching a transformed IdP username. Only for matchType `CUSTOM_ATTRIBUTE`. The `matchAttribute` must be a valid Okta User profile attribute of one of the following types: * String (with no format or 'email' format only) * Integer * Number",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "matchType": {
          "description": "Determines the Okta User profile attribute match conditions for account linking and authentication of the transformed IdP username",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicySubjectMatchType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userNameTemplate": {
          "description": "[Okta Expression Language (EL) expression](https://developer.okta.com/docs/reference/okta-expression-language/) to generate or transform a unique username for the IdP User. * IdP User profile attributes can be referenced with the `idpuser` prefix such as `idpuser.subjectNameId`. * You must define an IdP User profile attribute before it can be referenced in an Okta EL expression. To define an IdP User attribute policy, you may need to create a new IdP instance without a base profile property. Then edit the IdP User profile to update the IdP instance with an expression that references the IdP User profile attribute that you just created.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyUserNameTemplateInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "PolicySubject"
    },
    "PolicyUserNameTemplate": {
      "description": "[Okta Expression Language (EL) expression](https://developer.okta.com/docs/reference/okta-expression-language/) to generate or transform a unique username for the IdP User. * IdP User profile attributes can be referenced with the `idpuser` prefix such as `idpuser.subjectNameId`. * You must define an IdP User profile attribute before it can be referenced in an Okta EL expression. To define an IdP User attribute policy, you may need to create a new IdP instance without a base profile property. Then edit the IdP User profile to update the IdP instance with an expression that references the IdP User profile attribute that you just created.",
      "fields": {
        "template": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024,
            "minLength": 9
          }
        }
      }
    },
    "PolicyUserNameTemplateInput": {
      "description": "[Okta Expression Language (EL) expression](https://developer.okta.com/docs/reference/okta-expression-language/) to generate or transform a unique username for the IdP User. * IdP User profile attributes can be referenced with the `idpuser` prefix such as `idpuser.subjectNameId`. * You must define an IdP User profile attribute before it can be referenced in an Okta EL expression. To define an IdP User attribute policy, you may need to create a new IdP instance without a base profile property. Then edit the IdP User profile to update the IdP instance with an expression that references the IdP User profile attribute that you just created.",
      "fields": {
        "template": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024,
            "minLength": 9
          }
        }
      },
      "alias": "PolicyUserNameTemplate"
    },
    "PostAPIServiceIntegrationInstance": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "APIServiceIntegrationLinks",
              "type": "named"
            }
          },
          "http": {}
        },
        "clientSecret": {
          "description": "The client secret for the API Service Integration instance. This property is only returned in a POST response.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "configGuideUrl": {
          "description": "The URL to the API service integration configuration guide",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "createdAt": {
          "description": "Timestamp when the API Service Integration instance was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "createdBy": {
          "description": "The user ID of the API Service Integration instance creator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "grantedScopes": {
          "description": "The list of Okta management scopes granted to the API Service Integration instance. See [Okta management OAuth 2.0 scopes](/oauth2/#okta-admin-management).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "description": "The ID of the API Service Integration instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the API service integration that corresponds with the `type` property. This is the full name of the API service integration listed in the Okta Integration Network (OIN) catalog.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of the API service integration. This string is an underscore-concatenated, lowercased API service integration name. For example, `my_api_log_integration`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PostAPIServiceIntegrationInstanceRequestInput": {
      "fields": {
        "grantedScopes": {
          "description": "The list of Okta management scopes granted to the API Service Integration instance. See [Okta management OAuth 2.0 scopes](/oauth2/#okta-admin-management).",
          "type": {
            "element_type": {
              "name": "String",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The type of the API service integration. This string is an underscore-concatenated, lowercased API service integration name. For example, `my_api_log_integration`.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "postAPIServiceIntegrationInstanceRequest"
    },
    "PrincipalRateLimitEntity": {
      "fields": {
        "createdBy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "createdDate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "defaultConcurrencyPercentage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "defaultPercentage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdate": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastUpdatedBy": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "orgId": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "principalId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "principalType": {
          "type": {
            "name": "PrincipalType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PrincipalRateLimitEntityInput": {
      "fields": {
        "principalId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "principalType": {
          "type": {
            "name": "PrincipalType",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "PrincipalRateLimitEntity"
    },
    "ProfileMapping": {
      "description": "Okta.",
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for a profile mapping",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "source": {
          "description": "**Note:** If the source is Okta and the UserTypes feature isn't enabled, then the source `_links` only has a link to the schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProfileMappingSource",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "target": {
          "description": "**Note:** If the target is Okta and the UserTypes feature isn't enabled, then the target `_links` only has a link to the schema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProfileMappingTarget",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ProfileMappingRequestInput": {
      "description": "The updated request body properties",
      "fields": {
        "properties": {
          "type": {
            "name": "JSON",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "ProfileMappingRequest"
    },
    "ProfileMappingSource": {
      "description": "**Note:** If the source is Okta and the UserTypes feature isn't enabled, then the source `_links` only has a link to the schema.",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SourceLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for the application instance or userType",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Variable name of the application instance or name of the referenced UserType",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of user referenced in the mapping",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProfileMappingTarget": {
      "description": "**Note:** If the target is Okta and the UserTypes feature isn't enabled, then the target `_links` only has a link to the schema.",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SourceLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for the application instance or UserType",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Variable name of the application instance or name of the referenced userType",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of user referenced in the mapping",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProfileSettingObjectInput": {
      "description": "This setting determines whether a user in the app gets updated when they're updated in Okta.  If enabled, Okta updates a user's attributes in the app when the app is assigned. Future changes made to the Okta user's profile automatically overwrite the corresponding attribute value in the app.",
      "fields": {
        "status": {
          "description": "Setting status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnabledStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ProfileSettingObject"
    },
    "Provisioning": {
      "description": "Specifies the behavior for just-in-time (JIT) provisioning of an IdP User as a new Okta User and their Group memberships",
      "fields": {
        "action": {
          "description": "Specifies the User provisioning action during authentication when an IdP User isn't linked to an existing Okta User. * To successfully provision a new Okta User, you must enable just-in-time (JIT) provisioning in your org security settings. * If the target username isn't unique or the resulting Okta User profile is missing a required profile attribute, JIT provisioning may fail. * New Okta Users are provisioned with either a `FEDERATION` or `SOCIAL` authentication provider depending on the IdP type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "conditions": {
          "description": "Conditional behaviors for an IdP User during authentication",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningConditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "groups": {
          "description": "Provisioning settings for a User's Group memberships",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningGroups",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profileMaster": {
          "description": "Determines if the IdP should act as a source of truth for User profile attributes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ProvisioningConditions": {
      "description": "Conditional behaviors for an IdP User during authentication",
      "fields": {
        "deprovisioned": {
          "description": "Behavior for a previously deprovisioned IdP User during authentication. Not supported with OIDC IdPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningDeprovisionedCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "suspended": {
          "description": "Behavior for a previously suspended IdP User during authentication. Not supported with OIDC IdPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningSuspendedCondition",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ProvisioningConditionsInput": {
      "description": "Conditional behaviors for an IdP User during authentication",
      "fields": {
        "deprovisioned": {
          "description": "Behavior for a previously deprovisioned IdP User during authentication. Not supported with OIDC IdPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningDeprovisionedConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "suspended": {
          "description": "Behavior for a previously suspended IdP User during authentication. Not supported with OIDC IdPs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningSuspendedConditionInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "ProvisioningConditions"
    },
    "ProvisioningConnectionOauthRequestInput": {
      "description": "OAuth 2.0-based Provisioning Connection request",
      "fields": {
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningConnectionOauthRequestProfileInput",
              "type": "named"
            }
          },
          "http": {}
        }
      }
    },
    "ProvisioningConnectionOauthRequestProfileInput": {
      "fields": {
        "authScheme": {
          "description": "OAuth 2.0 is used to authenticate with the app.",
          "type": {
            "name": "ProvisioningConnectionOauthAuthScheme",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clientId": {
          "description": "Only used for the Okta Org2Org (`okta_org2org`) app. The unique client identifier for the OAuth 2.0 service app from the target org.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "settings": {
          "description": "Settings required for the Microsoft Office 365 Provisioning Connection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Office365ProvisioningSettingsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "ProvisioningConnectionOauthRequestProfile"
    },
    "ProvisioningConnectionResponse": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfLifecycleAndAuthorize",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "authScheme": {
          "description": "A token is used to authenticate with the app. This property is only returned for the `TOKEN` authentication scheme.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningConnectionTokenAuthScheme",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "baseUrl": {
          "description": "Base URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile": {
          "type": {
            "name": "ProvisioningConnectionResponseProfile",
            "type": "named"
          },
          "http": {}
        },
        "status": {
          "description": "Provisioning Connection status",
          "type": {
            "name": "ProvisioningConnectionStatus",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProvisioningConnectionResponseProfile": {
      "fields": {
        "authScheme": {
          "description": "Defines the method of authentication",
          "type": {
            "name": "ProvisioningConnectionAuthScheme",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProvisioningConnectionTokenRequestInput": {
      "description": "Token-based Provisioning Connection request",
      "fields": {
        "baseUrl": {
          "description": "Only used for the Zscaler 2.0 (`zscalerbyz`) app. The base URL for the Zscaler 2.0 target app, which also contains the Zscaler ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningConnectionTokenRequestProfileInput",
              "type": "named"
            }
          },
          "http": {}
        }
      }
    },
    "ProvisioningConnectionTokenRequestProfileInput": {
      "fields": {
        "authScheme": {
          "description": "A token is used to authenticate with the app. This property is only returned for the `TOKEN` authentication scheme.",
          "type": {
            "name": "ProvisioningConnectionTokenAuthScheme",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "token": {
          "description": "Token used to authenticate with the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ProvisioningConnectionTokenRequestProfile"
    },
    "ProvisioningDeprovisionedCondition": {
      "description": "Behavior for a previously deprovisioned IdP User during authentication. Not supported with OIDC IdPs.",
      "fields": {
        "action": {
          "description": "Specifies the action during authentication when an IdP User is linked to a previously deprovisioned Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningDeprovisionedAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProvisioningDeprovisionedConditionInput": {
      "description": "Behavior for a previously deprovisioned IdP User during authentication. Not supported with OIDC IdPs.",
      "fields": {
        "action": {
          "description": "Specifies the action during authentication when an IdP User is linked to a previously deprovisioned Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningDeprovisionedAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ProvisioningDeprovisionedCondition"
    },
    "ProvisioningGroups": {
      "description": "Provisioning settings for a User's Group memberships",
      "fields": {
        "action": {
          "description": "**Note:** Group provisioning action is processed independently from profile sourcing. You can sync Group memberships through SAML with profile sourcing disabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningGroupsAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignments": {
          "description": "List of `OKTA_GROUP` Group identifiers to add an IdP User as a member with the `ASSIGN` action",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Allowlist of `OKTA_GROUP` Group identifiers for the `APPEND` or `SYNC` provisioning action",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sourceAttributeName": {
          "description": "IdP User profile attribute name (case-insensitive) for an array value that contains Group memberships",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        }
      }
    },
    "ProvisioningGroupsInput": {
      "description": "Provisioning settings for a User's Group memberships",
      "fields": {
        "action": {
          "description": "**Note:** Group provisioning action is processed independently from profile sourcing. You can sync Group memberships through SAML with profile sourcing disabled.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningGroupsAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "assignments": {
          "description": "List of `OKTA_GROUP` Group identifiers to add an IdP User as a member with the `ASSIGN` action",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "Allowlist of `OKTA_GROUP` Group identifiers for the `APPEND` or `SYNC` provisioning action",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sourceAttributeName": {
          "description": "IdP User profile attribute name (case-insensitive) for an array value that contains Group memberships",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 1024
          }
        }
      },
      "alias": "ProvisioningGroups"
    },
    "ProvisioningInput": {
      "description": "Specifies the behavior for just-in-time (JIT) provisioning of an IdP User as a new Okta User and their Group memberships",
      "fields": {
        "action": {
          "description": "Specifies the User provisioning action during authentication when an IdP User isn't linked to an existing Okta User. * To successfully provision a new Okta User, you must enable just-in-time (JIT) provisioning in your org security settings. * If the target username isn't unique or the resulting Okta User profile is missing a required profile attribute, JIT provisioning may fail. * New Okta Users are provisioned with either a `FEDERATION` or `SOCIAL` authentication provider depending on the IdP type.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "conditions": {
          "description": "Conditional behaviors for an IdP User during authentication",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "groups": {
          "description": "Provisioning settings for a User's Group memberships",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningGroupsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profileMaster": {
          "description": "Determines if the IdP should act as a source of truth for User profile attributes",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "Provisioning"
    },
    "ProvisioningSuspendedCondition": {
      "description": "Behavior for a previously suspended IdP User during authentication. Not supported with OIDC IdPs.",
      "fields": {
        "action": {
          "description": "Specifies the action during authentication when an IdP User is linked to a previously suspended Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningSuspendedAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ProvisioningSuspendedConditionInput": {
      "description": "Behavior for a previously suspended IdP User during authentication. Not supported with OIDC IdPs.",
      "fields": {
        "action": {
          "description": "Specifies the action during authentication when an IdP User is linked to a previously suspended Okta User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProvisioningSuspendedAction",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ProvisioningSuspendedCondition"
    },
    "PushProvider": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "Unique key for the Push Provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdatedDate": {
          "description": "Timestamp when the Push Provider was last modified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Display name of the push provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "providerType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProviderType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "PushProviderInput": {
      "fields": {
        "name": {
          "description": "Display name of the push provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "providerType": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ProviderType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "PushProvider"
    },
    "RateLimitAdminNotifications": {
      "fields": {
        "notificationsEnabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "RateLimitAdminNotificationsInput": {
      "fields": {
        "notificationsEnabled": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "RateLimitAdminNotifications"
    },
    "RateLimitWarningThresholdRequestInput": {
      "fields": {
        "warningThreshold": {
          "description": "The threshold value (percentage) of a rate limit that, when exceeded, triggers a warning notification. By default, this value is 90 for Workforce orgs and 60 for CIAM orgs.",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 90,
            "minimum": 30
          }
        }
      },
      "alias": "RateLimitWarningThresholdRequest"
    },
    "RateLimitWarningThresholdResponse": {
      "fields": {
        "warningThreshold": {
          "description": "The threshold value (percentage) of a rate limit that, when exceeded, triggers a warning notification. By default, this value is 90 for Workforce orgs and 60 for CIAM orgs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ],
            "maximum": 90,
            "minimum": 30
          }
        }
      }
    },
    "Realm": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Realm was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique key for the Realm",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isDefault": {
          "description": "Conveys whether the Realm is the default",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Realm was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealmProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "RealmAssignment": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "actions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Actions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Conditions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "isDefault": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "lastUpdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealmProfile": {
      "fields": {
        "name": {
          "description": "Name of a Realm",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "realmType": {
          "description": "Used to store partner users. This must be set to Partner to access Okta's external partner portal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealmProfileRealmType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RealmProfileInput": {
      "fields": {
        "name": {
          "description": "Name of a Realm",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "realmType": {
          "description": "Used to store partner users. This must be set to Partner to access Okta's external partner portal.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealmProfileRealmType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "RealmProfile"
    },
    "RecoveryQuestionCredential": {
      "description": "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
      "fields": {
        "question": {
          "description": "The recovery question",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 100,
            "minimum": 1
          }
        }
      }
    },
    "RecoveryQuestionCredentialInput": {
      "description": "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
      "fields": {
        "answer": {
          "description": "The answer to the recovery question",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 100,
            "minimum": 1
          }
        },
        "question": {
          "description": "The recovery question",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 100,
            "minimum": 1
          }
        }
      },
      "alias": "RecoveryQuestionCredential"
    },
    "ReplaceGroupBodyInput": {
      "fields": {
        "profile": {
          "description": "Profile for any Group that is not imported from Active Directory. Specifies the standard and custom profile properties for a Group.  The `objectClass` for these groups is `okta:user_group`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OktaUserGroupProfileInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResendUserFactor": {
      "fields": {
        "factorType": {
          "description": "Type of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResendUserFactorFactorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ResendUserFactorInput": {
      "fields": {
        "factorType": {
          "description": "Type of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResendUserFactorFactorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ResendUserFactor"
    },
    "ResetPasswordToken": {
      "fields": {
        "resetPasswordUrl": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ResourceSet": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the role was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "description": {
          "description": "Description of the Resource Set",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique ID for the Resource Set object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Unique label for the Resource Set",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the role was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "ResourceSetBindingAddMembersRequestInput": {
      "fields": {
        "additions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "ResourceSetBindingAddMembersRequest"
    },
    "ResourceSetBindingCreateRequestInput": {
      "fields": {
        "members": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "role": {
          "description": "Unique key for the role",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ResourceSetBindingCreateRequest"
    },
    "ResourceSetBindingMember": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the role was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique key for the role",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the role was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "ResourceSetBindingMembers": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetBindingMembersLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "members": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ResourceSetBindingMember",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ResourceSetBindingMembersLinks": {
      "fields": {
        "binding": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "next": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResourceSetBindingResponse": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetBindingResponseLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "`id` of the role",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ResourceSetBindingResponseLinks": {
      "fields": {
        "bindings": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resource-set": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResourceSetBindingRole": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetBindingRoleLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ResourceSetBindingRoleLinks": {
      "fields": {
        "members": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResourceSetBindings": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetBindingsLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "roles": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ResourceSetBindingRole",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ResourceSetBindingsLinks": {
      "fields": {
        "bindings": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resource-set": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResourceSetInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "Description of the Resource Set",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Unique label for the Resource Set",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ResourceSet"
    },
    "ResourceSetLinks": {
      "fields": {
        "bindings": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resources": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResourceSetLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "ResourceSetResource": {
      "fields": {
        "_links": {
          "description": "Related discoverable resources",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetResourceLinks",
              "type": "named"
            }
          },
          "http": {}
        },
        "created": {
          "description": "Timestamp when the Resource Set Resource object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique ID of the Resource Set Resource object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when this object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "orn": {
          "description": "The Okta Resource Name (ORN) of the resource",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ResourceSetResourceLinks": {
      "description": "Related discoverable resources",
      "fields": {
        "groups": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resource": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "users": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResourceSetResourcePatchRequestInput": {
      "fields": {
        "additions": {
          "description": "A list of resources to add to the Resource Set",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "ResourceSetResourcePatchRequest"
    },
    "ResourceSetResources": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ResourceSetResourcesLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resources": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ResourceSetResource",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ResourceSetResourcesLinks": {
      "fields": {
        "next": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resource-set": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "ResourceSets": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the current status of an application using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. Use the `LinksNext` object for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksNext",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resource-sets": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ResourceSet",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "ResponseLinks": {
      "description": "Link objects",
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "RetrieveClientRoleResult": {
      "fields": {
        "_embedded": {
          "description": "Optional embedded resources for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbedded",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "assignmentType": {
          "description": "Role assignment type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RoleAssignmentType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Role Assignment ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Label for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "resource-set": {
          "description": "Resource Set ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "role": {
          "description": "Custom Role ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Standard role type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RetrieveClientRoleResultTypeEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RiskEventInput": {
      "fields": {
        "expiresAt": {
          "description": "Timestamp at which the event expires (expressed as a UTC time zone using ISO 8601 format: yyyy-MM-dd`T`HH:mm:ss.SSS`Z`). If this optional field is not included, Okta automatically expires the event 24 hours after the event is consumed.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "subjects": {
          "description": "List of Risk Event Subjects",
          "type": {
            "element_type": {
              "name": "RiskEventSubjectInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "timestamp": {
          "description": "Timestamp of when the event is produced (expressed as a UTC time zone using ISO 8601 format: yyyy-MM-dd`T`HH:mm:ss.SSS`Z`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      },
      "alias": "RiskEvent"
    },
    "RiskEventSubjectInput": {
      "fields": {
        "ip": {
          "description": "The risk event subject IP address (either an IPv4 or IPv6 address)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "message": {
          "description": "Additional reasons for the risk level of the IP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^[a-zA-Z0-9 .\\-_]*$",
            "maxLength": 512
          }
        },
        "riskLevel": {
          "description": "The risk level associated with the IP",
          "type": {
            "name": "RiskEventSubjectRiskLevel",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "RiskEventSubject"
    },
    "RiskProvider": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "name": "LinksSelf",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "action": {
          "description": "Action taken by Okta during authentication attempts based on the risk events sent by this provider",
          "type": {
            "name": "RiskProviderAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clientId": {
          "description": "The ID of the [OAuth service app](https://developer.okta.com/docs/guides/implement-oauth-for-okta-serviceapp/main/#create-a-service-app-and-grant-scopes) that is used to send risk events to Okta",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Risk Provider object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "The ID of the Risk Provider object",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Risk Provider object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Name of the risk provider",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50
          }
        }
      }
    },
    "RiskProviderInput": {
      "fields": {
        "action": {
          "description": "Action taken by Okta during authentication attempts based on the risk events sent by this provider",
          "type": {
            "name": "RiskProviderAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clientId": {
          "description": "The ID of the [OAuth service app](https://developer.okta.com/docs/guides/implement-oauth-for-okta-serviceapp/main/#create-a-service-app-and-grant-scopes) that is used to send risk events to Okta",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the risk provider",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50
          }
        }
      },
      "alias": "RiskProvider"
    },
    "RoleAssignedUser": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndRoles",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The ID of the User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "orn": {
          "description": "ORN representing the assignee",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "RoleAssignedUsers": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksNextForRoleAssignments",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "RoleAssignedUser",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "SamlRelayState": {
      "description": "Relay state settings for IdP",
      "fields": {
        "format": {
          "description": "The format used to generate the `relayState` in the SAML request. The `FROM_URL` format is used if this value is null.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlRelayStateFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SamlRelayStateInput": {
      "description": "Relay state settings for IdP",
      "fields": {
        "format": {
          "description": "The format used to generate the `relayState` in the SAML request. The `FROM_URL` format is used if this value is null.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlRelayStateFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "SamlRelayState"
    },
    "SamlSettings": {
      "description": "Advanced settings for the SAML 2.0 protocol",
      "fields": {
        "honorPersistentNameId": {
          "description": "Determines if the IdP should persist account linking when the incoming assertion NameID format is `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "nameFormat": {
          "description": "SAML 2.0 Name Identifier formats",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlNameIdFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SamlSettingsInput": {
      "description": "Advanced settings for the SAML 2.0 protocol",
      "fields": {
        "honorPersistentNameId": {
          "description": "Determines if the IdP should persist account linking when the incoming assertion NameID format is `urn:oasis:names:tc:SAML:2.0:nameid-format:persistent`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "nameFormat": {
          "description": "SAML 2.0 Name Identifier formats",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SamlNameIdFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "SamlSettings"
    },
    "ScopeResourceHrefObject": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ScopeResourceHrefObjectInput": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "ScopeResourceHrefObject"
    },
    "SecurityEventsProviderRequestInput": {
      "description": "The request schema for creating or updating a Security Events Provider. The `settings` must match one of the schemas.",
      "fields": {
        "name": {
          "description": "The name of the Security Events Provider instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "settings": {
          "type": {
            "name": "SecurityEventsProviderRequestSettingsInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "The application type of the Security Events Provider",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255
          }
        }
      },
      "alias": "SecurityEventsProviderRequest"
    },
    "SecurityEventsProviderRequestSettingsInput": {
      "description": "Information about the Security Events Provider for signal ingestion",
      "fields": {
        "issuer": {
          "description": "Issuer URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 700
          }
        },
        "jwks_url": {
          "description": "The public URL where the JWKS public key is uploaded",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "url",
            "maxLength": 1000
          }
        },
        "well_known_url": {
          "description": "The published well-known URL of the Security Events Provider (the SSF transmitter)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "url",
            "maxLength": 1000
          }
        }
      }
    },
    "SecurityEventsProviderResponse": {
      "description": "The Security Events Provider response",
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of this instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the Security Events Provider instance",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 100
          }
        },
        "settings": {
          "description": "Security Events Provider settings",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityEventsProviderSettingsResponse",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "Indicates whether the Security Events Provider is active or not",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SecurityEventsProviderResponseStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The application type of the Security Events Provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 255
          }
        }
      }
    },
    "SecurityEventsProviderSettingsResponse": {
      "description": "Security Events Provider settings",
      "fields": {
        "issuer": {
          "description": "Issuer URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 700
          }
        },
        "jwks_url": {
          "description": "The public URL where the JWKS public key is uploaded",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "url",
            "maxLength": 1000
          }
        },
        "well_known_url": {
          "description": "The well-known URL of the Security Events Provider (the SSF transmitter)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "url",
            "maxLength": 1000
          }
        }
      }
    },
    "Session": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "amr": {
          "description": "Authentication method reference",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SessionAuthenticationMethod",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "createdAt": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "expiresAt": {
          "description": "A timestamp when the Session expires",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "A unique key for the Session",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "idp": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SessionIdentityProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lastFactorVerification": {
          "description": "A timestamp when the user last performed multifactor authentication",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastPasswordVerification": {
          "description": "A timestamp when the user last performed the primary or step-up authentication with a password",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "login": {
          "description": "A unique identifier for the user (username)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SessionStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "userId": {
          "description": "A unique key for the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SessionIdentityProvider": {
      "fields": {
        "id": {
          "description": "Identity Provider ID. If the `type` is `OKTA`, then the `id` is the org ID.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SessionIdentityProviderType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SignInPage": {
      "fields": {
        "contentSecurityPolicySetting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContentSecurityPolicySetting",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pageContent": {
          "description": "The HTML for the page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "widgetCustomizations": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SignInPage1WidgetCustomizations",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "widgetVersion": {
          "description": "The version specified as a [Semantic Version](https://semver.org/).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
          }
        }
      }
    },
    "SignInPage1WidgetCustomizations": {
      "fields": {
        "authenticatorPageCustomLinkLabel": {
          "description": "The label for the authenticator page custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "authenticatorPageCustomLinkUrl": {
          "description": "The URL for the authenticator page custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "classicRecoveryFlowEmailOrUsernameLabel": {
          "description": "The label for the username field in the classic recovery flow",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink1Label": {
          "description": "The label for the first custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink1Url": {
          "description": "The URL for the first custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink2Label": {
          "description": "The label for the second custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink2Url": {
          "description": "The URL for the second custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "forgotPasswordLabel": {
          "description": "The label for the forgot password page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "forgotPasswordUrl": {
          "description": "The forgot password URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "helpLabel": {
          "description": "The label for the help link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "helpUrl": {
          "description": "The help link URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "passwordInfoTip": {
          "description": "The label for the password information tip",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "passwordLabel": {
          "description": "The label for the password field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "showPasswordVisibilityToggle": {
          "description": "Allows users to see their passwords as they type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "showUserIdentifier": {
          "description": "Allows the user's identifier to appear on authentication and enrollment pages",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "signInLabel": {
          "description": "The label for the sign in widget",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unlockAccountLabel": {
          "description": "The label for the unlock account link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unlockAccountUrl": {
          "description": "The unlock account URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usernameInfoTip": {
          "description": "The label for the username information tip",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usernameLabel": {
          "description": "The label for the username field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "widgetGeneration": {
          "description": "The generation of the Sign-in Widget",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WidgetGeneration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SignInPage1WidgetCustomizationsInput": {
      "fields": {
        "authenticatorPageCustomLinkLabel": {
          "description": "The label for the authenticator page custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "authenticatorPageCustomLinkUrl": {
          "description": "The URL for the authenticator page custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "classicRecoveryFlowEmailOrUsernameLabel": {
          "description": "The label for the username field in the classic recovery flow",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink1Label": {
          "description": "The label for the first custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink1Url": {
          "description": "The URL for the first custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink2Label": {
          "description": "The label for the second custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "customLink2Url": {
          "description": "The URL for the second custom link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "forgotPasswordLabel": {
          "description": "The label for the forgot password page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "forgotPasswordUrl": {
          "description": "The forgot password URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "helpLabel": {
          "description": "The label for the help link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "helpUrl": {
          "description": "The help link URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "passwordInfoTip": {
          "description": "The label for the password information tip",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "passwordLabel": {
          "description": "The label for the password field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "showPasswordVisibilityToggle": {
          "description": "Allows users to see their passwords as they type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "showUserIdentifier": {
          "description": "Allows the user's identifier to appear on authentication and enrollment pages",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "signInLabel": {
          "description": "The label for the sign in widget",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unlockAccountLabel": {
          "description": "The label for the unlock account link",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unlockAccountUrl": {
          "description": "The unlock account URL",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usernameInfoTip": {
          "description": "The label for the username information tip",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "usernameLabel": {
          "description": "The label for the username field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "widgetGeneration": {
          "description": "The generation of the Sign-in Widget",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WidgetGeneration",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SignInPageInput": {
      "fields": {
        "contentSecurityPolicySetting": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ContentSecurityPolicySettingInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "pageContent": {
          "description": "The HTML for the page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "widgetCustomizations": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SignInPage1WidgetCustomizationsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "widgetVersion": {
          "description": "The version specified as a [Semantic Version](https://semver.org/).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
          }
        }
      }
    },
    "SimulatePolicyBodyInput": {
      "description": "The request body required for a simulate policy operation",
      "fields": {
        "appInstance": {
          "description": "The application instance ID for a simulate operation",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "policyContext": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PolicyContextInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "policyTypes": {
          "description": "Supported policy types for a simulate operation. The default value, `null`, returns all types.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PolicyTypeSimulation",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "SimulatePolicyBody"
    },
    "SimulatePolicyEvaluations": {
      "fields": {
        "evaluated": {
          "description": "A list of evaluated but not matched policies and rules",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimulatePolicyEvaluationsEvaluated",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "policyType": {
          "description": "The policy type of the simulate operation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "PolicyTypeSimulation",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "result": {
          "description": "The result of the policy evaluation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimulatePolicyResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "The result of this entity evaluation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimulateResultStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "undefined": {
          "description": "A list of undefined but not matched policies and rules",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimulatePolicyEvaluationsUndefined",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "SimulatePolicyEvaluationsEvaluated": {
      "description": "A list of evaluated but not matched policies and rules",
      "fields": {
        "policies": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimulateResultPoliciesItems",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "SimulatePolicyEvaluationsUndefined": {
      "description": "A list of undefined but not matched policies and rules",
      "fields": {
        "policies": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimulateResultPoliciesItems",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "SimulatePolicyResult": {
      "description": "The result of the policy evaluation",
      "fields": {
        "policies": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimulateResultPoliciesItems",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "SimulateResultConditions": {
      "fields": {
        "status": {
          "description": "The result of this entity evaluation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimulateResultStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of condition",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SimulateResultPoliciesItems": {
      "fields": {
        "conditions": {
          "description": "List of all conditions involved for this policy evaluation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimulateResultConditions",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "ID of the specified policy type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Policy name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "rules": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimulateResultRules",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "description": "The result of this entity evaluation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimulateResultStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SimulateResultRules": {
      "fields": {
        "conditions": {
          "description": "List of all conditions involved for this rule evaluation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SimulateResultConditions",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The unique ID number of the policy rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the policy rule",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The result of this entity evaluation",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SimulateResultStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SmsTemplate": {
      "fields": {
        "created": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "Human-readable name of the Template",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        },
        "template": {
          "description": "Text of the Template, including any [macros](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Template/)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 161,
            "minLength": 1
          }
        },
        "translations": {
          "description": "- Template translations are optionally provided when you want to localize the SMS messages. Translations are provided as an object that contains `key:value` pairs: the language and the translated Template text. The key portion is a two-letter country code that conforms to [ISO 639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php). The value is the translated SMS Template. - Just like with regular SMS Templates, the length of the SMS message can't exceed 160 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Type of the Template",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SmsTemplateType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        }
      }
    },
    "SmsTemplateInput": {
      "fields": {
        "name": {
          "description": "Human-readable name of the Template",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        },
        "template": {
          "description": "Text of the Template, including any [macros](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/Template/)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 161,
            "minLength": 1
          }
        },
        "translations": {
          "description": "- Template translations are optionally provided when you want to localize the SMS messages. Translations are provided as an object that contains `key:value` pairs: the language and the translated Template text. The key portion is a two-letter country code that conforms to [ISO 639-1](https://www.loc.gov/standards/iso639-2/php/code_list.php). The value is the translated SMS Template. - Just like with regular SMS Templates, the length of the SMS message can't exceed 160 characters.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Type of the Template",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SmsTemplateType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 50,
            "minLength": 1
          }
        }
      },
      "alias": "SmsTemplate"
    },
    "SocialAuthToken": {
      "description": "The Social Authentication Token object provides the tokens and associated metadata provided by social providers during social authentication.",
      "fields": {
        "expiresAt": {
          "description": "Timestamp when the object expires",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique identifier for the token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "scopes": {
          "description": "The scopes that the token is good for",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "token": {
          "description": "The raw token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tokenAuthScheme": {
          "description": "The token authentication scheme as defined by the social provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "tokenType": {
          "description": "The type of token defined by the [OAuth Token Exchange Spec](https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-07#section-3)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SourceLinks": {
      "fields": {
        "schema": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "StandardRoleAssignmentSchemaInput": {
      "fields": {
        "type": {
          "description": "Specify the standard or IAM-based role type. See [standard roles](/openapi/okta-management/guides/roles/#standard-roles).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "StandardRoleAssignmentSchema"
    },
    "StandardRoleEmbedded": {
      "description": "Optional embedded resources for the Role Assignment",
      "fields": {
        "targets": {
          "description": "Targets configured for the Role Assignment",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbeddedTargets",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "StandardRoleEmbeddedTargets": {
      "description": "Targets configured for the Role Assignment",
      "fields": {
        "catalog": {
          "description": "App targets",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StandardRoleEmbeddedTargetsCatalog",
              "type": "named"
            }
          },
          "http": {}
        },
        "groups": {
          "description": "Group targets",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "Group",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "StandardRoleEmbeddedTargetsCatalog": {
      "description": "App targets",
      "fields": {
        "apps": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CatalogApplication",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "StreamConfiguration": {
      "fields": {
        "aud": {
          "description": "The audience used in the SET. This value is set as `aud` in the claim.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "delivery": {
          "description": "Contains information about the intended SET delivery method by the receiver",
          "type": {
            "name": "StreamConfigurationDelivery",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events_delivered": {
          "description": "The events (mapped by the array of event type URIs) that the transmitter actually delivers to the SSF Stream.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "URI",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri"
            }
          }
        },
        "events_requested": {
          "description": "The events (mapped by the array of event type URIs) that the receiver wants to receive",
          "type": {
            "element_type": {
              "name": "URI",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri",
              "maxLength": 256
            }
          }
        },
        "events_supported": {
          "description": "An array of event type URIs that the transmitter supports.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "URI",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri"
            }
          }
        },
        "format": {
          "description": "The Subject Identifier format expected for any SET transmitted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StreamConfigurationFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "iss": {
          "description": "The issuer used in Security Event Tokens (SETs). This value is set as `iss` in the claim.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "min_verification_interval": {
          "description": "The minimum amount of time, in seconds, between two verification requests.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stream_id": {
          "description": "The ID of the SSF Stream configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "StreamConfigurationCreateRequestInput": {
      "fields": {
        "delivery": {
          "description": "Contains information about the intended SET delivery method by the receiver",
          "type": {
            "name": "StreamConfigurationDeliveryInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events_requested": {
          "description": "The events (mapped by the array of event type URIs) that the receiver wants to receive",
          "type": {
            "element_type": {
              "name": "URI",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri",
              "maxLength": 256
            }
          }
        },
        "format": {
          "description": "The Subject Identifier format expected for any SET transmitted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StreamConfigurationCreateRequestFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "StreamConfigurationCreateRequest"
    },
    "StreamConfigurationDelivery": {
      "description": "Contains information about the intended SET delivery method by the receiver",
      "fields": {
        "authorization_header": {
          "description": "The HTTP Authorization header that is included for each HTTP POST request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 8192
          }
        },
        "endpoint_url": {
          "description": "The target endpoint URL where the transmitter delivers the SET using HTTP POST requests",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri",
            "maxLength": 2048
          }
        },
        "method": {
          "description": "The delivery method that the transmitter uses for delivering a SET",
          "type": {
            "name": "StreamConfigurationDeliveryMethod",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "StreamConfigurationDeliveryInput": {
      "description": "Contains information about the intended SET delivery method by the receiver",
      "fields": {
        "authorization_header": {
          "description": "The HTTP Authorization header that is included for each HTTP POST request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maxLength": 8192
          }
        },
        "endpoint_url": {
          "description": "The target endpoint URL where the transmitter delivers the SET using HTTP POST requests",
          "type": {
            "name": "URI",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri",
            "maxLength": 2048
          }
        },
        "method": {
          "description": "The delivery method that the transmitter uses for delivering a SET",
          "type": {
            "name": "StreamConfigurationDeliveryMethod",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "StreamConfigurationDelivery"
    },
    "StreamConfigurationInput": {
      "fields": {
        "aud": {
          "description": "The audience used in the SET. This value is set as `aud` in the claim.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        },
        "delivery": {
          "description": "Contains information about the intended SET delivery method by the receiver",
          "type": {
            "name": "StreamConfigurationDeliveryInput",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "events_delivered": {
          "description": "The events (mapped by the array of event type URIs) that the transmitter actually delivers to the SSF Stream.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "URI",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri"
            }
          }
        },
        "events_requested": {
          "description": "The events (mapped by the array of event type URIs) that the receiver wants to receive",
          "type": {
            "element_type": {
              "name": "URI",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri",
              "maxLength": 256
            }
          }
        },
        "events_supported": {
          "description": "An array of event type URIs that the transmitter supports.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "URI",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri"
            }
          }
        },
        "format": {
          "description": "The Subject Identifier format expected for any SET transmitted.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "StreamConfigurationFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "iss": {
          "description": "The issuer used in Security Event Tokens (SETs). This value is set as `iss` in the claim.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "min_verification_interval": {
          "description": "The minimum amount of time, in seconds, between two verification requests.  A read-only parameter that is set by the transmitter. If this parameter is included in the request, the value must match the expected value from the transmitter.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "stream_id": {
          "description": "The ID of the SSF Stream configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "StreamConfiguration"
    },
    "Subscription": {
      "fields": {
        "_links": {
          "description": "Discoverable resources related to the subscription",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SubscriptionLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "channels": {
          "description": "**Note**: Currently, Okta only allows `email` channels.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "notificationType": {
          "description": "The type of notification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "NotificationType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The status of the subscription",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SubscriptionStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SubscriptionLinks": {
      "description": "Discoverable resources related to the subscription",
      "fields": {
        "self": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "SupportedMethods": {
      "description": "The supported methods of an Authenticator",
      "fields": {
        "settings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SupportedMethodsSettings",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The type of authenticator method",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SupportedMethodsType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "SupportedMethodsSettings": {
      "fields": {
        "algorithms": {
          "description": "The encryption algorithm for this authenticator method",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "AuthenticatorMethodAlgorithm",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyProtection": {
          "description": "Indicates whether you must use a hardware key store",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PushMethodKeyProtection",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "transactionTypes": {
          "description": "The transaction type for this authenticator method",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "AuthenticatorMethodTransactionType",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      }
    },
    "ThemeResponse": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "backgroundImage": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "emailTemplateTouchPointVariant": {
          "description": "Variant for email templates. You can publish a theme for email templates with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailTemplateTouchPointVariant",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "endUserDashboardTouchPointVariant": {
          "description": "Variant for the Okta End-User Dashboard. You can publish a theme for end-user dashboard with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EndUserDashboardTouchPointVariant",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "errorPageTouchPointVariant": {
          "description": "Variant for the error page. You can publish a theme for error page with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ErrorPageTouchPointVariant",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "favicon": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "loadingPageTouchPointVariant": {
          "description": "Variant for the Okta loading page. You can publish a theme for Okta loading page with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LoadingPageTouchPointVariant",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "logo": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primaryColorContrastHex": {
          "description": "Primary color contrast hex code",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primaryColorHex": {
          "description": "Primary color hex code",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secondaryColorContrastHex": {
          "description": "Secondary color contrast hex code",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secondaryColorHex": {
          "description": "Secondary color hex code",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signInPageTouchPointVariant": {
          "description": "**Note:**  For a non-`OKTA_DEFAULT` variant, `primaryColorHex` is used for button background color and `primaryColorContrastHex` is used to optimize the opacity for button text.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "SignInPageTouchPointVariant",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "ThirdPartyAdminSetting": {
      "description": "The third-party admin setting",
      "fields": {
        "thirdPartyAdmin": {
          "description": "Indicates if third-party admin is enabled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "ThirdPartyAdminSettingInput": {
      "description": "The third-party admin setting",
      "fields": {
        "thirdPartyAdmin": {
          "description": "Indicates if third-party admin is enabled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "ThirdPartyAdminSetting"
    },
    "ThreatInsightConfiguration": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "action": {
          "description": "Specifies how Okta responds to authentication requests from suspicious IP addresses",
          "type": {
            "name": "ThreatInsightConfigurationAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the ThreatInsight Configuration object was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "excludeZones": {
          "description": "Accepts a list of [Network Zone](/openapi/okta-management/management/tag/NetworkZone/) IDs. IPs in the excluded network zones aren't logged or blocked. This ensures that traffic from known, trusted IPs isn't accidentally logged or blocked.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the ThreatInsight Configuration object was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        }
      }
    },
    "ThreatInsightConfigurationInput": {
      "fields": {
        "action": {
          "description": "Specifies how Okta responds to authentication requests from suspicious IP addresses",
          "type": {
            "name": "ThreatInsightConfigurationAction",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "excludeZones": {
          "description": "Accepts a list of [Network Zone](/openapi/okta-management/management/tag/NetworkZone/) IDs. IPs in the excluded network zones aren't logged or blocked. This ensures that traffic from known, trusted IPs isn't accidentally logged or blocked.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "alias": "ThreatInsightConfiguration"
    },
    "TokenAuthorizationServerPolicyRuleAction": {
      "fields": {
        "accessTokenLifetimeMinutes": {
          "description": "Lifetime of the access token in minutes. The minimum is five minutes. The maximum is one day.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "inlineHook": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenAuthorizationServerPolicyRuleActionInlineHook",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "refreshTokenLifetimeMinutes": {
          "description": "Lifetime of the refresh token is the minimum access token lifetime.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "refreshTokenWindowMinutes": {
          "description": "Timeframe when the refresh token is valid. The minimum is 10 minutes. The maximum is five years (2,628,000 minutes).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      }
    },
    "TokenAuthorizationServerPolicyRuleActionInlineHook": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TokenAuthorizationServerPolicyRuleActionInlineHookInput": {
      "fields": {
        "id": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "TokenAuthorizationServerPolicyRuleActionInlineHook"
    },
    "TokenAuthorizationServerPolicyRuleActionInput": {
      "fields": {
        "accessTokenLifetimeMinutes": {
          "description": "Lifetime of the access token in minutes. The minimum is five minutes. The maximum is one day.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "inlineHook": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TokenAuthorizationServerPolicyRuleActionInlineHookInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "refreshTokenLifetimeMinutes": {
          "description": "Lifetime of the refresh token is the minimum access token lifetime.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "refreshTokenWindowMinutes": {
          "description": "Timeframe when the refresh token is valid. The minimum is 10 minutes. The maximum is five years (2,628,000 minutes).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "TokenAuthorizationServerPolicyRuleAction"
    },
    "TokenResourcesHrefObject": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TrustedOrigin": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycle",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Trusted Origin was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "createdBy": {
          "description": "The ID of the user who created the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "Unique identifier for the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Trusted Origin was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastUpdatedBy": {
          "description": "The ID of the user who last updated the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Unique name for the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 255
          }
        },
        "origin": {
          "description": "Unique origin URL for the Trusted Origin. The supported schemes for this attribute are HTTP, HTTPS, FTP, Ionic 2, and Capacitor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 255
          }
        },
        "scopes": {
          "description": "Array of Scope types that this Trusted Origin is used for",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TrustedOriginScope",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "maximum": 3,
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TrustedOriginInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelfAndLifecycleInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "createdBy": {
          "description": "The ID of the user who created the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdatedBy": {
          "description": "The ID of the user who last updated the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Unique name for the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 255
          }
        },
        "origin": {
          "description": "Unique origin URL for the Trusted Origin. The supported schemes for this attribute are HTTP, HTTPS, FTP, Ionic 2, and Capacitor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 255
          }
        },
        "scopes": {
          "description": "Array of Scope types that this Trusted Origin is used for",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TrustedOriginScopeInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "maximum": 3,
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "status": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LifecycleStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "TrustedOrigin"
    },
    "TrustedOriginScope": {
      "fields": {
        "allowedOktaApps": {
          "description": "The allowed Okta apps for the Trusted Origin scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IframeEmbedScopeAllowedApps",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The scope type. Supported values: When you use `IFRAME_EMBED` as the scope type, leave the allowedOktaApps property  empty to allow iFrame embedding of only Okta sign-in pages. Include `OKTA_ENDUSER` as a value for the allowedOktaApps  property to allow iFrame embedding of both Okta sign-in pages and the Okta End-User Dashboard.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TrustedOriginScopeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "TrustedOriginScopeInput": {
      "fields": {
        "allowedOktaApps": {
          "description": "The allowed Okta apps for the Trusted Origin scope",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "IframeEmbedScopeAllowedApps",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The scope type. Supported values: When you use `IFRAME_EMBED` as the scope type, leave the allowedOktaApps property  empty to allow iFrame embedding of only Okta sign-in pages. Include `OKTA_ENDUSER` as a value for the allowedOktaApps  property to allow iFrame embedding of both Okta sign-in pages and the Okta End-User Dashboard.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TrustedOriginScopeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "TrustedOriginScope"
    },
    "TrustedOriginWriteInput": {
      "fields": {
        "name": {
          "description": "Unique name for the Trusted Origin",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 255
          }
        },
        "origin": {
          "description": "Unique origin URL for the Trusted Origin. The supported schemes for this attribute are HTTP, HTTPS, FTP, Ionic 2, and Capacitor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "maximum": 255
          }
        },
        "scopes": {
          "description": "Array of Scope types that this Trusted Origin is used for",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "TrustedOriginScopeInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "maximum": 3,
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "TrustedOriginWrite"
    },
    "UIElement": {
      "description": "Specifies the configuration of an input field on an enrollment form",
      "fields": {
        "label": {
          "description": "Label name for the UI element",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "options": {
          "description": "UI Schema element options object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UIElementOptions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "Specifies the property bound to the input field. It must follow the format `#/properties/PROPERTY_NAME` where `PROPERTY_NAME` is a variable name for an attribute in `profile editor`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Specifies the relationship between this input element and `scope`. The `Control` value specifies that this input controls the value represented by `scope`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UIElementInput": {
      "description": "Specifies the configuration of an input field on an enrollment form",
      "fields": {
        "label": {
          "description": "Label name for the UI element",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "options": {
          "description": "UI Schema element options object",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UIElementOptionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "scope": {
          "description": "Specifies the property bound to the input field. It must follow the format `#/properties/PROPERTY_NAME` where `PROPERTY_NAME` is a variable name for an attribute in `profile editor`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Specifies the relationship between this input element and `scope`. The `Control` value specifies that this input controls the value represented by `scope`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UIElement"
    },
    "UIElementOptions": {
      "description": "UI Schema element options object",
      "fields": {
        "format": {
          "description": "Specifies how the input appears",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UIElementOptionsFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UIElementOptionsInput": {
      "description": "UI Schema element options object",
      "fields": {
        "format": {
          "description": "Specifies how the input appears",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UIElementOptionsFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UISchemaObject": {
      "description": "Properties of the UI schema",
      "fields": {
        "buttonLabel": {
          "description": "Specifies the button label for the `Submit` button at the bottom of the enrollment form",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "elements": {
          "description": "Specifies the configuration of an input field on an enrollment form",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UIElement",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "label": {
          "description": "Specifies the label at the top of the enrollment form under the logo",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Specifies the type of layout",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UISchemaObjectInput": {
      "description": "Properties of the UI schema",
      "fields": {
        "buttonLabel": {
          "description": "Specifies the button label for the `Submit` button at the bottom of the enrollment form",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "elements": {
          "description": "Specifies the configuration of an input field on an enrollment form",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UIElementInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "label": {
          "description": "Specifies the label at the top of the enrollment form under the logo",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Specifies the type of layout",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UISchemaObject"
    },
    "UISchemasResponseObject": {
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "name": "LinksSelf",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the UI Schema was created (ISO-86001)",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "Unique identifier for the UI Schema",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the UI Schema was last modified (ISO-86001)",
          "type": {
            "name": "TimestampTZ",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "uiSchema": {
          "description": "Properties of the UI schema",
          "type": {
            "name": "UISchemaObject",
            "type": "named"
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UpdateDomainInput": {
      "fields": {
        "brandId": {
          "description": "The `id` of the brand used to replace the existing brand.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UpdateDomain"
    },
    "UpdateIamRoleRequestInput": {
      "fields": {
        "description": {
          "description": "Description of the role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "label": {
          "description": "Unique label for the role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UpdateIamRoleRequest"
    },
    "UpdateRealmAssignmentRequestInput": {
      "fields": {
        "actions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ActionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "conditions": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ConditionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "name": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "priority": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        }
      },
      "alias": "UpdateRealmAssignmentRequest"
    },
    "UpdateRealmRequestInput": {
      "fields": {
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RealmProfileInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UpdateRealmRequest"
    },
    "UpdateThemeRequestInput": {
      "fields": {
        "emailTemplateTouchPointVariant": {
          "description": "Variant for email templates. You can publish a theme for email templates with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "name": "EmailTemplateTouchPointVariant",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "endUserDashboardTouchPointVariant": {
          "description": "Variant for the Okta End-User Dashboard. You can publish a theme for end-user dashboard with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "name": "EndUserDashboardTouchPointVariant",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "errorPageTouchPointVariant": {
          "description": "Variant for the error page. You can publish a theme for error page with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "name": "ErrorPageTouchPointVariant",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "loadingPageTouchPointVariant": {
          "description": "Variant for the Okta loading page. You can publish a theme for Okta loading page with different combinations of assets. Variants are preset combinations of those assets.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LoadingPageTouchPointVariant",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primaryColorContrastHex": {
          "description": "Primary color contrast hex code",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "primaryColorHex": {
          "description": "Primary color hex code",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secondaryColorContrastHex": {
          "description": "Secondary color contrast hex code",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "secondaryColorHex": {
          "description": "Secondary color hex code",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signInPageTouchPointVariant": {
          "description": "**Note:**  For a non-`OKTA_DEFAULT` variant, `primaryColorHex` is used for button background color and `primaryColorContrastHex` is used to optimize the opacity for button text.",
          "type": {
            "name": "SignInPageTouchPointVariant",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UpdateThemeRequest"
    },
    "UpdateUISchemaInput": {
      "description": "The updated request body properties",
      "fields": {
        "uiSchema": {
          "description": "Properties of the UI schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UISchemaObjectInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UpdateUISchema"
    },
    "UpdateUserRequestInput": {
      "fields": {
        "credentials": {
          "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserCredentialsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profile": {
          "description": "Specifies the default and custom profile properties for a user.  The default user profile is based on the [System for Cross-domain Identity Management: Core Schema](https://datatracker.ietf.org/doc/html/rfc7643).  The only permitted customizations of the default profile are to update permissions, change whether the `firstName` and `lastName` properties are nullable, and specify a [pattern](https://developer.okta.com/docs/reference/api/schemas/#login-pattern-validation) for `login`. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to make schema modifications.  You can extend user profiles with custom properties. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to manage schema extensions.  Custom attributes can contain HTML tags. It's the client's responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "realmId": {
          "description": "The ID of the Realm in which the User is residing",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UpdateUserRequest"
    },
    "UploadApplicationLogoBodyInput": {
      "fields": {
        "file": {
          "description": "The image file containing the logo.  The file must be in PNG, JPG, SVG, or GIF format, and less than one MB in size. For best results, use an image with a transparent background and a square dimension of 200 x 200 pixels to prevent upscaling.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        }
      }
    },
    "UploadBrandThemeBackgroundImageBodyInput": {
      "description": "The file must be in PNG, JPG, or GIF format and less than 2 MB in size.",
      "fields": {
        "file": {
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        }
      }
    },
    "UploadBrandThemeFaviconBodyInput": {
      "description": "The file must be in PNG or ICO format and have a 1:1 ratio with a maximum dimension of 512 x 512",
      "fields": {
        "file": {
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        }
      }
    },
    "UploadBrandThemeLogoBodyInput": {
      "description": "The file must be in PNG, JPG, or GIF format and less than 100kB in size. For best results use landscape orientation, a transparent background, and a minimum size of 300px by 50px to prevent upscaling.",
      "fields": {
        "file": {
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        }
      }
    },
    "UploadOrgLogoBodyInput": {
      "fields": {
        "file": {
          "description": "The file must be in PNG, JPG, or GIF format and less than 1 MB in size. For best results use landscape orientation, a transparent background, and a minimum size of 420px by 120px to prevent upscaling.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "binary"
          }
        }
      }
    },
    "UploadYubikeyOtpTokenSeedBodyInput": {
      "fields": {
        "aesKey": {
          "description": "The cryptographic key used in the AES algorithm to encrypt and decrypt YubiKey OTP",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "privateId": {
          "description": "The Yubikey's private ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "publicId": {
          "description": "The Yubikey's public ID",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "serialNumber": {
          "description": "The unique identifier assigned to each YubiKey device",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "User": {
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the User using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "activated": {
          "description": "The timestamp when the User status transitioned to `ACTIVE`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "created": {
          "description": "The timestamp when the User was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "credentials": {
          "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserCredentials",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The unique key for the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastLogin": {
          "description": "The timestamp of the last login",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastUpdated": {
          "description": "The timestamp when the User was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "passwordChanged": {
          "description": "The timestamp when the User's password was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "description": "Specifies the default and custom profile properties for a user.  The default user profile is based on the [System for Cross-domain Identity Management: Core Schema](https://datatracker.ietf.org/doc/html/rfc7643).  The only permitted customizations of the default profile are to update permissions, change whether the `firstName` and `lastName` properties are nullable, and specify a [pattern](https://developer.okta.com/docs/reference/api/schemas/#login-pattern-validation) for `login`. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to make schema modifications.  You can extend user profiles with custom properties. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to manage schema extensions.  Custom attributes can contain HTML tags. It's the client's responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "realmId": {
          "description": "The ID of the Realm in which the User is residing",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The current status of the user.  The status of a User changes in response to explicit events, such as admin-driven lifecycle changes, user login, or self-service password recovery. Okta doesn't asynchronously sweep through users and update their password expiry state, for example. Instead, Okta evaluates password policy at login time, notices the password has expired, and moves the User to the expired state. When running reports, remember that the data is valid as of the last login or lifecycle event for that user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statusChanged": {
          "description": "The timestamp when the status of the User last changed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "transitioningToStatus": {
          "description": "The target status of an in-progress asynchronous status transition. This property is only returned if the User's state is transitioning.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserTransitioningToStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The User type that determines the schema for the User's profile. The `type` property is a map that identifies the [User Types](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/#tag/UserType). Currently it contains a single element, `id`. It can be specified when creating a new user, and may be updated by an administrator on a full replace of an existing User (but not a partial update).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserActivationToken": {
      "fields": {
        "activationToken": {
          "description": "Token received as part of an activation user request. If a password was set before the user was activated, then user must sign in with their password or the `activationToken` and not the activation link. More information about using the `activationToken` to login can be found in the [Authentication API](https://developer.okta.com/docs/reference/api/authn/#primary-authentication-with-activation-token).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "activationUrl": {
          "description": "If `sendEmail` is `false`, returns an activation link for the user to set up their account. The activation token can be used to create a custom activation link.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserBlock": {
      "description": "Describes how the account is blocked from access. If `appliesTo` is `ANY_DEVICES`, then the account is blocked for all devices. If `appliesTo` is `UNKNOWN_DEVICES`, then the account is only blocked for unknown devices.",
      "fields": {
        "appliesTo": {
          "description": "The devices that the block applies to",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserBlockAppliesTo",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of access block",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserBlockType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserCredentials": {
      "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
      "fields": {
        "password": {
          "description": "**Password**).  For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredential",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "provider": {
          "description": "Specifies the authentication provider that validates the User's password credential. The User's current provider  is managed by the Delegated Authentication settings for your organization. The provider object is **read-only**.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticationProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "recovery_question": {
          "description": "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RecoveryQuestionCredential",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserCredentialsInput": {
      "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
      "fields": {
        "password": {
          "description": "**Password**).  For information on defaults and configuring your password policies, see [Configure the password authenticator](https://help.okta.com/okta_help.htm?type=oie&id=ext-configure-password) in the help documentation.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PasswordCredentialInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "recovery_question": {
          "description": "Specifies a secret question and answer that's validated (case insensitive) when a User forgets their password or unlocks their account. The answer property is write-only.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RecoveryQuestionCredentialInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UserCredentials"
    },
    "UserFactor": {
      "fields": {
        "_embedded": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Factor was enrolled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "factorType": {
          "description": "Type of Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Factor was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "description": "Specific attributes related to the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "provider": {
          "description": "Provider for the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vendorName": {
          "description": "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateRequest0Input": {
      "description": "Attempts to activate a `call` Factor with the specified passcode",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateRequest1Input": {
      "description": "Attempts to activate an `email` Factor with the specified passcode",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateRequest2Input": {
      "description": "Attempts to activate an `sms` Factor with the specified passcode",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateRequest3Input": {
      "description": "Attempts to activate a `token:software:totp` Factor with the specified passcode",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateRequest4Input": {
      "description": "Activates a `u2f` Factor with the specified client and registration information from the U2F token",
      "fields": {
        "clientData": {
          "description": "Base64-encoded client data from the U2F token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "registrationData": {
          "description": "Base64-encoded registration data from the U2F token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateRequest5Input": {
      "description": "Activates a `webauthn` Factor with the specified attestation and registration information from the WebAuthn authenticator",
      "fields": {
        "attestation": {
          "description": "Base64-encoded attestation from the WebAuthn authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clientData": {
          "description": "Base64-encoded client data from the WebAuthn authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateResponse": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorActivateResponseLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "factorType": {
          "description": "Type of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorActivateResponseFactorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorActivateResponseLinks": {
      "fields": {
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "verify": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserFactorInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "factorType": {
          "description": "Type of Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "profile": {
          "description": "Specific attributes related to the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "provider": {
          "description": "Provider for the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserFactor"
    },
    "UserFactorLinks": {
      "fields": {
        "activate": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "cancel": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "enroll": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "factor": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "poll": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "qrcode": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "question": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resend": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "send": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "user": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "verify": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserFactorLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "UserFactorPushTransaction": {
      "fields": {
        "factorResult": {
          "description": "Result of the verification transaction",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorPushTransactionFactorResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorSecurityQuestionProfile": {
      "fields": {
        "question": {
          "description": "Unique key for the question",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorSecurityQuestionProfileQuestion",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "questionText": {
          "description": "Human-readable text that's displayed to the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorSupported": {
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "enrollment": {
          "description": "Indicates if the Factor is required for the specified user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorSupportedEnrollment",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "factorType": {
          "description": "Type of Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "provider": {
          "description": "Provider for the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vendorName": {
          "description": "Name of the Factor vendor. This is usually the same as the provider except for On-Prem MFA where it depends on administrator settings.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest0Input": {
      "description": "Verifies an OTP sent by a `call` Factor challenge. If you omit `passCode` in the request, a new OTP is sent to the phone.",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest1Input": {
      "description": "Verifies an OTP sent by an `sms` Factor challenge. If you omit `passCode` in the request, a new OTP is sent to the phone.",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest2Input": {
      "description": "Verifies an OTP sent by an `email` Factor challenge. If you omit `passCode` in the request, a new OTP is sent to the phone.",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest3Input": {
      "description": "Verifies an answer to a `question` Factor",
      "fields": {
        "answer": {
          "description": "Answer to the question",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 4
          }
        }
      }
    },
    "UserFactorVerifyRequest4Input": {
      "description": "Verifies an OTP for a `token:software:totp` Factor",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest5Input": {
      "description": "Verifies an OTP for a `token:hotp` Factor",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest6Input": {
      "description": "Verifies an OTP for a `token:hardware` Factor",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest7Input": {
      "description": "Verifies an OTP for a `token` Factor",
      "fields": {
        "passCode": {
          "description": "OTP for the current time window",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyRequest8Input": {
      "description": "Verifies a `u2f` Factor challenge by posting a signed assertion using the challenge `nonce`",
      "fields": {
        "clientData": {
          "description": "Base64-encoded client data from the U2F token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signatureData": {
          "description": "Base64-encoded signature data from the U2F token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {}
        }
      }
    },
    "UserFactorVerifyRequest9Input": {
      "description": "Verifies a `webauthn` Factor challenge by posting a signed assertion using the challenge `nonce`",
      "fields": {
        "authenticatorData": {
          "description": "Base64-encoded authenticator data from the WebAuthn authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "clientData": {
          "description": "Base64-encoded client data from the WebAuthn authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "signatureData": {
          "description": "Base64-encoded signature data from the WebAuthn authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorVerifyResponse": {
      "fields": {
        "_embedded": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "expiresAt": {
          "description": "Timestamp when the verification expires",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "factorMessage": {
          "description": "Optional display message for Factor verification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "factorResult": {
          "description": "Result of a Factor verification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorVerifyResult",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserFactorYubikeyOtpToken": {
      "fields": {
        "_embedded": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Token was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "id": {
          "description": "ID of the Token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Token was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastVerified": {
          "description": "Timestamp when the Token was last verified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "description": "Specified profile information for token",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "status": {
          "description": "Token status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorYubikeyOtpTokenStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserGetSingleton": {
      "fields": {
        "_embedded": {
          "description": "Embedded resources related to the User using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "activated": {
          "description": "The timestamp when the User status transitioned to `ACTIVE`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "created": {
          "description": "The timestamp when the User was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "credentials": {
          "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserCredentials",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The unique key for the user",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastLogin": {
          "description": "The timestamp of the last login",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastUpdated": {
          "description": "The timestamp when the User was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "passwordChanged": {
          "description": "The timestamp when the User's password was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "description": "Specifies the default and custom profile properties for a user.  The default user profile is based on the [System for Cross-domain Identity Management: Core Schema](https://datatracker.ietf.org/doc/html/rfc7643).  The only permitted customizations of the default profile are to update permissions, change whether the `firstName` and `lastName` properties are nullable, and specify a [pattern](https://developer.okta.com/docs/reference/api/schemas/#login-pattern-validation) for `login`. You can use the Profile Editor in the Admin Console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to make schema modifications.  You can extend user profiles with custom properties. You must first add the custom property to the user profile schema before you reference it. You can use the Profile Editor in the Admin console or the [Schemas API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UISchema/#tag/UISchema) to manage schema extensions.  Custom attributes can contain HTML tags. It's the client's responsibility to escape or encode this data before displaying it. Use [best-practices](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html) to prevent cross-site scripting.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "realmId": {
          "description": "The ID of the Realm in which the User is residing",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "The current status of the user.  The status of a User changes in response to explicit events, such as admin-driven lifecycle changes, user login, or self-service password recovery. Okta doesn't asynchronously sweep through users and update their password expiry state, for example. Instead, Okta evaluates password policy at login time, notices the password has expired, and moves the User to the expired state. When running reports, remember that the data is valid as of the last login or lifecycle event for that user.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "statusChanged": {
          "description": "The timestamp when the status of the User last changed",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "transitioningToStatus": {
          "description": "The target status of an in-progress asynchronous status transition. This property is only returned if the User's state is transitioning.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserTransitioningToStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "The User type that determines the schema for the User's profile. The `type` property is a map that identifies the [User Types](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/#tag/UserType). Currently it contains a single element, `id`. It can be specified when creating a new user, and may be updated by an administrator on a full replace of an existing User (but not a partial update).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserIdentityProviderLinkRequestInput": {
      "fields": {
        "externalId": {
          "description": "Unique IdP-specific identifier for a User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserIdentityProviderLinkRequest"
    },
    "UserLinks": {
      "description": "Specifies link relations (see [Web Linking](https://datatracker.ietf.org/doc/html/rfc8288) available for the current status of a user. The Links object is used for dynamic discovery of related resources, lifecycle operations, and credential operations. The Links object is read-only.  For an individual User result, the Links object contains a full set of link relations available for that User as determined by your policies. For a collection of users, the Links object contains only the `self` link. Operations that return a collection of Users include List Users and List Group Members.",
      "fields": {
        "activate": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "changePassword": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "changeRecoveryQuestion": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "deactivate": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "expirePassword": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "forgotPassword": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "reactivate": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resetFactors": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "resetPassword": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "schema": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "suspend": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "type": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "unlock": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "unsuspend": {
          "description": "Link to Authenticator methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserLockoutSettings": {
      "fields": {
        "preventBruteForceLockoutFromUnknownDevices": {
          "description": "Prevents brute-force lockout from unknown devices for the password authenticator.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "UserLockoutSettingsInput": {
      "fields": {
        "preventBruteForceLockoutFromUnknownDevices": {
          "description": "Prevents brute-force lockout from unknown devices for the password authenticator.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "UserLockoutSettings"
    },
    "UserResourceHrefObject": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserResourceHrefObjectInput": {
      "fields": {
        "href": {
          "description": "Link URI",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "Link name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserResourceHrefObject"
    },
    "UserSchema": {
      "fields": {
        "$schema": {
          "description": "JSON Schema version identifier",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp when the Schema was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "definitions": {
          "description": "User Profile subschemas  The Profile object for a User is defined by a composite Schema of base and custom properties using a JSON path to reference subschemas. The `#base` properties are defined and versioned by Okta, while `#custom` properties are extensible. Custom property names for the Profile object must be unique and can't conflict with a property name defined in the `#base` subschema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaDefinitions",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "URI of User Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Schema was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "Name of the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "description": "User Object Properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "type": {
          "description": "Type of [root Schema](https://tools.ietf.org/html/draft-zyp-json-schema-04#section-3.4)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaAttribute": {
      "fields": {
        "description": {
          "description": "Description of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enum": {
          "description": "Enumerated value of the property.  The value of the property is limited to one of the values specified in the enum definition. The list of values for the enum must consist of unique elements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "externalName": {
          "description": "Name of the property as it exists in an external application  **NOTE**: When you add a custom property, only Identity Provider app user schemas require `externalName` to be included in the request body. If an existing custom Identity Provider app user schema property has an empty `externalName`, requests aren't allowed to update other properties until the `externalName` is defined.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalNamespace": {
          "description": "Namespace from the external application",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "format": {
          "description": "Identifies the type of data represented by the string",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "master": {
          "description": "Identifies where the property is mastered",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMaster",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "maxLength": {
          "description": "Maximum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "minLength": {
          "description": "Minimum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "mutability": {
          "description": "Defines the mutability of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMutabilityString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oneOf": {
          "description": "Non-empty array of valid JSON schemas.  Okta only supports `oneOf` for specifying display names for an `enum`. Each schema has the following format:    ```     {       \"const\": \"enumValue\",       \"title\": \"display name\"     }   ```json  When `enum` is used in conjunction with `oneOf`, you must keep the set of enumerated values and their order.    ```     {\"enum\": [\"S\",\"M\",\"L\",\"XL\"],       \"oneOf\": [         {\"const\": \"S\", \"title\": \"Small\"},         {\"const\": \"M\", \"title\": \"Medium\"},         {\"const\": \"L\", \"title\": \"Large\"},         {\"const\": \"XL\", \"title\": \"Extra Large\"}       ]     }   ```json  The `oneOf` key is only supported in conjunction with `enum` and provides a mechanism to return a display name for the `enum` value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeEnum",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pattern": {
          "description": "For `string` property types, specifies the regular expression used to validate the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "Access control permissions for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributePermission",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "required": {
          "description": "Determines whether the property is required",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scope": {
          "description": "Determines whether a group attribute can be set at the individual or group level",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "type": {
          "description": "Type of property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unique": {
          "description": "Determines whether property values must be unique",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "UserSchemaAttributeEnum": {
      "fields": {
        "const": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaAttributeEnumInput": {
      "fields": {
        "const": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserSchemaAttributeEnum"
    },
    "UserSchemaAttributeInput": {
      "fields": {
        "description": {
          "description": "Description of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "enum": {
          "description": "Enumerated value of the property.  The value of the property is limited to one of the values specified in the enum definition. The list of values for the enum must consist of unique elements.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JSON",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {}
          }
        },
        "externalName": {
          "description": "Name of the property as it exists in an external application  **NOTE**: When you add a custom property, only Identity Provider app user schemas require `externalName` to be included in the request body. If an existing custom Identity Provider app user schema property has an empty `externalName`, requests aren't allowed to update other properties until the `externalName` is defined.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "externalNamespace": {
          "description": "Namespace from the external application",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "format": {
          "description": "Identifies the type of data represented by the string",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeFormat",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "master": {
          "description": "Identifies where the property is mastered",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMasterInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "maxLength": {
          "description": "Maximum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "minLength": {
          "description": "Minimum character length of a string property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "integer"
            ]
          }
        },
        "mutability": {
          "description": "Defines the mutability of the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMutabilityString",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "oneOf": {
          "description": "Non-empty array of valid JSON schemas.  Okta only supports `oneOf` for specifying display names for an `enum`. Each schema has the following format:    ```     {       \"const\": \"enumValue\",       \"title\": \"display name\"     }   ```json  When `enum` is used in conjunction with `oneOf`, you must keep the set of enumerated values and their order.    ```     {\"enum\": [\"S\",\"M\",\"L\",\"XL\"],       \"oneOf\": [         {\"const\": \"S\", \"title\": \"Small\"},         {\"const\": \"M\", \"title\": \"Medium\"},         {\"const\": \"L\", \"title\": \"Large\"},         {\"const\": \"XL\", \"title\": \"Extra Large\"}       ]     }   ```json  The `oneOf` key is only supported in conjunction with `enum` and provides a mechanism to return a display name for the `enum` value.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeEnumInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pattern": {
          "description": "For `string` property types, specifies the regular expression used to validate the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "permissions": {
          "description": "Access control permissions for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributePermissionInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "required": {
          "description": "Determines whether the property is required",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "scope": {
          "description": "Determines whether a group attribute can be set at the individual or group level",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeScope",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "minLength": 1
          }
        },
        "type": {
          "description": "Type of property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "unique": {
          "description": "Determines whether property values must be unique",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      },
      "alias": "UserSchemaAttribute"
    },
    "UserSchemaAttributeItems": {
      "fields": {
        "enum": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "oneOf": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeEnum",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaAttributeItemsInput": {
      "fields": {
        "enum": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "oneOf": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeEnumInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserSchemaAttributeItems"
    },
    "UserSchemaAttributeMaster": {
      "fields": {
        "priority": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeMasterPriority",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMasterType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaAttributeMasterInput": {
      "fields": {
        "priority": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaAttributeMasterPriorityInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeMasterType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserSchemaAttributeMaster"
    },
    "UserSchemaAttributeMasterPriority": {
      "fields": {
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaAttributeMasterPriorityInput": {
      "fields": {
        "type": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "value": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserSchemaAttributeMasterPriority"
    },
    "UserSchemaAttributePermission": {
      "fields": {
        "action": {
          "description": "Determines whether the principal can view or modify the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "principal": {
          "description": "Security principal",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaAttributePermissionInput": {
      "fields": {
        "action": {
          "description": "Determines whether the principal can view or modify the property",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "principal": {
          "description": "Security principal",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserSchemaAttributePermission"
    },
    "UserSchemaBase": {
      "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. You can't modify these properties, except to update permissions, to change the nullability of `firstName` and `lastName`, or to specify a pattern for `login`. They can't be removed.  The base User Profile is based on the [System for Cross-domain Identity Management: Core Schema](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#section-4.1.1) and has the standard properties detailed below.",
      "fields": {
        "id": {
          "description": "The subschema name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "description": "The `#base` object properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaBaseProperties",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required": {
          "description": "A collection indicating required property names",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The object type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaBaseInput": {
      "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. You can't modify these properties, except to update permissions, to change the nullability of `firstName` and `lastName`, or to specify a pattern for `login`. They can't be removed.  The base User Profile is based on the [System for Cross-domain Identity Management: Core Schema](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#section-4.1.1) and has the standard properties detailed below.",
      "fields": {
        "properties": {
          "description": "The `#base` object properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaBasePropertiesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UserSchemaBase"
    },
    "UserSchemaBaseProperties": {
      "fields": {
        "city": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "costCenter": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "countryCode": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "department": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "displayName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "division": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "employeeNumber": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "firstName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "honorificPrefix": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "honorificSuffix": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lastName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "locale": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "login": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "manager": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "managerId": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "middleName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "mobilePhone": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "nickName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "organization": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "postalAddress": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "preferredLanguage": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "primaryPhone": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profileUrl": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secondEmail": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "streetAddress": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "timezone": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "userType": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "zipCode": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttribute",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserSchemaBasePropertiesInput": {
      "fields": {
        "city": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "costCenter": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "countryCode": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "department": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "displayName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "division": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "email": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "employeeNumber": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "firstName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "honorificPrefix": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "honorificSuffix": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "lastName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "locale": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "login": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "manager": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "managerId": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "middleName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "mobilePhone": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "nickName": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "organization": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "postalAddress": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "preferredLanguage": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "primaryPhone": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "profileUrl": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "secondEmail": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "state": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "streetAddress": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "timezone": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "userType": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "zipCode": {
          "description": "City or locality component of the User's address (`locality`)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaAttributeInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UserSchemaBaseProperties"
    },
    "UserSchemaDefinitions": {
      "fields": {
        "base": {
          "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. You can't modify these properties, except to update permissions, to change the nullability of `firstName` and `lastName`, or to specify a pattern for `login`. They can't be removed.  The base User Profile is based on the [System for Cross-domain Identity Management: Core Schema](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#section-4.1.1) and has the standard properties detailed below.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaBase",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "custom": {
          "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaPublic",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserSchemaDefinitionsInput": {
      "fields": {
        "base": {
          "description": "All Okta-defined Profile properties are defined in a Profile subschema with the resolution scope `#base`. You can't modify these properties, except to update permissions, to change the nullability of `firstName` and `lastName`, or to specify a pattern for `login`. They can't be removed.  The base User Profile is based on the [System for Cross-domain Identity Management: Core Schema](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#section-4.1.1) and has the standard properties detailed below.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaBaseInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "custom": {
          "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaPublicInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UserSchemaDefinitions"
    },
    "UserSchemaInput": {
      "fields": {
        "definitions": {
          "description": "User Profile subschemas  The Profile object for a User is defined by a composite Schema of base and custom properties using a JSON path to reference subschemas. The `#base` properties are defined and versioned by Okta, while `#custom` properties are extensible. Custom property names for the Profile object must be unique and can't conflict with a property name defined in the `#base` subschema.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaDefinitionsInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "properties": {
          "description": "User Object Properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaPropertiesInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "title": {
          "description": "User-defined display name for the Schema",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserSchema"
    },
    "UserSchemaProperties": {
      "fields": {
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaPropertiesProfile",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserSchemaPropertiesInput": {
      "fields": {
        "profile": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaPropertiesProfileInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UserSchemaProperties"
    },
    "UserSchemaPropertiesProfile": {
      "fields": {
        "allOf": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaPropertiesProfileItem",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      }
    },
    "UserSchemaPropertiesProfileInput": {
      "fields": {
        "allOf": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "UserSchemaPropertiesProfileItemInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "alias": "UserSchemaPropertiesProfile"
    },
    "UserSchemaPropertiesProfileItem": {
      "fields": {
        "$ref": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaPropertiesProfileItemInput": {
      "fields": {
        "$ref": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserSchemaPropertiesProfileItem"
    },
    "UserSchemaPublic": {
      "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
      "fields": {
        "id": {
          "description": "The subschema name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "properties": {
          "description": "The `#custom` object properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "required": {
          "description": "A collection indicating required property names",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "String",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ]
            }
          }
        },
        "type": {
          "description": "The object type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserSchemaPublicInput": {
      "description": "All custom Profile properties are defined in a Profile subschema with the resolution scope `#custom`",
      "fields": {
        "properties": {
          "description": "The `#custom` object properties",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      },
      "alias": "UserSchemaPublic"
    },
    "UserType": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserTypeLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "A timestamp from when the User Type was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "createdBy": {
          "description": "The user ID of the account that created the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "default": {
          "description": "A boolean value to indicate if this is the default User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "description": {
          "description": "The human-readable description of the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "The human-readable name of the User Type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "The unique key for the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "A timestamp from when the User Type was most recently updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "lastUpdatedBy": {
          "description": "The user ID of the most recent account to edit the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the User Type. The name must start with A-Z or a-z and contain only A-Z, a-z, 0-9, or underscore (_) characters. This value becomes read-only after creation and can't be updated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "UserTypeInput": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserTypeLinksInput",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "description": {
          "description": "The human-readable description of the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "The human-readable name of the User Type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the User Type. The name must start with A-Z or a-z and contain only A-Z, a-z, 0-9, or underscore (_) characters. This value becomes read-only after creation and can't be updated.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserType"
    },
    "UserTypeLinks": {
      "fields": {
        "schema": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "self": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "UserTypeLinksInput": {
      "fields": {
        "xmlValue": {
          "description": "Value of the xml field",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "xml": {
              "text": true
            }
          }
        }
      }
    },
    "UserTypePostRequestInput": {
      "fields": {
        "description": {
          "description": "The updated human-readable description of the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "The updated human-readable display name for the User Type",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserTypePostRequest"
    },
    "UserTypePutRequestInput": {
      "fields": {
        "description": {
          "description": "The human-readable description of the User Type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "displayName": {
          "description": "The human-readable name of the User Type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "name": {
          "description": "The name of the existing type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "UserTypePutRequest"
    },
    "WebAuthnCredRequest": {
      "description": "Credential request object for the initialized credential, along with the enrollment and key identifiers to associate with the credential",
      "fields": {
        "authenticatorEnrollmentId": {
          "description": "ID for a WebAuthn Preregistration Factor in Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "credRequestJwe": {
          "description": "Encrypted JWE of credential request for the fulfillment provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "keyId": {
          "description": "ID for the Okta response key-pair used to encrypt and decrypt credential requests and responses",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "WebAuthnCredResponseInput": {
      "description": "Credential response object for enrolled credential details, along with enrollment and key identifiers to associate the credential",
      "fields": {
        "authenticatorEnrollmentId": {
          "description": "ID for a WebAuthn Preregistration Factor in Okta",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "credResponseJWE": {
          "description": "Encrypted JWE of credential response from the fulfillment provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      },
      "alias": "WebAuthnCredResponse"
    },
    "WebAuthnPreregistrationFactor": {
      "description": "User Factor variant used for WebAuthn Preregistration Factors",
      "fields": {
        "_links": {
          "description": "Specifies link relations (see [Web Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the [JSON Hypertext Application Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06) specification. This object is used for dynamic discovery of related resources and lifecycle operations.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "LinksSelf",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "created": {
          "description": "Timestamp indicating when the Factor was enrolled",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "factorType": {
          "description": "Type of Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "id": {
          "description": "ID of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp indicating when the Factor was last updated",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "profile": {
          "description": "Specific attributes related to the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "JSON",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "provider": {
          "description": "Provider for the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorProvider",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "status": {
          "description": "Status of the Factor",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserFactorStatus",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "vendorName": {
          "description": "Name of the Factor vendor. This is usually the same as the provider.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "WellKnownAppAuthenticatorConfiguration": {
      "fields": {
        "appAuthenticatorEnrollEndpoint": {
          "description": "The authenticator enrollment endpoint",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "authenticatorId": {
          "description": "The unique identifier of the app authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "createdDate": {
          "description": "Timestamp when the Authenticator was created",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "key": {
          "description": "A human-readable string that identifies the Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorKeyEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "lastUpdated": {
          "description": "Timestamp when the Authenticator was last modified",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "TimestampTZ",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "date-time"
          }
        },
        "name": {
          "description": "The authenticator display name",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "orgId": {
          "description": "The `id` of the Okta Org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "settings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WellKnownAppAuthenticatorConfigurationSettings",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "supportedMethods": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "SupportedMethods",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "object"
              ]
            }
          }
        },
        "type": {
          "description": "The type of Authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WellKnownAppAuthenticatorConfigurationType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "WellKnownAppAuthenticatorConfigurationSettings": {
      "fields": {
        "userVerification": {
          "description": "User verification setting",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CustomAppUserVerificationEnum",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        }
      }
    },
    "WellKnownOrgMetadata": {
      "fields": {
        "_links": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WellKnownOrgMetadataLinks",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "id": {
          "description": "The unique identifier of the Org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "pipeline": {
          "description": "The authentication pipeline of the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PipelineType",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "settings": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "WellKnownOrgMetadataSettings",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "WellKnownOrgMetadataLinks": {
      "fields": {
        "alternate": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        },
        "organization": {
          "description": "Publish the CSR",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "HrefObject",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "object"
            ]
          }
        }
      }
    },
    "WellKnownOrgMetadataSettings": {
      "fields": {
        "analyticsCollectionEnabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "bugReportingEnabled": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        },
        "omEnabled": {
          "description": "Whether the legacy Okta Mobile application is enabled for the org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "boolean"
            ]
          }
        }
      }
    },
    "WellKnownSSFMetadata": {
      "description": "Metadata about Okta as a transmitter and relevant information for configuration.",
      "fields": {
        "configuration_endpoint": {
          "description": "The URL of the SSF Stream configuration endpoint",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        },
        "delivery_methods_supported": {
          "description": "An array of supported SET delivery methods",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "URI",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "type": [
              "array"
            ],
            "items": {
              "type": [
                "string"
              ],
              "format": "uri"
            }
          }
        },
        "issuer": {
          "description": "The issuer used in Security Event Tokens. This value is set as `iss` in the claim.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ]
          }
        },
        "jwks_uri": {
          "description": "The URL of the JSON Web Key Set (JWKS) that contains the signing keys for validating the signatures of Security Event Tokens (SETs)",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "URI",
              "type": "named"
            }
          },
          "http": {
            "type": [
              "string"
            ],
            "format": "uri"
          }
        }
      }
    }
  },
  "procedures": {
    "activateAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an Agent Pool update",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "activateApiServiceIntegrationInstanceSecret": {
      "request": {
        "url": "/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets/{secretId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiServiceId": {
          "description": "`id` of the API Service Integration instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiServiceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secretId": {
          "description": "`id` of the API Service Integration instance Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an API Service Integration instance Secret",
      "result_type": {
        "name": "APIServiceIntegrationInstanceSecret",
        "type": "named"
      }
    },
    "activateAuthenticator": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an Authenticator",
      "result_type": {
        "name": "AuthenticatorBase",
        "type": "named"
      }
    },
    "activateAuthenticatorMethod": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}/methods/{methodType}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "methodType": {
          "description": "Type of authenticator method",
          "type": {
            "name": "AuthenticatorMethodType",
            "type": "named"
          },
          "http": {
            "name": "methodType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an Authenticator Method",
      "result_type": {
        "name": "AuthenticatorMethodBase",
        "type": "named"
      }
    },
    "activateAuthorizationServer": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an Authorization Server",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activateAuthorizationServerPolicy": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activateAuthorizationServerPolicyRule": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Policy Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activateBehaviorDetectionRule": {
      "request": {
        "url": "/api/v1/behaviors/{behaviorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.behaviors.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "behaviorId": {
          "description": "id of the Behavior Detection Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "behaviorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Behavior Detection Rule",
      "result_type": {
        "name": "BehaviorRule",
        "type": "named"
      }
    },
    "activateDefaultProvisioningConnectionForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/connections/default/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate the default Provisioning Connection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activateDevice": {
      "request": {
        "url": "/api/v1/devices/{deviceId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceId": {
          "description": "`id` of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Device",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activateEventHook": {
      "request": {
        "url": "/api/v1/eventHooks/{eventHookId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "eventHookId": {
          "description": "`id` of the Event Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "eventHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an Event Hook",
      "result_type": {
        "name": "EventHook",
        "type": "named"
      }
    },
    "activateFactor_UserFactorActivateRequest0": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Attempts to activate a `call` Factor with the specified passcode",
          "type": {
            "name": "UserFactorActivateRequest0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Factor",
      "result_type": {
        "name": "UserFactorActivateResponse",
        "type": "named"
      }
    },
    "activateFactor_UserFactorActivateRequest1": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Attempts to activate an `email` Factor with the specified passcode",
          "type": {
            "name": "UserFactorActivateRequest1Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Factor",
      "result_type": {
        "name": "UserFactorActivateResponse",
        "type": "named"
      }
    },
    "activateFactor_UserFactorActivateRequest2": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Attempts to activate an `sms` Factor with the specified passcode",
          "type": {
            "name": "UserFactorActivateRequest2Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Factor",
      "result_type": {
        "name": "UserFactorActivateResponse",
        "type": "named"
      }
    },
    "activateFactor_UserFactorActivateRequest3": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Attempts to activate a `token:software:totp` Factor with the specified passcode",
          "type": {
            "name": "UserFactorActivateRequest3Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Factor",
      "result_type": {
        "name": "UserFactorActivateResponse",
        "type": "named"
      }
    },
    "activateFactor_UserFactorActivateRequest4": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Activates a `u2f` Factor with the specified client and registration information from the U2F token",
          "type": {
            "name": "UserFactorActivateRequest4Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Factor",
      "result_type": {
        "name": "UserFactorActivateResponse",
        "type": "named"
      }
    },
    "activateFactor_UserFactorActivateRequest5": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Activates a `webauthn` Factor with the specified attestation and registration information from the WebAuthn authenticator",
          "type": {
            "name": "UserFactorActivateRequest5Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Factor",
      "result_type": {
        "name": "UserFactorActivateResponse",
        "type": "named"
      }
    },
    "activateGroupRule": {
      "request": {
        "url": "/api/v1/groups/rules/{groupRuleId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupRuleId": {
          "description": "The `id` of the group rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupRuleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Group Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activateIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an Identity Provider",
      "result_type": {
        "name": "IdentityProvider",
        "type": "named"
      }
    },
    "activateInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks/{inlineHookId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "inlineHookId": {
          "description": "`id` of the Inline Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "inlineHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an Inline Hook",
      "result_type": {
        "name": "InlineHook",
        "type": "named"
      }
    },
    "activateLogStream": {
      "request": {
        "url": "/api/v1/logStreams/{logStreamId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "logStreamId": {
          "description": "Unique identifier for the Log Stream",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "logStreamId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Log Stream",
      "result_type": {
        "name": "LogStream",
        "type": "named"
      }
    },
    "activateNetworkZone": {
      "request": {
        "url": "/api/v1/zones/{zoneId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.networkZones.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "zoneId": {
          "description": "`id` of the Network Zone",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "zoneId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Network Zone",
      "result_type": {
        "name": "NetworkZone",
        "type": "named"
      }
    },
    "activateOAuth2ClientJsonWebKey": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/jwks/{keyId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyId": {
          "description": "Unique `id` of the OAuth 2.0 Client JSON Web Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an OAuth 2.0 Client JSON Web Key",
      "result_type": {
        "name": "OAuth2ClientJsonWebKey",
        "type": "named"
      }
    },
    "activateOAuth2ClientSecret": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/secrets/{secretId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secretId": {
          "description": "Unique `id` of the OAuth 2.0 Client Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate an OAuth 2.0 Client Secret",
      "result_type": {
        "name": "OAuth2ClientSecret",
        "type": "named"
      }
    },
    "activatePolicy": {
      "request": {
        "url": "/api/v1/policies/{policyId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activatePolicyRule": {
      "request": {
        "url": "/api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Policy Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activatePreregistrationEnrollment": {
      "request": {
        "url": "/webauthn-registration/api/v1/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Enrollment Initialization Request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnrollmentActivationRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Activate a Preregistered WebAuthn Factor",
      "result_type": {
        "name": "EnrollmentActivationResponse",
        "type": "named"
      }
    },
    "activateRealmAssignment": {
      "request": {
        "url": "/api/v1/realm-assignments/{assignmentId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignmentId": {
          "description": "`id` of the Realm Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Realm Assignment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "activateSecurityEventsProviderInstance": {
      "request": {
        "url": "/api/v1/security-events-providers/{securityEventProviderId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.securityEventsProviders.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "securityEventProviderId": {
          "description": "`id` of the Security Events Provider instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "securityEventProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Security Events Provider",
      "result_type": {
        "name": "SecurityEventsProviderResponse",
        "type": "named"
      }
    },
    "activateTrustedOrigin": {
      "request": {
        "url": "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.trustedOrigins.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "trustedOriginId": {
          "description": "`id` of the Trusted Origin",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "trustedOriginId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a Trusted Origin",
      "result_type": {
        "name": "TrustedOrigin",
        "type": "named"
      }
    },
    "activateUser": {
      "request": {
        "url": "/api/v1/users/{userId}/lifecycle/activate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "sendEmail": {
          "description": "Sends an activation email to the user if `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "sendEmail",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Activate a User",
      "result_type": {
        "name": "UserActivationToken",
        "type": "named"
      }
    },
    "addGroup": {
      "request": {
        "url": "/api/v1/groups",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/groups",
          "type": {
            "name": "AddGroupBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        }
      },
      "description": "Add a Group",
      "result_type": {
        "name": "Group",
        "type": "named"
      }
    },
    "addJwk": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/jwks",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/apps/{appId}/credentials/jwks",
          "type": {
            "name": "OAuth2ClientJsonWebKeyRequestBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Add a JSON Web Key",
      "result_type": {
        "name": "OAuth2ClientJsonWebKey",
        "type": "named"
      }
    },
    "addMembersToBinding": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}/members",
        "method": "patch",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}/members",
          "type": {
            "name": "ResourceSetBindingAddMembersRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add more Role Resource Set Binding Members",
      "result_type": {
        "name": "ResourceSetBindingResponse",
        "type": "named"
      }
    },
    "addResourceSetResources": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/resources",
        "method": "patch",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /api/v1/iam/resource-sets/{resourceSetIdOrLabel}/resources",
          "type": {
            "name": "ResourceSetResourcePatchRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Add more Resources to a Resource Set",
      "result_type": {
        "name": "ResourceSet",
        "type": "named"
      }
    },
    "assignAppInstanceTargetToAppAdminRoleForGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}/{appId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an Group Role Application Instance Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignAppInstanceTargetToAppAdminRoleForUser": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}/{appId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an Admin Role Application Instance Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignAppTargetInstanceRoleForClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}/{appId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Client Role Application Instance Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignAppTargetRoleToClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Client Role Application Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignAppTargetToAdminRoleForUser": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an Admin Role Application Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignApplicationPolicy": {
      "request": {
        "url": "/api/v1/apps/{appId}/policies/{policyId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an Authentication Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignClientPrivilegesSetting": {
      "request": {
        "url": "/api/v1/org/settings/clientPrivilegesSetting",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The org setting that assigns the super admin role by default to a public client app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ClientPrivilegesSettingInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Assign the Default Public Client App Role Setting",
      "result_type": {
        "name": "ClientPrivilegesSetting",
        "type": "named"
      }
    },
    "assignGroupOwner": {
      "request": {
        "url": "/api/v1/groups/{groupId}/owners",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/groups/{groupId}/owners",
          "type": {
            "name": "AssignGroupOwnerRequestBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Group Owner",
      "result_type": {
        "name": "GroupOwner",
        "type": "named"
      }
    },
    "assignGroupTargetRoleForClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/groups/{groupId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Client Role Group Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignGroupTargetToGroupAdminRole": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/groups/{targetGroupId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "targetGroupId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "targetGroupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Group Role Group Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignGroupTargetToUserRole": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/groups/{groupId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an Admin Role Group Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignGroupToApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/groups/{groupId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "The Application Group object that defines a group of users' app-specific profile and credentials for an app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ApplicationGroupAssignmentInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign an Application Group",
      "result_type": {
        "name": "ApplicationGroupAssignment",
        "type": "named"
      }
    },
    "assignLinkedObjectValueForPrimary": {
      "request": {
        "url": "/api/v1/users/{userIdOrLogin}/linkedObjects/{primaryRelationshipName}/{primaryUserId}",
        "method": "put",
        "security": [
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "primaryRelationshipName": {
          "description": "Name of the `primary` relationship being assigned",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "primaryRelationshipName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "primaryUserId": {
          "description": "User ID to be assigned to the `primary` relationship for the `associated` user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "primaryUserId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userIdOrLogin": {
          "description": "If for the `self` link, the ID of the User for whom you want to get the primary User ID. If for the `associated` relation, the User ID or login value of the User assigned the associated relationship.  This can be `me` to represent the current session User.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userIdOrLogin",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Linked Object value for primary",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "assignRoleToClient_CustomRoleAssignmentSchema": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /oauth2/v1/clients/{clientId}/roles",
          "type": {
            "name": "CustomRoleAssignmentSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Client Role",
      "result_type": {
        "name": "AssignRoleToClientResult",
        "type": "named"
      }
    },
    "assignRoleToClient_StandardRoleAssignmentSchema": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /oauth2/v1/clients/{clientId}/roles",
          "type": {
            "name": "StandardRoleAssignmentSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Client Role",
      "result_type": {
        "name": "AssignRoleToClientResult",
        "type": "named"
      }
    },
    "assignRoleToGroup_CustomRoleAssignmentSchema": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/groups/{groupId}/roles",
          "type": {
            "name": "CustomRoleAssignmentSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "disableNotifications": {
          "description": "Grants the Group third-party admin status when set to `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "disableNotifications",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Role to a Group",
      "result_type": {
        "name": "AssignRoleToGroupResult",
        "type": "named"
      }
    },
    "assignRoleToGroup_StandardRoleAssignmentSchema": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/groups/{groupId}/roles",
          "type": {
            "name": "StandardRoleAssignmentSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "disableNotifications": {
          "description": "Grants the Group third-party admin status when set to `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "disableNotifications",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a Role to a Group",
      "result_type": {
        "name": "AssignRoleToGroupResult",
        "type": "named"
      }
    },
    "assignRoleToUser_CustomRoleAssignmentSchema": {
      "request": {
        "url": "/api/v1/users/{userId}/roles",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/users/{userId}/roles",
          "type": {
            "name": "CustomRoleAssignmentSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "disableNotifications": {
          "description": "Setting this to `true` grants the User third-party admin status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "disableNotifications",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a User Role",
      "result_type": {
        "name": "AssignRoleToUserResult",
        "type": "named"
      }
    },
    "assignRoleToUser_StandardRoleAssignmentSchema": {
      "request": {
        "url": "/api/v1/users/{userId}/roles",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/users/{userId}/roles",
          "type": {
            "name": "StandardRoleAssignmentSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "disableNotifications": {
          "description": "Setting this to `true` grants the User third-party admin status",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "disableNotifications",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a User Role",
      "result_type": {
        "name": "AssignRoleToUserResult",
        "type": "named"
      }
    },
    "assignUserToApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/users",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "The Application User object defines a user's app-specific profile and credentials for an app",
          "type": {
            "name": "AppUserInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Assign an Application User",
      "result_type": {
        "name": "AppUser",
        "type": "named"
      }
    },
    "assignUserToGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/users/{userId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Assign a User to a Group",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "bulkRemoveEmailAddressBounces": {
      "request": {
        "url": "/api/v1/org/email/bounces/remove-list",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/org/email/bounces/remove-list",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BouncesRemoveListObjInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Remove Bounced Emails",
      "result_type": {
        "name": "BouncesRemoveListResult",
        "type": "named"
      }
    },
    "changePassword": {
      "request": {
        "url": "/api/v1/users/{userId}/credentials/change_password",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/users/{userId}/credentials/change_password",
          "type": {
            "name": "ChangePasswordRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "strict": {
          "description": "If true, validates against password minimum age policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "strict",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Password",
      "result_type": {
        "name": "UserCredentials",
        "type": "named"
      }
    },
    "changeRecoveryQuestion": {
      "request": {
        "url": "/api/v1/users/{userId}/credentials/change_recovery_question",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
          "type": {
            "name": "UserCredentialsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update Recovery Question",
      "result_type": {
        "name": "UserCredentials",
        "type": "named"
      }
    },
    "cloneApplicationKey": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/keys/{keyId}/clone",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyId": {
          "description": "ID of the Key Credential for the application",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "targetAid": {
          "description": "Unique key of the target Application",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "targetAid",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Clone a Key Credential",
      "result_type": {
        "name": "JsonWebKey",
        "type": "named"
      }
    },
    "cloneIdentityProviderKey": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/keys/{kid}/clone",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "kid": {
          "description": "Unique `id` of the IdP Key Credential",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "kid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "targetIdpId": {
          "description": "`id` of the target IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "targetIdpId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Clone a signing Key Credential for IdP",
      "result_type": {
        "name": "IdPKeyCredential",
        "type": "named"
      }
    },
    "clonePolicy": {
      "request": {
        "url": "/api/v1/policies/{policyId}/clone",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Clone an existing Policy",
      "result_type": {
        "name": "Policy",
        "type": "named"
      }
    },
    "closeCurrentSession": {
      "request": {
        "url": "/api/v1/sessions/me",
        "method": "delete",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Cookie": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Close the current Session",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "createAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Various information about agent auto update configuration",
          "type": {
            "name": "AgentPoolUpdateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an Agent Pool update",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "createApiServiceIntegrationInstance": {
      "request": {
        "url": "/integrations/api/v1/api-services",
        "method": "post",
        "security": [
          {
            "apiToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /integrations/api/v1/api-services",
          "type": {
            "name": "PostAPIServiceIntegrationInstanceRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an API Service Integration instance",
      "result_type": {
        "name": "PostAPIServiceIntegrationInstance",
        "type": "named"
      }
    },
    "createApiServiceIntegrationInstanceSecret": {
      "request": {
        "url": "/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiServiceId": {
          "description": "`id` of the API Service Integration instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiServiceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an API Service Integration instance Secret",
      "result_type": {
        "name": "APIServiceIntegrationInstanceSecret",
        "type": "named"
      }
    },
    "createApplication": {
      "request": {
        "url": "/api/v1/apps",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "OktaAccessGateway-Agent": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "OktaAccessGateway-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "activate": {
          "description": "Executes activation lifecycle operation when creating the app",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/apps",
          "type": {
            "name": "ApplicationInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an Application",
      "result_type": {
        "name": "Application",
        "type": "named"
      }
    },
    "createAssociatedServers": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/associatedServers",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/authorizationServers/{authServerId}/associatedServers",
          "type": {
            "name": "AssociatedServerMediatedInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an associated Authorization Server",
      "result_type": {
        "element_type": {
          "name": "AuthorizationServer",
          "type": "named"
        },
        "type": "array"
      }
    },
    "createAuthenticator": {
      "request": {
        "url": "/api/v1/authenticators",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "activate": {
          "description": "Whether to execute the activation lifecycle operation when Okta creates the authenticator",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/authenticators",
          "type": {
            "name": "AuthenticatorBaseInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an Authenticator",
      "result_type": {
        "name": "AuthenticatorBase",
        "type": "named"
      }
    },
    "createAuthorizationServer": {
      "request": {
        "url": "/api/v1/authorizationServers",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/authorizationServers",
          "type": {
            "name": "AuthorizationServerInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an Authorization Server",
      "result_type": {
        "name": "AuthorizationServer",
        "type": "named"
      }
    },
    "createAuthorizationServerPolicy": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/authorizationServers/{authServerId}/policies",
          "type": {
            "name": "AuthorizationServerPolicyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Policy",
      "result_type": {
        "name": "AuthorizationServerPolicy",
        "type": "named"
      }
    },
    "createAuthorizationServerPolicyRule": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules",
          "type": {
            "name": "AuthorizationServerPolicyRuleRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Policy Rule",
      "result_type": {
        "name": "AuthorizationServerPolicyRule",
        "type": "named"
      }
    },
    "createBehaviorDetectionRule": {
      "request": {
        "url": "/api/v1/behaviors",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.behaviors.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/behaviors",
          "type": {
            "name": "BehaviorRuleInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Behavior Detection Rule",
      "result_type": {
        "name": "BehaviorRule",
        "type": "named"
      }
    },
    "createBrand": {
      "request": {
        "url": "/api/v1/brands",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/brands",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateBrandRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Brand",
      "result_type": {
        "name": "Brand",
        "type": "named"
      }
    },
    "createCaptchaInstance": {
      "request": {
        "url": "/api/v1/captchas",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/captchas",
          "type": {
            "name": "CAPTCHAInstanceInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a CAPTCHA instance",
      "result_type": {
        "name": "CAPTCHAInstance",
        "type": "named"
      }
    },
    "createChildOrg": {
      "request": {
        "url": "/api/v1/orgs",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/orgs",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "ChildOrgInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an Org",
      "result_type": {
        "name": "ChildOrg",
        "type": "named"
      }
    },
    "createCustomDomain": {
      "request": {
        "url": "/api/v1/domains",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.domains.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/domains",
          "type": {
            "name": "DomainRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Custom Domain",
      "result_type": {
        "name": "DomainResponse",
        "type": "named"
      }
    },
    "createDeviceAssurancePolicy": {
      "request": {
        "url": "/api/v1/device-assurances",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.deviceAssurance.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/device-assurances",
          "type": {
            "name": "DeviceAssuranceInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Device Assurance Policy",
      "result_type": {
        "name": "DeviceAssurance",
        "type": "named"
      }
    },
    "createEmailCustomization": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/brands/{brandId}/templates/email/{templateName}/customizations",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailCustomizationInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an Email Customization",
      "result_type": {
        "name": "EmailCustomization",
        "type": "named"
      }
    },
    "createEmailDomain": {
      "request": {
        "url": "/api/v1/email-domains",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailDomains.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/email-domains",
          "type": {
            "name": "BaseEmailDomainInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "CreateEmailDomainExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Create an Email Domain",
      "result_type": {
        "name": "BaseEmailDomain",
        "type": "named"
      }
    },
    "createEmailServer": {
      "request": {
        "url": "/api/v1/email-servers",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/email-servers",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailServerRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a custom SMTP server",
      "result_type": {
        "name": "EmailServerResponse",
        "type": "named"
      }
    },
    "createEventHook": {
      "request": {
        "url": "/api/v1/eventHooks",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/eventHooks",
          "type": {
            "name": "EventHookInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an Event Hook",
      "result_type": {
        "name": "EventHook",
        "type": "named"
      }
    },
    "createGroupRule": {
      "request": {
        "url": "/api/v1/groups/rules",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/groups/rules",
          "type": {
            "name": "CreateGroupRuleRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Group rule",
      "result_type": {
        "name": "GroupRule",
        "type": "named"
      }
    },
    "createHookKey": {
      "request": {
        "url": "/api/v1/hook-keys",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/hook-keys",
          "type": {
            "name": "KeyRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a key",
      "result_type": {
        "name": "DetailedHookKeyInstance",
        "type": "named"
      }
    },
    "createIdentityProvider": {
      "request": {
        "url": "/api/v1/idps",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/idps",
          "type": {
            "name": "IdentityProviderInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an Identity Provider",
      "result_type": {
        "name": "IdentityProvider",
        "type": "named"
      }
    },
    "createIdentityProviderKey": {
      "request": {
        "url": "/api/v1/idps/credentials/keys",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/idps/credentials/keys",
          "type": {
            "name": "IdPCertificateCredentialInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an IdP Key Credential",
      "result_type": {
        "name": "IdPKeyCredential",
        "type": "named"
      }
    },
    "createIdentitySourceSession": {
      "request": {
        "url": "/api/v1/identity-sources/{identitySourceId}/sessions",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.identitySources.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "identitySourceId": {
          "description": "The ID of the Identity Source for which the session is created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identitySourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create an Identity Source Session",
      "result_type": {
        "name": "IdentitySourceSession",
        "type": "named"
      }
    },
    "createInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/inlineHooks",
          "type": {
            "name": "InlineHookInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an Inline Hook",
      "result_type": {
        "name": "InlineHook",
        "type": "named"
      }
    },
    "createLinkedObjectDefinition": {
      "request": {
        "url": "/api/v1/meta/schemas/user/linkedObjects",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.linkedObjects.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/meta/schemas/user/linkedObjects",
          "type": {
            "name": "LinkedObjectInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Linked Object Definition",
      "result_type": {
        "name": "LinkedObject",
        "type": "named"
      }
    },
    "createLogStream": {
      "request": {
        "url": "/api/v1/logStreams",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/logStreams",
          "type": {
            "name": "LogStreamInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Log Stream",
      "result_type": {
        "name": "LogStream",
        "type": "named"
      }
    },
    "createNetworkZone": {
      "request": {
        "url": "/api/v1/zones",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.networkZones.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/zones",
          "type": {
            "name": "NetworkZoneInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Network Zone",
      "result_type": {
        "name": "NetworkZone",
        "type": "named"
      }
    },
    "createOAuth2Claim": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/claims",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/authorizationServers/{authServerId}/claims",
          "type": {
            "name": "OAuth2ClaimInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a custom token Claim",
      "result_type": {
        "name": "OAuth2Claim",
        "type": "named"
      }
    },
    "createOAuth2ClientSecret": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/secrets",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/apps/{appId}/credentials/secrets",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OAuth2ClientSecretRequestBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an OAuth 2.0 Client Secret",
      "result_type": {
        "name": "OAuth2ClientSecret",
        "type": "named"
      }
    },
    "createOAuth2Scope": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/scopes",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/authorizationServers/{authServerId}/scopes",
          "type": {
            "name": "OAuth2ScopeInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Custom Token Scope",
      "result_type": {
        "name": "OAuth2Scope",
        "type": "named"
      }
    },
    "createPolicy": {
      "request": {
        "url": "/api/v1/policies",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "activate": {
          "description": "This query parameter is only valid for Classic Engine orgs.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/policies",
          "type": {
            "name": "PolicyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Policy",
      "result_type": {
        "name": "Policy",
        "type": "named"
      }
    },
    "createPolicyRule": {
      "request": {
        "url": "/api/v1/policies/{policyId}/rules",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "activate": {
          "description": "Set this parameter to `false` to create an `INACTIVE` rule.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/policies/{policyId}/rules",
          "type": {
            "name": "PolicyRuleInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "limit": {
          "description": "Defines the number of policy rules returned. See [Pagination](https://developer.okta.com/docs/api/#pagination).",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Policy Rule",
      "result_type": {
        "name": "PolicyRule",
        "type": "named"
      }
    },
    "createPolicySimulation": {
      "request": {
        "url": "/api/v1/policies/simulate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.read"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/policies/simulate",
          "type": {
            "element_type": {
              "name": "SimulatePolicyBodyInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "object"
                ]
              }
            }
          }
        },
        "expand": {
          "description": "Use `expand=EVALUATED` to include a list of evaluated but not matched policies and policy rules. Use `expand=RULE` to include details about why a rule condition wasn't matched.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Policy Simulation",
      "result_type": {
        "element_type": {
          "name": "SimulatePolicyEvaluations",
          "type": "named"
        },
        "type": "array"
      }
    },
    "createPrincipalRateLimitEntity": {
      "request": {
        "url": "/api/v1/principal-rate-limits",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.principalRateLimits.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/principal-rate-limits",
          "type": {
            "name": "PrincipalRateLimitEntityInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Principal Rate Limit",
      "result_type": {
        "name": "PrincipalRateLimitEntity",
        "type": "named"
      }
    },
    "createPushProvider": {
      "request": {
        "url": "/api/v1/push-providers",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.pushProviders.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/push-providers",
          "type": {
            "name": "PushProviderInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Push Provider",
      "result_type": {
        "name": "PushProvider",
        "type": "named"
      }
    },
    "createRealm": {
      "request": {
        "url": "/api/v1/realms",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realms.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/realms",
          "type": {
            "name": "CreateRealmRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Realm",
      "result_type": {
        "name": "Realm",
        "type": "named"
      }
    },
    "createRealmAssignment": {
      "request": {
        "url": "/api/v1/realm-assignments",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/realm-assignments",
          "type": {
            "name": "CreateRealmAssignmentRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Realm Assignment",
      "result_type": {
        "name": "RealmAssignment",
        "type": "named"
      }
    },
    "createResourceSet": {
      "request": {
        "url": "/api/v1/iam/resource-sets",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/iam/resource-sets",
          "type": {
            "name": "CreateResourceSetRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Resource Set",
      "result_type": {
        "name": "ResourceSet",
        "type": "named"
      }
    },
    "createResourceSetBinding": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings",
          "type": {
            "name": "ResourceSetBindingCreateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Role Resource Set Binding",
      "result_type": {
        "name": "ResourceSetBindingResponse",
        "type": "named"
      }
    },
    "createRiskProvider": {
      "request": {
        "url": "/api/v1/risk/providers",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.riskProviders.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/risk/providers",
          "type": {
            "name": "RiskProviderInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Risk Provider",
      "result_type": {
        "name": "RiskProvider",
        "type": "named"
      }
    },
    "createRole": {
      "request": {
        "url": "/api/v1/iam/roles",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/iam/roles",
          "type": {
            "name": "CreateIamRoleRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Custom Role",
      "result_type": {
        "name": "IamRole",
        "type": "named"
      }
    },
    "createRolePermission": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateUpdateIamRolePermissionRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "permissionType": {
          "description": "An okta permission type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "permissionType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Create a Custom Role Permission",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "createSecurityEventsProviderInstance": {
      "request": {
        "url": "/api/v1/security-events-providers",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.securityEventsProviders.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The request schema for creating or updating a Security Events Provider. The `settings` must match one of the schemas.",
          "type": {
            "name": "SecurityEventsProviderRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Security Events Provider",
      "result_type": {
        "name": "SecurityEventsProviderResponse",
        "type": "named"
      }
    },
    "createSession": {
      "request": {
        "url": "/api/v1/sessions",
        "method": "post",
        "security": [
          {
            "apiToken": []
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/sessions",
          "type": {
            "name": "CreateSessionRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Session with session token",
      "result_type": {
        "name": "Session",
        "type": "named"
      }
    },
    "createSmsTemplate": {
      "request": {
        "url": "/api/v1/templates/sms",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/templates/sms",
          "type": {
            "name": "SmsTemplateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an SMS Template",
      "result_type": {
        "name": "SmsTemplate",
        "type": "named"
      }
    },
    "createSsfStream": {
      "request": {
        "url": "/api/v1/ssf/stream",
        "method": "post",
        "security": [
          {
            "oauth2": [
              "ssf.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/ssf/stream",
          "type": {
            "name": "StreamConfigurationCreateRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create an SSF Stream",
      "result_type": {
        "name": "StreamConfiguration",
        "type": "named"
      }
    },
    "createTrustedOrigin": {
      "request": {
        "url": "/api/v1/trustedOrigins",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.trustedOrigins.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/trustedOrigins",
          "type": {
            "name": "TrustedOriginWriteInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a Trusted Origin",
      "result_type": {
        "name": "TrustedOrigin",
        "type": "named"
      }
    },
    "createUISchema": {
      "request": {
        "url": "/api/v1/meta/uischemas",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.uischemas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The request body properties for the new UI Schema",
          "type": {
            "name": "CreateUISchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a UI Schema",
      "result_type": {
        "name": "UISchemasResponseObject",
        "type": "named"
      }
    },
    "createUser": {
      "request": {
        "url": "/api/v1/users",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "activate": {
          "description": "Executes an [activation lifecycle](/openapi/okta-management/management/tag/UserLifecycle/#tag/UserLifecycle/operation/activateUser) operation when creating the User",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/users",
          "type": {
            "name": "CreateUserRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "nextLogin": {
          "description": "With `activate=true`, if `nextLogin=changePassword`, a User is created, activated, and the password is set to `EXPIRED`. The User must change it the next time they sign in.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserNextLogin",
              "type": "named"
            }
          },
          "http": {
            "name": "nextLogin",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "provider": {
          "description": "Indicates whether to create a User with a specified authentication provider",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "provider",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Create a User",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "createUserType": {
      "request": {
        "url": "/api/v1/meta/types/user",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.userTypes.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/meta/types/user",
          "type": {
            "name": "UserTypeInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Create a User Type",
      "result_type": {
        "name": "UserType",
        "type": "named"
      }
    },
    "deactivateAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an Agent Pool update",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "deactivateApiServiceIntegrationInstanceSecret": {
      "request": {
        "url": "/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets/{secretId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiServiceId": {
          "description": "`id` of the API Service Integration instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiServiceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secretId": {
          "description": "`id` of the API Service Integration instance Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an API Service Integration instance Secret",
      "result_type": {
        "name": "APIServiceIntegrationInstanceSecret",
        "type": "named"
      }
    },
    "deactivateAuthenticator": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an Authenticator",
      "result_type": {
        "name": "AuthenticatorBase",
        "type": "named"
      }
    },
    "deactivateAuthenticatorMethod": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}/methods/{methodType}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "methodType": {
          "description": "Type of authenticator method",
          "type": {
            "name": "AuthenticatorMethodType",
            "type": "named"
          },
          "http": {
            "name": "methodType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an Authenticator Method",
      "result_type": {
        "name": "AuthenticatorMethodBase",
        "type": "named"
      }
    },
    "deactivateAuthorizationServer": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an Authorization Server",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateAuthorizationServerPolicy": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateAuthorizationServerPolicyRule": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Policy Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateBehaviorDetectionRule": {
      "request": {
        "url": "/api/v1/behaviors/{behaviorId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.behaviors.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "behaviorId": {
          "description": "id of the Behavior Detection Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "behaviorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Behavior Detection Rule",
      "result_type": {
        "name": "BehaviorRule",
        "type": "named"
      }
    },
    "deactivateDefaultProvisioningConnectionForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/connections/default/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate the default Provisioning Connection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateDevice": {
      "request": {
        "url": "/api/v1/devices/{deviceId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceId": {
          "description": "`id` of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Device",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateEventHook": {
      "request": {
        "url": "/api/v1/eventHooks/{eventHookId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "eventHookId": {
          "description": "`id` of the Event Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "eventHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an Event Hook",
      "result_type": {
        "name": "EventHook",
        "type": "named"
      }
    },
    "deactivateGroupRule": {
      "request": {
        "url": "/api/v1/groups/rules/{groupRuleId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupRuleId": {
          "description": "The `id` of the group rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupRuleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Group Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an Identity Provider",
      "result_type": {
        "name": "IdentityProvider",
        "type": "named"
      }
    },
    "deactivateInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks/{inlineHookId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "inlineHookId": {
          "description": "`id` of the Inline Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "inlineHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an Inline Hook",
      "result_type": {
        "name": "InlineHook",
        "type": "named"
      }
    },
    "deactivateLogStream": {
      "request": {
        "url": "/api/v1/logStreams/{logStreamId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "logStreamId": {
          "description": "Unique identifier for the Log Stream",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "logStreamId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Log Stream",
      "result_type": {
        "name": "LogStream",
        "type": "named"
      }
    },
    "deactivateNetworkZone": {
      "request": {
        "url": "/api/v1/zones/{zoneId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.networkZones.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "zoneId": {
          "description": "`id` of the Network Zone",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "zoneId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Network Zone",
      "result_type": {
        "name": "NetworkZone",
        "type": "named"
      }
    },
    "deactivateOAuth2ClientJsonWebKey": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/jwks/{keyId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyId": {
          "description": "Unique `id` of the OAuth 2.0 Client JSON Web Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an OAuth 2.0 Client JSON Web Key",
      "result_type": {
        "name": "OAuth2ClientJsonWebKey",
        "type": "named"
      }
    },
    "deactivateOAuth2ClientSecret": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/secrets/{secretId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secretId": {
          "description": "Unique `id` of the OAuth 2.0 Client Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate an OAuth 2.0 Client Secret",
      "result_type": {
        "name": "OAuth2ClientSecret",
        "type": "named"
      }
    },
    "deactivatePolicy": {
      "request": {
        "url": "/api/v1/policies/{policyId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivatePolicyRule": {
      "request": {
        "url": "/api/v1/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Policy Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateRealmAssignment": {
      "request": {
        "url": "/api/v1/realm-assignments/{assignmentId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignmentId": {
          "description": "`id` of the Realm Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Realm Assignment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deactivateSecurityEventsProviderInstance": {
      "request": {
        "url": "/api/v1/security-events-providers/{securityEventProviderId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.securityEventsProviders.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "securityEventProviderId": {
          "description": "`id` of the Security Events Provider instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "securityEventProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Security Events Provider",
      "result_type": {
        "name": "SecurityEventsProviderResponse",
        "type": "named"
      }
    },
    "deactivateTrustedOrigin": {
      "request": {
        "url": "/api/v1/trustedOrigins/{trustedOriginId}/lifecycle/deactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.trustedOrigins.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "trustedOriginId": {
          "description": "`id` of the Trusted Origin",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "trustedOriginId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Deactivate a Trusted Origin",
      "result_type": {
        "name": "TrustedOrigin",
        "type": "named"
      }
    },
    "deleteAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Agent Pool update",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteAllCustomizations": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete all Email Customizations",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteApiServiceIntegrationInstance": {
      "request": {
        "url": "/integrations/api/v1/api-services/{apiServiceId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiServiceId": {
          "description": "`id` of the API Service Integration instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiServiceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an API Service Integration instance",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteApiServiceIntegrationInstanceSecret": {
      "request": {
        "url": "/integrations/api/v1/api-services/{apiServiceId}/credentials/secrets/{secretId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.oauthIntegrations.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiServiceId": {
          "description": "`id` of the API Service Integration instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiServiceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secretId": {
          "description": "`id` of the API Service Integration instance Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an API Service Integration instance Secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Application",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteAssociatedServer": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/associatedServers/{associatedServerId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "associatedServerId": {
          "description": "`id` of the associated Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "associatedServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an associated Authorization Server",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteAuthorizationServer": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Authorization Server",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteAuthorizationServerPolicy": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteAuthorizationServerPolicyRule": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Policy Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteBehaviorDetectionRule": {
      "request": {
        "url": "/api/v1/behaviors/{behaviorId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.behaviors.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "behaviorId": {
          "description": "id of the Behavior Detection Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "behaviorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Behavior Detection Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteBinding": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Role Resource Set Binding",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteBrand": {
      "request": {
        "url": "/api/v1/brands/{brandId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a brand",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteBrandThemeBackgroundImage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}/background-image",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete the Background Image",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteBrandThemeFavicon": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}/favicon",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete the Favicon",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteBrandThemeLogo": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}/logo",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete the Logo",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteCaptchaInstance": {
      "request": {
        "url": "/api/v1/captchas/{captchaId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "captchaId": {
          "description": "The unique key used to identify your CAPTCHA instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "captchaId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a CAPTCHA Instance",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteCustomDomain": {
      "request": {
        "url": "/api/v1/domains/{domainId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.domains.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domainId": {
          "description": "`id` of the Domain",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Custom Domain",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteCustomizedErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error/customized",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete the Customized Error Page",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteCustomizedSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/customized",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete the Customized Sign-in Page",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteDevice": {
      "request": {
        "url": "/api/v1/devices/{deviceId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceId": {
          "description": "`id` of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Device",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteDeviceAssurancePolicy": {
      "request": {
        "url": "/api/v1/device-assurances/{deviceAssuranceId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.deviceAssurance.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceAssuranceId": {
          "description": "Id of the Device Assurance Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceAssuranceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Device Assurance Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteEmailCustomization": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "customizationId": {
          "description": "The ID of the email customization",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "customizationId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Email Customization",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteEmailDomain": {
      "request": {
        "url": "/api/v1/email-domains/{emailDomainId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailDomains.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "emailDomainId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailDomainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "DeleteEmailDomainExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Delete an Email Domain",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteEmailServer": {
      "request": {
        "url": "/api/v1/email-servers/{emailServerId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "emailServerId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an SMTP Server configuration",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteEventHook": {
      "request": {
        "url": "/api/v1/eventHooks/{eventHookId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "eventHookId": {
          "description": "`id` of the Event Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "eventHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Event Hook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Group",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteGroupOwner": {
      "request": {
        "url": "/api/v1/groups/{groupId}/owners/{ownerId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ownerId": {
          "description": "The `id` of the group owner",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ownerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Group Owner",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteHookKey": {
      "request": {
        "url": "/api/v1/hook-keys/{id}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "ID of the Hook Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a key",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Identity Provider",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteIdentityProviderKey": {
      "request": {
        "url": "/api/v1/idps/credentials/keys/{kid}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "kid": {
          "description": "Unique `id` of the IdP Key Credential",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "kid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an IdP Key Credential",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteIdentitySourceSession": {
      "request": {
        "url": "/api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.identitySources.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "identitySourceId": {
          "description": "The ID of the Identity Source for which the session is created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identitySourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sessionId": {
          "description": "The ID of the Identity Source Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Identity Source Session",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks/{inlineHookId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "inlineHookId": {
          "description": "`id` of the Inline Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "inlineHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an Inline Hook",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteLinkedObjectDefinition": {
      "request": {
        "url": "/api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.linkedObjects.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "linkedObjectName": {
          "description": "Primary or Associated name",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "linkedObjectName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Linked Object Definition",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteLinkedObjectForUser": {
      "request": {
        "url": "/api/v1/users/{userIdOrLogin}/linkedObjects/{relationshipName}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "relationshipName": {
          "description": "Name of the `primary` or `associated` relationship being queried",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "relationshipName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userIdOrLogin": {
          "description": "If for the `self` link, the ID of the User for whom you want to get the primary User ID. If for the `associated` relation, the User ID or login value of the User assigned the associated relationship.  This can be `me` to represent the current session User.",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userIdOrLogin",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Linked Object value",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteLogStream": {
      "request": {
        "url": "/api/v1/logStreams/{logStreamId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "logStreamId": {
          "description": "Unique identifier for the Log Stream",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "logStreamId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Log Stream",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteNetworkZone": {
      "request": {
        "url": "/api/v1/zones/{zoneId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.networkZones.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "zoneId": {
          "description": "`id` of the Network Zone",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "zoneId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Network Zone",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteOAuth2Claim": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/claims/{claimId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "claimId": {
          "description": "`id` of Claim",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "claimId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a custom token Claim",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteOAuth2ClientSecret": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/secrets/{secretId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "secretId": {
          "description": "Unique `id` of the OAuth 2.0 Client Secret",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "secretId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an OAuth 2.0 Client Secret",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteOAuth2Scope": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "scopeId": {
          "description": "`id` of Scope",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scopeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Custom Token Scope",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteOrgCaptchaSettings": {
      "request": {
        "url": "/api/v1/org/captcha",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Delete the Org-wide CAPTCHA Settings",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deletePolicy": {
      "request": {
        "url": "/api/v1/policies/{policyId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Policy",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deletePolicyResourceMapping": {
      "request": {
        "url": "/api/v1/policies/{policyId}/mappings/{mappingId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "mappingId": {
          "description": "`id` of the policy resource Mapping",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "mappingId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a policy resource Mapping",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deletePolicyRule": {
      "request": {
        "url": "/api/v1/policies/{policyId}/rules/{ruleId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Policy Rule",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deletePreviewErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error/preview",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete the Preview Error Page",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deletePreviewSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/preview",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete the Preview Sign-in Page",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deletePushProvider": {
      "request": {
        "url": "/api/v1/push-providers/{pushProviderId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.pushProviders.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "pushProviderId": {
          "description": "Id of the push provider",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pushProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Push Provider",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteRealm": {
      "request": {
        "url": "/api/v1/realms/{realmId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realms.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "realmId": {
          "description": "`id` of the Realm",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "realmId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Realm",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteRealmAssignment": {
      "request": {
        "url": "/api/v1/realm-assignments/{assignmentId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignmentId": {
          "description": "`id` of the Realm Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Realm Assignment",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteResourceSet": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Resource Set",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteResourceSetResource": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/resources/{resourceId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "resourceId": {
          "description": "`id` of the Resource",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Resource Set Resource",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteRiskProvider": {
      "request": {
        "url": "/api/v1/risk/providers/{riskProviderId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.riskProviders.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "riskProviderId": {
          "description": "`id` of the Risk Provider object",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "riskProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Risk Provider",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteRole": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Custom Role",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteRoleFromClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Client Role",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteRolePermission": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "permissionType": {
          "description": "An okta permission type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "permissionType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Custom Role Permission",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteSecurityEventsProviderInstance": {
      "request": {
        "url": "/api/v1/security-events-providers/{securityEventProviderId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.securityEventsProviders.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "securityEventProviderId": {
          "description": "`id` of the Security Events Provider instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "securityEventProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Security Events Provider",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteSmsTemplate": {
      "request": {
        "url": "/api/v1/templates/sms/{templateId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "templateId": {
          "description": "`id` of the Template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an SMS Template",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteSsfStream": {
      "request": {
        "url": "/api/v1/ssf/stream",
        "method": "delete",
        "security": [
          {
            "oauth2": [
              "ssf.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "stream_id": {
          "description": "The ID of the specified SSF Stream configuration",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "stream_id",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an SSF Stream",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteTrustedOrigin": {
      "request": {
        "url": "/api/v1/trustedOrigins/{trustedOriginId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.trustedOrigins.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "trustedOriginId": {
          "description": "`id` of the Trusted Origin",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "trustedOriginId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a Trusted Origin",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteUISchemas": {
      "request": {
        "url": "/api/v1/meta/uischemas/{id}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.uischemas.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "The unique ID of the UI Schema",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a UI Schema",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteUser": {
      "request": {
        "url": "/api/v1/users/{id}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Prefer": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "DeleteUserPrefer",
              "type": "named"
            }
          },
          "http": {
            "name": "Prefer",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "id": {
          "description": "`id`, `login`, or `login shortname` (as long as it is unambiguous) of user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sendEmail": {
          "description": "Sends a deactivation email to the admin if `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "sendEmail",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Delete a User",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteUserType": {
      "request": {
        "url": "/api/v1/meta/types/user/{typeId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.userTypes.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "typeId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "typeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a User Type",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deleteWebAuthnPreregistrationFactor": {
      "request": {
        "url": "/webauthn-registration/api/v1/users/{userId}/enrollments/{authenticatorEnrollmentId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorEnrollmentId": {
          "description": "ID for a WebAuthn Preregistration Factor in Okta",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorEnrollmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete a WebAuthn Preregistration Factor",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "deletejwk": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/jwks/{keyId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "keyId": {
          "description": "Unique `id` of the OAuth 2.0 Client JSON Web Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "keyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Delete an OAuth 2.0 Client JSON Web Key",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "enrollFactor": {
      "request": {
        "url": "/api/v1/users/{userId}/factors",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "activate": {
          "description": "If `true`, the factor is immediately activated as part of the enrollment. An activation process isn't required. Currently auto-activation is supported by `sms`, `call`, `email` and `token:hotp` (Custom TOTP) Factor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/users/{userId}/factors",
          "type": {
            "name": "UserFactorInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors. If the provided ID doesn't exist, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "updatePhone": {
          "description": "If `true`, indicates that you are replacing the currently registered phone number for the specified user. This parameter is ignored if the existing phone number is used by an activated Factor.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "updatePhone",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Enroll a Factor",
      "result_type": {
        "name": "UserFactor",
        "type": "named"
      }
    },
    "enrollPreregistrationEnrollment": {
      "request": {
        "url": "/webauthn-registration/api/v1/enroll",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Enrollment Initialization Request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EnrollmentInitializationRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Enroll a Preregistered WebAuthn Factor",
      "result_type": {
        "name": "EnrollmentInitializationResponse",
        "type": "named"
      }
    },
    "executeInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks/{inlineHookId}/execute",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/inlineHooks/{inlineHookId}/execute",
          "type": {
            "name": "InlineHookPayload",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "inlineHookId": {
          "description": "`id` of the Inline Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "inlineHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Execute an Inline Hook",
      "result_type": {
        "name": "InlineHookResponse",
        "type": "named"
      }
    },
    "executeRealmAssignment": {
      "request": {
        "url": "/api/v1/realm-assignments/operations",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/realm-assignments/operations",
          "type": {
            "name": "OperationRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Execute a Realm Assignment",
      "result_type": {
        "name": "OperationResponse",
        "type": "named"
      }
    },
    "expirePassword": {
      "request": {
        "url": "/api/v1/users/{userId}/lifecycle/expire_password",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Expire Password",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "expirePasswordWithTempPassword": {
      "request": {
        "url": "/api/v1/users/{userId}/lifecycle/expire_password_with_temp_password",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "revokeSessions": {
          "description": "Revokes the User's existing sessions if `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "revokeSessions",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Expire Password with temporary password",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "extendOktaSupport": {
      "request": {
        "url": "/api/v1/org/privacy/oktaSupport/extend",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Extend Okta Support Access",
      "result_type": {
        "name": "OrgOktaSupportSettingsObj",
        "type": "named"
      }
    },
    "forgotPassword": {
      "request": {
        "url": "/api/v1/users/{userId}/credentials/forgot_password",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "sendEmail": {
          "description": "Sends a forgot password email to the User if `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "sendEmail",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Start forgot password flow",
      "result_type": {
        "name": "ForgotPasswordResponse",
        "type": "named"
      }
    },
    "forgotPasswordSetNewPassword": {
      "request": {
        "url": "/api/v1/users/{userId}/credentials/forgot_password_recovery_question",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Specifies primary authentication and recovery credentials for a User. Credential types and requirements vary depending on the provider and security policy of the org.",
          "type": {
            "name": "UserCredentialsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "sendEmail": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "sendEmail",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Reset Password with Recovery Question",
      "result_type": {
        "name": "UserCredentials",
        "type": "named"
      }
    },
    "generateApplicationKey": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/keys/generate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "validityYears": {
          "description": "Expiry years of the Application Key Credential",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "validityYears",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ]
            }
          }
        }
      },
      "description": "Generate a Key Credential",
      "result_type": {
        "name": "JsonWebKey",
        "type": "named"
      }
    },
    "generateCsrForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/csrs",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/apps/{appId}/credentials/csrs",
          "type": {
            "name": "CsrMetadataInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Generate a Certificate Signing Request",
      "result_type": {
        "name": "Csr",
        "type": "named"
      }
    },
    "generateCsrForIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/csrs",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/idps/{idpId}/credentials/csrs",
          "type": {
            "name": "CsrMetadataInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Generate a Certificate Signing Request",
      "result_type": {
        "name": "IdPCsr",
        "type": "named"
      }
    },
    "generateFulfillmentRequest": {
      "request": {
        "url": "/webauthn-registration/api/v1/initiate-fulfillment-request",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Fulfillment Request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "FulfillmentRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Generate a Fulfillment Request",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "generateIdentityProviderSigningKey": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/keys/generate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "validityYears": {
          "description": "expiry of the IdP Key Credential",
          "type": {
            "name": "Int32",
            "type": "named"
          },
          "http": {
            "name": "validityYears",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 10,
              "minimum": 2
            }
          }
        }
      },
      "description": "Generate a new signing Key Credential for IdP",
      "result_type": {
        "name": "IdPKeyCredential",
        "type": "named"
      }
    },
    "grantAerialConsent": {
      "request": {
        "url": "/api/v1/org/privacy/aerial/grant",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/org/privacy/aerial/grant",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgAerialConsentInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Grant Okta Aerial access to your Org",
      "result_type": {
        "name": "OrgAerialConsentDetails",
        "type": "named"
      }
    },
    "grantConsentToScope": {
      "request": {
        "url": "/api/v1/apps/{appId}/grants",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.appGrants.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Grant object that represents an app consent scope grant",
          "type": {
            "name": "OAuth2ScopeConsentGrantInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Grant consent to scope",
      "result_type": {
        "name": "OAuth2ScopeConsentGrant",
        "type": "named"
      }
    },
    "grantOktaSupport": {
      "request": {
        "url": "/api/v1/org/privacy/oktaSupport/grant",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Grant Okta Support Access",
      "result_type": {
        "name": "OrgOktaSupportSettingsObj",
        "type": "named"
      }
    },
    "linkUserToIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/users/{userId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/idps/{idpId}/users/{userId}",
          "type": {
            "name": "UserIdentityProviderLinkRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Link a User to IdP",
      "result_type": {
        "name": "IdentityProviderApplicationUser",
        "type": "named"
      }
    },
    "mapResourceToPolicy": {
      "request": {
        "url": "/api/v1/policies/{policyId}/mappings",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/policies/{policyId}/mappings",
          "type": {
            "name": "PolicyMappingRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Map a resource to a Policy",
      "result_type": {
        "name": "PolicyMapping",
        "type": "named"
      }
    },
    "optInUsersToOktaCommunicationEmails": {
      "request": {
        "url": "/api/v1/org/privacy/oktaCommunication/optIn",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Opt in to Okta User Communication Emails",
      "result_type": {
        "name": "OrgOktaCommunicationSetting",
        "type": "named"
      }
    },
    "optOutUsersFromOktaCommunicationEmails": {
      "request": {
        "url": "/api/v1/org/privacy/oktaCommunication/optOut",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Opt out of Okta User Communication Emails",
      "result_type": {
        "name": "OrgOktaCommunicationSetting",
        "type": "named"
      }
    },
    "pauseAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}/pause",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Pause an Agent Pool update",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "publishCsrForIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/csrs/{idpCsrId}/lifecycle/publish",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/pkix-cert"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "X.509 certificate in `DER` format.  The client can either post in binary or Base64URL-encoded. If the post is Base64URL-encoded, set the `Content-Transfer-Encoding` header to `base64`.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ],
              "format": "binary"
            }
          }
        },
        "idpCsrId": {
          "description": "`id` of the IdP CSR",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpCsrId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Publish a Certificate Signing Request",
      "result_type": {
        "name": "IdPKeyCredential",
        "type": "named"
      }
    },
    "publishCsrFromApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/csrs/{csrId}/lifecycle/publish",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/pkix-cert"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "X.509 certificate in `DER` format.  The client can either post in binary or Base64URL-encoded. If the post is Base64URL-encoded, set the `Content-Transfer-Encoding` header to `base64`.",
          "type": {
            "name": "Binary",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ],
              "format": "binary"
            }
          }
        },
        "csrId": {
          "description": "`id` of the CSR",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "csrId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Publish a Certificate Signing Request",
      "result_type": {
        "name": "JsonWebKey",
        "type": "named"
      }
    },
    "publishSecurityEventTokens": {
      "request": {
        "url": "/security/api/v1/security-events",
        "method": "post",
        "requestBody": {
          "contentType": "application/secevent+jwt"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /security/api/v1/security-events",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Publish a Security Event Token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "reactivateUser": {
      "request": {
        "url": "/api/v1/users/{id}/lifecycle/reactivate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "id": {
          "description": "`id`, `login`, or `login shortname` (as long as it is unambiguous) of user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sendEmail": {
          "description": "Sends an activation email to the user if `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "sendEmail",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Reactivate a User",
      "result_type": {
        "name": "UserActivationToken",
        "type": "named"
      }
    },
    "refreshCurrentSession": {
      "request": {
        "url": "/api/v1/sessions/me/lifecycle/refresh",
        "method": "post",
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Cookie": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Cookie",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Refresh the current Session",
      "result_type": {
        "name": "Session",
        "type": "named"
      }
    },
    "refreshSession": {
      "request": {
        "url": "/api/v1/sessions/{sessionId}/lifecycle/refresh",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.sessions.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "sessionId": {
          "description": "`id` of the Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Refresh a Session",
      "result_type": {
        "name": "Session",
        "type": "named"
      }
    },
    "removeAppTargetInstanceRoleForClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}/{appId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Client Role Application Instance Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "removeAppTargetRoleFromClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Client Role Application Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "removeGroupTargetRoleFromClient": {
      "request": {
        "url": "/oauth2/v1/clients/{clientId}/roles/{roleAssignmentId}/targets/groups/{groupId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Client Role Group Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "replaceApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/apps/{appId}",
          "type": {
            "name": "ApplicationInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace an Application",
      "result_type": {
        "name": "Application",
        "type": "named"
      }
    },
    "replaceAuthenticator": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/authenticators/{authenticatorId}",
          "type": {
            "name": "AuthenticatorBaseInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace an Authenticator",
      "result_type": {
        "name": "AuthenticatorBase",
        "type": "named"
      }
    },
    "replaceAuthenticatorMethod": {
      "request": {
        "url": "/api/v1/authenticators/{authenticatorId}/methods/{methodType}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authenticators.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authenticatorId": {
          "description": "`id` of the Authenticator",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authenticatorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/authenticators/{authenticatorId}/methods/{methodType}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "AuthenticatorMethodBaseInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "methodType": {
          "description": "Type of authenticator method",
          "type": {
            "name": "AuthenticatorMethodType",
            "type": "named"
          },
          "http": {
            "name": "methodType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace an Authenticator Method",
      "result_type": {
        "name": "AuthenticatorMethodBase",
        "type": "named"
      }
    },
    "replaceAuthenticatorSettings": {
      "request": {
        "url": "/attack-protection/api/v1/authenticator-settings",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /attack-protection/api/v1/authenticator-settings",
          "type": {
            "name": "AttackProtectionAuthenticatorSettingsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Authenticator Settings",
      "result_type": {
        "name": "AttackProtectionAuthenticatorSettings",
        "type": "named"
      }
    },
    "replaceAuthorizationServer": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/authorizationServers/{authServerId}",
          "type": {
            "name": "AuthorizationServerInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace an Authorization Server",
      "result_type": {
        "name": "AuthorizationServer",
        "type": "named"
      }
    },
    "replaceAuthorizationServerPolicy": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/authorizationServers/{authServerId}/policies/{policyId}",
          "type": {
            "name": "AuthorizationServerPolicyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Policy",
      "result_type": {
        "name": "AuthorizationServerPolicy",
        "type": "named"
      }
    },
    "replaceAuthorizationServerPolicyRule": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}",
          "type": {
            "name": "AuthorizationServerPolicyRuleRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Policy Rule",
      "result_type": {
        "name": "AuthorizationServerPolicyRule",
        "type": "named"
      }
    },
    "replaceBehaviorDetectionRule": {
      "request": {
        "url": "/api/v1/behaviors/{behaviorId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.behaviors.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "behaviorId": {
          "description": "id of the Behavior Detection Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "behaviorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/behaviors/{behaviorId}",
          "type": {
            "name": "BehaviorRuleInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace a Behavior Detection Rule",
      "result_type": {
        "name": "BehaviorRule",
        "type": "named"
      }
    },
    "replaceBrand": {
      "request": {
        "url": "/api/v1/brands/{brandId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}",
          "type": {
            "name": "BrandRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Brand",
      "result_type": {
        "name": "Brand",
        "type": "named"
      }
    },
    "replaceBrandTheme": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/themes/{themeId}",
          "type": {
            "name": "UpdateThemeRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Theme",
      "result_type": {
        "name": "ThemeResponse",
        "type": "named"
      }
    },
    "replaceCaptchaInstance": {
      "request": {
        "url": "/api/v1/captchas/{captchaId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/captchas/{captchaId}",
          "type": {
            "name": "CAPTCHAInstanceInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "captchaId": {
          "description": "The unique key used to identify your CAPTCHA instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "captchaId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a CAPTCHA Instance",
      "result_type": {
        "name": "CAPTCHAInstance",
        "type": "named"
      }
    },
    "replaceCustomDomain": {
      "request": {
        "url": "/api/v1/domains/{domainId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.domains.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/domains/{domainId}",
          "type": {
            "name": "UpdateDomainInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "domainId": {
          "description": "`id` of the Domain",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Custom Domain's Brand",
      "result_type": {
        "name": "DomainResponse",
        "type": "named"
      }
    },
    "replaceCustomizedErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error/customized",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/pages/error/customized",
          "type": {
            "name": "ErrorPageInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the Customized Error Page",
      "result_type": {
        "name": "ErrorPage",
        "type": "named"
      }
    },
    "replaceCustomizedSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/customized",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/pages/sign-in/customized",
          "type": {
            "name": "SignInPageInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the Customized Sign-in Page",
      "result_type": {
        "name": "SignInPage",
        "type": "named"
      }
    },
    "replaceDesktopMFARecoveryPinOrgSetting": {
      "request": {
        "url": "/device-access/api/v1/desktop-mfa/recovery-pin-settings",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /device-access/api/v1/desktop-mfa/recovery-pin-settings",
          "type": {
            "name": "DesktopMFARecoveryPinOrgSettingInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Desktop MFA Recovery PIN Org Setting",
      "result_type": {
        "name": "DesktopMFARecoveryPinOrgSetting",
        "type": "named"
      }
    },
    "replaceDeviceAssurancePolicy": {
      "request": {
        "url": "/api/v1/device-assurances/{deviceAssuranceId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.deviceAssurance.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/device-assurances/{deviceAssuranceId}",
          "type": {
            "name": "DeviceAssuranceInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "deviceAssuranceId": {
          "description": "Id of the Device Assurance Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceAssuranceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Device Assurance Policy",
      "result_type": {
        "name": "DeviceAssurance",
        "type": "named"
      }
    },
    "replaceEmailCustomization": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/templates/email/{templateName}/customizations/{customizationId}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailCustomizationInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "customizationId": {
          "description": "The ID of the email customization",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "customizationId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace an Email Customization",
      "result_type": {
        "name": "EmailCustomization",
        "type": "named"
      }
    },
    "replaceEmailDomain": {
      "request": {
        "url": "/api/v1/email-domains/{emailDomainId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailDomains.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/email-domains/{emailDomainId}",
          "type": {
            "name": "BaseEmailDomainInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "emailDomainId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailDomainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "expand": {
          "description": "Specifies additional metadata to be included in the response",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "ReplaceEmailDomainExpand",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "style": "form",
            "explode": false,
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "string"
                ]
              }
            }
          }
        }
      },
      "description": "Replace an Email Domain",
      "result_type": {
        "name": "BaseEmailDomain",
        "type": "named"
      }
    },
    "replaceEmailSettings": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/settings",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/templates/email/{templateName}/settings",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailSettingsInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the Email Template Settings",
      "result_type": {
        "name": "EmailSettings",
        "type": "named"
      }
    },
    "replaceEventHook": {
      "request": {
        "url": "/api/v1/eventHooks/{eventHookId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/eventHooks/{eventHookId}",
          "type": {
            "name": "EventHookInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "eventHookId": {
          "description": "`id` of the Event Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "eventHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace an Event Hook",
      "result_type": {
        "name": "EventHook",
        "type": "named"
      }
    },
    "replaceFirstPartyAppSettings": {
      "request": {
        "url": "/api/v1/first-party-app-settings/{appName}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appName": {
          "description": "The key name for the Okta app. Supported apps:   * Okta Admin Console (`admin-console`)",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Settings specific to the Okta Admin Console",
          "type": {
            "name": "AdminConsoleSettingsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Okta Application Settings",
      "result_type": {
        "name": "AdminConsoleSettings",
        "type": "named"
      }
    },
    "replaceGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/groups/{groupId}",
          "type": {
            "name": "ReplaceGroupBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Group",
      "result_type": {
        "name": "Group",
        "type": "named"
      }
    },
    "replaceGroupRule": {
      "request": {
        "url": "/api/v1/groups/rules/{groupRuleId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/groups/rules/{groupRuleId}",
          "type": {
            "name": "GroupRuleInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "groupRuleId": {
          "description": "The `id` of the group rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupRuleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Group rule",
      "result_type": {
        "name": "GroupRule",
        "type": "named"
      }
    },
    "replaceHookKey": {
      "request": {
        "url": "/api/v1/hook-keys/{id}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/hook-keys/{id}",
          "type": {
            "name": "KeyRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "ID of the Hook Key",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a key",
      "result_type": {
        "name": "DetailedHookKeyInstance",
        "type": "named"
      }
    },
    "replaceIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/idps/{idpId}",
          "type": {
            "name": "IdentityProviderInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace an Identity Provider",
      "result_type": {
        "name": "IdentityProvider",
        "type": "named"
      }
    },
    "replaceIdentityProviderKey": {
      "request": {
        "url": "/api/v1/idps/credentials/keys/{kid}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "A [JSON Web Key](https://tools.ietf.org/html/rfc7517) for a signature or encryption credential for an IdP",
          "type": {
            "name": "IdPKeyCredential",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "kid": {
          "description": "Unique `id` of the IdP Key Credential",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "kid",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace an IdP Key Credential",
      "result_type": {
        "name": "IdPKeyCredential",
        "type": "named"
      }
    },
    "replaceInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks/{inlineHookId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/inlineHooks/{inlineHookId}",
          "type": {
            "name": "InlineHookInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "inlineHookId": {
          "description": "`id` of the Inline Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "inlineHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace an Inline Hook",
      "result_type": {
        "name": "InlineHook",
        "type": "named"
      }
    },
    "replaceLogStream": {
      "request": {
        "url": "/api/v1/logStreams/{logStreamId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.logStreams.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/logStreams/{logStreamId}",
          "type": {
            "name": "LogStreamPutSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "logStreamId": {
          "description": "Unique identifier for the Log Stream",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "logStreamId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Log Stream",
      "result_type": {
        "name": "LogStream",
        "type": "named"
      }
    },
    "replaceNetworkZone": {
      "request": {
        "url": "/api/v1/zones/{zoneId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.networkZones.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/zones/{zoneId}",
          "type": {
            "name": "NetworkZoneInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "zoneId": {
          "description": "`id` of the Network Zone",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "zoneId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Network Zone",
      "result_type": {
        "name": "NetworkZone",
        "type": "named"
      }
    },
    "replaceOAuth2Claim": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/claims/{claimId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/authorizationServers/{authServerId}/claims/{claimId}",
          "type": {
            "name": "OAuth2ClaimInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "claimId": {
          "description": "`id` of Claim",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "claimId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a custom token Claim",
      "result_type": {
        "name": "OAuth2Claim",
        "type": "named"
      }
    },
    "replaceOAuth2Scope": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/scopes/{scopeId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}",
          "type": {
            "name": "OAuth2ScopeInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "scopeId": {
          "description": "`id` of Scope",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "scopeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Custom Token Scope",
      "result_type": {
        "name": "OAuth2Scope",
        "type": "named"
      }
    },
    "replaceOrgContactUser": {
      "request": {
        "url": "/api/v1/org/contacts/{contactType}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/org/contacts/{contactType}",
          "type": {
            "name": "OrgContactUserInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "contactType": {
          "type": {
            "name": "ReplaceOrgContactUserContactType",
            "type": "named"
          },
          "http": {
            "name": "contactType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the Contact Type User",
      "result_type": {
        "name": "OrgContactUser",
        "type": "named"
      }
    },
    "replaceOrgSettings": {
      "request": {
        "url": "/api/v1/org",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/org",
          "type": {
            "name": "OrgSettingInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Org General Settings",
      "result_type": {
        "name": "OrgSetting",
        "type": "named"
      }
    },
    "replacePolicy": {
      "request": {
        "url": "/api/v1/policies/{policyId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/policies/{policyId}",
          "type": {
            "name": "PolicyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Policy",
      "result_type": {
        "name": "Policy",
        "type": "named"
      }
    },
    "replacePolicyRule": {
      "request": {
        "url": "/api/v1/policies/{policyId}/rules/{ruleId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.policies.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/policies/{policyId}/rules/{ruleId}",
          "type": {
            "name": "PolicyRuleInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "policyId": {
          "description": "`id` of the Policy",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "policyId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "ruleId": {
          "description": "`id` of the Policy Rule",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "ruleId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Policy Rule",
      "result_type": {
        "name": "PolicyRule",
        "type": "named"
      }
    },
    "replacePreviewErrorPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/error/preview",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/pages/error/preview",
          "type": {
            "name": "ErrorPageInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the Preview Error Page",
      "result_type": {
        "name": "ErrorPage",
        "type": "named"
      }
    },
    "replacePreviewSignInPage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-in/preview",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/pages/sign-in/preview",
          "type": {
            "name": "SignInPageInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the Preview Sign-in Page",
      "result_type": {
        "name": "SignInPage",
        "type": "named"
      }
    },
    "replacePrincipalRateLimitEntity": {
      "request": {
        "url": "/api/v1/principal-rate-limits/{principalRateLimitId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.principalRateLimits.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/principal-rate-limits/{principalRateLimitId}",
          "type": {
            "name": "PrincipalRateLimitEntityInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "principalRateLimitId": {
          "description": "id of the Principal Rate Limit",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "principalRateLimitId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Principal Rate Limit",
      "result_type": {
        "name": "PrincipalRateLimitEntity",
        "type": "named"
      }
    },
    "replacePushProvider": {
      "request": {
        "url": "/api/v1/push-providers/{pushProviderId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.pushProviders.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/push-providers/{pushProviderId}",
          "type": {
            "name": "PushProviderInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "pushProviderId": {
          "description": "Id of the push provider",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "pushProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Push Provider",
      "result_type": {
        "name": "PushProvider",
        "type": "named"
      }
    },
    "replaceRateLimitSettingsAdminNotifications": {
      "request": {
        "url": "/api/v1/rate-limit-settings/admin-notifications",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.rateLimits.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/rate-limit-settings/admin-notifications",
          "type": {
            "name": "RateLimitAdminNotificationsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Rate Limit Admin Notification Settings",
      "result_type": {
        "name": "RateLimitAdminNotifications",
        "type": "named"
      }
    },
    "replaceRateLimitSettingsPerClient": {
      "request": {
        "url": "/api/v1/rate-limit-settings/per-client",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.rateLimits.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/rate-limit-settings/per-client",
          "type": {
            "name": "PerClientRateLimitSettingsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Per-Client Rate Limit Settings",
      "result_type": {
        "name": "PerClientRateLimitSettings",
        "type": "named"
      }
    },
    "replaceRateLimitSettingsWarningThreshold": {
      "request": {
        "url": "/api/v1/rate-limit-settings/warning-threshold",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.rateLimits.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/rate-limit-settings/warning-threshold",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "RateLimitWarningThresholdRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Rate Limit Warning Threshold Percentage",
      "result_type": {
        "name": "RateLimitWarningThresholdResponse",
        "type": "named"
      }
    },
    "replaceRealm": {
      "request": {
        "url": "/api/v1/realms/{realmId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realms.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/realms/{realmId}",
          "type": {
            "name": "UpdateRealmRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "realmId": {
          "description": "`id` of the Realm",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "realmId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the realm profile",
      "result_type": {
        "name": "Realm",
        "type": "named"
      }
    },
    "replaceRealmAssignment": {
      "request": {
        "url": "/api/v1/realm-assignments/{assignmentId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.realmAssignments.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "assignmentId": {
          "description": "`id` of the Realm Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "assignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PUT /api/v1/realm-assignments/{assignmentId}",
          "type": {
            "name": "UpdateRealmAssignmentRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace a Realm Assignment",
      "result_type": {
        "name": "RealmAssignment",
        "type": "named"
      }
    },
    "replaceResourceSet": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/iam/resource-sets/{resourceSetIdOrLabel}",
          "type": {
            "name": "ResourceSetInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Resource Set",
      "result_type": {
        "name": "ResourceSet",
        "type": "named"
      }
    },
    "replaceRiskProvider": {
      "request": {
        "url": "/api/v1/risk/providers/{riskProviderId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.riskProviders.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/risk/providers/{riskProviderId}",
          "type": {
            "name": "RiskProviderInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "riskProviderId": {
          "description": "`id` of the Risk Provider object",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "riskProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Risk Provider",
      "result_type": {
        "name": "RiskProvider",
        "type": "named"
      }
    },
    "replaceRole": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/iam/roles/{roleIdOrLabel}",
          "type": {
            "name": "UpdateIamRoleRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Custom Role",
      "result_type": {
        "name": "IamRole",
        "type": "named"
      }
    },
    "replaceRolePermission": {
      "request": {
        "url": "/api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/iam/roles/{roleIdOrLabel}/permissions/{permissionType}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "CreateUpdateIamRolePermissionRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "permissionType": {
          "description": "An okta permission type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "permissionType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Custom Role Permission",
      "result_type": {
        "name": "Permission",
        "type": "named"
      }
    },
    "replaceSecurityEventsProviderInstance": {
      "request": {
        "url": "/api/v1/security-events-providers/{securityEventProviderId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.securityEventsProviders.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The request schema for creating or updating a Security Events Provider. The `settings` must match one of the schemas.",
          "type": {
            "name": "SecurityEventsProviderRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "securityEventProviderId": {
          "description": "`id` of the Security Events Provider instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "securityEventProviderId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Security Events Provider",
      "result_type": {
        "name": "SecurityEventsProviderResponse",
        "type": "named"
      }
    },
    "replaceSignOutPageSettings": {
      "request": {
        "url": "/api/v1/brands/{brandId}/pages/sign-out/customized",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/brands/{brandId}/pages/sign-out/customized",
          "type": {
            "name": "HostedPageInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace the Sign-out Page Settings",
      "result_type": {
        "name": "HostedPage",
        "type": "named"
      }
    },
    "replaceSmsTemplate": {
      "request": {
        "url": "/api/v1/templates/sms/{templateId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/templates/sms/{templateId}",
          "type": {
            "name": "SmsTemplateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "templateId": {
          "description": "`id` of the Template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace an SMS Template",
      "result_type": {
        "name": "SmsTemplate",
        "type": "named"
      }
    },
    "replaceSsfStream": {
      "request": {
        "url": "/api/v1/ssf/stream",
        "method": "put",
        "security": [
          {
            "oauth2": [
              "ssf.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/ssf/stream",
          "type": {
            "name": "StreamConfigurationInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace an SSF Stream",
      "result_type": {
        "name": "StreamConfiguration",
        "type": "named"
      }
    },
    "replaceTrustedOrigin": {
      "request": {
        "url": "/api/v1/trustedOrigins/{trustedOriginId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.trustedOrigins.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/trustedOrigins/{trustedOriginId}",
          "type": {
            "name": "TrustedOriginInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "trustedOriginId": {
          "description": "`id` of the Trusted Origin",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "trustedOriginId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a Trusted Origin",
      "result_type": {
        "name": "TrustedOrigin",
        "type": "named"
      }
    },
    "replaceUISchemas": {
      "request": {
        "url": "/api/v1/meta/uischemas/{id}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.uischemas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The updated request body properties",
          "type": {
            "name": "UpdateUISchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "The unique ID of the UI Schema",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a UI Schema",
      "result_type": {
        "name": "UISchemasResponseObject",
        "type": "named"
      }
    },
    "replaceUser": {
      "request": {
        "url": "/api/v1/users/{id}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/users/{id}",
          "type": {
            "name": "UpdateUserRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "`id`, `login`, or `login shortname` (as long as it is unambiguous) of user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "strict": {
          "description": "If `true`, validates against minimum age and history password policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "strict",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Replace a User",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "replaceUserLockoutSettings": {
      "request": {
        "url": "/attack-protection/api/v1/user-lockout-settings",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /attack-protection/api/v1/user-lockout-settings",
          "type": {
            "name": "UserLockoutSettingsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the User Lockout Settings",
      "result_type": {
        "name": "UserLockoutSettings",
        "type": "named"
      }
    },
    "replaceUserType": {
      "request": {
        "url": "/api/v1/meta/types/user/{typeId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.userTypes.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/meta/types/user/{typeId}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserTypePutRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "typeId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "typeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Replace a User Type",
      "result_type": {
        "name": "UserType",
        "type": "named"
      }
    },
    "replacesOrgCaptchaSettings": {
      "request": {
        "url": "/api/v1/org/captcha",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PUT /api/v1/org/captcha",
          "type": {
            "name": "OrgCAPTCHASettingsInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Replace the Org-wide CAPTCHA Settings",
      "result_type": {
        "name": "OrgCAPTCHASettings",
        "type": "named"
      }
    },
    "resendEnrollFactor": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/resend",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/users/{userId}/factors/{factorId}/resend",
          "type": {
            "name": "ResendUserFactorInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Resend a Factor enrollment",
      "result_type": {
        "name": "ResendUserFactor",
        "type": "named"
      }
    },
    "resetPassword": {
      "request": {
        "url": "/api/v1/users/{userId}/lifecycle/reset_password",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "revokeSessions": {
          "description": "Revokes all User sessions, except for the current session, if set to `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "revokeSessions",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "sendEmail": {
          "type": {
            "name": "Boolean",
            "type": "named"
          },
          "http": {
            "name": "sendEmail",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Reset password",
      "result_type": {
        "name": "ResetPasswordToken",
        "type": "named"
      }
    },
    "resumeAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}/resume",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Resume an Agent Pool update",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "retryAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}/retry",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Retry an Agent Pool update",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "revokeAerialConsent": {
      "request": {
        "url": "/api/v1/org/privacy/aerial/revoke",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/org/privacy/aerial/revoke",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgAerialConsentInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Revoke Okta Aerial access to your Org",
      "result_type": {
        "name": "OrgAerialConsentRevoked",
        "type": "named"
      }
    },
    "revokeApiToken": {
      "request": {
        "url": "/api/v1/api-tokens/{apiTokenId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apiTokens.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiTokenId": {
          "description": "id of the API Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiTokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke an API Token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeCsrForIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/credentials/csrs/{idpCsrId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpCsrId": {
          "description": "`id` of the IdP CSR",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpCsrId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke a Certificate Signing Request",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeCsrFromApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/credentials/csrs/{csrId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "csrId": {
          "description": "`id` of the CSR",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "csrId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke a Certificate Signing Request",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeCurrentApiToken": {
      "request": {
        "url": "/api/v1/api-tokens/current",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Revoke the Current API Token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeGrantsForUserAndClient": {
      "request": {
        "url": "/api/v1/users/{userId}/clients/{clientId}/grants",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke all Grants for a Client",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeOAuth2TokenForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/tokens/{tokenId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenId": {
          "description": "`id` of Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke an Application Token",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeOAuth2TokensForApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/tokens",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke all Application Tokens",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeOktaSupport": {
      "request": {
        "url": "/api/v1/org/privacy/oktaSupport/revoke",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Revoke Okta Support Access",
      "result_type": {
        "name": "OrgOktaSupportSettingsObj",
        "type": "named"
      }
    },
    "revokeRefreshTokenForAuthorizationServerAndClient": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenId": {
          "description": "`id` of Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke a refresh token for a Client",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeRefreshTokensForAuthorizationServerAndClient": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke all refresh tokens for a Client",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeScopeConsentGrant": {
      "request": {
        "url": "/api/v1/apps/{appId}/grants/{grantId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.appGrants.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "grantId": {
          "description": "Grant ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "grantId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke an app Grant",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeSession": {
      "request": {
        "url": "/api/v1/sessions/{sessionId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.sessions.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "sessionId": {
          "description": "`id` of the Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke a Session",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeTokenForUserAndClient": {
      "request": {
        "url": "/api/v1/users/{userId}/clients/{clientId}/tokens/{tokenId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenId": {
          "description": "`id` of Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "tokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke a Token for a Client",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeTokensForUserAndClient": {
      "request": {
        "url": "/api/v1/users/{userId}/clients/{clientId}/tokens",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "clientId": {
          "description": "`client_id` of the app",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "clientId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke all Refresh Tokens for a Client",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeUserGrant": {
      "request": {
        "url": "/api/v1/users/{userId}/grants/{grantId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "grantId": {
          "description": "Grant ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "grantId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke a User Grant",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeUserGrants": {
      "request": {
        "url": "/api/v1/users/{userId}/grants",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke all User Grants",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "revokeUserSessions": {
      "request": {
        "url": "/api/v1/users/{userId}/sessions",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "oauthTokens": {
          "description": "Revoke issued OpenID Connect and OAuth refresh and access tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "oauthTokens",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Revoke all User sessions",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "rotateAuthorizationServerKeys": {
      "request": {
        "url": "/api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.authorizationServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "authServerId": {
          "description": "`id` of the Authorization Server",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "authServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate",
          "type": {
            "name": "JwkUseInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Rotate all Credential Keys",
      "result_type": {
        "element_type": {
          "name": "AuthorizationServerJsonWebKey",
          "type": "named"
        },
        "type": "array"
      }
    },
    "sendPin": {
      "request": {
        "url": "/webauthn-registration/api/v1/send-pin",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Pin Request",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "PinRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Send a PIN to user",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "sendRiskEvents": {
      "request": {
        "url": "/api/v1/risk/events/ip",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.riskEvents.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/risk/events/ip",
          "type": {
            "element_type": {
              "name": "RiskEventInput",
              "type": "named"
            },
            "type": "array"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "object"
                ]
              }
            }
          }
        }
      },
      "description": "Send multiple Risk Events",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "sendTestEmail": {
      "request": {
        "url": "/api/v1/brands/{brandId}/templates/email/{templateName}/test",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.read"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "language": {
          "description": "The language to use for the email. Defaults to the current user's language if unspecified.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "language",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateName": {
          "description": "The name of the email template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Send a Test Email",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "setOrgHideOktaUIFooter": {
      "request": {
        "url": "/api/v1/org/preferences/hideEndUserFooter",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Set the Hide Dashboard Footer Preference",
      "result_type": {
        "name": "OrgPreferences",
        "type": "named"
      }
    },
    "setOrgShowOktaUIFooter": {
      "request": {
        "url": "/api/v1/org/preferences/showEndUserFooter",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {},
      "description": "Set the Show Dashboard Footer Preference",
      "result_type": {
        "name": "OrgPreferences",
        "type": "named"
      }
    },
    "startImportFromIdentitySource": {
      "request": {
        "url": "/api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/start-import",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.identitySources.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "identitySourceId": {
          "description": "The ID of the Identity Source for which the session is created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identitySourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sessionId": {
          "description": "The ID of the Identity Source Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Start the import from the Identity Source",
      "result_type": {
        "name": "IdentitySourceSession",
        "type": "named"
      }
    },
    "stopAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}/stop",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Stop an Agent Pool update",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "subscribeByNotificationTypeRole": {
      "request": {
        "url": "/api/v1/roles/{roleRef}/subscriptions/{notificationType}/subscribe",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "notificationType": {
          "type": {
            "name": "NotificationType",
            "type": "named"
          },
          "http": {
            "name": "notificationType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleRef": {
          "description": "A reference to an existing role. Standard roles require a `roleType`, while Custom Roles require a `roleId`. See [Standard Roles](/openapi/okta-management/guides/roles/#standard-roles).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleRef",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Subscribe a Role to a Specific Notification Type",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "subscribeByNotificationTypeUser": {
      "request": {
        "url": "/api/v1/users/{userId}/subscriptions/{notificationType}/subscribe",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "notificationType": {
          "type": {
            "name": "NotificationType",
            "type": "named"
          },
          "http": {
            "name": "notificationType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Subscribe a User to a Specific Notification Type",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "suspendDevice": {
      "request": {
        "url": "/api/v1/devices/{deviceId}/lifecycle/suspend",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceId": {
          "description": "`id` of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Suspend a Device",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "testEmailServer": {
      "request": {
        "url": "/api/v1/email-servers/{emailServerId}/test",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/email-servers/{emailServerId}/test",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailTestAddressesInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "emailServerId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Test an SMTP Server configuration",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignAppInstanceTargetFromAdminRoleForUser": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}/{appId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign an Admin Role Application Instance Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignAppInstanceTargetToAppAdminRoleForGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}/{appId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign an Group Role Application Instance Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignAppTargetFromAppAdminRoleForUser": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign an Admin Role Application Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignAppTargetToAdminRoleForGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/catalog/apps/{appName}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appName": {
          "description": "Application name for the app type",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Group Role Application Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignApplicationFromGroup": {
      "request": {
        "url": "/api/v1/apps/{appId}/groups/{groupId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign an Application Group",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignGroupTargetFromGroupAdminRole": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}/targets/groups/{targetGroupId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "targetGroupId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "targetGroupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Group Role Group Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignGroupTargetFromUserAdminRole": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}/targets/groups/{groupId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign an Admin Role Group Target",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignMemberFromBinding": {
      "request": {
        "url": "/api/v1/iam/resource-sets/{resourceSetIdOrLabel}/bindings/{roleIdOrLabel}/members/{memberId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "memberId": {
          "description": "`id` of the Member",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "memberId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "resourceSetIdOrLabel": {
          "description": "`id` or `label` the Resource Set",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "resourceSetIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleIdOrLabel": {
          "description": "`id` or `label` of the Role",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleIdOrLabel",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Role Resource Set Bindiing Member",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignRoleFromGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/roles/{roleAssignmentId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a Group Role",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignRoleFromUser": {
      "request": {
        "url": "/api/v1/users/{userId}/roles/{roleAssignmentId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "roleAssignmentId": {
          "description": "The `id` of the Role Assignment",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleAssignmentId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a User Role",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignUserFromApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/users/{userId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sendEmail": {
          "description": "Sends a deactivation email to the administrator if `true`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "sendEmail",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign an Application User",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unassignUserFromGroup": {
      "request": {
        "url": "/api/v1/groups/{groupId}/users/{userId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.groups.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unassign a User from a Group",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unenrollFactor": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "removeRecoveryEnrollment": {
          "description": "If `true`, removes the phone number as both a recovery method and a Factor. This parameter is only used for the `sms` and `call` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "removeRecoveryEnrollment",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unenroll a Factor",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unlinkUserFromIdentityProvider": {
      "request": {
        "url": "/api/v1/idps/{idpId}/users/{userId}",
        "method": "delete",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.idps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "idpId": {
          "description": "`id` of IdP",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "idpId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unlink a User from IdP",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "unsubscribeByNotificationTypeRole": {
      "request": {
        "url": "/api/v1/roles/{roleRef}/subscriptions/{notificationType}/unsubscribe",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.roles.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "notificationType": {
          "type": {
            "name": "NotificationType",
            "type": "named"
          },
          "http": {
            "name": "notificationType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "roleRef": {
          "description": "A reference to an existing role. Standard roles require a `roleType`, while Custom Roles require a `roleId`. See [Standard Roles](/openapi/okta-management/guides/roles/#standard-roles).",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "roleRef",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unsubscribe a Role from a Specific Notification Type",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "unsubscribeByNotificationTypeUser": {
      "request": {
        "url": "/api/v1/users/{userId}/subscriptions/{notificationType}/unsubscribe",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "notificationType": {
          "type": {
            "name": "NotificationType",
            "type": "named"
          },
          "http": {
            "name": "notificationType",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unsubscribe a User from a Specific Notification Type",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "unsuspendDevice": {
      "request": {
        "url": "/api/v1/devices/{deviceId}/lifecycle/unsuspend",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.devices.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "deviceId": {
          "description": "`id` of the device",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "deviceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Unsuspend a Device",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "updateADGroupMembership": {
      "request": {
        "url": "/api/v1/directories/{appInstanceId}/groups/modify",
        "method": "post",
        "security": [
          {
            "oauth2": [
              "okta.directories.groups.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appInstanceId": {
          "description": "ID of the AD AppInstance in Okta",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appInstanceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Details about the AD Group membership update",
          "type": {
            "name": "AgentActionInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update an AD Group membership",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "updateAgentPoolsUpdate": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/{updateId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Various information about agent auto update configuration",
          "type": {
            "name": "AgentPoolUpdateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "updateId": {
          "description": "Id of the update",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "updateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an Agent Pool update by id",
      "result_type": {
        "name": "AgentPoolUpdate",
        "type": "named"
      }
    },
    "updateAgentPoolsUpdateSettings": {
      "request": {
        "url": "/api/v1/agentPools/{poolId}/updates/settings",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.agentPools.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Setting for auto-update",
          "type": {
            "name": "AgentPoolUpdateSettingInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "poolId": {
          "description": "Id of the agent pool for which the settings will apply",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "poolId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an Agent Pool update settings",
      "result_type": {
        "name": "AgentPoolUpdateSetting",
        "type": "named"
      }
    },
    "updateApplicationUserProfile": {
      "request": {
        "url": "/api/v1/meta/schemas/apps/{appId}/default",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.schemas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/meta/schemas/apps/{appId}/default",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UserSchemaInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update the App User Profile Schema for an App",
      "result_type": {
        "name": "UserSchema",
        "type": "named"
      }
    },
    "updateApplicationUser_AppUserCredentialsRequestPayload": {
      "request": {
        "url": "/api/v1/apps/{appId}/users/{userId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Updates the assigned user credentials",
          "type": {
            "name": "AppUserCredentialsRequestPayloadInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an Application User",
      "result_type": {
        "name": "AppUser",
        "type": "named"
      }
    },
    "updateApplicationUser_AppUserProfileRequestPayload": {
      "request": {
        "url": "/api/v1/apps/{appId}/users/{userId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "**Note:** The Okta API currently doesn't support entity tags for conditional updates. As long as you're the only user updating the the user profile, Okta recommends you fetch the most recent profile with [Retrieve an Application User](/openapi/okta-management/management/tag/ApplicationUsers/#tag/ApplicationUsers/operation/getApplicationUser), apply your profile update, and then `POST` back the updated profile.",
          "type": {
            "name": "AppUserProfileRequestPayloadInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an Application User",
      "result_type": {
        "name": "AppUser",
        "type": "named"
      }
    },
    "updateCaptchaInstance": {
      "request": {
        "url": "/api/v1/captchas/{captchaId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.captchas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/captchas/{captchaId}",
          "type": {
            "name": "CAPTCHAInstanceInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "captchaId": {
          "description": "The unique key used to identify your CAPTCHA instance",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "captchaId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a CAPTCHA Instance",
      "result_type": {
        "name": "CAPTCHAInstance",
        "type": "named"
      }
    },
    "updateConfiguration": {
      "request": {
        "url": "/api/v1/threats/configuration",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.threatInsights.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/threats/configuration",
          "type": {
            "name": "ThreatInsightConfigurationInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update the ThreatInsight Configuration",
      "result_type": {
        "name": "ThreatInsightConfiguration",
        "type": "named"
      }
    },
    "updateDefaultProvisioningConnectionForApplication_ProvisioningConnectionOauthRequest": {
      "request": {
        "url": "/api/v1/apps/{appId}/connections/default",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "activate": {
          "description": "Activates the Provisioning Connection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "OAuth 2.0-based Provisioning Connection request",
          "type": {
            "name": "ProvisioningConnectionOauthRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        }
      },
      "description": "Update the default Provisioning Connection",
      "result_type": {
        "name": "ProvisioningConnectionResponse",
        "type": "named"
      }
    },
    "updateDefaultProvisioningConnectionForApplication_ProvisioningConnectionTokenRequest": {
      "request": {
        "url": "/api/v1/apps/{appId}/connections/default",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "activate": {
          "description": "Activates the Provisioning Connection",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "activate",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Token-based Provisioning Connection request",
          "type": {
            "name": "ProvisioningConnectionTokenRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        }
      },
      "description": "Update the default Provisioning Connection",
      "result_type": {
        "name": "ProvisioningConnectionResponse",
        "type": "named"
      }
    },
    "updateEmailServer": {
      "request": {
        "url": "/api/v1/email-servers/{emailServerId}",
        "method": "patch",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailServers.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /api/v1/email-servers/{emailServerId}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "EmailServerRequestInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "emailServerId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailServerId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an SMTP Server configuration",
      "result_type": {
        "name": "EmailServerResponse",
        "type": "named"
      }
    },
    "updateFeatureForApplication_CapabilitiesInboundProvisioningObject": {
      "request": {
        "url": "/api/v1/apps/{appId}/features/{featureName}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Defines the configuration for the INBOUND_PROVISIONING feature",
          "type": {
            "name": "CapabilitiesInboundProvisioningObjectInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "featureName": {
          "description": "Name of the Feature",
          "type": {
            "name": "ApplicationFeatureType",
            "type": "named"
          },
          "http": {
            "name": "featureName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a Feature",
      "result_type": {
        "name": "ApplicationFeature",
        "type": "named"
      }
    },
    "updateFeatureForApplication_CapabilitiesObject": {
      "request": {
        "url": "/api/v1/apps/{appId}/features/{featureName}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Defines the configurations for the USER_PROVISIONING feature",
          "type": {
            "name": "CapabilitiesObjectInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "featureName": {
          "description": "Name of the Feature",
          "type": {
            "name": "ApplicationFeatureType",
            "type": "named"
          },
          "http": {
            "name": "featureName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a Feature",
      "result_type": {
        "name": "ApplicationFeature",
        "type": "named"
      }
    },
    "updateFeatureLifecycle": {
      "request": {
        "url": "/api/v1/features/{featureId}/{lifecycle}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.features.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "featureId": {
          "description": "`id` of the feature",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "featureId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "lifecycle": {
          "description": "Whether to `ENABLE` or `DISABLE` the feature",
          "type": {
            "name": "FeatureLifecycle",
            "type": "named"
          },
          "http": {
            "name": "lifecycle",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "mode": {
          "description": "Indicates if you want to force enable or disable a feature. Supported value is `force`.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "mode",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a Feature lifecycle",
      "result_type": {
        "name": "Feature",
        "type": "named"
      }
    },
    "updateGroupAssignmentToApplication": {
      "request": {
        "url": "/api/v1/apps/{appId}/groups/{groupId}",
        "method": "patch",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of PATCH /api/v1/apps/{appId}/groups/{groupId}",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "element_type": {
                "name": "JsonPatchOperationInput",
                "type": "named"
              },
              "type": "array"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "array"
              ],
              "items": {
                "type": [
                  "object"
                ]
              }
            }
          }
        },
        "groupId": {
          "description": "The `id` of the group",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "groupId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an Application Group",
      "result_type": {
        "name": "ApplicationGroupAssignment",
        "type": "named"
      }
    },
    "updateGroupSchema": {
      "request": {
        "url": "/api/v1/meta/schemas/group/default",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.schemas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/meta/schemas/group/default",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "GroupSchemaInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update the Group Profile Schema",
      "result_type": {
        "name": "GroupSchema",
        "type": "named"
      }
    },
    "updateInlineHook": {
      "request": {
        "url": "/api/v1/inlineHooks/{inlineHookId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.inlineHooks.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/inlineHooks/{inlineHookId}",
          "type": {
            "name": "InlineHookInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "inlineHookId": {
          "description": "`id` of the Inline Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "inlineHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an Inline Hook",
      "result_type": {
        "name": "InlineHook",
        "type": "named"
      }
    },
    "updateOrgSettings": {
      "request": {
        "url": "/api/v1/org",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/org",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "OrgSettingInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update the Org General Settings",
      "result_type": {
        "name": "OrgSetting",
        "type": "named"
      }
    },
    "updateProfileMapping": {
      "request": {
        "url": "/api/v1/mappings/{mappingId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.profileMappings.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The updated request body properties",
          "type": {
            "name": "ProfileMappingRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "mappingId": {
          "description": "`id` of the Mapping",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "mappingId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a Profile Mapping",
      "result_type": {
        "name": "ProfileMapping",
        "type": "named"
      }
    },
    "updateSmsTemplate": {
      "request": {
        "url": "/api/v1/templates/sms/{templateId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.templates.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/templates/sms/{templateId}",
          "type": {
            "name": "SmsTemplateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "templateId": {
          "description": "`id` of the Template",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "templateId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update an SMS Template",
      "result_type": {
        "name": "SmsTemplate",
        "type": "named"
      }
    },
    "updateSsfStream": {
      "request": {
        "url": "/api/v1/ssf/stream",
        "method": "patch",
        "security": [
          {
            "oauth2": [
              "ssf.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of PATCH /api/v1/ssf/stream",
          "type": {
            "name": "StreamConfigurationInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update an SSF Stream",
      "result_type": {
        "name": "StreamConfiguration",
        "type": "named"
      }
    },
    "updateThirdPartyAdminSetting": {
      "request": {
        "url": "/api/v1/org/orgSettings/thirdPartyAdminSetting",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.orgs.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The third-party admin setting",
          "type": {
            "name": "ThirdPartyAdminSettingInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Update the Org Third-Party Admin Setting",
      "result_type": {
        "name": "ThirdPartyAdminSetting",
        "type": "named"
      }
    },
    "updateUser": {
      "request": {
        "url": "/api/v1/users/{id}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/users/{id}",
          "type": {
            "name": "UpdateUserRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "id": {
          "description": "`id`, `login`, or `login shortname` (as long as it is unambiguous) of user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "id",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "strict": {
          "description": "If true, validates against minimum age and history password policy",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "strict",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        }
      },
      "description": "Update a User",
      "result_type": {
        "name": "User",
        "type": "named"
      }
    },
    "updateUserProfile": {
      "request": {
        "url": "/api/v1/meta/schemas/user/{schemaId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.schemas.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/meta/schemas/user/{schemaId}",
          "type": {
            "name": "UserSchemaInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "schemaId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "schemaId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a User Schema",
      "result_type": {
        "name": "UserSchema",
        "type": "named"
      }
    },
    "updateUserType": {
      "request": {
        "url": "/api/v1/meta/types/user/{typeId}",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.userTypes.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/meta/types/user/{typeId}",
          "type": {
            "name": "UserTypePostRequestInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "typeId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "typeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Update a User Type",
      "result_type": {
        "name": "UserType",
        "type": "named"
      }
    },
    "uploadApplicationLogo": {
      "request": {
        "url": "/api/v1/apps/{appId}/logo",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/apps/{appId}/logo",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadApplicationLogoBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Upload an application Logo",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "uploadBrandThemeBackgroundImage": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}/background-image",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The file must be in PNG, JPG, or GIF format and less than 2 MB in size.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadBrandThemeBackgroundImageBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload the Background Image",
      "result_type": {
        "name": "ImageUploadResponse",
        "type": "named"
      }
    },
    "uploadBrandThemeFavicon": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}/favicon",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The file must be in PNG or ICO format and have a 1:1 ratio with a maximum dimension of 512 x 512",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadBrandThemeFaviconBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload the Favicon",
      "result_type": {
        "name": "ImageUploadResponse",
        "type": "named"
      }
    },
    "uploadBrandThemeLogo": {
      "request": {
        "url": "/api/v1/brands/{brandId}/themes/{themeId}/logo",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.brands.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "The file must be in PNG, JPG, or GIF format and less than 100kB in size. For best results use landscape orientation, a transparent background, and a minimum size of 300px by 50px to prevent upscaling.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadBrandThemeLogoBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "brandId": {
          "description": "The ID of the brand",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "brandId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "themeId": {
          "description": "The ID of the theme",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "themeId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload the Logo",
      "result_type": {
        "name": "ImageUploadResponse",
        "type": "named"
      }
    },
    "uploadIdentitySourceDataForDelete": {
      "request": {
        "url": "/api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/bulk-delete",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.identitySources.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/bulk-delete",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BulkDeleteRequestBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "identitySourceId": {
          "description": "The ID of the Identity Source for which the session is created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identitySourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sessionId": {
          "description": "The ID of the Identity Source Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload the data to be deleted in Okta",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "uploadIdentitySourceDataForUpsert": {
      "request": {
        "url": "/api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/bulk-upsert",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.identitySources.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/identity-sources/{identitySourceId}/sessions/{sessionId}/bulk-upsert",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "BulkUpsertRequestBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "identitySourceId": {
          "description": "The ID of the Identity Source for which the session is created",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "identitySourceId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sessionId": {
          "description": "The ID of the Identity Source Session",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "sessionId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload the data to be upserted in Okta",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "uploadOrgLogo": {
      "request": {
        "url": "/api/v1/org/logo",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "multipart/form-data"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Request body of POST /api/v1/org/logo",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadOrgLogoBodyInput",
              "type": "named"
            }
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Upload the Org Logo",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "JSON",
          "type": "named"
        }
      }
    },
    "uploadYubikeyOtpTokenSeed": {
      "request": {
        "url": "/api/v1/org/factors/yubikey_token/tokens",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "after": {
          "description": "Specifies the pagination cursor for the next page of tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "after",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Request body of POST /api/v1/org/factors/yubikey_token/tokens",
          "type": {
            "name": "UploadYubikeyOtpTokenSeedBodyInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "expand": {
          "description": "Embeds the [User](/openapi/okta-management/management/tag/User/) resource if the YubiKey Token is assigned to a user and `expand` is set to `user`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "expand",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "filter": {
          "description": "The expression used to filter tokens",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadYubikeyOtpTokenSeedFilter",
              "type": "named"
            }
          },
          "http": {
            "name": "filter",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "forDownload": {
          "description": "Returns tokens in a CSV to download instead of in the response. When you use this query parameter, the `limit` default changes to 1000.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Boolean",
              "type": "named"
            }
          },
          "http": {
            "name": "forDownload",
            "in": "query",
            "schema": {
              "type": [
                "boolean"
              ]
            }
          }
        },
        "limit": {
          "description": "Specifies the number of results per page",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "maximum": 200
            }
          }
        },
        "sortBy": {
          "description": "The value of how the tokens are sorted",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadYubikeyOtpTokenSeedSortBy",
              "type": "named"
            }
          },
          "http": {
            "name": "sortBy",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "sortOrder": {
          "description": "Specifies the sort order, either `ASC` or `DESC`",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "UploadYubikeyOtpTokenSeedSortOrder",
              "type": "named"
            }
          },
          "http": {
            "name": "sortOrder",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upload a YubiKey OTP Seed",
      "result_type": {
        "name": "UserFactorYubikeyOtpToken",
        "type": "named"
      }
    },
    "upsertApiToken": {
      "request": {
        "url": "/api/v1/api-tokens/{apiTokenId}",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apiTokens.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "apiTokenId": {
          "description": "id of the API Token",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "apiTokenId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "An API Token Update Object for an Okta user. This token is NOT scoped any further and can be used for any API that the user has permissions to call.",
          "type": {
            "name": "ApiTokenUpdateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        }
      },
      "description": "Upsert an API Token Network Condition",
      "result_type": {
        "name": "ApiToken",
        "type": "named"
      }
    },
    "upsertCertificate": {
      "request": {
        "url": "/api/v1/domains/{domainId}/certificate",
        "method": "put",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.domains.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "body": {
          "description": "Defines the properties of the certificate",
          "type": {
            "name": "DomainCertificateInput",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {
              "type": [
                "object"
              ]
            }
          }
        },
        "domainId": {
          "description": "`id` of the Domain",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Upsert the Custom Domain's Certificate",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    },
    "verifyDomain": {
      "request": {
        "url": "/api/v1/domains/{domainId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.domains.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "domainId": {
          "description": "`id` of the Domain",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "domainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Custom Domain",
      "result_type": {
        "name": "DomainResponse",
        "type": "named"
      }
    },
    "verifyEmailDomain": {
      "request": {
        "url": "/api/v1/email-domains/{emailDomainId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.emailDomains.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "emailDomainId": {
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "emailDomainId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify an Email Domain",
      "result_type": {
        "name": "BaseEmailDomain",
        "type": "named"
      }
    },
    "verifyEventHook": {
      "request": {
        "url": "/api/v1/eventHooks/{eventHookId}/lifecycle/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.eventHooks.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "eventHookId": {
          "description": "`id` of the Event Hook",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "eventHookId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify an Event Hook",
      "result_type": {
        "name": "EventHook",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest0": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an OTP sent by a `call` Factor challenge. If you omit `passCode` in the request, a new OTP is sent to the phone.",
          "type": {
            "name": "UserFactorVerifyRequest0Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest1": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an OTP sent by an `sms` Factor challenge. If you omit `passCode` in the request, a new OTP is sent to the phone.",
          "type": {
            "name": "UserFactorVerifyRequest1Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest2": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an OTP sent by an `email` Factor challenge. If you omit `passCode` in the request, a new OTP is sent to the phone.",
          "type": {
            "name": "UserFactorVerifyRequest2Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest3": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an answer to a `question` Factor",
          "type": {
            "name": "UserFactorVerifyRequest3Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest4": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an OTP for a `token:software:totp` Factor",
          "type": {
            "name": "UserFactorVerifyRequest4Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest5": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an OTP for a `token:hotp` Factor",
          "type": {
            "name": "UserFactorVerifyRequest5Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest6": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an OTP for a `token:hardware` Factor",
          "type": {
            "name": "UserFactorVerifyRequest6Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest7": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies an OTP for a `token` Factor",
          "type": {
            "name": "UserFactorVerifyRequest7Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest8": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies a `u2f` Factor challenge by posting a signed assertion using the challenge `nonce`",
          "type": {
            "name": "UserFactorVerifyRequest8Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyFactor_UserFactorVerifyRequest9": {
      "request": {
        "url": "/api/v1/users/{userId}/factors/{factorId}/verify",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.users.manage"
            ]
          }
        ],
        "requestBody": {
          "contentType": "application/json"
        },
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "Accept-Language": {
          "description": "An ISO 639-1 two-letter language code that defines a localized message to send. This parameter is only used by `sms` Factors. If a localized message doesn't exist or the `templateId` is incorrect, the default template is used instead.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "Accept-Language",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "User-Agent": {
          "description": "Type of user agent detected when the request is made. Required to verify `push` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "User-Agent",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "X-Forwarded-For": {
          "description": "Public IP address for the user agent",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "X-Forwarded-For",
            "in": "header",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "body": {
          "description": "Verifies a `webauthn` Factor challenge by posting a signed assertion using the challenge `nonce`",
          "type": {
            "name": "UserFactorVerifyRequest9Input",
            "type": "named"
          },
          "http": {
            "in": "body",
            "schema": {}
          }
        },
        "factorId": {
          "description": "ID of an existing user Factor",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "factorId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "templateId": {
          "description": "ID of an existing custom SMS template. See the [SMS Templates API](../Template). This parameter is only used by `sms` Factors.",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "templateId",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "tokenLifetimeSeconds": {
          "description": "Defines how long the token remains valid",
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "Int32",
              "type": "named"
            }
          },
          "http": {
            "name": "tokenLifetimeSeconds",
            "in": "query",
            "schema": {
              "type": [
                "integer"
              ],
              "format": "int32",
              "maximum": 86400,
              "minimum": 1
            }
          }
        },
        "userId": {
          "description": "ID of an existing Okta user",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "userId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify a Factor",
      "result_type": {
        "name": "UserFactorVerifyResponse",
        "type": "named"
      }
    },
    "verifyProvisioningConnectionForApplication": {
      "request": {
        "url": "/api/v1/apps/{appName}/{appId}/oauth2/callback",
        "method": "post",
        "security": [
          {
            "apiToken": []
          },
          {
            "oauth2": [
              "okta.apps.manage"
            ]
          }
        ],
        "response": {
          "contentType": "application/json"
        }
      },
      "arguments": {
        "appId": {
          "description": "Application ID",
          "type": {
            "name": "String",
            "type": "named"
          },
          "http": {
            "name": "appId",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "appName": {
          "type": {
            "name": "OAuthProvisioningEnabledApp",
            "type": "named"
          },
          "http": {
            "name": "appName",
            "in": "path",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "code": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "code",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        },
        "state": {
          "type": {
            "type": "nullable",
            "underlying_type": {
              "name": "String",
              "type": "named"
            }
          },
          "http": {
            "name": "state",
            "in": "query",
            "schema": {
              "type": [
                "string"
              ]
            }
          }
        }
      },
      "description": "Verify the Provisioning Connection",
      "result_type": {
        "type": "nullable",
        "underlying_type": {
          "name": "Boolean",
          "type": "named"
        }
      }
    }
  },
  "scalar_types": {
    "APIServiceIntegrationInstanceSecretStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "AccessPolicyLink": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "AgentType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "AD",
          "IWA",
          "LDAP",
          "MFA",
          "OPP",
          "RUM",
          "Radius"
        ],
        "type": "enum"
      }
    },
    "AgentUpdateInstanceStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Cancelled",
          "Failed",
          "InProgress",
          "PendingCompletion",
          "Scheduled",
          "Success"
        ],
        "type": "enum"
      }
    },
    "AgentUpdateJobStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "Cancelled",
          "Failed",
          "InProgress",
          "Paused",
          "Scheduled",
          "Success"
        ],
        "type": "enum"
      }
    },
    "AppUserProfile": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "AppUserScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "USER",
          "GROUP"
        ],
        "type": "enum"
      }
    },
    "AppUserStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "APPROVED",
          "DEPROVISIONED",
          "IMPLICIT",
          "IMPORTED",
          "INACTIVE",
          "MATCHED",
          "PENDING",
          "PROVISIONED",
          "REVOKED",
          "STAGED",
          "SUSPENDED",
          "UNASSIGNED"
        ],
        "type": "enum"
      }
    },
    "AppUserSyncState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DISABLED",
          "ERROR",
          "OUT_OF_SYNC",
          "SYNCHRONIZED",
          "SYNCING"
        ],
        "type": "enum"
      }
    },
    "ApplicationFeatureType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "USER_PROVISIONING",
          "USER_PROVISIONING",
          "INBOUND_PROVISIONING"
        ],
        "type": "enum"
      }
    },
    "ApplicationFeatures": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "GROUP_PUSH",
          "IMPORT_NEW_USERS",
          "IMPORT_PROFILE_UPDATES",
          "IMPORT_USER_SCHEMA",
          "PROFILE_MASTERING",
          "PUSH_NEW_USERS",
          "PUSH_PASSWORD_UPDATES",
          "PUSH_PROFILE_UPDATES",
          "PUSH_USER_DEACTIVATION",
          "REACTIVATE_USERS",
          "OUTBOUND_DEL_AUTH",
          "DESKTOP_SSO",
          "FEDERATED_PROFILE",
          "SUPPRESS_ACTIVATION_EMAIL",
          "PUSH_PENDING_USERS",
          "MFA",
          "UPDATE_EXISTING_USERNAME",
          "EXCLUDE_USERNAME_UPDATE_ON_PROFILE_PUSH",
          "EXCHANGE_ACTIVE_SYNC",
          "IMPORT_SYNC",
          "IMPORT_SYNC_CONTACTS",
          "DEVICE_COMPLIANCE",
          "VPN_CONFIG",
          "IMPORT_SCHEMA_ENUM_VALUES",
          "SCIM_PROVISIONING",
          "DEVICE_FILTER_IN_SIGN_ON_RULES",
          "PROFILE_TEMPLATE_UPGRADE",
          "DEFAULT_PUSH_STATUS_TO_PUSH",
          "REAL_TIME_SYNC",
          "SSO",
          "AUTHN_CONTEXT",
          "JIT_PROVISIONING",
          "GROUP_SYNC",
          "OPP_SCIM_INCREMENTAL_IMPORTS",
          "IN_MEMORY_APP_USER",
          "LOG_STREAMING",
          "OAUTH_INTEGRATION",
          "IDP",
          "PUSH_NEW_USERS_WITHOUT_PASSWORD",
          "SKYHOOK_SERVICE",
          "ENTITLEMENT_MANAGEMENT",
          "PUSH_NEW_USERS_WITH_HASHED_PASSWORD"
        ],
        "type": "enum"
      }
    },
    "ApplicationLifecycleStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "DELETED",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "ApplicationSignOnMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "AUTO_LOGIN",
          "BASIC_AUTH",
          "BOOKMARK",
          "BROWSER_PLUGIN",
          "OPENID_CONNECT",
          "SAML_1_1",
          "SAML_2_0",
          "SECURE_PASSWORD_STORE",
          "WS_FEDERATION"
        ],
        "type": "enum"
      }
    },
    "AssignRoleToClientResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "AssignRoleToGroupResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "AssignRoleToUserResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "AuthenticationProviderType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE_DIRECTORY",
          "FEDERATION",
          "IMPORT",
          "LDAP",
          "OKTA",
          "SOCIAL"
        ],
        "type": "enum"
      }
    },
    "AuthenticatorKeyEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "custom_app",
          "duo",
          "external_idp",
          "google_otp",
          "okta_email",
          "okta_password",
          "okta_verify",
          "onprem_mfa",
          "phone_number",
          "security_key",
          "security_question",
          "smart_card_idp",
          "symantec_vip",
          "webauthn",
          "yubikey_token"
        ],
        "type": "enum"
      }
    },
    "AuthenticatorMethodAlgorithm": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ES256",
          "RS256"
        ],
        "type": "enum"
      }
    },
    "AuthenticatorMethodTransactionType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CIBA",
          "LOGIN"
        ],
        "type": "enum"
      }
    },
    "AuthenticatorMethodType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "cert",
          "duo",
          "email",
          "idp",
          "otp",
          "password",
          "push",
          "security_question",
          "signed_nonce",
          "sms",
          "totp",
          "voice",
          "webauthn"
        ],
        "type": "enum"
      }
    },
    "AuthenticatorType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "app",
          "email",
          "federated",
          "password",
          "phone",
          "security_key",
          "security_question"
        ],
        "type": "enum"
      }
    },
    "AuthorizationServerCredentialsRotationMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "AUTO",
          "MANUAL"
        ],
        "type": "enum"
      }
    },
    "AuthorizationServerCredentialsUse": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "sig"
        ],
        "type": "enum"
      }
    },
    "AuthorizationServerPolicyRuleStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "AuthorizationServerPolicyRuleType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "RESOURCE_ACCESS"
        ],
        "type": "enum"
      }
    },
    "AuthorizationServerPolicyStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "AuthorizationServerPolicyType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OAUTH_AUTHORIZATION_POLICY"
        ],
        "type": "enum"
      }
    },
    "BehaviorRuleType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ANOMALOUS_DEVICE",
          "ANOMALOUS_IP",
          "ANOMALOUS_LOCATION",
          "VELOCITY"
        ],
        "type": "enum"
      }
    },
    "Binary": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "bytes"
      }
    },
    "Boolean": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "boolean"
      }
    },
    "BulkDeleteRequestBodyEntityType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "USERS"
        ],
        "type": "enum"
      }
    },
    "BulkUpsertRequestBodyEntityType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "USERS"
        ],
        "type": "enum"
      }
    },
    "CAPTCHAType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "HCAPTCHA",
          "RECAPTCHA_V2"
        ],
        "type": "enum"
      }
    },
    "CapabilitiesImportRulesUserCreateAndMatchObjectExactMatchCriteria": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "EMAIL",
          "USERNAME"
        ],
        "type": "enum"
      }
    },
    "CatalogApplicationStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "ChangeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CHANGE",
          "KEEP_EXISTING"
        ],
        "type": "enum"
      }
    },
    "ChildOrgEdition": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SKU"
        ],
        "type": "enum"
      }
    },
    "ChildOrgStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE"
        ],
        "type": "enum"
      }
    },
    "ChildOrgTokenType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SSWS"
        ],
        "type": "enum"
      }
    },
    "ContentSecurityPolicySettingMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enforced",
          "report_only"
        ],
        "type": "enum"
      }
    },
    "CreateEmailDomainExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "brands"
        ],
        "type": "enum"
      }
    },
    "CreateGroupRuleRequestType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "group_rule"
        ],
        "type": "enum"
      }
    },
    "CsrPublishHrefHintsAllow": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "POST"
        ],
        "type": "enum"
      }
    },
    "CsrSelfHrefHintsAllow": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "GET",
          "DELETE"
        ],
        "type": "enum"
      }
    },
    "CustomAppUserVerificationEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PREFERRED",
          "REQUIRED"
        ],
        "type": "enum"
      }
    },
    "CustomRoleAssignmentSchemaType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CUSTOM"
        ],
        "type": "enum"
      }
    },
    "DNSRecordType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CNAME",
          "TXT"
        ],
        "type": "enum"
      }
    },
    "DeleteEmailDomainExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "brands"
        ],
        "type": "enum"
      }
    },
    "DeleteUserPrefer": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "respond-async"
        ],
        "type": "enum"
      }
    },
    "DevicePlatform": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ANDROID",
          "IOS",
          "MACOS",
          "WINDOWS"
        ],
        "type": "enum"
      }
    },
    "DeviceStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "DEACTIVATED",
          "SUSPENDED",
          "UNSUSPENDED"
        ],
        "type": "enum"
      }
    },
    "DeviceUserManagementStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "MANAGED",
          "NOT_MANAGED"
        ],
        "type": "enum"
      }
    },
    "DeviceUserScreenLockType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "NONE",
          "PASSCODE",
          "BIOMETRIC"
        ],
        "type": "enum"
      }
    },
    "DigestAlgorithm": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SHA256_HMAC",
          "SHA512_HMAC"
        ],
        "type": "enum"
      }
    },
    "DiskEncryptionTypeDef": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ALL_INTERNAL_VOLUMES",
          "FULL",
          "NONE",
          "SYSTEM_VOLUME",
          "USER"
        ],
        "type": "enum"
      }
    },
    "DomainCertificateSourceType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "MANUAL",
          "OKTA_MANAGED"
        ],
        "type": "enum"
      }
    },
    "DomainCertificateType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PEM"
        ],
        "type": "enum"
      }
    },
    "DomainValidationStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "COMPLETED",
          "IN_PROGRESS",
          "NOT_STARTED",
          "VERIFIED"
        ],
        "type": "enum"
      }
    },
    "ECKeyJWKCrv": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "P-384"
        ],
        "type": "enum"
      }
    },
    "ECKeyJWKKty": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "EC"
        ],
        "type": "enum"
      }
    },
    "ECKeyJWKUse": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enc"
        ],
        "type": "enum"
      }
    },
    "EmailSettingsRecipients": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ALL_USERS",
          "ADMINS_ONLY",
          "NO_USERS"
        ],
        "type": "enum"
      }
    },
    "EmailSettingsResponseRecipients": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ALL_USERS",
          "ADMINS_ONLY",
          "NO_USERS"
        ],
        "type": "enum"
      }
    },
    "EmailTemplateTouchPointVariant": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "FULL_THEME",
          "OKTA_DEFAULT"
        ],
        "type": "enum"
      }
    },
    "EnabledPagesType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SIGN_IN",
          "SSPR",
          "SSR"
        ],
        "type": "enum"
      }
    },
    "EnabledStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DISABLED",
          "ENABLED"
        ],
        "type": "enum"
      }
    },
    "EndUserDashboardTouchPointVariant": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "FULL_THEME",
          "LOGO_ON_FULL_WHITE_BACKGROUND",
          "OKTA_DEFAULT",
          "WHITE_LOGO_BACKGROUND"
        ],
        "type": "enum"
      }
    },
    "EnrollmentActivationRequestFulfillmentProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "yubico"
        ],
        "type": "enum"
      }
    },
    "EnrollmentActivationResponseFulfillmentProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "yubico"
        ],
        "type": "enum"
      }
    },
    "EnrollmentInitializationRequestFulfillmentProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "yubico"
        ],
        "type": "enum"
      }
    },
    "EnrollmentInitializationResponseFulfillmentProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "yubico"
        ],
        "type": "enum"
      }
    },
    "ErrorPageTouchPointVariant": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BACKGROUND_IMAGE",
          "BACKGROUND_SECONDARY_COLOR",
          "OKTA_DEFAULT"
        ],
        "type": "enum"
      }
    },
    "EventHookChannelConfigAuthSchemeType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "HEADER"
        ],
        "type": "enum"
      }
    },
    "EventHookChannelType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "HTTP"
        ],
        "type": "enum"
      }
    },
    "EventHookStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "EventHookVerificationStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "UNVERIFIED",
          "VERIFIED"
        ],
        "type": "enum"
      }
    },
    "EventSubscriptionType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "EVENT_TYPE"
        ],
        "type": "enum"
      }
    },
    "FeatureLifecycle": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DISABLE",
          "ENABLE"
        ],
        "type": "enum"
      }
    },
    "FeatureStageState": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CLOSED",
          "OPEN"
        ],
        "type": "enum"
      }
    },
    "FeatureStageValue": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BETA",
          "EA"
        ],
        "type": "enum"
      }
    },
    "FeatureType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "self-service"
        ],
        "type": "enum"
      }
    },
    "Float64": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "float64"
      }
    },
    "FulfillmentRequestFulfillmentProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "yubico"
        ],
        "type": "enum"
      }
    },
    "GetBrandExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "themes",
          "domains",
          "emailDomain"
        ],
        "type": "enum"
      }
    },
    "GetEmailDomainExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "brands"
        ],
        "type": "enum"
      }
    },
    "GetEmailTemplateExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "settings",
          "customizationCount"
        ],
        "type": "enum"
      }
    },
    "GetErrorPageExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "default",
          "customized",
          "customizedUrl",
          "preview",
          "previewUrl"
        ],
        "type": "enum"
      }
    },
    "GetGroupAssignedRoleResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "GetOrgContactUserContactType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BILLING",
          "TECHNICAL"
        ],
        "type": "enum"
      }
    },
    "GetSignInPageExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "default",
          "customized",
          "customizedUrl",
          "preview",
          "previewUrl"
        ],
        "type": "enum"
      }
    },
    "GetUserAssignedRoleResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "GrantOrTokenStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "REVOKED"
        ],
        "type": "enum"
      }
    },
    "GroupOwnerOriginType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "APPLICATION",
          "OKTA_DIRECTORY"
        ],
        "type": "enum"
      }
    },
    "GroupOwnerType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "GROUP",
          "USER"
        ],
        "type": "enum"
      }
    },
    "GroupRuleStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE",
          "INVALID"
        ],
        "type": "enum"
      }
    },
    "GroupType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "APP_GROUP",
          "BUILT_IN",
          "OKTA_GROUP"
        ],
        "type": "enum"
      }
    },
    "HostedPageType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "EXTERNALLY_HOSTED",
          "OKTA_DEFAULT"
        ],
        "type": "enum"
      }
    },
    "HrefObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "HttpMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DELETE",
          "GET",
          "POST",
          "PUT"
        ],
        "type": "enum"
      }
    },
    "IdPKeyCredential": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "IdentityProviderIssuerMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CUSTOM_URL",
          "DYNAMIC",
          "ORG_URL"
        ],
        "type": "enum"
      }
    },
    "IdentityProviderPropertiesAdditionalAmr": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "sc",
          "hwk",
          "pin",
          "mfa"
        ],
        "type": "enum"
      }
    },
    "IdentityProviderProtocolTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "MTLS",
          "OAUTH2",
          "OIDC",
          "SAML2"
        ],
        "type": "enum"
      }
    },
    "IdentityProviderType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "AMAZON",
          "APPLE",
          "DISCORD",
          "FACEBOOK",
          "GITHUB",
          "GITLAB",
          "GOOGLE",
          "LINKEDIN",
          "LOGINGOV",
          "LOGINGOV_SANDBOX",
          "MICROSOFT",
          "OIDC",
          "PAYPAL",
          "PAYPAL_SANDBOX",
          "SALESFORCE",
          "SAML2",
          "SPOTIFY",
          "X509",
          "XERO",
          "YAHOO",
          "YAHOOJP"
        ],
        "type": "enum"
      }
    },
    "IdentitySourceSessionStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CLOSED",
          "COMPLETED",
          "CREATED",
          "ERROR",
          "EXPIRED",
          "IN_PROGRESS",
          "TRIGGERED"
        ],
        "type": "enum"
      }
    },
    "IframeEmbedScopeAllowedApps": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OKTA_ENDUSER"
        ],
        "type": "enum"
      }
    },
    "ImportUsernameObjectUsernameFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "EMAIL",
          "CUSTOM"
        ],
        "type": "enum"
      }
    },
    "InlineHookChannelType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "HTTP",
          "OAUTH"
        ],
        "type": "enum"
      }
    },
    "InlineHookPayload": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "InlineHookStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "InlineHookType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "com.okta.import.transform",
          "com.okta.oauth2.tokens.transform",
          "com.okta.saml.tokens.transform",
          "com.okta.telephony.provider",
          "com.okta.user.credential.password.import",
          "com.okta.user.pre-registration"
        ],
        "type": "enum"
      }
    },
    "Int32": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "int32"
      }
    },
    "JSON": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "JwkUseType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "sig"
        ],
        "type": "enum"
      }
    },
    "LifecycleStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "LinkedHrefObject": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "json"
      }
    },
    "LinkedObjectDetailsType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "USER"
        ],
        "type": "enum"
      }
    },
    "ListAssignedRolesForUserResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "ListBrandsExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "themes",
          "domains",
          "emailDomain"
        ],
        "type": "enum"
      }
    },
    "ListDevicesExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "user",
          "userSummary"
        ],
        "type": "enum"
      }
    },
    "ListEmailDomainsExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "brands"
        ],
        "type": "enum"
      }
    },
    "ListEmailTemplatesExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "settings",
          "customizationCount"
        ],
        "type": "enum"
      }
    },
    "ListGroupAssignedRolesResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "ListLogEventsSortOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ASCENDING",
          "DESCENDING"
        ],
        "type": "enum"
      }
    },
    "ListPoliciesType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OKTA_SIGN_ON",
          "PASSWORD",
          "MFA_ENROLL",
          "IDP_DISCOVERY",
          "ACCESS_POLICY",
          "PROFILE_ENROLLMENT",
          "POST_AUTH_SESSION",
          "ENTITY_RISK"
        ],
        "type": "enum"
      }
    },
    "ListRolesForClientResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "ListYubikeyOtpTokensFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "profile.email",
          "profile.serial",
          "activated",
          "user.id",
          "created",
          "status",
          "lastVerified"
        ],
        "type": "enum"
      }
    },
    "ListYubikeyOtpTokensSortBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "profile.email",
          "profile.serial",
          "activated",
          "user.id",
          "created",
          "status",
          "lastVerified"
        ],
        "type": "enum"
      }
    },
    "ListYubikeyOtpTokensSortOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ASC",
          "DESC"
        ],
        "type": "enum"
      }
    },
    "LoadingPageTouchPointVariant": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "NONE",
          "OKTA_DEFAULT"
        ],
        "type": "enum"
      }
    },
    "LogAuthenticationProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE_DIRECTORY",
          "FACTOR_PROVIDER",
          "FEDERATION",
          "LDAP",
          "OKTA_AUTHENTICATION_PROVIDER",
          "SOCIAL"
        ],
        "type": "enum"
      }
    },
    "LogCredentialProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DUO",
          "GOOGLE",
          "OKTA_AUTHENTICATION_PROVIDER",
          "OKTA_CREDENTIAL_PROVIDER",
          "RSA",
          "SYMANTEC",
          "YUBIKEY"
        ],
        "type": "enum"
      }
    },
    "LogCredentialType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ASSERTION",
          "CERTIFICATE",
          "DEVICE_UDID",
          "EMAIL",
          "IWA",
          "JWT",
          "OAuth 2.0",
          "OKTA_CLIENT_SESSION",
          "OTP",
          "PASSWORD",
          "PRE_SHARED_SYMMETRIC_KEY",
          "SMS"
        ],
        "type": "enum"
      }
    },
    "LogOutcomeResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SUCCESS",
          "FAILURE",
          "SKIPPED",
          "ALLOW",
          "DENY",
          "CHALLENGE",
          "UNKNOWN"
        ],
        "type": "enum"
      }
    },
    "LogSeverity": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DEBUG",
          "ERROR",
          "INFO",
          "WARN"
        ],
        "type": "enum"
      }
    },
    "LogStreamLinkObjectMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "GET",
          "POST"
        ],
        "type": "enum"
      }
    },
    "LogStreamStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "LogStreamType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "aws_eventbridge",
          "splunk_cloud_logstreaming"
        ],
        "type": "enum"
      }
    },
    "NetworkZoneStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "NetworkZoneType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DYNAMIC",
          "IP",
          "DYNAMIC_V2"
        ],
        "type": "enum"
      }
    },
    "NetworkZoneUsage": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BLOCKLIST",
          "POLICY"
        ],
        "type": "enum"
      }
    },
    "NotificationType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "AD_AGENT",
          "AGENT_AUTO_UPDATE_NOTIFICATION",
          "AGENT_AUTO_UPDATE_NOTIFICATION_LDAP",
          "APP_IMPORT",
          "CONNECTOR_AGENT",
          "IWA_AGENT",
          "LDAP_AGENT",
          "OKTA_ANNOUNCEMENT",
          "OKTA_ISSUE",
          "OKTA_UPDATE",
          "RATELIMIT_NOTIFICATION",
          "REPORT_SUSPICIOUS_ACTIVITY",
          "USER_DEPROVISION",
          "USER_LOCKED_OUT"
        ],
        "type": "enum"
      }
    },
    "OAuth2ClaimGroupFilterType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CONTAINS",
          "EQUALS",
          "REGEX",
          "STARTS_WITH"
        ],
        "type": "enum"
      }
    },
    "OAuth2ClaimType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "IDENTITY",
          "RESOURCE"
        ],
        "type": "enum"
      }
    },
    "OAuth2ClaimValueType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "EXPRESSION",
          "GROUPS",
          "SYSTEM"
        ],
        "type": "enum"
      }
    },
    "OAuth2ClientJsonWebKeyRequestBodyStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "OAuth2ClientJsonWebKeyStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "OAuth2ClientSecretRequestBodyStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "OAuth2ClientSecretStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "OAuth2RefreshTokenLinks1Revoke1HintsAllow": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DELETE"
        ],
        "type": "enum"
      }
    },
    "OAuth2ScopeConsentGrantSource": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ADMIN",
          "END_USER"
        ],
        "type": "enum"
      }
    },
    "OAuth2ScopeConsentType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "FLEXIBLE",
          "IMPLICIT",
          "REQUIRED"
        ],
        "type": "enum"
      }
    },
    "OAuth2ScopeMetadataPublish": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ALL_CLIENTS",
          "NO_CLIENTS"
        ],
        "type": "enum"
      }
    },
    "OAuthProvisioningEnabledApp": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "google",
          "office365",
          "slack",
          "zoomus"
        ],
        "type": "enum"
      }
    },
    "OperationResponseStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "COMPLETED",
          "SCHEDULED",
          "IN_PROGRESS",
          "FAILED"
        ],
        "type": "enum"
      }
    },
    "OperationalStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DEGRADED",
          "DISRUPTED",
          "INACTIVE",
          "OPERATIONAL"
        ],
        "type": "enum"
      }
    },
    "OrgContactType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BILLING",
          "TECHNICAL"
        ],
        "type": "enum"
      }
    },
    "OrgOktaSupportSetting": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DISABLED",
          "ENABLED"
        ],
        "type": "enum"
      }
    },
    "OrgSettingStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "ParametersAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ADD",
          "REMOVE"
        ],
        "type": "enum"
      }
    },
    "PasswordCredentialHashAlgorithm": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BCRYPT",
          "MD5",
          "PBKDF2",
          "SHA-1",
          "SHA-256",
          "SHA-512"
        ],
        "type": "enum"
      }
    },
    "PatchAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "remove",
          "replace"
        ],
        "type": "enum"
      }
    },
    "PerClientRateLimitMode": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DISABLE",
          "ENFORCE",
          "PREVIEW"
        ],
        "type": "enum"
      }
    },
    "PinRequestFulfillmentProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "yubico"
        ],
        "type": "enum"
      }
    },
    "PipelineType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "idx",
          "v1"
        ],
        "type": "enum"
      }
    },
    "Platform": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ANDROID",
          "CHROMEOS",
          "IOS",
          "MACOS",
          "WINDOWS"
        ],
        "type": "enum"
      }
    },
    "PolicyAccountLinkAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "AUTO",
          "DISABLED"
        ],
        "type": "enum"
      }
    },
    "PolicyContextRiskLevel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "LOW",
          "MEDIUM",
          "HIGH"
        ],
        "type": "enum"
      }
    },
    "PolicyMappingResourceType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "APP"
        ],
        "type": "enum"
      }
    },
    "PolicyRuleType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_POLICY",
          "ENTITY_RISK",
          "IDP_DISCOVERY",
          "MFA_ENROLL",
          "PASSWORD",
          "POST_AUTH_SESSION",
          "PROFILE_ENROLLMENT",
          "RESOURCE_ACCESS",
          "SIGN_ON"
        ],
        "type": "enum"
      }
    },
    "PolicySubjectMatchType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CUSTOM_ATTRIBUTE",
          "EMAIL",
          "USERNAME",
          "USERNAME_OR_EMAIL"
        ],
        "type": "enum"
      }
    },
    "PolicyType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_POLICY",
          "ENTITY_RISK",
          "IDP_DISCOVERY",
          "MFA_ENROLL",
          "OKTA_SIGN_ON",
          "PASSWORD",
          "POST_AUTH_SESSION",
          "PROFILE_ENROLLMENT",
          "RESOURCE_ACCESS"
        ],
        "type": "enum"
      }
    },
    "PolicyTypeSimulation": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_POLICY",
          "MFA_ENROLL",
          "OKTA_SIGN_ON",
          "PROFILE_ENROLLMENT"
        ],
        "type": "enum"
      }
    },
    "PrincipalType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SSWS_TOKEN"
        ],
        "type": "enum"
      }
    },
    "ProviderType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "APNS",
          "FCM"
        ],
        "type": "enum"
      }
    },
    "ProvisioningAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "AUTO",
          "DISABLED"
        ],
        "type": "enum"
      }
    },
    "ProvisioningConnectionAuthScheme": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OAUTH2",
          "TOKEN",
          "UNKNOWN"
        ],
        "type": "enum"
      }
    },
    "ProvisioningConnectionOauthAuthScheme": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OAUTH2"
        ],
        "type": "enum"
      }
    },
    "ProvisioningConnectionStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DISABLED",
          "ENABLED",
          "UNKNOWN"
        ],
        "type": "enum"
      }
    },
    "ProvisioningConnectionTokenAuthScheme": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "TOKEN"
        ],
        "type": "enum"
      }
    },
    "ProvisioningDeprovisionedAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "NONE",
          "REACTIVATE"
        ],
        "type": "enum"
      }
    },
    "ProvisioningGroupsAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "APPEND",
          "ASSIGN",
          "NONE",
          "SYNC"
        ],
        "type": "enum"
      }
    },
    "ProvisioningSuspendedAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "NONE",
          "UNSUSPEND"
        ],
        "type": "enum"
      }
    },
    "PushMethodKeyProtection": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ANY",
          "HARDWARE"
        ],
        "type": "enum"
      }
    },
    "RealmProfileRealmType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "PARTNER",
          "DEFAULT"
        ],
        "type": "enum"
      }
    },
    "ReleaseChannel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BETA",
          "EA",
          "GA",
          "TEST"
        ],
        "type": "enum"
      }
    },
    "ReplaceEmailDomainExpand": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "brands"
        ],
        "type": "enum"
      }
    },
    "ReplaceOrgContactUserContactType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BILLING",
          "TECHNICAL"
        ],
        "type": "enum"
      }
    },
    "ResendUserFactorFactorType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "call",
          "email",
          "sms"
        ],
        "type": "enum"
      }
    },
    "RetrieveClientRoleResultTypeEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACCESS_CERTIFICATIONS_ADMIN",
          "ACCESS_REQUESTS_ADMIN",
          "API_ACCESS_MANAGEMENT_ADMIN",
          "API_ADMIN",
          "APP_ADMIN",
          "CUSTOM",
          "GROUP_MEMBERSHIP_ADMIN",
          "HELP_DESK_ADMIN",
          "MOBILE_ADMIN",
          "ORG_ADMIN",
          "READ_ONLY_ADMIN",
          "REPORT_ADMIN",
          "SUPER_ADMIN",
          "USER_ADMIN"
        ],
        "type": "enum"
      }
    },
    "RiskEventSubjectRiskLevel": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "HIGH",
          "LOW",
          "MEDIUM"
        ],
        "type": "enum"
      }
    },
    "RiskProviderAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "enforce_and_log",
          "log_only",
          "none"
        ],
        "type": "enum"
      }
    },
    "RoleAssignmentType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CLIENT",
          "GROUP",
          "USER"
        ],
        "type": "enum"
      }
    },
    "RolePermissionType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "okta.apps.assignment.manage",
          "okta.apps.manage",
          "okta.apps.manageFirstPartyApps",
          "okta.apps.read",
          "okta.authzServers.manage",
          "okta.authzServers.read",
          "okta.customizations.manage",
          "okta.customizations.read",
          "okta.devices.lifecycle.activate",
          "okta.devices.lifecycle.deactivate",
          "okta.devices.lifecycle.delete",
          "okta.devices.lifecycle.manage",
          "okta.devices.lifecycle.suspend",
          "okta.devices.lifecycle.unsuspend",
          "okta.devices.manage",
          "okta.devices.read",
          "okta.governance.accessCertifications.manage",
          "okta.governance.accessRequests.manage",
          "okta.groups.appAssignment.manage",
          "okta.groups.create",
          "okta.groups.manage",
          "okta.groups.members.manage",
          "okta.groups.read",
          "okta.identityProviders.manage",
          "okta.identityProviders.read",
          "okta.profilesources.import.run",
          "okta.support.cases.manage",
          "okta.users.appAssignment.manage",
          "okta.users.create",
          "okta.users.credentials.expirePassword",
          "okta.users.credentials.manage",
          "okta.users.credentials.resetFactors",
          "okta.users.credentials.resetPassword",
          "okta.users.groupMembership.manage",
          "okta.users.lifecycle.activate",
          "okta.users.lifecycle.clearSessions",
          "okta.users.lifecycle.deactivate",
          "okta.users.lifecycle.delete",
          "okta.users.lifecycle.manage",
          "okta.users.lifecycle.suspend",
          "okta.users.lifecycle.unlock",
          "okta.users.lifecycle.unsuspend",
          "okta.users.manage",
          "okta.users.read",
          "okta.users.userprofile.manage"
        ],
        "type": "enum"
      }
    },
    "SamlNameIdFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
          "urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:persistent",
          "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"
        ],
        "type": "enum"
      }
    },
    "SamlRelayStateFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "FROM_URL",
          "OPAQUE"
        ],
        "type": "enum"
      }
    },
    "SecurityEventsProviderResponseStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "SeedEnum": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OKTA",
          "RANDOM"
        ],
        "type": "enum"
      }
    },
    "SessionAuthenticationMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "fpt",
          "geo",
          "hwk",
          "kba",
          "mca",
          "mfa",
          "otp",
          "pwd",
          "sc",
          "sms",
          "swk",
          "tel"
        ],
        "type": "enum"
      }
    },
    "SessionIdentityProviderType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE_DIRECTORY",
          "FEDERATION",
          "LDAP",
          "OKTA",
          "SOCIAL"
        ],
        "type": "enum"
      }
    },
    "SessionStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "MFA_ENROLL",
          "MFA_REQUIRED"
        ],
        "type": "enum"
      }
    },
    "SignInPageTouchPointVariant": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BACKGROUND_IMAGE",
          "BACKGROUND_SECONDARY_COLOR",
          "OKTA_DEFAULT"
        ],
        "type": "enum"
      }
    },
    "SimulateResultStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "MATCH",
          "NOT_MATCH",
          "UNDEFINED"
        ],
        "type": "enum"
      }
    },
    "SmsTemplateType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "SMS_VERIFY_CODE"
        ],
        "type": "enum"
      }
    },
    "StreamConfigurationCreateRequestFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "iss_sub"
        ],
        "type": "enum"
      }
    },
    "StreamConfigurationDeliveryMethod": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "https://schemas.openid.net/secevent/risc/delivery-method/push",
          "urn:ietf:rfc:8935"
        ],
        "type": "enum"
      }
    },
    "StreamConfigurationFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "iss_sub"
        ],
        "type": "enum"
      }
    },
    "String": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "SubscriptionStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "subscribed",
          "unsubscribed"
        ],
        "type": "enum"
      }
    },
    "SupportedMethodsType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "push"
        ],
        "type": "enum"
      }
    },
    "ThreatInsightConfigurationAction": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "none",
          "audit",
          "block"
        ],
        "type": "enum"
      }
    },
    "TimestampTZ": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "timestamptz"
      }
    },
    "TrustedOriginScopeType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CORS",
          "IFRAME_EMBED",
          "REDIRECT"
        ],
        "type": "enum"
      }
    },
    "UIElementOptionsFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "text",
          "radio",
          "select",
          "checkbox",
          "radio_yes_no",
          "radio_true_false"
        ],
        "type": "enum"
      }
    },
    "URI": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "type": "string"
      }
    },
    "UploadYubikeyOtpTokenSeedFilter": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "profile.email",
          "profile.serial",
          "activated",
          "user.id",
          "created",
          "status",
          "lastVerified"
        ],
        "type": "enum"
      }
    },
    "UploadYubikeyOtpTokenSeedSortBy": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "profile.email",
          "profile.serial",
          "activated",
          "user.id",
          "created",
          "status",
          "lastVerified"
        ],
        "type": "enum"
      }
    },
    "UploadYubikeyOtpTokenSeedSortOrder": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ASC",
          "DESC"
        ],
        "type": "enum"
      }
    },
    "UserBlockAppliesTo": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ANY_DEVICES",
          "UNKNOWN_DEVICES"
        ],
        "type": "enum"
      }
    },
    "UserBlockType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "DEVICE_BASED"
        ],
        "type": "enum"
      }
    },
    "UserFactorActivateResponseFactorType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "call",
          "email",
          "sms",
          "push",
          "token:software:totp",
          "u2f",
          "webauthn"
        ],
        "type": "enum"
      }
    },
    "UserFactorProvider": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CUSTOM",
          "DUO",
          "FIDO",
          "GOOGLE",
          "OKTA",
          "RSA",
          "SYMANTEC",
          "YUBICO"
        ],
        "type": "enum"
      }
    },
    "UserFactorPushTransactionFactorResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "WAITING",
          "SUCCESS",
          "REJECTED",
          "TIMEOUT"
        ],
        "type": "enum"
      }
    },
    "UserFactorSecurityQuestionProfileQuestion": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "disliked_food",
          "name_of_first_plush_toy",
          "first_award",
          "favorite_security_question",
          "favorite_toy",
          "first_computer_game",
          "favorite_movie_quote",
          "first_sports_team_mascot",
          "first_music_purchase",
          "favorite_art_piece",
          "grandmother_favorite_desert",
          "first_thing_cooked",
          "childhood_dream_job",
          "first_kiss_location",
          "place_where_significant_other_was_met",
          "favorite_vacation_location",
          "new_years_two_thousand",
          "favorite_speaker_actor",
          "favorite_book_movie_character",
          "favorite_sports_player"
        ],
        "type": "enum"
      }
    },
    "UserFactorStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "DISABLED",
          "ENROLLED",
          "EXPIRED",
          "INACTIVE",
          "NOT_SETUP",
          "PENDING_ACTIVATION"
        ],
        "type": "enum"
      }
    },
    "UserFactorSupportedEnrollment": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OPTIONAL",
          "REQUIRED"
        ],
        "type": "enum"
      }
    },
    "UserFactorType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "call",
          "email",
          "push",
          "question",
          "signed_nonce",
          "sms",
          "token",
          "token:hardware",
          "token:hotp",
          "token:software:totp",
          "u2f",
          "web",
          "webauthn"
        ],
        "type": "enum"
      }
    },
    "UserFactorVerifyResult": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "CHALLENGE",
          "ERROR",
          "EXPIRED",
          "FAILED",
          "PASSCODE_REPLAYED",
          "REJECTED",
          "SUCCESS",
          "TIMEOUT",
          "TIME_WINDOW_EXCEEDED",
          "WAITING"
        ],
        "type": "enum"
      }
    },
    "UserFactorYubikeyOtpTokenStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "BLOCKED",
          "UNASSIGNED",
          "ACTIVE",
          "REVOKED",
          "DELETED",
          "INACTIVE"
        ],
        "type": "enum"
      }
    },
    "UserNextLogin": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "changePassword"
        ],
        "type": "enum"
      }
    },
    "UserSchemaAttributeFormat": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "country-code",
          "date-time",
          "email",
          "encrypted",
          "hashed",
          "language-code",
          "locale",
          "ref-id",
          "timezone",
          "uri"
        ],
        "type": "enum"
      }
    },
    "UserSchemaAttributeMasterType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "OKTA",
          "OVERRIDE",
          "PROFILE_MASTER"
        ],
        "type": "enum"
      }
    },
    "UserSchemaAttributeMutabilityString": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "IMMUTABLE",
          "READ_ONLY",
          "READ_WRITE",
          "WRITE_ONLY"
        ],
        "type": "enum"
      }
    },
    "UserSchemaAttributeScope": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "NONE",
          "SELF"
        ],
        "type": "enum"
      }
    },
    "UserSchemaAttributeType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "array",
          "boolean",
          "integer",
          "number",
          "string"
        ],
        "type": "enum"
      }
    },
    "UserStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "DEPROVISIONED",
          "LOCKED_OUT",
          "PASSWORD_EXPIRED",
          "PROVISIONED",
          "RECOVERY",
          "STAGED",
          "SUSPENDED"
        ],
        "type": "enum"
      }
    },
    "UserTransitioningToStatus": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "ACTIVE",
          "DEPROVISIONED",
          "PROVISIONED"
        ],
        "type": "enum"
      }
    },
    "WellKnownAppAuthenticatorConfigurationType": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "app"
        ],
        "type": "enum"
      }
    },
    "WidgetGeneration": {
      "aggregate_functions": {},
      "comparison_operators": {},
      "representation": {
        "one_of": [
          "G2",
          "G3"
        ],
        "type": "enum"
      }
    }
  }
}
